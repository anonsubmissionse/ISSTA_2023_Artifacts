/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:36:23 GMT 2022
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.helper.CookieUtil;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CookieUtil_ESTest extends CookieUtil_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = CookieUtil.asUri(uRL0);
      assertNotNull(uRI0.toString());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      MockFile mockFile0 = new MockFile("", "GYR^ScI0IwA");
      URL uRL0 = mockFile0.toURL();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      try { 
        CookieUtil.storeCookies(httpConnection_Request0, uRL0, hashMap0);
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
         //
         // Illegal character in path at index 9: file:/GYR^ScI0IwA
         //
         verifyException("org.jsoup.helper.CookieUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler0);
      Map<String, List<String>> map0 = httpConnection_Request0.headers;
      // Undeclared exception!
      try { 
        CookieUtil.storeCookies(httpConnection_Request0, uRL1, map0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        CookieUtil.storeCookies(httpConnection_Request0, uRL0, (Map<String, List<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Argument is null
         //
         verifyException("java.net.CookieManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "3@F8e3w[_Sd#84T!onY");
      try { 
        CookieUtil.asUri(uRL1);
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
         //
         // Illegal character in path at index 47: http://www.someFakeButWellFormedURL.org/3@F8e3w[_Sd#84T!onY
         //
         verifyException("org.jsoup.helper.CookieUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        CookieUtil.asUri((URL) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request(httpConnection_Request0);
      Attributes attributes0 = new Attributes();
      attributes0.add("", "9+F;/X");
      Map<String, String> map0 = attributes0.dataset();
      httpConnection_Request1.cookies = map0;
      // Undeclared exception!
      try { 
        CookieUtil.applyCookiesToRequest(httpConnection_Request1, (HttpURLConnection) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      MockFile mockFile0 = new MockFile("Cookie");
      MockFile mockFile1 = new MockFile(mockFile0, "E\"o<YD^]Y<w");
      URL uRL0 = mockFile1.toURL();
      httpConnection_Request0.url(uRL0);
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      try { 
        CookieUtil.applyCookiesToRequest(httpConnection_Request0, httpURLConnection0);
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
         //
         // Illegal character in path at index 86: file:/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/jsoup/Cookie/E\"o<YD^]Y<w
         //
         verifyException("org.jsoup.helper.CookieUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CookieUtil.applyCookiesToRequest((HttpConnection.Request) null, httpURLConnection0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.CookieUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      httpConnection_Request0.cookies = (Map<String, String>) hashMap0;
      hashMap0.putIfAbsent("}>", "}>");
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      CookieUtil.applyCookiesToRequest(httpConnection_Request0, httpURLConnection0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Map<String, List<String>> map0 = httpConnection_Request0.headers;
      CookieUtil.storeCookies(httpConnection_Request0, uRL0, map0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CookieUtil cookieUtil0 = new CookieUtil();
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      CookieUtil.applyCookiesToRequest(httpConnection_Request0, httpURLConnection0);
      ;
}
}
