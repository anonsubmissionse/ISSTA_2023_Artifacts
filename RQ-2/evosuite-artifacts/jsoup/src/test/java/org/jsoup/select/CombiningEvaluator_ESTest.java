/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:39:48 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.SynchronousQueue;
import org.eclipse.jetty.io.LeakTrackingByteBufferPool;
import org.eclipse.jetty.io.LogarithmicArrayByteBufferPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Evaluator;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CombiningEvaluator_ESTest extends CombiningEvaluator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[2];
      HashSet<Evaluator> hashSet0 = new HashSet<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(hashSet0);
      PriorityQueue<Evaluator.IsNthOfType> priorityQueue0 = new PriorityQueue<Evaluator.IsNthOfType>();
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      priorityQueue0.add(evaluator_IsFirstOfType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      hashSet0.removeAll(priorityQueue0);
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_And0;
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(combiningEvaluator_And0);
      evaluatorArray0[1] = (Evaluator) structuralEvaluator_ImmediateParent0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.updateNumEvaluators();
      combiningEvaluator_And0.toString();
      combiningEvaluator_And0.num = 10;
      structuralEvaluator_ImmediateParent0.evaluator = (Evaluator) combiningEvaluator_Or0;
      combiningEvaluator_And0.toString();
      // Undeclared exception!
      try { 
        combiningEvaluator_And0.rightMostEvaluator();
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.toString();
      HashSet<Evaluator> hashSet0 = new HashSet<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(hashSet0);
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
      Document document0 = Parser.parse("", "");
      combiningEvaluator_Or0.matches(document0, document0);
      Evaluator[] evaluatorArray0 = new Evaluator[6];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("w");
      evaluatorArray0[2] = (Evaluator) evaluator_Attribute0;
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      evaluatorArray0[3] = (Evaluator) evaluator_IsRoot0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[5] = (Evaluator) combiningEvaluator_Or0;
      document0.attr("", true);
      hashSet0.remove(evaluatorArray0[0]);
      CombiningEvaluator.And combiningEvaluator_And1 = new CombiningEvaluator.And(evaluatorArray0);
      combiningEvaluator_And1.matches(document0, document0);
      Element element0 = document0.createElement("w");
      combiningEvaluator_Or0.matches(document0, element0);
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[2];
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      evaluatorArray0[0] = (Evaluator) evaluator_IsLastChild0;
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("@[Kf3@{x?");
      evaluatorArray0[1] = (Evaluator) evaluator_ContainsData0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.num = 2965;
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.replaceRightMostEvaluator(evaluator_ContainsData0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2964, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.toString();
      HashSet<Evaluator> hashSet0 = new HashSet<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(hashSet0);
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
      String string0 = "*OxVGyM]Z4";
      Document document0 = Parser.parse("*OxVGyM]Z4", "*OxVGyM]Z4");
      combiningEvaluator_Or0.matches(document0, document0);
      Evaluator[] evaluatorArray0 = new Evaluator[6];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("w");
      evaluatorArray0[2] = (Evaluator) evaluator_Attribute0;
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      evaluatorArray0[3] = (Evaluator) evaluator_IsRoot0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[5] = (Evaluator) combiningEvaluator_Or0;
      hashSet0.remove((Object) null);
      CombiningEvaluator.And combiningEvaluator_And1 = new CombiningEvaluator.And(evaluatorArray0);
      combiningEvaluator_And1.matches(document0, document0);
      // Undeclared exception!
      try { 
        document0.createElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      String string0 = null;
      Evaluator.ContainsWholeOwnText evaluator_ContainsWholeOwnText0 = new Evaluator.ContainsWholeOwnText((String) null);
      evaluatorArray0[0] = (Evaluator) evaluator_ContainsWholeOwnText0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.num = (-784);
      combiningEvaluator_Or0.num = (-1);
      combiningEvaluator_Or0.rightMostEvaluator();
      LogarithmicArrayByteBufferPool logarithmicArrayByteBufferPool0 = new LogarithmicArrayByteBufferPool((-3422), (-1023));
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool(logarithmicArrayByteBufferPool0);
      Class<Evaluator> class0 = Evaluator.class;
      leakTrackingByteBufferPool0.getContainedBeans(class0);
      // Undeclared exception!
      try { 
        logarithmicArrayByteBufferPool0.newByteBuffer((-3422), true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -3422
         //
         verifyException("java.nio.Buffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedBlockingDeque<Evaluator> linkedBlockingDeque0 = new LinkedBlockingDeque<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedBlockingDeque0);
      Evaluator evaluator0 = combiningEvaluator_And0.rightMostEvaluator();
      assertNotNull(evaluator0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      combiningEvaluator_Or0.add(evaluator_MatchText0);
      combiningEvaluator_Or0.toString();
      Evaluator[] evaluatorArray0 = new Evaluator[7];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[5] = (Evaluator) evaluator_MatchText0;
      evaluatorArray0[6] = (Evaluator) evaluator_MatchText0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$MatchText@0000000002");
      Document document1 = document0.clone();
      boolean boolean0 = combiningEvaluator_And0.matches(document1, document0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[2];
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData(": ");
      evaluatorArray0[0] = (Evaluator) evaluator_ContainsData0;
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("GPZLdk", ": ");
      evaluatorArray0[1] = (Evaluator) evaluator_AttributeWithValueContaining0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      Document document0 = parser2.parseInput(": ", ": ");
      Document document1 = document0.parser((Parser) null);
      boolean boolean0 = combiningEvaluator_And0.matches(document1, document1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SynchronousQueue<Evaluator> synchronousQueue0 = new SynchronousQueue<Evaluator>();
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(synchronousQueue0);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = null;
      try {
        combiningEvaluator_Or0 = new CombiningEvaluator.Or((Collection<Evaluator>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Evaluator> arrayList0 = new ArrayList<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(arrayList0);
      combiningEvaluator_And0.updateNumEvaluators();
      combiningEvaluator_And0.rightMostEvaluator();
      arrayList0.add((Evaluator) combiningEvaluator_And0);
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
      // Undeclared exception!
      try { 
        combiningEvaluator_And0.replaceRightMostEvaluator((Evaluator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.createElement("#D58f4tBi2-KaMMx");
      boolean boolean0 = combiningEvaluator_And0.matches(element0, element0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Document document0 = Document.createShell("0;U)amczK[r]");
      boolean boolean0 = combiningEvaluator_Or0.matches(document0, document0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.rightMostEvaluator();
      combiningEvaluator_Or0.updateNumEvaluators();
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeSet<Evaluator> treeSet0 = new TreeSet<Evaluator>();
      treeSet0.stream();
      CombiningEvaluator.Or combiningEvaluator_Or0 = null;
      try {
        combiningEvaluator_Or0 = new CombiningEvaluator.Or((Evaluator[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.toString();
      HashSet<Evaluator> hashSet0 = new HashSet<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(hashSet0);
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
      String string0 = "*OxVGyM]Z4";
      Document document0 = Parser.parse("*OxVGyM]Z4", "*OxVGyM]Z4");
      combiningEvaluator_Or0.matches(document0, document0);
      Evaluator[] evaluatorArray0 = new Evaluator[6];
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("w");
      evaluatorArray0[2] = (Evaluator) evaluator_Attribute0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[5] = (Evaluator) combiningEvaluator_Or0;
      document0.attr("*OxVGyM]Z4", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CombiningEvaluator.And combiningEvaluator_And1 = new CombiningEvaluator.And(evaluatorArray0);
      // Undeclared exception!
      try { 
        combiningEvaluator_And1.matches(document0, document0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.CombiningEvaluator$And", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[7];
      StructuralEvaluator.Root structuralEvaluator_Root0 = new StructuralEvaluator.Root();
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      evaluatorArray0[4] = (Evaluator) evaluator_AllElements0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      evaluatorArray0[5] = (Evaluator) combiningEvaluator_And0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.replaceRightMostEvaluator(structuralEvaluator_Root0);
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(90, 0);
      evaluatorArray0[0] = (Evaluator) evaluator_IsNthOfType0;
      String string0 = evaluator_IsNthOfType0.toString();
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.add(evaluatorArray0[0]);
      combiningEvaluator_Or0.replaceRightMostEvaluator(evaluator_IsNthOfType0);
      combiningEvaluator_Or0.replaceRightMostEvaluator(evaluator_IsNthOfType0);
      combiningEvaluator_Or0.rightMostEvaluator();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Tag tag0 = Tag.valueOf(":nth-of-type(90n)");
      Attributes attributes0 = new Attributes();
      tag0.normalName();
      Attributes attributes1 = attributes0.put("", "-");
      Attributes attributes2 = attributes1.clone();
      FormElement formElement0 = new FormElement(tag0, "-", attributes2);
      combiningEvaluator_And0.matches(formElement0, formElement0);
      combiningEvaluator_Or0.updateNumEvaluators();
      combiningEvaluator_Or0.toString();
      combiningEvaluator_Or0.add(evaluatorArray0[0]);
      combiningEvaluator_And0.toString();
      combiningEvaluator_And0.updateNumEvaluators();
      combiningEvaluator_Or0.matches(formElement0, formElement0);
      combiningEvaluator_And0.rightMostEvaluator();
      String string1 = combiningEvaluator_And0.toString();
      ;
}
}
