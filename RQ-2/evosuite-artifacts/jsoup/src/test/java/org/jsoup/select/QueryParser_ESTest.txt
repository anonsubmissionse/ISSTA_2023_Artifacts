 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(",UmtHupJZn~u|oXL");
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":not(selector) subselect must not be empty");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":has(selector) sub-select must not be empty");
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("JYg+#htF2Z)_l");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#htF2Z)_l': unexpected token at 'F2Z)_l'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("org.eclipse.jetty.util.InetAddressSet$CidrInetRange");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.eclipse.jetty.util.InetAddressSet$CidrInetRange': unexpected token at '$CidrInetRange'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse("[F)s$=~s]");
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse("[%s^=%s]");
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse("[%s*=%]");
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse("[%s!=%s]");
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse("[^my]F@Lrd*RSg`");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse query '[^my]F@Lrd*RSg`': unexpected token at '@Lrd*RSg`'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":matchText");
      assertNotNull(evaluator0.toString());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":root");
      assertNotNull(evaluator0.toString());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":empty");
      assertNotNull(evaluator0.toString());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":only-of-type");
      assertNotNull(evaluator0.toString());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":only-child");
      assertNotNull(evaluator0.toString());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":last-of-type");
      assertNotNull(evaluator0.toString());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":first-of-type");
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":last-child");
      assertNotNull(evaluator0.toString());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":first-child");
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-last-of-type(");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-of-type(");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-last-child(");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":nth-child(%gd)");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '%gd': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":matchesWholeOwnText(");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":matchesWholeText(s)");
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":matchesOwn(%s)");
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":matches(");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":containsWholeOwnText(%s)");
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":containsWholeText(s)");
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":containsOwn(");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":contains(");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse("*|*|main");
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse("cLa nBz,jb,N");
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse("meta[http-equiv=content-type], meta[charset]");
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(",(7G5wLO{)");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse query '(7G5wLO{)': unexpected token at '(7G5wLO{)'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse("fQ.10LUkqtL+q>,AK");
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":gt(");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":lt(");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse(":containsData(text) query mu,t not be empty");
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Evaluator evaluator0 = QueryParser.parse("*~be");
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryParser.parse(":eq(");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Index must be numeric
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
