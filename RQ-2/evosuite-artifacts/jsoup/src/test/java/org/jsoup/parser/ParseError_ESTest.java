/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:39:19 GMT 2022
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.FormatFlagsConversionMismatchException;
import java.util.IllegalFormatConversionException;
import java.util.IllegalFormatWidthException;
import java.util.MissingFormatArgumentException;
import java.util.MissingFormatWidthException;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.ParseError;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParseError_ESTest extends ParseError_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Ot37");
      ParseError parseError0 = new ParseError(characterReader0, "Ot37", (Object[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4S_4XD");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      ParseError parseError0 = new ParseError(characterReader0, "4S_4XD");
      int int0 = parseError0.getPosition();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParseError parseError0 = new ParseError((-4388), (String) null);
      int int0 = parseError0.getPosition();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParseError parseError0 = new ParseError((-4388), (String) null);
      int int0 = parseError0.getPosition();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParseError parseError0 = new ParseError((-4388), (String) null);
      parseError0.getErrorMessage();
      assertNotNull(parseError0.getCursorPos());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParseError parseError0 = new ParseError((-4388), (String) null);
      parseError0.getErrorMessage();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParseError parseError0 = new ParseError(3254, "");
      parseError0.getErrorMessage();
      assertNotNull(parseError0.getCursorPos());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ParseError parseError0 = new ParseError(3254, "");
      parseError0.getErrorMessage();
      assertEquals(0, parseError0.getPosition());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      Object[] objectArray0 = new Object[6];
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError(characterReader0, "ZV#gHF%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U%G5{h~,1I di");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 102);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringReader0;
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError(characterReader0, "U%G5{h~,1I di", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.io.StringReader
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*z>;vpw_S0Bl");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1909);
      Object[] objectArray0 = new Object[9];
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError(characterReader0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError((CharacterReader) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseError", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError(608, "Z]#fSu->.!Vi>%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError(2136, "eCPWMAvhT(uc%0edJ", (Object[]) null);
        fail("Expecting exception: MissingFormatWidthException");
      } catch(MissingFormatWidthException e) {
         //
         // %0e
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError(180, "U%5nm~,I di", (Object[]) null);
        fail("Expecting exception: IllegalFormatWidthException");
      } catch(IllegalFormatWidthException e) {
         //
         // 5
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "n!u0ZzH)*IG3n%G}";
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError(326, "n!u0ZzH)*IG3n%G}", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError(9, "U%#G5{h~,1I di", (Object[]) null);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = g, Flags = #
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError(0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParseError parseError0 = new ParseError(1, "]", (Object[]) null);
      String string0 = parseError0.getCursorPos();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParseError parseError0 = new ParseError(1, "]", (Object[]) null);
      String string0 = parseError0.getCursorPos();
      assertEquals(0, parseError0.getPosition());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParseError parseError0 = new ParseError(2569, "M");
      String string0 = parseError0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParseError parseError0 = new ParseError(2569, "M");
      String string0 = parseError0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError((-1422), "The '%s' parameter must not be empty.", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParseError parseError0 = new ParseError(2569, "M");
      parseError0.getErrorMessage();
      assertEquals(0, parseError0.getPosition());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParseError parseError0 = new ParseError(2569, "M");
      parseError0.getErrorMessage();
      assertNotNull(parseError0.getCursorPos());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      Object[] objectArray0 = new Object[0];
      ParseError parseError0 = null;
      try {
        parseError0 = new ParseError(characterReader0, "U%G57h~,1I di", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%G'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParseError parseError0 = new ParseError(2569, "M");
      int int0 = parseError0.getPosition();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParseError parseError0 = new ParseError(2569, "M");
      int int0 = parseError0.getPosition();
      ;
}
}
