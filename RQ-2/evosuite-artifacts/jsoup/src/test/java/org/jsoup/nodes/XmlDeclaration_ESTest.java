/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:38:16 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlDeclaration_ESTest extends XmlDeclaration_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(",Xk`.S!M-P4IAL", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Qd0cEU@_V`:86+X^/ Q");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      xmlDeclaration0.outerHtmlHead(mockPrintStream0, 0, document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("QZ>Vm0KM`]", false);
      xmlDeclaration0.value = (Object) null;
      String string0 = xmlDeclaration0.name();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Comment comment0 = new Comment("Waiting for {} for {}");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      xmlDeclaration0.clearAttributes();
      String string0 = xmlDeclaration0.name();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Comment comment0 = new Comment("Waiting for {} for {}");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      xmlDeclaration0.clearAttributes();
      String string0 = xmlDeclaration0.getWholeDeclaration();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comment comment0 = new Comment("PAUSED {}");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      xmlDeclaration0.wrap("PAUSED {}");
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      assertNotNull(xmlDeclaration1.nodeName());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("K", true);
      xmlDeclaration0.reparentChild(xmlDeclaration0);
      // Undeclared exception!
      xmlDeclaration0.toString();
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("T,5|FOQTcE", false);
      Attribute attribute0 = Attribute.createFromEncoded("T,5|FOQTcE", "]<b)5h");
      xmlDeclaration0.value = (Object) attribute0;
      // Undeclared exception!
      try { 
        xmlDeclaration0.toString();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Attribute cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("_~t?|jVPW2)=f#", true);
      xmlDeclaration0.wrap("_~t?|jVPW2)=f#");
      xmlDeclaration0.siblingIndex = (-2903);
      // Undeclared exception!
      try { 
        xmlDeclaration0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("$[=w1*(+S4v!BN\"+R", true);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        xmlDeclaration0.outerHtmlHead(charBuffer0, (-1244), document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("QDH6}$+<l`l@V", false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        xmlDeclaration0.outerHtmlHead((Appendable) null, (-1340), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.XmlDeclaration", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("*y[");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        xmlDeclaration0.outerHtmlHead(pipedWriter0, 1348, document_OutputSettings0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("!", true);
      xmlDeclaration0.value = (Object) xmlDeclaration0;
      // Undeclared exception!
      try { 
        xmlDeclaration0.name();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.XmlDeclaration cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comment comment0 = new Comment("iBBR!xr1/J%Jp`.w~GE");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      MockFile mockFile0 = new MockFile("iBBR!xr1/J%Jp`.w~GE", "g:z");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      xmlDeclaration0.value = (Object) mockFileWriter0;
      // Undeclared exception!
      try { 
        xmlDeclaration0.getWholeDeclaration();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.io.MockFileWriter cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment("Waiting for {} for {}");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      xmlDeclaration0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      xmlDeclaration0.clone();
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = null;
      try {
        xmlDeclaration0 = new XmlDeclaration((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("!", true);
      String string0 = xmlDeclaration0.nodeName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comment comment0 = new Comment("yo? no=+ ke 4obchsnxf:");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      String string0 = xmlDeclaration0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comment comment0 = new Comment("Waiting for {} for {}");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNotNull(xmlDeclaration0.nodeName());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comment comment0 = new Comment("Waiting for {} for {}");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      String string0 = xmlDeclaration0.getWholeDeclaration();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comment comment0 = new Comment("Waiting for {} for {}");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      assertNotNull(xmlDeclaration1.nodeName());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment("Waiting for {} for {}");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      xmlDeclaration0.outerHtmlTail(stringWriter0, (-25), document_OutputSettings0);
      assertNotNull(xmlDeclaration0.nodeName());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comment comment0 = new Comment("Waiting for {} for {}");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      xmlDeclaration0.name();
  }
}
