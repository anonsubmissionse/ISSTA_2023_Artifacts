 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("org.eclipse.jetty.io.ManagedSelector$DestroyEndPoint", "Wox");
      attribute0.hashCode();
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("org.eclipse.jetty.io.ManagedSelector$DestroyEndPoint", "Wox");
      attribute0.hashCode();
      boolean boolean0 = attribute0.isDataAttribute();
      assertNotNull(attribute0.getValue());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = "allowfullscreen";
      Attribute.isBooleanAttribute("allowfullscreen");
      String string1 = " ms";
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("+> ", "+> ", (Appendable) charArrayWriter0, document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Attribute attribute0 = new Attribute("/*", (String) null);
      String string0 = attribute0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-vox");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Attribute attribute0 = new Attribute("selected", "selected");
      attribute0.setValue("");
      attribute0.getValue();
      assertNotNull(attribute0.getValue());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = Attribute.getValidKey("", (Document.OutputSettings.Syntax) null);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Attribute attribute0 = new Attribute("+vh}O;{5To", "");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("?0@0;DG(C#", "open", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("async", "noresize");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attribute0.setValue("I4+5dw+CAQpd");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("l", ")13 Pi\"=]BO5E'y'");
      Attribute attribute0 = new Attribute("l", ")13 Pi\"=]BO5E'y'");
      Attributes attributes2 = attributes1.putUserData("required", attribute0);
      Attribute attribute1 = new Attribute("l", "l", attributes2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) document_OutputSettings_Syntax0;
      attributes2.vals = objectArray0;
      // Undeclared exception!
      try { 
        attribute1.setValue("D_Rx (Wf?xX");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Document$OutputSettings$Syntax cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("noresize", false);
      Attribute attribute0 = Attribute.createFromEncoded("async", "[^-a-zA-Z0-9_:.]");
      attributes1.put(attribute0);
      Object[] objectArray0 = new Object[0];
      attributes1.vals = objectArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("o,?5VjVBplbE5T");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = new Attribute("kW", (String) null);
      attribute0.equals(attribute0);
      // Undeclared exception!
      try { 
        attribute0.setKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = new Attribute("selected", "selected");
      attribute0.getValue();
      // Undeclared exception!
      try { 
        attribute0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("1R", "\"x(mK^eg5mNM1U]");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.clone();
      Attribute attribute1 = new Attribute("\"x(mK^eg5mNM1U]", (String) null, attributes2);
      String[] stringArray0 = new String[0];
      attributes2.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute1.setKey(">HvLt!A%x");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"x(mK^eg5mNM1U]");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.htmlNoValidate("^&\"%ffjzJO?", "\"x(mK^eg5mNM1U]", charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        Attribute.htmlNoValidate("h3w;@IzKyWy0_", (String) null, charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.htmlNoValidate("", "", (Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        Attribute.htmlNoValidate("Unexpected token type: ", "D2/p1A{(w7,~8>>xu", pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("a97", false);
      // Undeclared exception!
      try { 
        Attribute.html("(t%%&.s&Js\"w<", "0n7+XjFy", (Appendable) mockFileWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      try { 
        Attribute.html("+npJ", "", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("NUJ1M", "E1\"]$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      // Undeclared exception!
      try { 
        Attribute.getValidKey((String) null, document_OutputSettings_Syntax0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("data-", (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "";
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "yd}K4[Yx~79$f~", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, "The parameter '%s' must not be null.");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "";
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("~ODYT>}Nd!)");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("readonly");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("*", "t*R<6 m47GAYh");
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = Attribute.getValidKey("*", document_OutputSettings_Syntax0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("*", "t*R<6 m47GAYh");
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = Attribute.getValidKey("*", document_OutputSettings_Syntax0);
      String string1 = attribute0.getValue();
      assertNotNull(string1);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("*", "t*R<6 m47GAYh");
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = Attribute.getValidKey("*", document_OutputSettings_Syntax0);
      String string1 = attribute0.getValue();
      assertNotNull(attribute0.getKey());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Attribute.getValidKey("open", document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0.syntax());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("reservedWait", "reservedWait", attributes0);
      attribute0.setKey("reservedWait");
      assertTrue(attribute0.hasDeclaredValue());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"m>i'nyyd2peu");
      Attribute attribute0 = new Attribute("W", (String) null);
      Attribute.isDataAttribute("");
      attribute0.hashCode();
      attribute0.setValue("minyyd2peu");
      assertNotNull(attribute0.getValue());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = new Attribute("9J(7hWlNbpCpH", "");
      String string0 = attribute0.getKey();
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("9J(7hWlNbpCpH", "");
      String string0 = attribute0.getKey();
      attribute0.hashCode();
      Attribute attribute1 = attribute0.clone();
      assertNotNull(attribute1.getValue());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"m>i'nyyd2peu");
      Attribute attribute0 = new Attribute("W", (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute1 = attribute0.clone();
      attribute1.clone();
      attribute0.setValue("&R");
      Attribute.isDataAttribute("\"m>i'nyyd2peu");
      attribute1.equals(attribute0);
      attribute1.setKey("U@p^{ 1Zurg#1@Ws");
      assertNotNull(attribute0.getValue());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"m>i'nyyd2peu");
      Attribute attribute0 = new Attribute("W", (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute1 = attribute0.clone();
      attribute1.clone();
      attribute0.setValue("&R");
      Attribute.isDataAttribute("\"m>i'nyyd2peu");
      attribute1.equals(attribute0);
      attribute1.setKey("U@p^{ 1Zurg#1@Ws");
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"m>i'nyyd2peu");
      Attribute attribute0 = new Attribute("W", (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute1 = attribute0.clone();
      Attribute.isDataAttribute("\"m>i'nyyd2peu");
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"m>i'nyyd2peu");
      Attribute attribute0 = new Attribute("W", (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute1 = attribute0.clone();
      Attribute.isDataAttribute("\"m>i'nyyd2peu");
      boolean boolean0 = attribute1.equals(attribute0);
      attribute1.setKey("U@p^{ 1Zurg#1@Ws");
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = new Attribute("z", "z");
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(")_", "\"x(mK^pg5mNM1U]");
      Attribute attribute1 = new Attribute("'r", "\"x(mK^pg5mNM1U]");
      attribute0.equals(attribute1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute attribute0 = new Attribute("9J(7hWlNbpCpH", "");
      boolean boolean0 = attribute0.hasDeclaredValue();
      boolean boolean1 = attribute0.equals((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attribute attribute0 = new Attribute("9J(7hWlNbpCpH", "");
      boolean boolean0 = attribute0.hasDeclaredValue();
      boolean boolean1 = attribute0.equals((Object) null);
      String string0 = attribute0.setValue("");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attribute attribute0 = new Attribute("9J(7hWlNbpCpH", "");
      boolean boolean0 = attribute0.hasDeclaredValue();
      boolean boolean1 = attribute0.equals((Object) null);
      String string0 = attribute0.setValue("");
      assertNotNull(attribute0.getKey());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attribute attribute0 = new Attribute("9J(7hWlNbpCpH", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      boolean boolean0 = Attribute.shouldCollapseAttribute("", "", document_OutputSettings1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attribute attribute0 = new Attribute("9J(7hWlNbpCpH", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      boolean boolean0 = Attribute.shouldCollapseAttribute("", "", document_OutputSettings1);
      String string0 = attribute0.setValue("");
      assertNotNull(attribute0.getKey());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attribute attribute0 = new Attribute("9J(7hWlNbpCpH", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      boolean boolean0 = Attribute.shouldCollapseAttribute("", "", document_OutputSettings1);
      String string0 = attribute0.setValue("");
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("A &", (String) null, document_OutputSettings0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = new Attribute("|5SRurToQoGQ3}jIXvU", "|5SRurToQoGQ3}jIXvU");
      String string0 = attribute0.toString();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings1.maxPaddingWidth((int) (byte)52);
      attribute0.shouldCollapseAttribute(document_OutputSettings1);
      String string1 = attribute0.getKey();
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      String string0 = Attribute.getValidKey("/*", document_OutputSettings_Syntax0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      String string0 = Attribute.getValidKey("/*", document_OutputSettings_Syntax0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "org.eclipse.jetty.io.ManagedSelector$DestroyEndPoint";
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string1 = Attribute.getValidKey("", document_OutputSettings_Syntax0);
      assertNotNull(string1);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte byte0 = (byte)52;
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("*NUJ1M", document_OutputSettings_Syntax0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte byte0 = (byte)52;
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("*NUJ1M", document_OutputSettings_Syntax0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Attribute.htmlNoValidate("pRX.egDYCZ0TovwH3a", "sS4*ST7", mockPrintStream0, document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      MockFile mockFile0 = new MockFile("", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Attribute.htmlNoValidate("readonly", "", mockPrintStream0, document_OutputSettings2);
      assertEquals(0, mockFile0.length());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      MockFile mockFile0 = new MockFile("", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Attribute.htmlNoValidate("readonly", "", mockPrintStream0, document_OutputSettings2);
      boolean boolean0 = Attribute.shouldCollapseAttribute("", "w", document_OutputSettings0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "inert");
      // Undeclared exception!
      try { 
        Attribute.html("NUJ1M", "5Sq3Tc{0&djE*FC", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putUserData("async", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("async", "[^-a-zA-Z0-9_:.]");
      Attributes attributes1 = attributes0.put(attribute0);
      Attribute attribute1 = new Attribute("noresize", "noresize", attributes1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/np1./>dpO2*3'4,t");
      attribute1.setValue("I4+5dw+CAZPQpd");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("async", "[^-a-zA-Z0-9_:.]");
      Attributes attributes1 = attributes0.put(attribute0);
      Attribute attribute1 = new Attribute("noresize", "noresize", attributes1);
      attribute0.setValue("noresize");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Attribute attribute0 = new Attribute("W", (String) null);
      boolean boolean0 = attribute0.equals(attribute0);
      boolean boolean1 = attribute0.hasDeclaredValue();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Attribute attribute0 = new Attribute("W", (String) null);
      boolean boolean0 = attribute0.equals(attribute0);
      boolean boolean1 = attribute0.hasDeclaredValue();
      Attribute attribute1 = Attribute.createFromEncoded("W", "");
      assertNotNull(attribute1.getKey());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Attribute attribute0 = new Attribute("W", (String) null);
      boolean boolean0 = attribute0.equals(attribute0);
      boolean boolean1 = attribute0.hasDeclaredValue();
      Attribute attribute1 = Attribute.createFromEncoded("W", "");
      assertNotNull(attribute1.getValue());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Attribute attribute0 = new Attribute("selected", "selected");
      Attribute attribute1 = Attribute.createFromEncoded("U`SMM_@,(", "F=3h*WkZa");
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Attribute attribute0 = new Attribute("selected", "selected");
      Attribute attribute1 = Attribute.createFromEncoded("U`SMM_@,(", "F=3h*WkZa");
      assertNotNull(attribute1.getValue());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Attribute attribute0 = new Attribute("selected", "selected");
      Attribute attribute1 = Attribute.createFromEncoded("U`SMM_@,(", "F=3h*WkZa");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("async", "[^-a-zA-Z0-9_:.]");
      attributes0.put(attribute0);
      assertNotNull(attribute0.getKey());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("async", "[^-a-zA-Z0-9_:.]");
      attributes0.put(attribute0);
      attribute0.setKey("noresize");
      assertNotNull(attribute0.getValue());
}
