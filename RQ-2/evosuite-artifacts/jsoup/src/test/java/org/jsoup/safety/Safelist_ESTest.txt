 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Safelist.TagName safelist_TagName0 = Safelist.TagName.valueOf("=V^6o^o,\"}!B*[e.");
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Safelist.Protocol safelist_Protocol0 = Safelist.Protocol.valueOf("&2w]`1U,OJ\"");
      String string0 = safelist_Protocol0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("%s@%x{%s,eio=%d/%d,di=%d,fill=%s,flush=%s}~>%s=>%s");
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("GfY.3q1/e#UBfn");
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Safelist.AttributeKey safelist_AttributeKey0 = Safelist.AttributeKey.valueOf("width");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Safelist.AttributeKey safelist_AttributeKey0 = new Safelist.AttributeKey("");
      assertNotNull(safelist_AttributeKey0.toString());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Safelist safelist1 = safelist0.addEnforcedAttribute("(CM}#<}[G.N", "(CM}#<}[G.N", "STARTED");
      Attributes attributes0 = safelist1.getEnforcedAttributes("(CM}#<}[G.N");
      assertEquals(1, attributes0.size());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        safelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute("O^nfZX4y6lF|", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      // Undeclared exception!
      try { 
        safelist0.isSafeTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Tag tag0 = Tag.valueOf("dd");
      FormElement formElement0 = new FormElement(tag0, "dd", (Attributes) null);
      // Undeclared exception!
      try { 
        safelist0.isSafeAttribute("dd", formElement0, (Attribute) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Safelist", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      // Undeclared exception!
      try { 
        safelist0.getEnforcedAttributes((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      // Undeclared exception!
      try { 
        safelist0.addEnforcedAttribute((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Safelist safelist0 = null;
      try {
        safelist0 = new Safelist((Safelist) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Safelist", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Document document0 = Parser.parse("[OO}j6U", "K))ZvWvq82|");
      Attribute attribute0 = new Attribute("[^%s]", "Zm");
      boolean boolean0 = safelist0.isSafeAttribute("summary", document0, attribute0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "h2";
      Safelist safelist1 = safelist0.addTags(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        safelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Safelist.TagName safelist_TagName0 = new Safelist.TagName("(CM}#<}[G.N");
      boolean boolean0 = safelist_TagName0.equals("(CM}#<}[G.N");
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Safelist.AttributeValue safelist_AttributeValue0 = new Safelist.AttributeValue("BTte9a;ZLrn");
      boolean boolean0 = safelist_AttributeValue0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Attributes attributes0 = safelist0.getEnforcedAttributes("h2");
      assertEquals(0, attributes0.size());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      safelist0.addEnforcedAttribute("blockquote", "blockquote", "blockquote");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("blockquote", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("blockquote", "pBre", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "`r0c[b", attributes0);
      boolean boolean0 = safelist0.isSafeAttribute("blockquote", pseudoTextElement0, attribute0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Tag tag0 = Tag.valueOf("blockquote");
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "blockquote";
      stringArray0[1] = "blockquote";
      stringArray0[2] = "blockquote";
      stringArray0[3] = "blockquote";
      stringArray0[4] = "blockquote";
      stringArray0[5] = "blockquote";
      safelist0.addAttributes("blockquote", stringArray0);
      FormElement formElement0 = new FormElement(tag0, "blockquote", attributes0);
      Attribute attribute0 = new Attribute("blockquote", "blockquote", attributes0);
      boolean boolean0 = safelist0.isSafeAttribute("blockquote", formElement0, attribute0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "LokW=i@N:gK/tJDG@";
      stringArray0[1] = "LokW=i@N:gK/tJDG@";
      stringArray0[2] = "LokW=i@N:gK/tJDG@";
      Safelist safelist1 = safelist0.addAttributes("LokW=i@N:gK/tJDG@", stringArray0);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.safety.Safelist$AttributeValue", parseSettings0);
      Element element0 = new Element(tag0, "LokW=i@N:gK/tJDG@");
      Attribute attribute0 = Attribute.createFromEncoded("LokW=i@N:gK/tJDG@", "LokW=i@N:gK/tJDG@");
      boolean boolean0 = safelist1.isSafeAttribute("LokW=i@N:gK/tJDG@", element0, attribute0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      boolean boolean0 = safelist0.isSafeTag("p");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      boolean boolean0 = safelist0.isSafeTag("(CM}#<}[G.N");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cite";
      Safelist safelist1 = safelist0.removeProtocols("cite", "cite", stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "a7vBau'N-8ZMVy";
      stringArray0[1] = "n[2gbiVE(Ima}~G";
      stringArray0[2] = "a7vBau'N-8ZMVy";
      stringArray0[3] = "n[2gbiVE(Ima}~G";
      stringArray0[4] = "a7vBau'N-8ZMVy";
      safelist0.addProtocols("a7vBau'N-8ZMVy", "n[2gbiVE(Ima}~G", stringArray0);
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("a7vBau'N-8ZMVy", "a7vBau'N-8ZMVy", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LokW=i@N:gK/tJDG@";
      stringArray0[1] = "LokW=i@N:gK/tJDG@";
      stringArray0[2] = "LokW=i@N:gK/tJDG@";
      stringArray0[3] = "LokW=i@N:gK/tJDG@";
      Safelist safelist1 = safelist0.addProtocols("LokW=i@N:gK/tJDG@", "LokW=i@N:gK/tJDG@", stringArray0);
      Safelist safelist2 = safelist1.removeProtocols("LokW=i@N:gK/tJDG@", "LokW=i@N:gK/tJDG@", stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("inert", ":all", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        safelist0.addProtocols("cite", "cite", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      safelist0.addEnforcedAttribute("abF=", "abF=", "abF=");
      Safelist safelist1 = safelist0.removeEnforcedAttribute("abF=", "abF=");
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      safelist0.addEnforcedAttribute("h2", "<c.onFillable {}", "h2");
      Safelist safelist1 = safelist0.removeEnforcedAttribute("h2", "h2");
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Safelist safelist1 = safelist0.removeEnforcedAttribute("h2", "h2");
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Safelist safelist1 = safelist0.removeEnforcedAttribute("nofollow", "nofollow");
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Safelist safelist1 = safelist0.addEnforcedAttribute("(CM}#<}[G.N", "(CM}#<}[G.N", "(CM}#<}[G.N");
      Safelist safelist2 = safelist1.addEnforcedAttribute("(CM}#<}[G.N", "(CM}#<}[G.N", "p");
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "blockquote";
      stringArray0[1] = "blockquote";
      stringArray0[2] = "blockquote";
      Safelist safelist1 = safelist0.removeAttributes("blockquote", stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "h2";
      safelist0.addAttributes("h2", stringArray0);
      Safelist safelist1 = safelist0.removeAttributes("h2", stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = ":all";
      Safelist safelist1 = safelist0.removeAttributes(":all", stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "h2";
      Safelist safelist1 = safelist0.removeAttributes("h2", stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        safelist0.removeAttributes("tr", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p";
      stringArray0[1] = "(CM}#<}[G.N";
      stringArray0[2] = "p";
      stringArray0[3] = "(CM}#<}[G.N";
      stringArray0[4] = "(CM}#<}[G.N";
      stringArray0[5] = "(CM}#<}[G.N";
      Safelist safelist1 = safelist0.removeTags(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Safelist safelist1 = new Safelist(safelist0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        safelist0.addAttributes("J_9yf", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      safelist0.addEnforcedAttribute("(CM}#<}[G.N", "(CM}#<}[G.N", "(CM}#<}[G.N");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("blockquote", "(CM}#<}[G.N", attributes0);
      boolean boolean0 = safelist0.isSafeAttribute("(CM}#<}[G.N", (Element) null, attribute0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("xCwo0", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "h", attributes0);
      // Undeclared exception!
      try { 
        safelist0.isSafeAttribute((String) null, formElement0, (Attribute) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      ;
}
