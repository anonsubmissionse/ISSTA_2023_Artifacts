/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:26:54 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      int int0 = entities_EscapeMode0.codepointForName("amp");
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      int int0 = entities_EscapeMode0.codepointForName("");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = Entities.unescape("", false);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = Entities.unescape("");
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        Entities.unescape((String) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        Entities.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        Entities.isNamedEntity((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        Entities.isBaseNamedEntity((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        Entities.getByName((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        Entities.escape("fallback", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Could not process key for channel {}");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Entities.escape((Appendable) charBuffer0, "O)tLYE", document_OutputSettings0, false, true, false, false);
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Entities.escape((Appendable) charBuffer0, "grave", document_OutputSettings0, true, false, true, false);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        Entities.escape((Appendable) pipedWriter0, "UTF-I#DLE", document_OutputSettings0, true, true, true, true);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        Entities.codepointsForName((String) null, intArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        Entities.codepointsForName("amp", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("#Yp\"Ig[~", " size=", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape((Appendable) mockPrintWriter0, "#~tko>b y'tt4Wh\"mgX", document_OutputSettings0, false, false, false, true);
      assertNotNull(document_OutputSettings0.syntax());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", " size=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape((Appendable) mockPrintWriter0, "<X}l;1rO9a_k#KAi*3", document_OutputSettings0, false, false, true, true);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X*L}H&J");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape((Appendable) mockPrintWriter0, "X*L}H&J", document_OutputSettings0, true, true, true, false);
      assertNotNull(document_OutputSettings0.syntax());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = Entities.escape((String) null, document_OutputSettings0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = Entities.codepointsForName("amp", intArray0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = Entities.codepointsForName("amp", intArray0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = Entities.isBaseNamedEntity("lt");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = Entities.unescape("STARTING", true);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Entities.CoreCharset.byName("8CreaEndPoint@%{%s}");
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Entities.CoreCharset.byName("US-ASCII");
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3208);
      document_OutputSettings0.prepareEncoder();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      // Undeclared exception!
      try { 
        Entities.escape((Appendable) null, "F<'){Z8:<Ry|H\rB", document_OutputSettings1, true, true, false, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3208);
      document_OutputSettings0.prepareEncoder();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      String string0 = Entities.escape("8x9,%k", document_OutputSettings0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = Entities.escape("#Yp\"Ig[~");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", " size=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.escape((Appendable) mockPrintWriter0, "<X}l;1rO9a_k#KAi*3", document_OutputSettings0, true, false, false, true);
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", " size=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Entities.escape((Appendable) mockPrintWriter0, "<X}l;1rO9a_k#KAi*3", document_OutputSettings0, true, false, false, false);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", " size=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape((Appendable) mockPrintWriter0, "<X}l;1rO9a_k#KAi*3", document_OutputSettings0, true, false, false, true);
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = Entities.escape("F<'){Z8:<Ry|H\rB");
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", " size=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape((Appendable) mockPrintWriter0, "#~tko>b y'tt4Wh\"mgX", document_OutputSettings0, true, true, true, true);
      assertNotNull(document_OutputSettings0.syntax());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape((Appendable) charArrayWriter0, " D|  ", document_OutputSettings0, true, true, true, false);
      assertEquals(0, charArrayWriter0.size());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape((Appendable) charArrayWriter0, " D|  ", document_OutputSettings0, true, true, true, false);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", " size=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape((Appendable) mockPrintWriter0, "#~tko>b y'tt4Wh\"mgX", document_OutputSettings0, true, true, false, false);
      assertFalse(document_OutputSettings0.prettyPrint());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = Entities.escape("\t");
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = Entities.codepointsForName("&amp;", intArray0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = Entities.getByName("");
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = Entities.getByName("");
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = Entities.getByName("Tab");
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = Entities.getByName("Tab");
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = Entities.isBaseNamedEntity("");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = Entities.isNamedEntity("grave");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      String string0 = entities_EscapeMode0.nameForCodepoint(38);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = entities_EscapeMode0.nameForCodepoint(62);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      String string0 = entities_EscapeMode0.nameForCodepoint(9);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = entities_EscapeMode0.nameForCodepoint((-219));
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = Entities.unescape("&amp;");
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = Entities.isNamedEntity("x+LJ=s^%");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = Entities.escape((String) null);
      ;
}
}
