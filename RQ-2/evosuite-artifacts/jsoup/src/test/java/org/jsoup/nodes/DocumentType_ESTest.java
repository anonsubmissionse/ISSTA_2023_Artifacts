/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:35:19 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("HwTLJ|,caj|n+", "HwTLJ|,caj|n+", "HwTLJ|,caj|n+");
      documentType0.siblingIndex = (-13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      documentType0.outerHtml((Appendable) mockPrintWriter0);
      assertNotNull(documentType0.nodeName());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      StringWriter stringWriter0 = new StringWriter(1151);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlTail(stringWriter0, 1151, document_OutputSettings0);
      assertNotNull(documentType0.nodeName());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.systemId();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.systemId();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("HwTLJ|,caj|n+", "HwTLJ|,caj|n+", "HwTLJ|,caj|n+");
      String string0 = documentType0.publicId();
      assertNotNull(documentType0.nodeName());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("HwTLJ|,caj|n+", "HwTLJ|,caj|n+", "HwTLJ|,caj|n+");
      String string0 = documentType0.publicId();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("HwTLJ|,caj|n+", "HwTLJ|,caj|n+", "HwTLJ|,caj|n+");
      String string0 = documentType0.name();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("HwTLJ|,caj|n+", "HwTLJ|,caj|n+", "HwTLJ|,caj|n+");
      String string0 = documentType0.name();
      assertNotNull(documentType0.nodeName());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("Scheduler-", "Scheduler-", "Scheduler-");
      documentType0.setParentNode(documentType0);
      // Undeclared exception!
      documentType0.setPubSysKey("<!DOCTYPE Scheduler- PUBLIC \"Scheduler-\" \"Scheduler-\">");
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        documentType0.outerHtmlHead(charBuffer0, 845, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        documentType0.outerHtmlHead(charBuffer0, 62, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
      try { 
        documentType0.outerHtmlHead(stringBuffer0, 1, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.DocumentType", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "q?{ds@)", "y.)O%k-\"h\"Pf%lCKq.J");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        documentType0.outerHtmlHead(pipedWriter0, (-2712), document_OutputSettings0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DocumentType documentType0 = null;
      try {
        documentType0 = new DocumentType((String) null, (String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("HwTLJ|,caj|n+", "HwTLJ|,caj|n+", "HwTLJ|,caj|n+");
      String string0 = documentType0.nodeName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      documentType0.outerHtml((Appendable) stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      documentType0.outerHtml((Appendable) stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("9(^EXcK\"");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      documentType0.outerHtmlHead(mockPrintStream0, (-2897), document_OutputSettings1);
      assertNotNull(documentType0.nodeName());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("HwTLJ|,caj|n+", "HwTLJ|,caj|n+", "HwTLJ|,caj|n+");
      documentType0.siblingIndex = 6;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PUBLIC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      documentType0.outerHtmlHead(mockPrintWriter0, (-746), document_OutputSettings1);
      assertNotNull(documentType0.nodeName());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("HwTLJ|,caj|n+", "HwTLJ|,caj|n+", "HwTLJ|,caj|n+");
      documentType0.siblingIndex = 1;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      documentType0.outerHtml((Appendable) mockPrintWriter0);
      assertNotNull(documentType0.nodeName());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("h4", "", "Y,A");
      String string0 = documentType0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("h4", "", "Y,A");
      String string0 = documentType0.toString();
      assertNotNull(documentType0.nodeName());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("HwTLJ|,caj|n+", "HwTLJ|,caj|n+", "HwTLJ|,caj|n+");
      documentType0.setPubSysKey("HwTLJ|,caj|n+");
      assertNotNull(documentType0.nodeName());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      documentType0.setPubSysKey((String) null);
      assertNotNull(documentType0.nodeName());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("'u2y>dL65):.Of", "'u2y>dL65):.Of", "JW`X");
      String string0 = documentType0.systemId();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("'u2y>dL65):.Of", "'u2y>dL65):.Of", "JW`X");
      String string0 = documentType0.systemId();
      assertNotNull(documentType0.nodeName());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.publicId();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.publicId();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.name();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.name();
      ;
}
}
