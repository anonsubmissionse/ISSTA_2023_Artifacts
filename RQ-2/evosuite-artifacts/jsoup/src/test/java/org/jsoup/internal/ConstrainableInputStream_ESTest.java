/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:33:18 GMT 2022
 */

package org.jsoup.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.SocketTimeoutException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.internal.ConstrainableInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstrainableInputStream_ESTest extends ConstrainableInputStream_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(byteArrayInputStream0, (byte)103, 91);
      constrainableInputStream0.readToByteBuffer(2147483540);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Enumeration<ConstrainableInputStream> enumeration0 = (Enumeration<ConstrainableInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(sequenceInputStream0, 1503, 1503);
      constrainableInputStream0.mark(487);
      constrainableInputStream0.reset();
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Enumeration<ConstrainableInputStream> enumeration0 = (Enumeration<ConstrainableInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(sequenceInputStream0, 1503, 1503);
      Enumeration<ConstrainableInputStream> enumeration1 = (Enumeration<ConstrainableInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration1).hasMoreElements();
      doReturn(constrainableInputStream0).when(enumeration1).nextElement();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      ConstrainableInputStream constrainableInputStream1 = ConstrainableInputStream.wrap(sequenceInputStream1, 487, 487);
      byte[] byteArray0 = new byte[2];
      constrainableInputStream0.timeout((-5474L), 4160L);
      constrainableInputStream1.read(byteArray0);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(dataInputStream0, (byte)1, 0);
      constrainableInputStream0.read(byteArray0, (int) (byte)1, 0);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConstrainableInputStream.wrap((InputStream) null, (-341), (-341));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-797), 67);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(byteArrayInputStream0, 32768, (byte)84);
      // Undeclared exception!
      try { 
        constrainableInputStream0.readToByteBuffer((byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)6, (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(dataInputStream0, (byte)6, 0);
      // Undeclared exception!
      try { 
        constrainableInputStream0.read((byte[]) null, (int) (byte)6, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(pushbackInputStream0, 525, 1489);
      byte[] byteArray0 = new byte[6];
      try { 
        constrainableInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)1);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(byteArrayInputStream0, (byte)103, 91);
      constrainableInputStream0.read(byteArray0, (int) (byte)1, (int) (byte)1);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(bufferedInputStream0, 1413, 1803);
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(618L, 1413);
      byte[] byteArray0 = new byte[3];
      try { 
        constrainableInputStream1.read(byteArray0, 641, (int) (byte)22);
        fail("Expecting exception: SocketTimeoutException");
      } catch(SocketTimeoutException e) {
         //
         // Read timeout
         //
         verifyException("org.jsoup.internal.ConstrainableInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(byteArrayInputStream0, (byte)103, 91);
      constrainableInputStream0.timeout(1392409281319806L, (byte)20);
      // Undeclared exception!
      try { 
        constrainableInputStream0.read(byteArray0, (int) (byte)1, 495);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(byteArrayInputStream0, (byte)103, 91);
      constrainableInputStream0.readToByteBuffer((byte)8);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<ConstrainableInputStream> enumeration0 = (Enumeration<ConstrainableInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(bufferedInputStream0, 32768, 32768);
      constrainableInputStream0.readToByteBuffer(32768);
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 220);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(pipedInputStream0, 220, 0);
      // Undeclared exception!
      try { 
        constrainableInputStream0.readToByteBuffer((-2101));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(pipedInputStream0, 1, 1);
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(1239L, 1486L);
      try { 
        constrainableInputStream1.readToByteBuffer(1);
        fail("Expecting exception: SocketTimeoutException");
      } catch(SocketTimeoutException e) {
         //
         // Read timeout
         //
         verifyException("org.jsoup.internal.ConstrainableInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(byteArrayInputStream0, (byte)103, (byte)1);
      constrainableInputStream0.readToByteBuffer((byte)0);
      constrainableInputStream0.read(byteArray0, 1, (int) (byte) (-122));
      assertEquals(0, byteArrayInputStream0.available());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(pipedInputStream0, 1, 1);
      try { 
        constrainableInputStream0.readToByteBuffer(1);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(pipedInputStream0, 1, 1);
      ConstrainableInputStream constrainableInputStream1 = ConstrainableInputStream.wrap(constrainableInputStream0, 832, 1);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        ConstrainableInputStream.wrap(pipedInputStream0, 1574, (-2112));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Enumeration<ConstrainableInputStream> enumeration0 = (Enumeration<ConstrainableInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(sequenceInputStream0, 1503, 1503);
      try { 
        constrainableInputStream0.reset();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Resetting to invalid mark
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Enumeration<ConstrainableInputStream> enumeration0 = (Enumeration<ConstrainableInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      ConstrainableInputStream constrainableInputStream0 = ConstrainableInputStream.wrap(bufferedInputStream0, 32768, 32768);
      ConstrainableInputStream constrainableInputStream1 = constrainableInputStream0.timeout(32768, (-1898L));
      try { 
        constrainableInputStream1.readToByteBuffer(32768);
        fail("Expecting exception: SocketTimeoutException");
      } catch(SocketTimeoutException e) {
         //
         // Read timeout
         //
         verifyException("org.jsoup.internal.ConstrainableInputStream", e);
      }
  }
}
