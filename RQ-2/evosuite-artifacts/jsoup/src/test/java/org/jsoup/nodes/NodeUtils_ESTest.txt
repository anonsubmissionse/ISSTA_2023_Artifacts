 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Pt~4a@", "Pt~4a@");
      parser0.setTrackPosition(true);
      Parser parser1 = NodeUtils.parser(document0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Do@>{(k+lO%.vgYM[)");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(877);
      StringReader stringReader0 = new StringReader("Do@>{(k+lO%.vgYM[)");
      Document document0 = parser1.parseInput((Reader) stringReader0, "");
      cDataNode0.parentNode = (Node) document0;
      Parser parser2 = NodeUtils.parser(cDataNode0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.NodeUtils", "");
      Document.OutputSettings document_OutputSettings0 = NodeUtils.outputSettings(document0);
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings1 = NodeUtils.outputSettings(document1);
      assertFalse(document_OutputSettings1.outline());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.maxPaddingWidth(0);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document.OutputSettings document_OutputSettings1 = NodeUtils.outputSettings(document1);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("o#mk7;N8W$", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "o#mk7;N8W$", attributes0);
      Class<XmlDeclaration> class0 = XmlDeclaration.class;
      // Undeclared exception!
      try { 
        NodeUtils.selectXpath("o#mk7;N8W$", (Element) formElement0, class0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ozpyLmMtOS(MzK&Q!N", "Low configured threads: (max={} - required={})={} < warnAt={} for {}");
      Class<XmlDeclaration> class0 = XmlDeclaration.class;
      // Undeclared exception!
      try { 
        NodeUtils.selectXpath("ozpyLmMtOS(MzK&Q!N", (Element) document0, class0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not evaluate XPath query [ozpyLmMtOS(MzK&Q!N]: javax.xml.transform.TransformerException: Could not find function: ozpyLmMtOS
         //
         verifyException("org.jsoup.helper.W3CDom", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<XmlDeclaration> class0 = XmlDeclaration.class;
      // Undeclared exception!
      try { 
        NodeUtils.selectXpath((String) null, (Element) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Document document0 = new Document("ZjF");
      Element element0 = document0.tagName("ZjF");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      element0.childNodes = (List<Node>) linkedList0;
      linkedList0.add((Node) document0);
      Class<XmlDeclaration> class0 = XmlDeclaration.class;
      // Undeclared exception!
      NodeUtils.selectXpath("org.jsoup.nodes.NodeUtils", (Element) document0, class0);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Document document0 = new Document("");
      Class<XmlDeclaration> class0 = XmlDeclaration.class;
      // Undeclared exception!
      try { 
        NodeUtils.selectXpath("F>tAnH.?X~Z[$6", (Element) document0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("DrpRK");
      Document document0 = Parser.parse("[}Il@)", "[}Il@)");
      Element element0 = document0.doClone(comment0);
      Class<XmlDeclaration> class0 = XmlDeclaration.class;
      // Undeclared exception!
      try { 
        NodeUtils.selectXpath("PcW.&>5ELi@$r4UFS5>", element0, class0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Comment cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("multipart/form-data");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      NodeUtils.parser(element0);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtils.parser((Node) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.NodeUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("o@>{(tlO%.vgYSM[)");
      Document document0 = new Document("q/_Oel~q4u-QT!");
      cDataNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        NodeUtils.parser(document0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document((String) null);
      document0.setParentNode(document0);
      // Undeclared exception!
      NodeUtils.outputSettings(document0);
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtils.outputSettings((Node) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.NodeUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.NodeUtils");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        NodeUtils.outputSettings(element0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("inputStream", "inputStream");
      Document document1 = document0.parser((Parser) null);
      Element element0 = document1.val("inputStream");
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comment comment0 = new Comment("DrpRK");
      Parser parser0 = NodeUtils.parser(comment0);
      assertTrue(parser0.isTrackPosition());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comment comment0 = new Comment("DrpRK");
      Document.OutputSettings document_OutputSettings0 = NodeUtils.outputSettings(comment0);
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("inputStream", "inputStream");
      Class<XmlDeclaration> class0 = XmlDeclaration.class;
      NodeUtils.selectXpath("inputStream", (Element) document0, class0);
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NodeUtils nodeUtils0 = new NodeUtils();
  }
