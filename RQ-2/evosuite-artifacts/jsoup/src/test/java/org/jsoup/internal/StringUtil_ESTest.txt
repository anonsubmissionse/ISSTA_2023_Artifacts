 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtil.isAscii("lxDivpED:");
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DtD|W3VSpA-4K|";
      boolean boolean0 = StringUtil.inSorted("DtD|W3VSpA-4K|", stringArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(65534);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(250);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      boolean boolean0 = StringUtil.startsWithNewline("\tat ");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = StringUtil.padding(32, 1103);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = StringUtil.padding(692, 21);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((CharSequence) "X|hU/E\"C2Yz4qKS>q");
      StringUtil.releaseBuilder(stringBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StringUtil.padding(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringUtil.padding(92);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringUtil.padding(0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashSet<Delayed> hashSet0 = new HashSet<Delayed>();
      String string0 = StringUtil.join((Collection<?>) hashSet0, "           ");
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      try { 
        StringUtil.resolve((URL) null, "");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        StringUtil.resolve(uRL0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.resolve((String) null, "sOPG%E#l;");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.releaseBuilder((StringBuilder) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringUtil.padding(8192, 8192);
      // Undeclared exception!
      StringUtil.padding(8192, 8192);
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.normaliseWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(2036);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<Object> iterator0 = stack0.iterator();
      stack0.add((Object) integer0);
      // Undeclared exception!
      try { 
        StringUtil.join(iterator0, "P;^/4I;2ri}r");
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.join((Iterator<?>) null, "F");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.join((Collection<?>) null, "X|hU/E\"C2Yz4qKS>q");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.isAscii((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        StringUtil.inSorted((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.in("yA", (String[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = StringUtil.releaseBuilder(stringBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringUtil.borrowBuilder();
      StringUtil.isNumeric("Z,%LtXx");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z,%LtXx");
      StringUtil.startsWithNewline("Z,%LtXx");
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      linkedBlockingQueue0.add("Z,%LtXx");
      linkedBlockingQueue0.add("Z,%LtXx");
      linkedBlockingQueue0.add("?Ry$5$`ExbvO;J$E");
      linkedBlockingQueue0.iterator();
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      assertNotNull(stringBuilder0.toString());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.appendNormalisedWhitespace((StringBuilder) null, "    ", false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "java.lang.String@0000000002                                                                                            ", true);
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(32);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(2249);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(32);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.padding((-984), 23);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // width must be >= 0
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringUtil.StringJoiner stringUtil_StringJoiner0 = new StringUtil.StringJoiner("BU5V<] #&=N47Z");
      stringUtil_StringJoiner0.add("BU5V<] #&=N47Z");
      StringUtil.StringJoiner stringUtil_StringJoiner1 = stringUtil_StringJoiner0.add("BU5V<] #&=N47Z");
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      linkedBlockingQueue0.add("Z,%LtXx");
      linkedBlockingQueue0.add("Z,%LtXx");
      Iterator<String> iterator0 = linkedBlockingQueue0.iterator();
      String string0 = StringUtil.join(iterator0, "Z,%LtXx");
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      linkedBlockingQueue0.add("Z,%LtXx");
      Iterator<String> iterator0 = linkedBlockingQueue0.iterator();
      String string0 = StringUtil.join(iterator0, "Z,%LtXx");
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      Iterator<String> iterator0 = linkedBlockingQueue0.iterator();
      String string0 = StringUtil.join(iterator0, "Z,%LtXx");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringUtil.StringJoiner stringUtil_StringJoiner0 = new StringUtil.StringJoiner("");
      String string0 = stringUtil_StringJoiner0.complete();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = StringUtil.padding(4510, 4510);
      String[] stringArray0 = new String[22];
      stringArray0[0] = "N6]pb!Cr/.)]wzrO?";
      stringArray0[6] = string0;
      stringArray0[8] = string0;
      String string1 = StringUtil.join(stringArray0, "");
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = StringUtil.resolve("/", "failed: ");
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = StringUtil.resolve(uRL0, "#");
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?");
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = StringUtil.resolve(uRL0, "?");
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "     ";
      boolean boolean0 = StringUtil.inSorted("     ", stringArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "rl$`2`G~K3N.[";
      stringArray0[2] = "     ";
      boolean boolean0 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "   ";
      stringArray0[1] = "   ";
      stringArray0[2] = "   ";
      stringArray0[3] = "!9'_i&+cTMzg4";
      boolean boolean0 = StringUtil.in("!9'_i&+cTMzg4", stringArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#";
      boolean boolean0 = StringUtil.in("??", stringArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("   ");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringUtil.appendNormalisedWhitespace(stringBuilder0, " ", true);
      assertNotNull(stringBuilder0.toString());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(173);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(8203);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(13);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(12);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(10);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(9);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(13);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(12);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(10);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(9);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("1");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = StringUtil.startsWithNewline("\n");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = StringUtil.startsWithNewline("");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = StringUtil.startsWithNewline((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("z9J]W]*~g1[{8{Z#g");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank(" ");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = StringUtil.padding(5, (-1));
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.padding(255, (-3719));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringUtil.StringJoiner stringUtil_StringJoiner0 = new StringUtil.StringJoiner("\"M,jV\"vQLeauv/!([R");
      LinkedBlockingQueue<Object> linkedBlockingQueue0 = new LinkedBlockingQueue<Object>();
      linkedBlockingQueue0.add(stringUtil_StringJoiner0);
      linkedBlockingQueue0.take();
      linkedBlockingQueue0.add("                ");
      String string0 = StringUtil.join((Collection<?>) linkedBlockingQueue0, "                ");
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtil.join(stringArray0, " ");
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringUtil.StringJoiner stringUtil_StringJoiner0 = new StringUtil.StringJoiner("#");
      Object object0 = new Object();
      StringUtil.StringJoiner stringUtil_StringJoiner1 = stringUtil_StringJoiner0.append(object0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = StringUtil.resolve("", " ");
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.padding((-398));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // width must be >= 0
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        StringUtil.join(stringArray0, "&X,Fk-n'9U");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
