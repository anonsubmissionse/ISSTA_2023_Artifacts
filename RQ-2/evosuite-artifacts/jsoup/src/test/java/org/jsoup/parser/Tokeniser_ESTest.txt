 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EC%QR7 4`HsFKYIQ0n");
      CharacterReader characterReader0 = new CharacterReader("EC%QR7 4`HsFKYIQ0n");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.emit('8');
      tokeniser0.error("]Y6*");
      tokeniser0.appropriateEndTagSeq();
      Token.EndTag token_EndTag0 = new Token.EndTag();
      Attributes attributes0 = new Attributes();
      token_EndTag0.attributes = attributes0;
      tokeniser0.appropriateEndTagSeq();
      tokeniser0.emit(token_EndTag0);
      tokeniser0.appropriateEndTagSeq();
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        tokeniser0.emitTagPending();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.appropriateEndTagSeq();
      Token.EndTag token_EndTag0 = new Token.EndTag();
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      parseErrorList0.add(parseError0);
      characterReader0.consumeTagName();
      tokeniser0.emit(token_EndTag0);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        tokeniser0.emit(charArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&nbsp;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.DoctypePublicIdentifier_doubleQuoted;
      tokeniser0.error(tokeniserState0);
      assertTrue(parseErrorList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&nbsp;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.DoctypePublicIdentifier_doubleQuoted;
      tokeniser0.error(tokeniserState0);
      assertEquals(1, parseErrorList0.size());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader("numeric reference with no numerals");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      ParseErrorList parseErrorList0 = new ParseErrorList(0, 0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = new Character('n');
      Character.isAlphabetic(0);
      int[] intArray0 = tokeniser0.consumeCharacterReference(character0, true);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1292);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      String string0 = tokeniser0.unescapeEntities(true);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParseErrorList parseErrorList0 = new ParseErrorList(0, 0);
      StringReader stringReader0 = new StringReader("[pqsxf+p");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringReader0.close();
      // Undeclared exception!
      try { 
        tokeniser0.unescapeEntities(false);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ParseErrorList parseErrorList0 = new ParseErrorList(0, 0);
      StringReader stringReader0 = new StringReader("[pqsxf+p");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.isAppropriateEndTagToken();
      stringReader0.close();
      StringReader stringReader1 = new StringReader("character [%s] is not a valid unicode code point");
      CharacterReader characterReader1 = new CharacterReader(stringReader1, 4100);
      Tokeniser tokeniser1 = new Tokeniser(characterReader1, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniser0.unescapeEntities(false);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniser0.unescapeEntities(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(2945);
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      TokeniserState tokeniserState0 = tokeniser0.getState();
      // Undeclared exception!
      try { 
        tokeniser0.transition(tokeniserState0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniser0.read();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$1", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";Y'HiS:&Zj\"t*+<4 .N");
      ParseErrorList parseErrorList0 = new ParseErrorList(15, 2);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.TagName;
      tokeniser0.advanceTransition(tokeniserState0);
      characterReader0.consumeTagName();
      tokeniser0.read();
      // Undeclared exception!
      try { 
        tokeniser0.isAppropriateEndTagToken();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";Y'HiS:&Zj\"t*+<4b .N");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.TagName;
      tokeniser0.advanceTransition(tokeniserState0);
      characterReader0.consumeRawData();
      tokeniser0.read();
      // Undeclared exception!
      try { 
        tokeniser0.isAppropriateEndTagToken();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParseErrorList parseErrorList0 = new ParseErrorList(65535, 65535);
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.DoctypeSystemIdentifier_doubleQuoted;
      // Undeclared exception!
      try { 
        tokeniser0.error(tokeniserState0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("UtZVd4E%`<&:?H.");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(21);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        tokeniser0.error("UtZVd4E%`<&:?H.", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '`'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("CreateEndPoint@%x{%s}");
      ParseErrorList parseErrorList0 = new ParseErrorList(32, 32);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        tokeniser0.error("CreateEndPoint@%x{%s}", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%x'
         //
         verifyException("java.util.Formatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("B@bWaKd[xrH9a>R7Ov");
      ParseErrorList parseErrorList0 = new ParseErrorList(27, 27);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapeStartDash;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) tokeniserState0;
      // Undeclared exception!
      try { 
        tokeniser0.error("d`~0D.Gm%fk|-n1wB", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      } catch(IllegalFormatConversionException e) {
         //
         // f != org.jsoup.parser.TokeniserState$21
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("      ");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        tokeniser0.error("     ", objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, (ParseErrorList) null);
      // Undeclared exception!
      try { 
        tokeniser0.error("8^~m*");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(3480);
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.AttributeValue_unquoted;
      // Undeclared exception!
      try { 
        tokeniser0.eofError(tokeniserState0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseError", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniser0.emitTagPending();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#k");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      characterReader0.matchesLetter();
      tokeniser0.emitTagPending();
      // Undeclared exception!
      try { 
        tokeniser0.emitDoctypePending();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-209));
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniser0.emitDoctypePending();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = new ParseErrorList(0, 0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.emitDoctypePending();
      // Undeclared exception!
      try { 
        tokeniser0.emitCommentPending();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniser0.emitCommentPending();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("d\"})`z\"NdMA m:3}/");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      int[] intArray0 = new int[4];
      intArray0[2] = (-805);
      // Undeclared exception!
      try { 
        tokeniser0.emit(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rd|$h&ibi]_Y_+");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1162);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.emitCommentPending();
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      // Undeclared exception!
      try { 
        tokeniser0.emit(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      Token.Tag token_Tag0 = tokeniser0.createTagPending(false);
      Attributes attributes0 = new Attributes();
      token_Tag0.attributes = attributes0;
      // Undeclared exception!
      try { 
        tokeniser0.emit(token_Tag0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      Token.Tag token_Tag0 = tokeniser0.createTagPending(false);
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      token_Tag0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        tokeniser0.emit(token_Tag0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniser0.emit((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniser0.emit('J');
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1292);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.startPending = null;
      // Undeclared exception!
      try { 
        tokeniser0.createTagPending(true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("EC%QR7 4`HsFKYIQ0n");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.commentPending = null;
      // Undeclared exception!
      try { 
        tokeniser0.createCommentPending();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unexpectedly reached end of file (EOF) in input state [%s]");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 23);
      stringReader0.close();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      tokeniser0.isAppropriateEndTagToken();
      Character character0 = Character.valueOf('G');
      // Undeclared exception!
      try { 
        tokeniser0.consumeCharacterReference(character0, true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ParseErrorList parseErrorList0 = new ParseErrorList(2861, 2861);
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Character character0 = Character.valueOf('M');
      // Undeclared exception!
      try { 
        tokeniser0.consumeCharacterReference(character0, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedDashDash;
      // Undeclared exception!
      try { 
        tokeniser0.advanceTransition(tokeniserState0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#k");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      parseErrorList0.add(parseError0);
      boolean boolean0 = characterReader0.matchesLetter();
      Character character0 = Character.valueOf('B');
      tokeniser0.consumeCharacterReference(character0, true);
      tokeniser0.emitDoctypePending();
      String string0 = tokeniser0.unescapeEntities(boolean0);
      assertEquals(0, parseErrorList0.size());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#k");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      parseErrorList0.add(parseError0);
      boolean boolean0 = characterReader0.matchesLetter();
      Character character0 = Character.valueOf('B');
      tokeniser0.consumeCharacterReference(character0, true);
      tokeniser0.emitDoctypePending();
      String string0 = tokeniser0.unescapeEntities(boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";Y'HiS:&Zj\"t*+<4 .N");
      ParseErrorList parseErrorList0 = new ParseErrorList(15, 2);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.read();
      tokeniser0.isAppropriateEndTagToken();
      tokeniser0.emit(";Y'HiS:&Zj\"t*+<4 .N");
      assertTrue(parseErrorList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";Y'HiS:&Zj\"t*+<4 .N");
      ParseErrorList parseErrorList0 = new ParseErrorList(15, 2);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.read();
      tokeniser0.isAppropriateEndTagToken();
      tokeniser0.emit(";Y'HiS:&Zj\"t*+<4 .N");
      assertEquals(0, parseErrorList0.size());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9nG3;7vsw");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeDigitSequence();
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(25);
      characterReader0.matchesAsciiAlpha();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      characterReader0.columnNumber(25);
      Character character0 = Character.valueOf('5');
      tokeniser0.consumeCharacterReference(character0, false);
      tokeniser0.read();
      // Undeclared exception!
      try { 
        tokeniser0.emitDoctypePending();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rd|$h&ii]_Y_+");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1162);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.unescapeEntities(true);
      TokeniserState tokeniserState0 = TokeniserState.Comment;
      StringBuilder stringBuilder0 = new StringBuilder("rd|$h&ii]_Y_+");
      tokeniser0.emit(stringBuilder0);
      assertEquals(0, characterReader0.pos());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#2k");
      characterReader0.consumeLetterSequence();
      Character character0 = Character.valueOf('B');
      Character.highSurrogate(971);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking('B');
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.consumeCharacterReference(character0, false);
      tokeniser0.createTagPending(false);
      assertEquals(1, parseErrorList0.size());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#2k");
      characterReader0.consumeLetterSequence();
      Character character0 = Character.valueOf('B');
      Character.highSurrogate(971);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking('B');
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.consumeCharacterReference(character0, false);
      tokeniser0.createTagPending(false);
      assertEquals(1, characterReader0.pos());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = new ParseErrorList(271, 271);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.emitDoctypePending();
      characterReader0.consume();
      Character character0 = Character.valueOf('V');
      tokeniser0.consumeCharacterReference(character0, false);
      // Undeclared exception!
      try { 
        tokeniser0.emitTagPending();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Indirect Buckets");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      characterReader0.nextIndexOf("Indirect");
      TokeniserState tokeniserState0 = tokeniser0.getState();
      TokeniserState tokeniserState1 = TokeniserState.PLAINTEXT;
      tokeniser0.transition(tokeniserState1);
      tokeniser0.emitTagPending();
      tokeniser0.advanceTransition(tokeniserState0);
      tokeniser0.getState();
      tokeniser0.advanceTransition(tokeniserState0);
      Token token0 = tokeniser0.read();
      assertNotNull(token0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(".zh<dZ~");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(200);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      parseErrorList0.add((ParseError) null);
      tokeniser0.emit('`');
      tokeniser0.read();
      tokeniser0.createTagPending(true);
      tokeniser0.appropriateEndTagName();
      tokeniser0.emit('K');
      assertEquals(1, parseErrorList0.size());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("(L1'{T");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.createCommentPending();
      tokeniser0.getState();
      int[] intArray0 = new int[4];
      intArray0[2] = (int) '5';
      intArray0[3] = (int) '5';
      tokeniser0.emit(intArray0);
      tokeniser0.emit("(L1'{T");
      tokeniser0.getState();
      tokeniser0.emit('K');
      boolean boolean0 = tokeniser0.currentNodeInHtmlNS();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("B@bWaKd[xrH9a>R7Ov");
      characterReader0.matchesLetter();
      ParseErrorList parseErrorList0 = new ParseErrorList(27, 27);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.error("B@bWaKd[xrH9a>R7Ov");
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0.toString());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";Y'HiS:&Zj\"t*+<4b .N");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.TagName;
      tokeniser0.advanceTransition(tokeniserState0);
      tokeniser0.read();
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";Y'HiS:&Zj\"t*+<4b .N");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.TagName;
      tokeniser0.advanceTransition(tokeniserState0);
      tokeniser0.read();
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      tokeniser0.appropriateEndTagName();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";Y'HiS:&Zj\"t*+<4b .N");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.TagName;
      tokeniser0.advanceTransition(tokeniserState0);
      tokeniser0.read();
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      tokeniser0.appropriateEndTagName();
      assertTrue(parseErrorList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|f&|b]0VNoNy");
      characterReader0.consumeAttributeQuoted(false);
      ParseErrorList parseErrorList0 = new ParseErrorList(4629, 4629);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.createTempBuffer();
      Character character0 = new Character('A');
      tokeniser0.consumeCharacterReference(character0, false);
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataLessthanSign;
      tokeniser0.eofError(tokeniserState0);
      Token.EndTag token_EndTag0 = new Token.EndTag();
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#k");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(21);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.currentNodeInHtmlNS();
      characterReader0.consumeLetterSequence();
      Character character0 = new Character('B');
      Object[] objectArray0 = new Object[0];
      tokeniser0.error("#k", objectArray0);
      boolean boolean0 = tokeniser0.currentNodeInHtmlNS();
      tokeniser0.consumeCharacterReference(character0, true);
      tokeniser0.createTagPending(boolean0);
      StringBuilder stringBuilder0 = null;
      tokeniser0.getState();
      assertEquals(1, parseErrorList0.size());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&nbsp;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = Character.valueOf('Y');
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&nbsp;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = Character.valueOf('Y');
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      tokeniser0.emit("&nbsp;");
      tokeniser0.read();
      tokeniser0.consumeCharacterReference(character0, false);
      tokeniser0.getState();
      String string0 = tokeniser0.appropriateEndTagSeq();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&nbsp;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = Character.valueOf('Y');
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      tokeniser0.emit("&nbsp;");
      tokeniser0.read();
      tokeniser0.consumeCharacterReference(character0, false);
      tokeniser0.getState();
      String string0 = tokeniser0.appropriateEndTagSeq();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&nbsp;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      tokeniser0.emit("&nbsp;");
      tokeniser0.getState();
      StringBuilder stringBuilder0 = new StringBuilder("&nbsp;");
      tokeniser0.emit(stringBuilder0);
      tokeniser0.appropriateEndTagSeq();
      String string0 = tokeniser0.appropriateEndTagSeq();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&nbsp;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      tokeniser0.emit("&nbsp;");
      tokeniser0.getState();
      StringBuilder stringBuilder0 = new StringBuilder("&nbsp;");
      tokeniser0.emit(stringBuilder0);
      tokeniser0.appropriateEndTagSeq();
      String string0 = tokeniser0.appropriateEndTagSeq();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rd|$h&ibi]_Y_+");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1162);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.emitCommentPending();
      tokeniser0.getState();
      tokeniser0.createBogusCommentPending();
      char[] charArray0 = new char[4];
      charArray0[1] = '8';
      charArray0[3] = '}';
      charArray0[3] = 'L';
      tokeniser0.emit(charArray0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.appendTagName("P(h~Y7C8xIDrE");
      // Undeclared exception!
      try { 
        tokeniser0.emit(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#k");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(21);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      boolean boolean0 = tokeniser0.currentNodeInHtmlNS();
      tokeniser0.createTagPending(boolean0);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        tokeniser0.emit(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("X");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-684));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      characterReader0.consumeHexSequence();
      Character.isSurrogate('}');
      tokeniser0.appropriateEndTagSeq();
      // Undeclared exception!
      try { 
        tokeniser0.emit((int[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rd|$h&ibi]_Y_+");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1162);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.createDoctypePending();
      tokeniser0.createCommentPending();
      characterReader0.consumeLetterThenDigitSequence();
      tokeniser0.createBogusCommentPending();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      tokeniser0.emit(token_StartTag0);
      Token token0 = tokeniser0.read();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = new ParseErrorList(0, 0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.Doctype;
      tokeniser0.eofError(tokeniserState0);
      tokeniser0.emitDoctypePending();
      // Undeclared exception!
      try { 
        tokeniser0.emitCommentPending();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
