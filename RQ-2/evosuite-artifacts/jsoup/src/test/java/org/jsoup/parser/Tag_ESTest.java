/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:33:05 GMT 2022
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tag_ESTest extends Tag_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("plaintext", parseSettings0);
      assertTrue(tag0.isKnownTag());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      assertNotNull(tag0.toString());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Tag tag0 = Tag.valueOf("plaintext");
      Tag tag1 = tag0.setSelfClosing();
      assertFalse(tag1.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("object", parseSettings0);
      Tag tag1 = tag0.setSelfClosing();
      assertFalse(tag1.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Tag tag0 = Tag.valueOf("plaintext");
      boolean boolean0 = tag0.preserveWhitespace();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      boolean boolean0 = tag0.isFormSubmittable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      boolean boolean0 = tag0.isFormListed();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Tag tag0 = Tag.valueOf("area");
      boolean boolean0 = tag0.isEmpty();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\":qIv/1M3GRdx2H!L3");
      boolean boolean0 = tag0.isBlock();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\":qIv/1M3GRdx2H!L3");
      boolean boolean0 = tag0.isBlock();
      assertFalse(tag0.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\":qIv/1M3GRdx2H!L3");
      boolean boolean0 = tag0.isBlock();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\":qIv/1M3GRdx2H!L3");
      boolean boolean0 = tag0.isBlock();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\":qIv/1M3GRdx2H!L3");
      boolean boolean0 = tag0.isBlock();
      assertNotNull(tag0.toString());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\":qIv/1M3GRdx2H!L3");
      boolean boolean0 = tag0.isBlock();
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\":qIv/1M3GRdx2H!L3");
      boolean boolean0 = tag0.isBlock();
      assertFalse(tag0.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("a");
      boolean boolean0 = tag0.formatAsBlock();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Tag tag1 = tag0.clone();
      assertNotNull(tag1.getName());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("device");
      Tag tag1 = tag0.clone();
      assertNotNull(tag1.toString());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Tag tag1 = tag0.clone();
      assertFalse(tag1.isBlock());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("object", parseSettings0);
      Tag tag1 = tag0.clone();
      assertTrue(tag1.isKnownTag());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null, parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Tag.valueOf("lU/>7I", (ParseSettings) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("U", parseSettings0);
      assertFalse(tag0.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("U", parseSettings0);
      assertNotNull(tag0.toString());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      tag0.hashCode();
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      tag0.hashCode();
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      tag0.hashCode();
      assertFalse(tag0.isFormSubmittable());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      tag0.hashCode();
      assertNotNull(tag0.toString());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      tag0.hashCode();
      assertFalse(tag0.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      tag0.hashCode();
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      tag0.hashCode();
      assertTrue(tag0.isInline());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      tag0.hashCode();
      assertTrue(tag0.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      Tag tag1 = tag0.clone();
      boolean boolean0 = tag1.equals(tag0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      Tag tag1 = tag0.clone();
      boolean boolean0 = tag1.equals(tag0);
      assertFalse(tag1.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      Tag tag1 = tag0.clone();
      boolean boolean0 = tag1.equals(tag0);
      assertTrue(tag1.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      Tag tag1 = tag0.clone();
      boolean boolean0 = tag1.equals(tag0);
      assertFalse(tag1.isFormListed());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      Tag tag1 = tag0.clone();
      boolean boolean0 = tag1.equals(tag0);
      assertFalse(tag1.isFormSubmittable());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      Tag tag1 = tag0.clone();
      boolean boolean0 = tag1.equals(tag0);
      assertFalse(tag1.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      Tag tag1 = tag0.clone();
      boolean boolean0 = tag1.equals(tag0);
      assertNotNull(tag1.toString());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[o/VZ1rur");
      Tag tag1 = tag0.clone();
      boolean boolean0 = tag1.equals(tag0);
      assertFalse(tag1.isBlock());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("U", parseSettings0);
      Tag tag1 = Tag.valueOf("v", parseSettings0);
      boolean boolean0 = tag0.equals(tag1);
      assertFalse(tag1.isFormSubmittable());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("U", parseSettings0);
      Tag tag1 = Tag.valueOf("v", parseSettings0);
      boolean boolean0 = tag0.equals(tag1);
      assertTrue(tag1.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("U", parseSettings0);
      Tag tag1 = Tag.valueOf("v", parseSettings0);
      boolean boolean0 = tag0.equals(tag1);
      assertTrue(tag1.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("U", parseSettings0);
      Tag tag1 = Tag.valueOf("v", parseSettings0);
      boolean boolean0 = tag0.equals(tag1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("U", parseSettings0);
      Tag tag1 = Tag.valueOf("v", parseSettings0);
      boolean boolean0 = tag0.equals(tag1);
      assertFalse(tag1.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("U", parseSettings0);
      Tag tag1 = Tag.valueOf("v", parseSettings0);
      boolean boolean0 = tag0.equals(tag1);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("U", parseSettings0);
      Tag tag1 = Tag.valueOf("v", parseSettings0);
      boolean boolean0 = tag0.equals(tag1);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      boolean boolean0 = tag0.equals("title");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.equals(tag0);
      assertFalse(tag0.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.equals(tag0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.equals(tag0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.equals(tag0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.equals(tag0);
      assertFalse(tag0.isFormSubmittable());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.equals(tag0);
      assertTrue(tag0.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.equals(tag0);
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Tag tag0 = Tag.valueOf("o{Pr=0`Of<==9!2{");
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Tag tag0 = Tag.valueOf("o{Pr=0`Of<==9!2{");
      Tag tag1 = tag0.setSelfClosing();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag2 = Tag.valueOf("o{Pr=0`Of<==9!2{", parseSettings0);
      boolean boolean0 = tag2.equals(tag1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = Tag.isKnownTag("nobr");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = Tag.isKnownTag("*edrb+)35 .y");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("U", parseSettings0);
      boolean boolean0 = tag0.isKnownTag();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.isKnownTag();
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.isKnownTag();
      assertFalse(tag0.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.isKnownTag();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.isKnownTag();
      assertTrue(tag0.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.isKnownTag();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.isKnownTag();
      assertFalse(tag0.isFormSubmittable());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.isKnownTag();
      assertFalse(tag0.isFormListed());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">~6Nb0})`N+R");
      boolean boolean0 = tag0.isSelfClosing();
      assertFalse(tag0.isFormSubmittable());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">~6Nb0})`N+R");
      boolean boolean0 = tag0.isSelfClosing();
      assertFalse(tag0.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">~6Nb0})`N+R");
      boolean boolean0 = tag0.isSelfClosing();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">~6Nb0})`N+R");
      boolean boolean0 = tag0.isSelfClosing();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">~6Nb0})`N+R");
      boolean boolean0 = tag0.isSelfClosing();
      assertNotNull(tag0.getName());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">~6Nb0})`N+R");
      boolean boolean0 = tag0.isSelfClosing();
      assertTrue(tag0.isInline());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">~6Nb0})`N+R");
      boolean boolean0 = tag0.isSelfClosing();
      assertFalse(tag0.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Tag tag0 = Tag.valueOf("H1");
      boolean boolean0 = tag0.isSelfClosing();
      assertNotNull(tag0.toString());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Tag tag0 = Tag.valueOf("H1");
      boolean boolean0 = tag0.isSelfClosing();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Tag tag0 = Tag.valueOf("H1");
      boolean boolean0 = tag0.isSelfClosing();
      assertFalse(tag0.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Tag tag0 = Tag.valueOf("device");
      boolean boolean0 = tag0.isSelfClosing();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isInline();
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isInline();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isInline();
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isInline();
      assertNotNull(tag0.toString());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isInline();
      assertTrue(tag0.isFormListed());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isInline();
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isInline();
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Tag tag0 = Tag.valueOf("address");
      boolean boolean0 = tag0.isInline();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("p ", parseSettings0);
      assertNotNull(tag0.getName());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Tag tag0 = Tag.valueOf("device");
      Tag tag1 = tag0.setSelfClosing();
      assertFalse(tag1.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isFormSubmittable();
      assertTrue(tag0.isBlock());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isFormSubmittable();
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isFormSubmittable();
      assertFalse(tag0.isFormListed());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isFormSubmittable();
      assertTrue(tag0.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isFormSubmittable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isFormSubmittable();
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isFormSubmittable();
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Tag tag0 = Tag.valueOf("H1");
      boolean boolean0 = tag0.isBlock();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Tag tag0 = Tag.valueOf("H1");
      boolean boolean0 = tag0.isBlock();
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Tag tag0 = Tag.valueOf("device");
      boolean boolean0 = tag0.isFormListed();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.toString();
      assertFalse(tag0.isFormListed());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.toString();
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.toString();
      assertTrue(tag0.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.toString();
      assertTrue(tag0.isBlock());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.toString();
      assertTrue(tag0.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Tag tag0 = Tag.valueOf("z~WB/B@0A;Z");
      boolean boolean0 = tag0.formatAsBlock();
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Tag tag0 = Tag.valueOf("z~WB/B@0A;Z");
      boolean boolean0 = tag0.formatAsBlock();
      assertFalse(tag0.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Tag tag0 = Tag.valueOf("z~WB/B@0A;Z");
      boolean boolean0 = tag0.formatAsBlock();
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Tag tag0 = Tag.valueOf("z~WB/B@0A;Z");
      boolean boolean0 = tag0.formatAsBlock();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Tag tag0 = Tag.valueOf("z~WB/B@0A;Z");
      boolean boolean0 = tag0.formatAsBlock();
      assertFalse(tag0.isFormSubmittable());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Tag tag0 = Tag.valueOf("z~WB/B@0A;Z");
      boolean boolean0 = tag0.formatAsBlock();
      assertFalse(tag0.isBlock());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.preserveWhitespace();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.preserveWhitespace();
      assertTrue(tag0.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.preserveWhitespace();
      assertFalse(tag0.isFormSubmittable());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.preserveWhitespace();
      assertFalse(tag0.isFormListed());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.preserveWhitespace();
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      boolean boolean0 = tag0.preserveWhitespace();
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isEmpty();
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isEmpty();
      assertTrue(tag0.preserveWhitespace());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isEmpty();
      assertTrue(tag0.formatAsBlock());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isEmpty();
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isEmpty();
      assertTrue(tag0.isFormListed());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isEmpty();
      assertTrue(tag0.isInline());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isEmpty();
      assertFalse(tag0.isFormSubmittable());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("o_Clil3%-", parseSettings0);
      boolean boolean0 = tag0.isEmpty();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Tag tag0 = Tag.valueOf("H1");
      tag0.normalName();
      assertTrue(tag0.isBlock());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Tag tag0 = Tag.valueOf("H1");
      tag0.normalName();
      assertNotNull(tag0.toString());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.getName();
      assertTrue(tag0.isFormListed());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.getName();
      assertFalse(tag0.isFormSubmittable());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.getName();
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.getName();
      assertTrue(tag0.isSelfClosing());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.getName();
      assertTrue(tag0.isInline());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*m*jo]TZ10Z3^f'i{R", parseSettings0);
      tag0.getName();
      assertTrue(tag0.preserveWhitespace());
}
}
