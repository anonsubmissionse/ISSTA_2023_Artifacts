/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:33:59 GMT 2022
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.helper.Validate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Validate_ESTest extends Validate_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmptyParam("", "`@*LgJZe>{-]cWK%");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The '`@*LgJZe>{-]cWK%' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Validate.notEmptyParam("Must be false", "n*4wC:");
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((Object[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.noNullElements((Object[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Validate.ensureNotNull((Object) null, "\"\"1ghs1B:s|HK", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // \"\"1ghs1B:s|HK
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Validate.ensureNotNull((Object) null, "`%u", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'u'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "cOT)B";
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      Validate.noNullElements(objectArray0, "cOT)B");
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty("", "x-|4)f");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // x-|4)f
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Validate.notEmpty("cOT)B", "cOT)B");
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((String) null, "8HcALk\"r.n<c");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 8HcALk\"r.n<c
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmptyParam((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The 'null' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Validate.notEmpty("(Ee]bc!nGa_~X^T8");
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notEmpty((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "cOT)B";
      // Undeclared exception!
      try { 
        Validate.noNullElements(objectArray0, "cOT)B");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cOT)B
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Validate.noNullElements(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isFalse(true, "cOT)B");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cOT)B
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Validate.isFalse(false, "&lU");
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isFalse(true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Validate.isFalse(false);
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false, "org.jsoup.helper.ValidationException");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // org.jsoup.helper.ValidationException
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Validate.isTrue(true, "(Ee]bc!nGa_~X^T8");
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Validate.isTrue(true);
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        Validate.ensureNotNull((Object) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      Object object1 = Validate.ensureNotNull(object0, "cOT)B", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.ensureNotNull((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Validate.ensureNotNull(object0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null, "String must not be empty");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Validate.notNull((Object) "cOT)B", "cOT)B");
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notNullParam((Object) null, "Object must not be null");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'Object must not be null' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Validate.notNullParam("$b%&kPmU{Bfw%gXr3C", "");
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.notNull((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      Validate.notNull(object0);
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object[] objectArray0 = new Object[19];
      // Undeclared exception!
      try { 
        Validate.noNullElements(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.fail("org.jsoup.helper.ValidationException");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // org.jsoup.helper.ValidationException
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Validate.wtf("");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // 
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
