/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:37:00 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.Range;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      Range range0 = new Range(range_Position0, range_Position0);
      range0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      Range range0 = new Range(range_Position0, range_Position0);
      range0.hashCode();
      assertEquals(1, range_Position0.pos());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      Range range0 = new Range(range_Position0, range_Position0);
      range0.hashCode();
      assertEquals(1, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), 267);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.lineNumber());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), 267);
      boolean boolean0 = range_Position0.equals(range_Position1);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), 267);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.columnNumber());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), 267);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), 267);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.pos());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2163));
      Range.Position range_Position1 = new Range.Position((-2), (-2604), 31);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.lineNumber());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2163));
      Range.Position range_Position1 = new Range.Position((-2), (-2604), 31);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.pos());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2163));
      Range.Position range_Position1 = new Range.Position((-2), (-2604), 31);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.columnNumber());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2163));
      Range.Position range_Position1 = new Range.Position((-2), (-2604), 31);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((Range.Position) null, (Range.Position) null);
      Range.Position range_Position0 = range0.start();
      assertNotNull(range_Position0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.start();
      assertEquals(1, range_Position1.columnNumber());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.start();
      assertEquals(0, range_Position1.pos());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.start();
      assertEquals(0, range_Position1.lineNumber());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(229, 229, 31);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.start();
      assertEquals(1, range_Position1.pos());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(229, 229, 31);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.start();
      assertEquals(1, range_Position1.columnNumber());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(229, 229, 31);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.start();
      assertEquals(0, range_Position1.lineNumber());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("jsoup.sourceRange", ">m/&p");
      range0.track(document0, false);
      assertEquals(0, range_Position0.lineNumber());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("jsoup.sourceRange", ">m/&p");
      range0.track(document0, false);
      assertEquals(1, range_Position0.pos());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("jsoup.sourceRange", ">m/&p");
      range0.track(document0, false);
      assertEquals(1, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("jsoup.sourceRange", ">m/&p");
      range0.track(document0, false);
      Range range1 = Range.of(document0, false);
      assertTrue(range1.isTracked());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range((Range.Position) null, (Range.Position) null);
      Range.Position range_Position0 = range0.end();
      assertNotNull(range_Position0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.end();
      assertEquals(0, range_Position1.lineNumber());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.end();
      assertEquals(1, range_Position1.columnNumber());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.end();
      assertEquals(0, range_Position1.pos());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Parser.parse("QJ`ywNmvQbV", ",#QT6*0.Ogf)F+}AOzY");
      Range range0 = document0.endSourceRange();
      Range.Position range_Position0 = range0.end();
      assertEquals(0, range_Position0.pos());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      // Undeclared exception!
      try { 
        range0.track((Node) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Range", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range range0 = cDataNode0.sourceRange();
      Object object0 = new Object();
      cDataNode0.value = object0;
      // Undeclared exception!
      try { 
        range0.track(cDataNode0, false);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Node) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Range", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range range0 = Range.of(cDataNode0, true);
      cDataNode0.value = (Object) range0;
      // Undeclared exception!
      try { 
        Range.of(cDataNode0, true);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Range cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range((Range.Position) null, (Range.Position) null);
      // Undeclared exception!
      try { 
        range0.hashCode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Range", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range((Range.Position) null, range_Position0);
      Range range1 = new Range(range_Position0, range_Position0);
      // Undeclared exception!
      try { 
        range0.equals(range1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Range", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2163));
      Range.Position range_Position1 = new Range.Position((-1763), (-2604), 31);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.lineNumber());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2163));
      Range.Position range_Position1 = new Range.Position((-1763), (-2604), 31);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.columnNumber());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2163));
      Range.Position range_Position1 = new Range.Position((-1763), (-2604), 31);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.pos());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2163));
      Range.Position range_Position1 = new Range.Position((-1763), (-2604), 31);
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-1185));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.pos());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-1185));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-1185));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.lineNumber());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-1185));
      boolean boolean0 = range_Position0.equals(range_Position1);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-1185));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-1763));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-2));
      boolean boolean0 = range_Position0.equals(range_Position1);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-1763));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-2));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position0.lineNumber());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-1763));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-2));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-1763));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-2));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-2));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.lineNumber());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-2));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-2));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.columnNumber());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-2), (-2));
      Range.Position range_Position1 = new Range.Position((-2), (-2), (-2));
      boolean boolean0 = range_Position0.equals(range_Position1);
      assertEquals(0, range_Position1.pos());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      boolean boolean0 = range_Position0.equals(cDataNode0);
      assertEquals(0, range_Position0.pos());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      boolean boolean0 = range_Position0.equals(cDataNode0);
      assertEquals(0, range_Position0.lineNumber());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      boolean boolean0 = range_Position0.equals(cDataNode0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      boolean boolean0 = range_Position0.equals(cDataNode0);
      assertEquals(0, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(1, 1, 1);
      boolean boolean0 = range_Position0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(1, 1, 1);
      boolean boolean0 = range_Position0.equals((Object) null);
      assertEquals(1, range_Position0.lineNumber());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(1, 1, 1);
      boolean boolean0 = range_Position0.equals((Object) null);
      assertEquals(1, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(1, 1, 1);
      boolean boolean0 = range_Position0.equals((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-4065), (-4065), (-4065));
      boolean boolean0 = range_Position0.isTracked();
      assertEquals(0, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-4065), (-4065), (-4065));
      boolean boolean0 = range_Position0.isTracked();
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-4065), (-4065), (-4065));
      boolean boolean0 = range_Position0.isTracked();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-4065), (-4065), (-4065));
      boolean boolean0 = range_Position0.isTracked();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range range1 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range range1 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(0, range_Position0.pos());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range range1 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(0, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Range range1 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(0, range_Position0.lineNumber());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2932), 31, (-2932));
      Range range0 = new Range(range_Position0, range_Position0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertEquals(0, range_Position0.pos());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2932), 31, (-2932));
      Range range0 = new Range(range_Position0, range_Position0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertEquals(0, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2932), 31, (-2932));
      Range range0 = new Range(range_Position0, range_Position0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertEquals(0, range_Position0.lineNumber());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2932), 31, (-2932));
      Range range0 = new Range(range_Position0, range_Position0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals((Object) null);
      assertEquals(0, range_Position0.pos());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals((Object) null);
      assertEquals(0, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals((Object) null);
      assertEquals(0, range_Position0.lineNumber());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-4065,-4065:-4065");
      Range range0 = cDataNode0.sourceRange();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      Range range0 = Range.of(cDataNode0, true);
      Range range1 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      Range range0 = Range.of(cDataNode0, true);
      Range range1 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(0, range_Position0.lineNumber());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      Range range0 = Range.of(cDataNode0, true);
      Range range1 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(0, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      Range range0 = Range.of(cDataNode0, true);
      Range range1 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(0, range_Position0.pos());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("jsoup.sourceRange", ">m/&p");
      range0.track(document0, true);
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.isTracked();
      assertEquals(0, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.isTracked();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.isTracked();
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 0, 0);
      Range range0 = new Range(range_Position0, range_Position0);
      boolean boolean0 = range0.isTracked();
      assertEquals(0, range_Position0.lineNumber());
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-4065,-4065:-4065");
      Range range0 = cDataNode0.sourceRange();
      boolean boolean0 = range0.isTracked();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-4065,-4065:-4065");
      Range range0 = cDataNode0.sourceRange();
      Range.Position range_Position0 = range0.start();
      boolean boolean0 = range_Position0.isTracked();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-4065,-4065:-4065");
      Range range0 = cDataNode0.sourceRange();
      String string0 = range0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(68, 68, 68);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.end();
      assertEquals(1, range_Position1.columnNumber());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(68, 68, 68);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.end();
      assertEquals(0, range_Position1.lineNumber());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(68, 68, 68);
      Range range0 = new Range(range_Position0, range_Position0);
      Range.Position range_Position1 = range0.end();
      assertEquals(0, range_Position1.pos());
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(68, 68, 68);
      String string0 = range_Position0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      int int0 = range_Position0.lineNumber();
      assertEquals(0, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      int int0 = range_Position0.lineNumber();
      assertEquals(0, range_Position0.pos());
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(0, 102, (-2763));
      int int0 = range_Position0.lineNumber();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2133));
      int int0 = range_Position0.columnNumber();
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2133));
      int int0 = range_Position0.columnNumber();
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position((-2), (-1763), (-2133));
      int int0 = range_Position0.columnNumber();
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(68, 68, 68);
      int int0 = range_Position0.pos();
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(68, 68, 68);
      int int0 = range_Position0.pos();
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(68, 68, 68);
      int int0 = range_Position0.pos();
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(1, 1, 1);
      Range range0 = new Range(range_Position0, range_Position0);
      range0.hashCode();
      assertEquals(1, range_Position0.lineNumber());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(1, 1, 1);
      Range range0 = new Range(range_Position0, range_Position0);
      range0.hashCode();
      assertEquals(1, range_Position0.columnNumber());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Position range_Position0 = new Range.Position(1, 1, 1);
      Range range0 = new Range(range_Position0, range_Position0);
      range0.hashCode();
      assertEquals(1, range_Position0.pos());
}
}
