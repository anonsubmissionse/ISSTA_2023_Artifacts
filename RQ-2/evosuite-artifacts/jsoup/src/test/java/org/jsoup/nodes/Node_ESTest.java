/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 06 15:08:21 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.CookieStore;
import java.net.Proxy;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.eclipse.jetty.io.ByteBufferPool;
import org.eclipse.jetty.io.LeakTrackingByteBufferPool;
import org.eclipse.jetty.io.MappedByteBufferPool;
import org.eclipse.jetty.util.HttpCookieStore;
import org.eclipse.jetty.util.RegexSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.LeafNode;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null);
      // Undeclared exception!
      try { 
        textNode0.outerHtml();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Document document0 = new Document("$F-[_Pi@ x169`5B");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode("$F-[_Pi@ x169`5B");
      document0.nodelistChanged();
      cDataNode0.attr("", "$F-[_Pi@ x169`5B");
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      element0.replaceWith(cDataNode0);
      synchronousQueue0.forEach(consumer0);
      Element element1 = (Element)element0.wrap("u'dc2zORfEDMj`,v?5");
      element1.prependChild(element0);
      // Undeclared exception!
      try { 
        document0.closest("");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      DataNode dataNode2 = dataNode1.setWholeData("abs:");
      dataNode2.attributesSize();
      dataNode2.hasSameValue(dataNode0);
      dataNode2.reparentChild(dataNode0);
      dataNode2.firstChild();
      dataNode1.attributesSize();
      // Undeclared exception!
      dataNode2.wrap("jsoupContextSource");
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("abs:publicId", "abs:publicId");
      CDataNode cDataNode0 = new CDataNode("abs:publicId");
      Document document1 = (Document)document0.doClone(cDataNode0);
      document1.hasAttr("abs:publicId");
      Document document2 = new Document("abs:publicId");
      document0.getElementsByAttributeValueStarting("abg:pzbSsKey", "abs:publicId");
      document1.getElementsByAttributeValueStarting("Ij2sZhw,", "Ij2sZhw,");
      document2.getElementsByAttributeValueMatching("Ij2sZhw,", "STAR");
      Tag tag0 = Tag.valueOf("[DX{;yzO*ZNeRZdNdN");
      Attributes attributes0 = document2.attributes;
      Attributes attributes1 = attributes0.put("abg:pzbSsKey", false);
      FormElement formElement0 = new FormElement(tag0, "abs:publicId", attributes1);
      cDataNode0.hasSameValue((Object) null);
      document0.getElementsByAttributeValueNot("abg:pzbSsKey", "[DX{;yzO*ZNeRZdNdN");
      formElement0.isBlock();
      // Undeclared exception!
      try { 
        document1.parent();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = "abs:action";
      Comment comment0 = new Comment("abs:action");
      Comment comment1 = comment0.clone();
      String string1 = ">Twv9$";
      Comment comment2 = comment1.setData(">Twv9$");
      comment2.value = (Object) comment1;
      OutputStream outputStream0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        comment0.hasSameValue(comment1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Comment cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("abs:", "abs:");
      LinkedTransferQueue<Comment> linkedTransferQueue0 = new LinkedTransferQueue<Comment>();
      document0.firstChild();
      Element element0 = document0.append("abs:");
      Element element1 = element0.clone();
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element2 = document0.traverse(nodeVisitor0);
      Element element3 = element2.removeClass("WzW8#Htfj:>");
      element2.getElementsByAttributeValueStarting("abs:", "abs:");
      element2.endSourceRange();
      element2.firstChild();
      element1.closest((Evaluator) evaluator_MatchText0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("abs:", false);
      document0.outputSettings();
      element1.dataNodes();
      DataNode dataNode0 = new DataNode("pe:e");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JMW)]oL.");
      dataNode0.outerHtmlTail(mockPrintWriter0, 0, (Document.OutputSettings) null);
      element3.equals(element0);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("abx:", "abx:");
      Element element0 = document0.clearAttributes();
      document0.hasAttr("<T#L|9*a#=");
      document0.removeAttr("abx:");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      element0.filter(nodeFilter0);
      // Undeclared exception!
      try { 
        element0.closest(" qe4CWcXD5Kg(:");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'qe4CWcXD5Kg(:': unexpected token at '(:'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dataNode0.hasSameValue(dataNode0);
      dataNode0.reparentChild(dataNode0);
      dataNode0.firstChild();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:", false);
      dataNode0.attributesSize();
      xmlDeclaration0.name();
      // Undeclared exception!
      dataNode0.doClone((Node) null);
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZS{}(UiZ1O|miNG");
      Document document0 = Parser.parseBodyFragment("3h9'2=f`{NWF*5@F", "ZS{}(UiZ1O|miNG");
      Element element0 = document0.addClass("3h9'2=f`{NWF*5@F");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      element0.parents();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comment comment0 = new Comment("M#L=@;{}3@M8?U");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "M#L=@;{}3@M8?U");
      int int0 = 2;
      element0.getElementsByClass("*");
      CharBuffer.allocate(2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      // Undeclared exception!
      try { 
        comment0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String string0 = "abs:";
      DataNode dataNode0 = new DataNode("abs:");
      String string1 = "5Z^t` o#zya";
      DataNode dataNode1 = dataNode0.setWholeData("5Z^t` o#zya");
      dataNode1.reparentChild(dataNode0);
      // Undeclared exception!
      dataNode0.outerHtml();
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("abs:publicId", "abs:publicId");
      TextNode textNode0 = TextNode.createFromEncoded("abs:publicId");
      Element element0 = document0.doClone(textNode0);
      element0.hasAttr("abs:publicId");
      Element element1 = document0.prependText("abs:publicId");
      document0.getElementsByAttributeValueStarting("abg:pzbSsKey", "abs:publicId");
      element0.getElementsByAttributeValueStarting("Ij2sZhw,", "Ij2sZhw,");
      element0.previousSibling();
      Tag tag0 = Tag.valueOf("[DX{;yzO*ZNeRZdNdN");
      document0.toggleClass("{Z]{M");
      tag0.getName();
      Attributes attributes0 = element1.attributes;
      Attributes attributes1 = attributes0.put("abg:pzbSsKey", false);
      element0.parentNode();
      FormElement formElement0 = new FormElement(tag0, "abs:publicId", attributes1);
      document0.getElementsByAttributeValueNot("abg:pzbSsKey", "[DX{;yzO*ZNeRZdNdN");
      // Undeclared exception!
      try { 
        formElement0.removeChild(element1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x)(9`5 ");
      CDataNode cDataNode1 = (CDataNode)cDataNode0.wrap("$F-Pi@ x)(9`5 ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = new Document("$F-Pi@ x)(9`5 ");
      Element element0 = document0.body();
      CDataNode cDataNode2 = (CDataNode)cDataNode0.doClone(element0);
      cDataNode2.wrap("$F-Pi@ x)(9`5 ");
      cDataNode1.childNodesAsArray();
      document0.nodelistChanged();
      cDataNode2.attr("$F-Pi@ x)(9`5 ", "$F-Pi@ x)(9`5 ");
      document0.outerHtml();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.normalise();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      HttpConnection httpConnection0 = new HttpConnection();
      document0.nextElementSiblings();
      element0.wrap("u'dc2zORfEDMj`,v?5");
      org.jsoup.helper.Consumer<Object> consumer0 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      Parser.parseBodyFragment("<html>\n <body></body>\n</html>", "multipart/form-data");
      cDataNode1.previousSibling();
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x)(9`5 ");
      CDataNode cDataNode1 = (CDataNode)cDataNode0.wrap("$F-Pi@ x)(9`5 ");
      Document document0 = new Document("$F-Pi@ x)(9`5 ");
      Element element0 = document0.body();
      CDataNode cDataNode2 = (CDataNode)cDataNode0.doClone(element0);
      cDataNode1.childNodesAsArray();
      document0.nodelistChanged();
      CDataNode cDataNode3 = (CDataNode)cDataNode2.attr("", "$F-Pi@ x)(9`5 ");
      document0.outerHtml();
      document0.normalise();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      HttpConnection httpConnection0 = new HttpConnection();
      document0.nextElementSiblings();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      element0.wrap("u'dc2zORfEDMj`,v?5");
      org.jsoup.helper.Consumer<Object> consumer0 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      Parser.parseBodyFragment("<html>\n <body></body>\n</html>", "multipart/form-data");
      cDataNode1.previousSibling();
      // Undeclared exception!
      try { 
        cDataNode3.before((Node) cDataNode2);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Parser.parse("^tEk", "^tEk");
      Element element0 = document0.appendElement("^tEk");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Document document1 = (Document)document0.val("7P0qXY[bT:%i`k[!");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9=eo7");
      document1.toString();
      Document document2 = (Document)document1.root();
      document1.getElementsByAttributeValueMatching("7P0qXY[bT:%i`k[!", "^tEk");
      Document document3 = document0.normalise();
      document3.previousSibling();
      document1.getElementsByTag("Lk5");
      element0.childNodeSize();
      document3.getElementsByAttributeValueStarting("Lk5", "lBw:sP'8%)_0cv");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("7P0qXY[bT:%i`k[!", false);
      MockFile mockFile0 = new MockFile("abs:/jsoup.sourceRange");
      Element element1 = document2.appendElement("org.jsoup.helper.DataUtil");
      element0.after((Node) element1);
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x)(9`5 ");
      CDataNode cDataNode1 = (CDataNode)cDataNode0.wrap("$F-Pi@ x)(9`5 ");
      Document document0 = new Document("$F-Pi@ x)(9`5 ");
      Element element0 = document0.body();
      CDataNode cDataNode2 = (CDataNode)cDataNode0.doClone(element0);
      cDataNode1.childNodesAsArray();
      document0.nodelistChanged();
      CDataNode cDataNode3 = (CDataNode)cDataNode2.attr("", "$F-Pi@ x)(9`5 ");
      document0.outerHtml();
      Document document1 = document0.normalise();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      HttpConnection httpConnection0 = new HttpConnection();
      document0.nextElementSiblings();
      element0.wrap("u'dc2zORfEDMj`,v?5");
      org.jsoup.helper.Consumer<Object> consumer0 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      Document document2 = Parser.parseBodyFragment("<html>\n <body></body>\n</html>", "multipart/form-data");
      cDataNode1.previousSibling();
      document2.nodeName();
      cDataNode3.hasParent();
      Tag tag0 = document2.tag();
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ";y*TzW*[[Mf", attributes0);
      FormElement formElement1 = formElement0.clone();
      FormElement formElement2 = formElement1.addElement(document1);
      Document document3 = Document.createShell("multipart/form-data");
      formElement2.addElement(document3);
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "abx:";
      Document document0 = Parser.parseBodyFragment("abx:", "abx:");
      Element element0 = document0.clearAttributes();
      Element element1 = document0.removeAttr("abx:");
      element1.attr("abx:");
      Comment comment0 = new Comment("");
      Comment comment1 = comment0.clone();
      Comment comment2 = comment1.setData("abs:");
      XmlDeclaration xmlDeclaration0 = comment2.asXmlDeclaration();
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      xmlDeclaration1.clone();
      // Undeclared exception!
      try { 
        element0.closest(" qe4CWcXD5Kg(:");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'qe4CWcXD5Kg(:': unexpected token at '(:'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-[_Pi@ x169`5B");
      Document document0 = new Document("$F-[_Pi@ x169`5B");
      Element element0 = document0.body();
      CDataNode cDataNode1 = new CDataNode("$F-[_Pi@ x169`5B");
      document0.nodelistChanged();
      cDataNode1.attr("", "$F-[_Pi@ x169`5B");
      document0.outerHtml();
      document0.normalise();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      synchronousQueue0.forEach(consumer0);
      document0.addClass("$F-[_Pi@ x169`5B");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult1, nodeFilter_FilterResult2, nodeFilter_FilterResult2).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      Element element1 = (Element)element0.wrap("u'dc2zORfEDMj`,v?5");
      Element element2 = element1.prependChild(element0);
      // Undeclared exception!
      element2.toString();
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "abs:publicId";
      Document document0 = parser0.parseInput("abs:publicId", "abs:publicId");
      TextNode textNode0 = TextNode.createFromEncoded("abs:publicId");
      Document document1 = (Document)document0.doClone(textNode0);
      document1.hasAttr("abs:publicId");
      document0.prependText("abs:publicId");
      String string1 = "abg:pzbSsKey";
      // Undeclared exception!
      try { 
        document1.setParentNode(textNode0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "abs:publicId";
      Document document0 = parser0.parseInput("abs:publicId", "abs:publicId");
      TextNode textNode0 = TextNode.createFromEncoded("abs:publicId");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CDataNode cDataNode0 = new CDataNode("org.eclipse.jetty.io.ByteBufferPool$Bucket");
      Document document0 = Parser.parse("org.eclipse.jetty.io.ByteBufferPool$Bucket", "org.eclipse.jetty.io.ByteBufferPool$Bucket");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Element element0 = document0.firstElementSibling();
      cDataNode0.sourceRange();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document1.filter(nodeFilter0);
      document1.setParentNode(cDataNode0);
      element0.getElementsByTag("org.jsoup.nodes.Node");
      Document document2 = Parser.parseBodyFragment("&u_0YCL&+ooWCR", "abs:publicId");
      // Undeclared exception!
      try { 
        cDataNode0.replaceChild(document1, document2);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Node node0 = comment0.wrap("abs:class");
      node0.before((Node) comment0);
      comment0.clearAttributes();
      comment0.toString();
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("dM;Nx%+X^5");
      Pattern pattern0 = Pattern.compile("OE-;lm!w|1h", (-176673020));
      pattern0.asPredicate();
      document0.getElementsMatchingText(pattern0);
      MockFile mockFile0 = new MockFile("abs:", "dM;Nx%+X^5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.html(mockPrintWriter0);
      document0.val();
      Comment comment0 = new Comment((String) null);
      Comment comment1 = comment0.clone();
      comment1.setData("");
      CDataNode cDataNode0 = new CDataNode(">(r:U");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.shallowClone();
      cDataNode1.getWholeText();
      comment0.hasParent();
      comment1.doClone(document0);
      document0.charset();
      document0.getElementById(" size=");
      document0.ownerDocument();
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x)(9`5 ");
      CDataNode cDataNode1 = (CDataNode)cDataNode0.wrap("U6BguuTyOSVIH}8r{E,");
      Document document0 = new Document("$F-Pi@ x)(9`5 ");
      document0.nodelistChanged();
      String string0 = "";
      CDataNode cDataNode2 = cDataNode1.clone();
      cDataNode1.value = (Object) cDataNode2;
      // Undeclared exception!
      try { 
        cDataNode0.attr("", "$F-Pi@ x)(9`5 ");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "#text";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#text", true);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) xmlDeclaration0;
      nodeArray0[1] = (Node) xmlDeclaration0;
      nodeArray0[0].setParentNode(nodeArray0[0]);
      nodeArray0[2] = (Node) xmlDeclaration0;
      nodeArray0[3] = (Node) xmlDeclaration0;
      nodeArray0[2].hasAttr("#text");
      // Undeclared exception!
      try { 
        nodeArray0[0].remove();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("dM;Nx%+X^5");
      Pattern pattern0 = Pattern.compile("OE-;lm!w|1h", (-176673020));
      pattern0.asPredicate();
      document0.getElementsMatchingText(pattern0);
      MockFile mockFile0 = new MockFile("abs:", "dM;Nx%+X^5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.html(mockPrintWriter0);
      document0.val();
      Comment comment0 = new Comment((String) null);
      Comment comment1 = comment0.setData("abs:pubSysKey");
      Comment comment2 = comment1.clone();
      comment2.setData("");
      CDataNode cDataNode0 = new CDataNode(">(r:U");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode0.coreValue();
      cDataNode1.shallowClone();
      cDataNode1.getWholeText();
      comment0.hasParent();
      Node node0 = comment2.doClone(document0);
      document0.charset();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        node0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "abs:";
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      DataNode dataNode2 = dataNode1.setWholeData("abs:");
      dataNode2.attributesSize();
      dataNode2.hasSameValue(dataNode0);
      dataNode2.reparentChild(dataNode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      dataNode2.firstChild();
      boolean boolean0 = true;
      // Undeclared exception!
      dataNode1.parentNode.clone();
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      DataNode dataNode2 = dataNode1.setWholeData("abs:");
      dataNode2.attributesSize();
      dataNode2.reparentChild(dataNode0);
      dataNode2.firstChild();
      // Undeclared exception!
      dataNode1.parentNode.attr("abs:", "abs:");
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      DataNode dataNode2 = dataNode1.setWholeData("abs:");
      dataNode2.attributesSize();
      dataNode2.hasSameValue(dataNode0);
      dataNode2.reparentChild(dataNode0);
      dataNode2.firstChild();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:", true);
      dataNode1.attributesSize();
      xmlDeclaration0.name();
      xmlDeclaration0.getWholeDeclaration();
      // Undeclared exception!
      dataNode1.parentNode.ownerDocument();
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e9q9a#+z<xRuXo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e9q9a#+z<xRuXo");
      Document document0 = Document.createShell("Ja3:i?k*DqeLdxfI");
      Element element0 = document0.lastElementChild();
      document0.getElementsByIndexLessThan((-1599));
      String string0 = " ";
      Element element1 = (Element)element0.before(" ");
      element1.setSiblingIndex((-1599));
      element1.nodeName();
      String string1 = "[i05dH\\2C#(";
      Document document1 = (Document)document0.prependText("[i05dH\u0002C#(");
      String string2 = null;
      document1.previousSibling();
      // Undeclared exception!
      try { 
        element0.id((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x)(9`5 ");
      Node node0 = cDataNode0.wrap("U6BguuTyOSVIH}8r{E,");
      Document document0 = new Document("$F-Pi@ x)(9`5 ");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      String string0 = "";
      leafNode0.attr("", "$F-Pi@ x)(9`5 ");
      document0.outerHtml();
      document0.normalise();
      element0.setParentNode(node0);
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      HttpConnection httpConnection1 = new HttpConnection();
      // Undeclared exception!
      try { 
        element0.wrap("u'dc2zORfEDMj`,v?5");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("p$");
      Parser.xmlParser();
      RegexSet regexSet0 = new RegexSet();
      document0.classNames((Set<String>) regexSet0);
      document0.equals("abs:abs:");
      CDataNode cDataNode0 = new CDataNode("abs:abs:");
      Parser.parse("P0o LKmS _K0HzN!@", "p$");
      TextNode textNode0 = cDataNode0.text("abs:abs:");
      textNode0.toString();
      // Undeclared exception!
      try { 
        cDataNode0.html((BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.CDataNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#doctype");
      Document document0 = Document.createShell("odd");
      document0.getElementsByAttributeValueStarting("BLp$", "abs:");
      Element element0 = (Element)document0.lastChild();
      element0.before("docmnt");
      document0.removeChild(element0);
      DataNode dataNode0 = new DataNode("'6YBFUgv");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      dataNode0.siblingNodes();
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      timeUnit0.convert(791L, timeUnit1);
      dataNode0.hasSameValue(timeUnit0);
      dataNode0.getWholeData();
      element0.empty();
      String string0 = "B";
      String string1 = "|i#/;ynv21J";
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = '-';
      charArray0[2] = ':';
      charArray0[3] = 'L';
      charArray0[4] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1);
      // Undeclared exception!
      try { 
        document0.outerHtml((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "abs:";
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      String string1 = "5Z^t` o#zya";
      DataNode dataNode2 = dataNode1.setWholeData("5Z^t` o#zya");
      // Undeclared exception!
      try { 
        dataNode2.before("abs:");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "abs:";
      DataNode dataNode0 = new DataNode("abs:");
      String string1 = "5Z^t` o#zya";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataNode dataNode1 = dataNode0.setWholeData("5Z^t` o#zya");
      dataNode1.attributesSize();
      dataNode1.hasSameValue(dataNode0);
      dataNode1.reparentChild(dataNode0);
      // Undeclared exception!
      try { 
        dataNode0.after((Node) dataNode1);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      DocumentType documentType0 = new DocumentType("", "", "^4i$/Wls]V8m/xtw2'_");
      documentType0.value = null;
      documentType0.lastChild();
      documentType0.clone();
      documentType0.setPubSysKey("BzRB~4");
      Parser.xmlParser();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-3335));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("abs:publicId", "yNE_k");
      TextNode textNode0 = TextNode.createFromEncoded("");
      textNode0.value = (Object) "abs:publicId";
      Document document1 = (Document)document0.doClone(textNode0);
      document0.isBlock();
      document0.prependText("abs:publicId");
      document0.getElementsByAttributeValueStarting("abs:pubSysKey", "abs:publicId");
      Element element0 = new Element("jetty-logging-");
      // Undeclared exception!
      try { 
        document1.before((Node) element0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "abs:";
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.setWholeData("abs:");
      dataNode1.parentNode = (Node) dataNode0;
      String string1 = "5Z^t` o#zya";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataNode dataNode2 = dataNode1.setWholeData("5Z^t` o#zya");
      dataNode2.attributesSize();
      dataNode2.hasSameValue(dataNode0);
      // Undeclared exception!
      try { 
        dataNode2.replaceWith(dataNode1.parentNode);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":{aQ{A>`e!");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      Element element1 = element0.clearAttributes();
      leafNode0.shallowClone();
      document0.nodelistChanged();
      leafNode0.nextSibling();
      cDataNode0.clone();
      document0.outerHtml();
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      Vector<Element> vector0 = new Vector<Element>();
      document0.body();
      HttpCookieStore httpCookieStore0 = new HttpCookieStore();
      httpConnection0.cookieStore((CookieStore) httpCookieStore0);
      DocumentType documentType0 = new DocumentType("ScriptDataEscaped", "", "Content-Type");
      documentType0.systemId();
      element0.remove();
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("#text");
      element1.is((Evaluator) evaluator_Tag0);
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Parser parser0 = Parser.xmlParser();
      String string0 = "abs:publicId";
      Document document0 = parser0.parseInput("abs:publicId", "yNE_k");
      TextNode textNode0 = TextNode.createFromEncoded("");
      Element element0 = document0.doClone(textNode0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      // Undeclared exception!
      try { 
        document0.addChildren(1950, nodeArray0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "Hb/E-\\+U-JrgT4M";
      Document document0 = new Document("Hb/E-+U-JrgT4M");
      String string1 = "#dec";
      Document document1 = Parser.parseBodyFragment("Hb/E-+U-JrgT4M", "#dec");
      String string2 = "`58w?^?Oj_0fLcEJ ?";
      document0.getElementsByAttributeValueNot("#dec", "#doc");
      Element element0 = document1.attr("Hb/E-+U-JrgT4M", "`58w?^?Oj_0fLcEJ ?");
      Document document2 = (Document)document0.appendTo(element0);
      document2.empty();
      Document document3 = (Document)document2.clearAttributes();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document3.traverse(nodeVisitor0);
      // Undeclared exception!
      try { 
        document1.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x)(9`5 ");
      Node node0 = cDataNode0.wrap("U6BguuTyOSVIH}8r{E,");
      Document document0 = new Document("$F-Pi@ x)(9`5 ");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      leafNode0.attr("", "$F-Pi@ x)(9`5 ");
      document0.outerHtml();
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      synchronousQueue0.forEach(consumer0);
      HttpConnection httpConnection1 = new HttpConnection();
      element0.wrap("u'dc2zORfEDMj`,v?5");
      node0.siblingNodes();
      org.jsoup.helper.Consumer<Object> consumer1 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      Parser.parseBodyFragment("<html>\n <body></body>\n</html>", "multipart/form-data");
      node0.previousSibling();
      element0.prepend("application/x-www-form-urlencoded");
      // Undeclared exception!
      try { 
        document0.insertChildren((-305024715), (Collection<? extends Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "abs:";
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.setWholeData("abs:");
      dataNode1.parentNode = (Node) dataNode0;
      String string1 = "5Z^t` o#zya";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataNode dataNode2 = new DataNode("5Z^t` o#zya");
      dataNode2.attributesSize();
      // Undeclared exception!
      dataNode2.hasSameValue(dataNode0);
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comment comment0 = new Comment("2J");
      Comment comment1 = comment0.clone();
      org.jsoup.helper.Consumer<Object> consumer0 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      comment1.forEachNode(consumer0);
      Comment comment2 = comment1.setData("");
      comment2.clone();
      String string0 = "#";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#");
      Pattern pattern0 = Pattern.compile("org.jsu.parser.Token$ndTag", 1973234167);
      Pattern.compile("abs:");
      Document document0 = Document.createShell("abs:");
      document0.prependChild(comment1);
      pattern0.split((CharSequence) "", 1973234167);
      pattern0.matcher("");
      comment2.unwrap();
      Document.createShell("");
      Tag.valueOf("4HggCH-x");
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "abs:org.jsoup.select.evaluator$islastoftype");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.shallowClone();
      Document document2 = (Document)document1.appendText("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+^}tQ`#Q/)wQ?|>{*");
      document2.elementSiblingIndex();
      document2.childNode(0);
      document0.absUrl("5{Bw3h.<;=-");
      Document document3 = (Document)document2.wrap("#9Cj?o_V");
      // Undeclared exception!
      try { 
        document2.replaceChild(document0, document3);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      synchronousQueue0.forEach(consumer0);
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      Document document1 = document0.connection(connection0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult1, nodeFilter_FilterResult2, nodeFilter_FilterResult2).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      Element element1 = (Element)element0.wrap("u'dc2zORfEDMj`,v?5");
      document1.normalise();
      element1.prependChild(element0);
      // Undeclared exception!
      element1.wrap("u'dc2zORfEDMj`,v?5");
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8#DHS[ADP 3", "8#DHS[ADP 3");
      Element element0 = document0.firstElementChild();
      Element element1 = element0.appendTo(document0);
      Element element2 = document0.firstElementSibling();
      element0.after((Node) element2);
      element1.removeAttr("8#DHS[ADP 3");
      Comment comment0 = new Comment("8#DHS[ADP 3");
      Comment comment1 = comment0.setData("6+xec5T1 a}\"-p");
      Comment comment2 = comment1.clone();
      comment2.nodeName();
      element2.before((Node) comment2);
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":{aQ{A>`e!");
      Element element0 = document0.body();
      CDataNode cDataNode1 = (CDataNode)cDataNode0.doClone(element0);
      element0.clearAttributes();
      cDataNode1.shallowClone();
      cDataNode1.setSiblingIndex((-2118));
      document0.nodelistChanged();
      // Undeclared exception!
      try { 
        cDataNode1.nextSibling();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "abs:";
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      String string1 = "5Z^t` o#zya";
      DataNode dataNode2 = dataNode1.setWholeData("5Z^t` o#zya");
      dataNode2.attributesSize();
      dataNode2.hasSameValue(dataNode0);
      dataNode2.reparentChild(dataNode0);
      // Undeclared exception!
      dataNode2.shallowClone();
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      Document document1 = document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      synchronousQueue0.forEach(consumer0);
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      Document document2 = document0.connection(connection0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult1, nodeFilter_FilterResult2, nodeFilter_FilterResult2).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document3 = (Document)document0.filter(nodeFilter0);
      Element element1 = (Element)element0.wrap("u'dc2zORfEDMj`,v?5");
      document2.normalise();
      element1.prependChild(element0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(3665);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings3.indentAmount(2362);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.maxPaddingWidth(3665);
      document1.indent(mockPrintWriter0, 3665, document_OutputSettings4);
      document3.charset();
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Parser.htmlParser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Parser.parseBodyFragment("abs:|i#/;ynv21j", "jE5/B~pWZm`OJ`1WxE");
      Element element0 = document0.head();
      element0.clearAttributes();
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Document.createShell("odd");
      document0.hasText();
      document0.getElementsByAttributeValueStarting("p$", "abs:");
      Element element0 = (Element)document0.lastChild();
      Element element1 = element0.before(",mgIV~^Xs)',6Gj");
      document0.removeChild(element0);
      DataNode dataNode0 = new DataNode("'6YBFUgv");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      dataNode0.siblingNodes();
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      timeUnit0.convert(1195L, timeUnit1);
      dataNode0.hasSameValue(timeUnit0);
      dataNode0.getWholeData();
      document0.getElementsByAttribute("'6YBFUgv");
      document0.location();
      dataNode0.parent();
      element1.siblingNodes();
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "abs:";
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      String string1 = "5Z^t` o#zya";
      DataNode dataNode2 = dataNode1.setWholeData("5Z^t` o#zya");
      dataNode2.attributesSize();
      dataNode2.hasSameValue(dataNode0);
      dataNode2.reparentChild(dataNode0);
      dataNode2.firstChild();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:", true);
      // Undeclared exception!
      try { 
        xmlDeclaration0.replaceChild((Node) null, dataNode1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("[^tjIl?YL\"^.,^");
      document0.setSiblingIndex((-1089544134));
      Document document1 = Parser.parseBodyFragment("[^tjIl?YL\"^.,^", "[^tjIl?YL\"^.,^");
      document1.attributesSize();
      Element element0 = document1.prepend("[^tjIl?YL\"^.,^");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[2] = (Node) document1;
      nodeArray0[2].lastChild();
      List<Node> list0 = Node.EmptyNodes;
      element0.hasClass("[^tjIl?YL\"^.,^");
      Comment comment0 = new Comment("[^tjIl?YL\"^.,^");
      comment0.getData();
      nodeArray0[2].childNodesAsArray();
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("XGf:s4l^mt");
      Element element0 = document0.prependElement("org.jsoup.nodes.Node$OuterHtmlVisitor");
      document0.wholeText();
      element0.parent();
      document0.parser();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("b", (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comment comment0 = new Comment("[B");
      comment0.setSiblingIndex((-1448325374));
      Comment comment1 = comment0.setData("abs:DoctypePublicIdentifier_doubleQuoted");
      comment1.clearAttributes();
      comment1.clone();
      comment0.isXmlDeclaration();
      DocumentType documentType0 = new DocumentType("[B", "abs:p$", "abs:DoctypePublicIdentifier_doubleQuoted");
      documentType0.name();
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "org.eclipse.jetty.io.ByteBufferPool$Bucket";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CDataNode cDataNode0 = new CDataNode("org.eclipse.jetty.io.ByteBufferPool$Bucket");
      Document document0 = Document.createShell("org.eclipse.jetty.io.ByteBufferPool$Bucket");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.firstElementSibling();
      cDataNode0.sourceRange();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.REMOVE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Element element0 = document1.filter(nodeFilter0);
      document1.setParentNode(cDataNode0);
      element0.getElementsByAttributeValueNot("org.jsoup.nodes.Node", "abs:");
      element0.clone();
      // Undeclared exception!
      try { 
        document1.outerHtml();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Parser.parse("^tEk", "^tEk");
      Element element0 = document0.body();
      element0.siblingNodes();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Document document1 = (Document)document0.val("7P0qXY[bT:%i`k[!");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9=eo7");
      document1.toString();
      document1.root();
      document1.getElementsByAttributeValueMatching("7P0qXY[bT:%i`k[!", "^tEk");
      Document document2 = document0.normalise();
      document2.previousSibling();
      document1.getElementsByTag("Lk5");
      element0.childNodeSize();
      document2.getElementsByAttributeValueStarting("Lk5", "lBw:sP'8%)_0cv");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("7P0qXY[bT:%i`k[!", false);
      MockFile mockFile0 = new MockFile("abs:/jsoup.sourceRange");
      MockFile.createTempFile("9=eo7", "\"S", (File) mockFile0);
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "org.eclipse.jetty.io.ByteBufferPool$Bucket";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CDataNode cDataNode0 = new CDataNode("org.eclipse.jetty.io.ByteBufferPool$Bucket");
      Document document0 = Document.createShell("org.eclipse.jetty.io.ByteBufferPool$Bucket");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Element element0 = document0.firstElementSibling();
      cDataNode0.sourceRange();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      document1.filter(nodeFilter0);
      String string1 = "org.jsoup.nodes.Node";
      document1.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        cDataNode0.removeChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parse("? _", "abs:");
      Document document1 = parser0.parseInput("? _", "? _");
      Element element0 = document0.firstElementChild();
      element0.absUrl("org.eclipse.jetty.util.IncludeExcludeSet$SetContainsPredicate");
      DocumentType documentType0 = new DocumentType("", "", "`");
      documentType0.name();
      document1.wrap("f6m:kP0A,vdnD");
      element0.getElementById("^");
      Node[] nodeArray0 = new Node[0];
      document1.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueMatching("org.jsoup.nodes.Node$OuterHtmlVisitor", (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x)(9`5 ");
      Node node0 = cDataNode0.wrap("U6BguuTyOSVIH}8r{E,");
      Document document0 = new Document("$F-Pi@ x)(9`5 ");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      String string0 = "";
      leafNode0.attr("", "$F-Pi@ x)(9`5 ");
      document0.outerHtml();
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      synchronousQueue0.forEach(consumer0);
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      document0.connection(connection0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      element0.wrap("u'dc2zORfEDMj`,v?5");
      org.jsoup.helper.Consumer<Object> consumer1 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      Parser.parseBodyFragment("<html>\n <body></body>\n</html>", "multipart/form-data");
      node0.previousSibling();
      // Undeclared exception!
      try { 
        document0.insertChildren((-305024715), (Collection<? extends Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = null;
      DataNode dataNode0 = new DataNode((String) null);
      // Undeclared exception!
      try { 
        dataNode0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "[^tjIl?YL\"^.,^";
      Document document0 = new Document("[^tjIl?YL\"^.,^");
      document0.attributesSize();
      HashSet<String> hashSet0 = new HashSet<String>(1);
      Document document1 = (Document)document0.prepend("[^tjIl?YL\"^.,^");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document1.addChildren(402, nodeArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      String string0 = "5Z^t` o#zya";
      DataNode dataNode2 = dataNode1.setWholeData("5Z^t` o#zya");
      dataNode2.attributesSize();
      dataNode2.hasSameValue(dataNode0);
      dataNode2.reparentChild(dataNode0);
      dataNode2.firstChild();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:", true);
      // Undeclared exception!
      dataNode2.before("5Z^t` o#zya");
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "abs:";
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      String string1 = "5Z^t` o#zya";
      DataNode dataNode2 = dataNode1.setWholeData("5Z^t` o#zya");
      dataNode2.attributesSize();
      dataNode2.hasSameValue(dataNode0);
      // Undeclared exception!
      try { 
        dataNode1.reparentChild(dataNode2);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":{aQ{A>`e!");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      leafNode0.shallowClone();
      document0.nodelistChanged();
      leafNode0.nextSibling();
      cDataNode0.clone();
      document0.outerHtml();
      Document document1 = document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      Vector<Element> vector0 = new Vector<Element>();
      document0.body();
      HttpCookieStore httpCookieStore0 = new HttpCookieStore();
      httpConnection0.cookieStore((CookieStore) httpCookieStore0);
      DocumentType documentType0 = new DocumentType("ScriptDataEscaped", "", "Content-Type");
      documentType0.systemId();
      element0.before((Node) document1);
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.shallowClone();
      Document document2 = (Document)document1.appendText("");
      document2.elementSiblingIndex();
      document0.appendTo(document1);
      Document document3 = (Document)document2.wrap("#9Cj?o_V");
      document3.updateMetaCharsetElement();
      document2.replaceChild(document0, document3);
      // Undeclared exception!
      document2.root();
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":{aQ{A>`e!");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      element0.tagName("$F-Pi@ x169`5B");
      element0.setSiblingIndex(1782);
      leafNode0.shallowClone();
      document0.nodelistChanged();
      leafNode0.nextSibling();
      String string0 = "";
      cDataNode0.clone();
      // Undeclared exception!
      try { 
        document0.outerHtml();
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1781, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      Document document1 = document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      synchronousQueue0.forEach(consumer0);
      httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      Document document2 = document1.normalise();
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.REMOVE;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult1, nodeFilter_FilterResult2, nodeFilter_FilterResult2).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      Element element1 = (Element)element0.wrap("u'dc2zORfEDMj`,v?5");
      document2.normalise();
      element1.prependChild(element0);
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#data", "#data");
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.maxBodySize(27);
      Document document1 = document0.connection(connection0);
      ArrayDeque<DocumentType> arrayDeque0 = new ArrayDeque<DocumentType>();
      Proxy proxy0 = Proxy.NO_PROXY;
      httpConnection0.proxy(proxy0);
      Element element0 = document1.appendChildren(arrayDeque0);
      Node node0 = element0.lastChild();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = node0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = node0;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document0;
      document1.addChildren(nodeArray0);
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "$F-Pi@ x169`5B";
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      // Undeclared exception!
      try { 
        leafNode0.siblingNodes();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      httpConnection0.followRedirects(true);
      synchronousQueue0.forEach(consumer0);
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      Document document1 = document0.connection(connection0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      document1.normalise();
      element0.wrap("u'dc2zORfEDMj`,v?5");
      org.jsoup.helper.Consumer<Object> consumer1 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      document1.forEach(consumer1);
      // Undeclared exception!
      try { 
        leafNode0.replaceWith(cDataNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      Comment comment1 = comment0.clone();
      comment1.outerHtml();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-16);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      comment1.nextSibling();
      comment1.wrap("plaintext");
      comment1.setData("u)8mC><8s[wT&q%p");
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("");
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-2039));
      document0.is((Evaluator) evaluator_IndexGreaterThan0);
      Document document1 = document0.shallowClone();
      document1.baseUri();
      Document document2 = (Document)document1.appendText("");
      document2.elementSiblingIndex();
      document1.toString();
      document0.absUrl("5{Bw3h.<;=-");
      Document document3 = (Document)document2.wrap("#9Cj?o_V");
      // Undeclared exception!
      try { 
        document2.replaceChild(document0, document3);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = new Document("org.jsoup.select.Evaluator$TagEndsWith");
      document0.removeClass("org.jsoup.internal.StringUtil");
      String string0 = null;
      // Undeclared exception!
      try { 
        document0.attr((String) null, "org.jsoup.select.Evaluator$TagEndsWith");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#doctype");
      Document document0 = Document.createShell("oD");
      String string0 = "abs:";
      document0.hasText();
      document0.getElementsByAttributeValueStarting("#doctype", "abs:");
      Element element0 = document0.removeAttr("#cdata");
      element0.previousElementSibling();
      // Undeclared exception!
      try { 
        document0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#doctype");
      Document document0 = Document.createShell("odd");
      document0.hasText();
      document0.getElementsByAttributeValueStarting("p$", "abs:");
      document0.removeAttr("#cdata");
      Node node0 = document0.lastChild();
      node0.previousSibling();
      document0.removeChild(node0);
      DataNode dataNode0 = new DataNode("abs:");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      timeUnit0.convert(815L, timeUnit1);
      dataNode0.hasSameValue(timeUnit0);
      dataNode0.getWholeData();
      document0.getElementsByAttributeValueContaining("B", "|i#/;ynv21J");
      document0.location();
      Document.createShell("org.jsoup.parser.Token$Doctype");
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      DataNode dataNode2 = dataNode1.setWholeData("5Z^t` o#zya");
      dataNode2.attributesSize();
      dataNode2.reparentChild(dataNode0);
      dataNode2.firstChild();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "abs:");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:", true);
      xmlDeclaration0.name();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{C*0'0#<ml[", "5Z^t` o#zya");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      dataNode2.filter(nodeFilter0);
      Element element0 = document0.attr("lEIL^W5i$j+i+6", "jsoupContextSource");
      Elements elements0 = element0.getElementsByIndexGreaterThan(0);
      element0.prependChildren(elements0);
      element0.attr("5Z^t` o#zya", "WdFyNDKTg");
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      DataNode dataNode2 = dataNode1.setWholeData("5Z^t` o#zya");
      dataNode2.attributesSize();
      dataNode2.reparentChild(dataNode0);
      dataNode2.firstChild();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:", true);
      xmlDeclaration0.name();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{C*0'0#<ml[", "5Z^t` o#zya");
      Element element0 = document0.attr("lEIL^W5i$j+i+6", "jsoupContextSource");
      Elements elements0 = element0.getElementsByIndexGreaterThan(0);
      element0.prependChildren(elements0);
      dataNode1.parentNode.removeAttr("{C*0'0#<ml[");
      element0.attr("5Z^t` o#zya", "WdFyNDKTg");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(true);
      document0.outputSettings(document_OutputSettings4);
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      DataNode dataNode2 = dataNode1.setWholeData("5Z^t` o#zya");
      dataNode2.attributesSize();
      dataNode2.hasSameValue(dataNode0);
      dataNode2.reparentChild(dataNode0);
      dataNode2.firstChild();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:", true);
      dataNode1.attributesSize();
      xmlDeclaration0.name();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{C*0'0#<ml[", "5Z^t` o#zya");
      Element element0 = document0.attr("lEIL^W5i$j+i+6", "jsoupContextSource");
      Elements elements0 = element0.getElementsByIndexGreaterThan(0);
      element0.prependChildren(elements0);
      element0.attr("5Z^t` o#zya", "WdFyNDKTg");
      Class<TextNode> class0 = TextNode.class;
      // Undeclared exception!
      try { 
        element0.selectXpath("lEIL^W5i$j+i+6", class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("abs:class");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.text("abs:_'y'(1aw~uzc'6myzsm");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 1877;
      StringBuilder stringBuilder0 = new StringBuilder(1877);
      stringBuilder0.append((float) 1877);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings2.outline(false);
      cDataNode1.outerHtml((Appendable) stringBuilder0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        document_OutputSettings3.charset("abs:class");
        fail("Expecting exception: UnsupportedCharsetException");
      } catch(UnsupportedCharsetException e) {
         //
         // abs:class
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      synchronousQueue0.forEach(consumer0);
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      Document document1 = document0.connection(connection0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult1, nodeFilter_FilterResult2, nodeFilter_FilterResult2).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      element0.wrap("u'dc2zORfEDMj`,v?5");
      org.jsoup.helper.Consumer<Object> consumer1 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      document1.forEach(consumer1);
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      String string0 = "5Z^t` o#zya";
      DataNode dataNode2 = dataNode1.setWholeData("5Z^t` o#zya");
      dataNode2.reparentChild(dataNode0);
      dataNode2.firstChild();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:", true);
      xmlDeclaration0.name();
      Parser parser0 = Parser.xmlParser();
      parser0.parseInput("{C*0'0#<ml[", "5Z^t` o#zya");
      // Undeclared exception!
      dataNode1.parentNode.after("abs:");
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#doctype");
      Document document0 = Document.createShell("odd");
      document0.hasText();
      document0.siblingIndex = 1;
      document0.getElementsByAttributeValueStarting("p$", "abs:");
      Document document1 = (Document)document0.removeAttr("#cdata");
      Element element0 = (Element)document0.lastChild();
      document0.removeChild(element0);
      DataNode dataNode0 = new DataNode("'6YBFUgv");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      timeUnit0.convert(815L, timeUnit1);
      dataNode0.hasSameValue(timeUnit0);
      dataNode0.getWholeData();
      document0.getElementsByAttributeValueContaining("B", "|i#/;ynv21J");
      document1.attr("odd", "org.eclipse.jetty.util.IncludeExcludeSet$SetContainsPredicate");
      document0.text("|i#/;ynv21J");
      document0.location();
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag.valueOf("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Node$OuterHtmlVisitor", "");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      document0.getElementsByAttributeValue("Z{+*x0G", "Y{P#QY");
      // Undeclared exception!
      try { 
        document0.setBaseUri((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.shallowClone();
      Document document2 = (Document)document1.appendText("");
      document2.elementSiblingIndex();
      document0.appendTo(document1);
      document0.absUrl("5{Bw3h.<;=-");
      Document document3 = (Document)document2.wrap("#9Cj?o_V");
      document3.updateMetaCharsetElement();
      document2.replaceChild(document0, document3);
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Comment comment0 = new Comment("b");
      Comment comment1 = comment0.clone();
      comment1.toString();
      comment1.ownerDocument();
      Node node0 = null;
      // Undeclared exception!
      try { 
        comment1.reparentChild((Node) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Node$OuterHtmlVisitor", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      Document document1 = document0.shallowClone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Charset charset0 = Charset.defaultCharset();
      Parser.parseXmlFragment("org.jsoup.nodes.Node$OuterHtmlVisitor", "windows");
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document document4 = document3.outputSettings(document_OutputSettings2);
      Element element0 = document4.wrap("clas");
      Element element1 = element0.prependElement("clas");
      element1.after("3jtJV,r&R");
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      textNode0.baseUri();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      Document document0 = parser1.parseInput("abs:", "N3jZp5S@~#");
      document0.quirksMode();
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#doctype");
      Document document0 = Document.createShell("odd");
      document0.hasText();
      document0.getElementsByAttributeValueStarting("p$", "abs:");
      Element element0 = (Element)document0.lastChild();
      element0.before((Node) document0);
      // Undeclared exception!
      element0.before(",mgIV~^Xs)',6Gj");
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Parser.parse("ia# l4,SfpfJ1", "PCP'*");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.parentNode();
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Comment comment0 = new Comment("o~g.jsoup.nodes.Node$OuterHtmlVisitor");
      // Undeclared exception!
      try { 
        comment0.outerHtml((Appendable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.shallowClone();
      Document document2 = (Document)document1.appendText("");
      document2.elementSiblingIndex();
      document2.appendTo(document0);
      document1.lastElementChild();
      document0.absUrl("5{Bw3h.<;=-");
      Document document3 = (Document)document2.wrap("#9Cj?o_V");
      // Undeclared exception!
      try { 
        document2.replaceChild(document0, document3);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Tag.valueOf("abs:");
      Document document0 = Document.createShell("abs:");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.previousSibling();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.normalise();
      Comment comment0 = new Comment("sj`(%");
      Comment comment1 = comment0.setData("sj`(%");
      XmlDeclaration xmlDeclaration0 = comment1.asXmlDeclaration();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null, 0, 0);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(0);
      xmlDeclaration0.outerHtmlTail(stringBuffer0, 0, document_OutputSettings4);
      xmlDeclaration0.clearAttributes();
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      // Undeclared exception!
      try { 
        leafNode0.remove();
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String string0 = "$F-Pi@ x169`5B";
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      cDataNode0.doClone(element0);
      document0.toString();
      element0.siblingIndex = (-363);
      document0.nodelistChanged();
      // Undeclared exception!
      try { 
        cDataNode0.indent((Appendable) null, 1308, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.childNodesAsArray();
      leafNode0.childNodes();
      document0.nodelistChanged();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      document0.connection(connection0);
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = Parser.parseBodyFragment("multipart/form-data", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      Element element0 = document0.head();
      element0.after("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#doctype");
      Document document0 = Document.createShell("odd");
      document0.hasText();
      document0.getElementsByAttributeValueStarting("p$", "abs:");
      Element element0 = (Element)document0.lastChild();
      element0.before(",mgIV~^Xs)',6Gj");
      document0.removeChild(element0);
      DataNode dataNode0 = new DataNode("'6YBFUgv");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      dataNode0.siblingNodes();
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      timeUnit0.convert(815L, timeUnit1);
      dataNode0.hasSameValue(timeUnit0);
      dataNode0.getWholeData();
      document0.getElementsByAttributeValueContaining("B", "|i#/;ynv21J");
      document0.location();
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("abs:method", "abs:method");
      org.jsoup.helper.Consumer<Element> consumer0 = (org.jsoup.helper.Consumer<Element>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      Element element0 = document0.forEach(consumer0);
      Class<PseudoTextElement> class0 = PseudoTextElement.class;
      element0.selectXpath("abs:method", class0);
      element0.attributes();
      document0.head();
      String string0 = ",v\"m";
      Comment comment0 = new Comment(",v\"m");
      Comment comment1 = comment0.clone();
      comment1.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      // Undeclared exception!
      try { 
        document_OutputSettings3.indentAmount((-2496));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      int int0 = 2999;
      Parser parser1 = parser0.setTrackErrors(2999);
      Parser.xmlParser();
      int int1 = 674;
      parser0.setTrackErrors(674);
      String string0 = "";
      Document document0 = parser1.parseInput("", "cW1[eV,5UM2wyVB4x");
      Document document1 = document0.shallowClone();
      String string1 = "qP$s;f*;Nl5 ";
      Element element0 = document1.tagName("qP$s;f*;Nl5 ");
      element0.getElementsContainingText("cW1[eV,5UM2wyVB4x");
      element0.hashCode();
      document0.getElementsContainingText("qP$s;f*;Nl5 ");
      Parser.unescapeEntities("", false);
      document1.title("cW1[eV,5UM2wyVB4x");
      Parser.parseXmlFragment("", "org.jsoup.nodes.Node");
      element0.attributesSize();
      // Undeclared exception!
      try { 
        element0.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "iP/v";
      CDataNode cDataNode0 = new CDataNode("iP/v");
      CDataNode cDataNode1 = cDataNode0.clone();
      LeafNode leafNode0 = cDataNode1.doClone(cDataNode0);
      leafNode0.empty();
      String string1 = "abs:#data";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("abs:#data", "abs:#data");
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(Throwable e) {
         //
         // abs:#data
         //
         verifyException("java.io.PrintStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#doctype");
      Document document0 = Document.createShell("odd");
      document0.hasText();
      document0.getElementsByAttributeValueStarting("p$", "abs:");
      document0.removeAttr("#cdata");
      Node node0 = document0.lastChild();
      // Undeclared exception!
      try { 
        node0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("fL:]`_ahfg)@{[5|6", "*F7I^`&$D");
      Document document1 = (Document)document0.tagName("fL:]`_ahfg)@{[5|6");
      StringBuffer stringBuffer0 = new StringBuffer();
      document0.doSetBaseUri("*F7I^`&$D");
      document1.html();
      stringBuffer0.setLength(4332);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document1.outerHtmlHead(stringBuffer0, 4332, document_OutputSettings0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document2 = (Document)document1.firstElementSibling();
      Function<Integer, ByteBufferPool.Bucket> function0 = (Function<Integer, ByteBufferPool.Bucket>) mock(Function.class, new ViolatedAssumptionAnswer());
      MappedByteBufferPool mappedByteBufferPool0 = new MappedByteBufferPool(4332, 4332, function0);
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool(mappedByteBufferPool0);
      Class<DocumentType> class0 = DocumentType.class;
      Collection<DocumentType> collection0 = leakTrackingByteBufferPool0.getContainedBeans(class0);
      document2.prependChildren(collection0);
      document1.prependElement("fL:]`_ahfg)@{[5|6");
      document2.empty();
      document1.lastChild();
      document0.html("STOPPING");
      // Undeclared exception!
      try { 
        document0.child((-1407));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Tag.valueOf("abs:");
      Attributes attributes0 = new Attributes();
      Document document0 = Document.createShell("abs:");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.normalise();
      Comment comment0 = new Comment("sj`(%");
      Comment comment1 = comment0.setData("sj`(%");
      XmlDeclaration xmlDeclaration0 = comment1.asXmlDeclaration();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('o');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null, 0, 0);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(0);
      xmlDeclaration0.outerHtmlTail(stringBuffer0, 0, document_OutputSettings4);
      document1.outerHtmlTail(stringBuffer0, 0, document_OutputSettings4);
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.shallowClone();
      Element element0 = document1.appendText("");
      element0.attr("#9Cj?o_V");
      document1.childNodeSize();
      element0.wrap("#9Cj?o_V");
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#doctype");
      Document document0 = Document.createShell("");
      document0.hasAttributes();
      document0.getElementsByAttributeValueStarting("p$", "abs:");
      Node node0 = document0.lastChild();
      document0.removeChild(node0);
      DataNode dataNode0 = new DataNode("'6YBFUgv");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      long long0 = 807L;
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      Element element0 = document0.appendChild(nodeArray0[0]);
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        dataNode0.addChildren(5, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "hF!";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("hF!", false);
      Parser parser0 = Parser.htmlParser();
      parser0.setTrackErrors(1622);
      xmlDeclaration0.clearAttributes();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "~+{#`*44r0;s:3");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "b";
      Document document0 = Parser.parseBodyFragment("b", "b");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = "#text";
      Element element0 = document0.tagName("#text");
      element0.getAllElements();
      String string2 = "#comment";
      Pattern pattern0 = Pattern.compile("#comment");
      element0.getElementsMatchingText(pattern0);
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("abs:b", "baseUri");
      element0.closest((Evaluator) evaluator_AttributeWithValueNot0);
      Class<DataNode> class0 = DataNode.class;
      // Undeclared exception!
      try { 
        document0.selectXpath("#text", class0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not evaluate XPath query [#text]: javax.xml.transform.TransformerException: A location path was expected, but the following token was encountered:  #text
         //
         verifyException("org.jsoup.helper.W3CDom", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      leafNode0.siblingIndex = (-198261341);
      document0.nodelistChanged();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      Document document1 = document0.connection(connection0);
      element0.selectXpath("pubS");
      document1.hasChildNodes();
      document1.updateMetaCharsetElement(true);
  }
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("p$");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.doClone(cDataNode0);
      cDataNode1.nodelistChanged();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextNode textNode0 = cDataNode1.clone();
      textNode0.value = (Object) "p$";
      textNode0.text("p$");
      textNode0.text();
      String string0 = "0IBJl ";
      Document document0 = Parser.parseBodyFragment("p$", "0IBJl ");
      Document document1 = (Document)document0.id("a{4.|DSyl'Q$VUu!S");
      document1.getElementsByAttributeValue("@j^m#<Wj(L86.AGhPy", "AfterAfterFrameset");
      int int0 = 534;
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(534);
      document1.select((Evaluator) evaluator_IndexGreaterThan0);
      Document document2 = document0.ownerDocument();
      document0.textNodes();
      // Undeclared exception!
      try { 
        document1.replaceChild(cDataNode0, document2);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "lh3@iC+!2F&,'\"";
      TextNode textNode0 = TextNode.createFromEncoded("lh3@iC+!2F&,'\"");
      Document document0 = Parser.parseBodyFragment("lh3@iC+!2F&,'\"", "lh3@iC+!2F&,'\"");
      int int0 = 2531;
      Comment comment0 = new Comment("abs:N##~E");
      String string1 = "(b! >S,";
      // Undeclared exception!
      try { 
        textNode0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      document0.normalise();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      Document document1 = document0.connection(connection0);
      httpConnection0.referrer("sup");
      // Undeclared exception!
      try { 
        document1.forEachNode((org.jsoup.helper.Consumer<? super Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.childNodesAsArray();
      Document document1 = (Document)document0.appendText("");
      document1.childrenSize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document1.elementSiblingIndex();
      Document document2 = (Document)document1.wrap("#9Cj?o_V");
      // Undeclared exception!
      try { 
        document1.replaceChild(document0, document2);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", false);
      xmlDeclaration0.clone();
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      xmlDeclaration1.getWholeDeclaration();
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        xmlDeclaration0.indent(stringWriter0, (-1152), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // width must be >= 0
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#doctype");
      Document document0 = Document.createShell("odd");
      document0.hasText();
      document0.getElementsByAttributeValueStarting("p$", "abs:");
      Node node0 = document0.lastChild();
      document0.removeChild(node0);
      DataNode dataNode0 = new DataNode("'6YBFUgv");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      timeUnit0.convert(815L, timeUnit1);
      dataNode0.hasSameValue(timeUnit0);
      dataNode0.getWholeData();
      document0.getElementsByAttributeValueContaining("B", "|i#/;ynv21J");
      document0.location();
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell(")h:&");
      String string0 = "";
      Document document1 = (Document)document0.attr(")h:&", "");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document1.filter(nodeFilter0);
      Document document2 = (Document)document0.clone();
      document2.siblingIndex = 1181;
      document2.setParentNode(document1);
      document2.clone();
      // Undeclared exception!
      try { 
        TimeUnit.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.concurrent.TimeUnit.
         //
         verifyException("java.lang.Enum", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "$F-Pi@ x169`5B";
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      // Undeclared exception!
      try { 
        leafNode0.unwrap();
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "[^tjIl?YL\"^.,^";
      Document document0 = new Document("[^tjIl?YL\"^.,^");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.attributesSize();
      HashSet<String> hashSet0 = new HashSet<String>(1);
      Document document2 = (Document)document1.prepend("[^tjIl?YL\"^.,^");
      document2.setParentNode(document1);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      // Undeclared exception!
      document0.childNodesCopy();
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      Document document0 = parser1.parseInput("abs:publicId", "yNE_k");
      TextNode textNode0 = TextNode.createFromEncoded("");
      Element element0 = document0.doClone(textNode0);
      element0.hasAttr("abs:publicId");
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "p^?v11";
      Comment comment0 = new Comment("p^?v11");
      String string1 = "j`(";
      Comment comment1 = comment0.setData("j`(");
      comment1.sourceRange();
      comment1.value = (Object) "j`(";
      Comment comment2 = comment1.clone();
      comment2.toString();
      Parser.xmlParser();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      comment2.traverse(nodeVisitor0);
      String string2 = "W@F.";
      // Undeclared exception!
      try { 
        Tag.valueOf("W@F.", (ParseSettings) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("encoding", "encoding");
      Document document1 = document0.normalise();
      document1.getAllElements();
      Element element0 = document1.attr("org.jsoup.nodes.Node", true);
      element0.getElementsByIndexGreaterThan((-954));
      element0.classNames();
      element0.getElementsMatchingOwnText("encoding");
      // Undeclared exception!
      try { 
        document0.before((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Comment comment0 = new Comment("sj`(%");
      Comment comment1 = comment0.setData("sj`(%");
      XmlDeclaration xmlDeclaration0 = comment1.asXmlDeclaration();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('o');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null, 0, 0);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(0);
      xmlDeclaration0.outerHtmlTail(stringBuffer0, 0, document_OutputSettings4);
      comment0.lastChild();
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      cDataNode0.getWholeText();
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      String string0 = DocumentType.SYSTEM_KEY;
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      document0.connection(connection0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      // Undeclared exception!
      try { 
        document0.addChildren(1313, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1313, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = new Document("[^tjIl?YL\"^.,^");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.attributesSize();
      HashSet<String> hashSet0 = new HashSet<String>(1);
      Element element0 = document1.prepend("[^tjIl?YL\"^.,^");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      document0.childNodesCopy();
      Comment comment0 = new Comment("[^tjIl?YL\"^.,^");
      comment0.getData();
      org.jsoup.helper.Consumer<Element> consumer0 = (org.jsoup.helper.Consumer<Element>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      element0.forEach(consumer0);
      document1.parent();
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "lh3@iC+!2F&,'\"";
      TextNode textNode0 = TextNode.createFromEncoded("lh3@iC+!2F&,'\"");
      Document document0 = Parser.parseBodyFragment("lh3@iC+!2F&,'\"", "lh3@iC+!2F&,'\"");
      Element element0 = document0.val("lh3@iC+!2F&,'\"");
      // Undeclared exception!
      try { 
        textNode0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "%K<*lE`";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%K<*lE`");
      Document document0 = Parser.parseBodyFragment("%K<*lE`", "%K<*lE`");
      Document document1 = (Document)document0.toggleClass("i\"EI7~VfG,~l");
      org.jsoup.helper.Consumer<Object> consumer0 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = 22;
      Node[] nodeArray0 = new Node[0];
      document1.addChildren(22, nodeArray0);
      Document document2 = (Document)document1.forEachNode(consumer0);
      document2.lastChild();
      // Undeclared exception!
      try { 
        document2.after("%K<*lE`");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Comment comment0 = new Comment("p^?v11");
      Comment comment1 = comment0.setData("j`(");
      comment1.sourceRange();
      comment1.value = null;
      comment1.clone();
      String string0 = DocumentType.PUBLIC_KEY;
      comment0.hasSameValue(comment1);
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(1);
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) null, "MAx71/W_");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'input' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "$F-Pi@ x169`5B";
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      // Undeclared exception!
      try { 
        cDataNode0.addChildren(1, (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      document0.connection(connection0);
      cDataNode0.hasSameValue("$F-Pi@ x169`5B");
      // Undeclared exception!
      try { 
        document0.before("'A>JM{1Fpo=1z3#F");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      leafNode0.nextSibling();
      leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Vector<Element> vector0 = new Vector<Element>();
      synchronousQueue0.containsAll(vector0);
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      document0.connection(connection0);
      document0.body();
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "$F-Pi@ x169`5B";
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      // Undeclared exception!
      try { 
        leafNode0.after("$F-Pi@ x169`5B");
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "N##~E";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataNode dataNode0 = new DataNode("N##~E");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.clone();
      dataNode1.coreValue("gX=':8Nw<fX8a<ZNfy");
      DataNode dataNode2 = dataNode1.setWholeData("N##~E");
      FileSystemHandling.shouldAllThrowIOExceptions();
      dataNode2.childNodeSize();
      dataNode1.clone();
      dataNode0.outerHtml();
      Document document0 = Parser.parseBodyFragment("gX=':8Nw<fX8a<ZNfy", "gX=':8Nw<fX8a<ZNfy");
      document0.previousElementSibling();
      // Undeclared exception!
      try { 
        document0.insertChildren(17, (Collection<? extends Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "body";
      String string1 = "0Y9eH,<ZVRT";
      Document document0 = Parser.parseBodyFragment("body", "0Y9eH,<ZVRT");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document1 = (Document)document0.val("rg.jsoup.nodes.Nod");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "body", 2, 2);
      // Undeclared exception!
      try { 
        document1.outerHtml((Appendable) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "[^tjIl?YL\"^.,^";
      Document document0 = new Document("[^tjIl?YL\"^.,^");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.attributesSize();
      HashSet<String> hashSet0 = new HashSet<String>(1);
      Element element0 = document1.prepend("[^tjIl?YL\"^.,^");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[0].childNodes();
      nodeArray0[2] = (Node) document1;
      // Undeclared exception!
      try { 
        element0.insertChildren(3539, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "abs:value");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string0 = "nO>%aZuXS4Vz-9?4dJE";
      Document document0 = new Document("nO>%aZuXS4Vz-9?4dJE");
      Document document1 = document0.clone();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.userAgent("");
      Document document2 = document1.connection(connection0);
      // Undeclared exception!
      try { 
        document2.childNode((-201448928));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("abs:", "abs:");
      LinkedTransferQueue<Comment> linkedTransferQueue0 = new LinkedTransferQueue<Comment>();
      Element element0 = document0.append("abs:");
      Document document1 = (Document)element0.clone();
      Document.OutputSettings document_OutputSettings0 = null;
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      document1.closest((Evaluator) evaluator_MatchText0);
      // Undeclared exception!
      try { 
        document1.shouldIndent((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CDataNode cDataNode0 = new CDataNode("VN##~E ( }#TU*/dP");
      cDataNode0.coreValue("@j0j(AZjZzkd");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CDataNode cDataNode1 = cDataNode0.clone();
      CDataNode cDataNode2 = cDataNode1.clone();
      Comment comment0 = new Comment("VN##~E ( }#TU*/dP");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      comment0.parentNode = (Node) cDataNode2;
      org.jsoup.helper.Consumer<Object> consumer0 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      xmlDeclaration0.forEachNode(consumer0);
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      xmlDeclaration1.nodeName();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Node");
      document0.getElementsMatchingOwnText(pattern0);
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      document0.nodelistChanged();
      Node node0 = leafNode0.attr("", "$F-Pi@ x169`5B");
      document0.outerHtml();
      document0.siblingIndex = 10;
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      document0.connection(connection0);
      org.jsoup.helper.Consumer<Object> consumer0 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      node0.forEachNode(consumer0);
  }
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "RICpsMpuy&6Pnt5P(";
      CDataNode cDataNode0 = new CDataNode("RICpsMpuy&6Pnt5P(");
      CDataNode cDataNode1 = cDataNode0.clone();
      // Undeclared exception!
      try { 
        cDataNode1.replaceWith(cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.safety.Cleaner$CleaningVisitor");
      Element element0 = document0.firstElementChild();
      String string0 = "";
      Element element1 = element0.prepend("");
      element1.siblingIndex();
      // Undeclared exception!
      try { 
        document0.select("org.jsoup.nodes.Node$OuterHtmlVisitor");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Node$OuterHtmlVisitor': unexpected token at '$OuterHtmlVisitor'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Parser.htmlParser();
      LinkedBlockingDeque<PseudoTextElement> linkedBlockingDeque0 = new LinkedBlockingDeque<PseudoTextElement>();
      Comment comment0 = new Comment("");
      Comment comment1 = comment0.setData("#vS5J$6bgc9P9*");
      comment1.nodeName();
      // Undeclared exception!
      try { 
        comment0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("os.name");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "os.name");
      Document document3 = (Document)document2.text("os.name");
      document3.attr(")$", "clas");
      // Undeclared exception!
      try { 
        document3.getElementsByAttributeValueStarting((String) null, "Registering watch on {}");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = Document.createShell("#data");
      document0.siblingNodes();
      document0.updateMetaCharsetElement();
      document0.setSiblingIndex(43);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      DocumentType documentType0 = new DocumentType("CharacterReferenceInRcdata", "#data", "\u00ADU");
      documentType0.publicId();
  }
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "abs:";
      Tag tag0 = Tag.valueOf("abs:");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "abs:", attributes0);
      FormElement formElement1 = formElement0.clone();
      formElement1.ownerDocument();
      formElement0.childNodesCopy();
      FormElement formElement2 = formElement1.addElement(formElement0);
      String string1 = null;
      // Undeclared exception!
      try { 
        formElement2.getElementsByAttributeValueNot((String) null, "abs:");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Parser parser1 = parser0.settings(parseSettings0);
      Parser.parseXmlFragment("q.LB/G0=6(:t`LQ", "");
      Parser parser2 = parser1.setTrackPosition(false);
      StringReader stringReader0 = new StringReader("p=:gd");
      Document document0 = parser2.parseInput((Reader) stringReader0, "p=:gd");
      CDataNode cDataNode0 = new CDataNode("q.LB/G0=6(:t`LQ");
      cDataNode0.childNodesAsArray();
      CDataNode cDataNode1 = cDataNode0.clone();
      document0.reparentChild(cDataNode1);
      document0.attributes();
      document0.location();
      org.jsoup.helper.Consumer<Object> consumer0 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      document0.forEach(consumer0);
  }
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("4H;2");
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.cookie("4H;2", "4H;2");
      Document document1 = document0.connection(connection0);
      document0.classNames();
      int int0 = 1;
      int int1 = (-113);
      Element element0 = (Element)document0.firstChild();
      element0.setBaseUri("application/x-www-form-urlencoded");
      // Undeclared exception!
      try { 
        element0.removeChild(document1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Node", "he");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      document0.ownText();
      Element element0 = document0.removeAttr("org.jsoup.nodes.Node");
      element0.text();
      document0.childElementsList();
      element0.append("");
      document0.outputSettings();
      document0.normalise();
      Comment comment0 = new Comment("org.jsoup.nodes.Node");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      xmlDeclaration0.clone();
  }
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "ZPCPR*";
      Document document0 = Parser.parse("ia# l4,#Sfpf@J1L", "ZPCPR*");
      MappedByteBufferPool mappedByteBufferPool0 = new MappedByteBufferPool();
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool(mappedByteBufferPool0);
      Class<Element> class0 = Element.class;
      leakTrackingByteBufferPool0.getBeans(class0);
      // Undeclared exception!
      try { 
        document0.addChildren((Node[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-mPi@ x169`5B");
      Document document0 = new Document("$F-mPi@ x169`5B");
      LeafNode leafNode0 = cDataNode0.doClone(document0);
      cDataNode0.firstChild();
      document0.nodelistChanged();
      leafNode0.attr("", "$F-mPi@ x169`5B");
      document0.outerHtml();
      HttpConnection httpConnection0 = new HttpConnection();
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      httpConnection0.data((Collection<Connection.KeyVal>) synchronousQueue0);
      Document.createShell("application/x-www-form-urlencoded");
  }
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("abs:/jsoup.sourceRange");
      // Undeclared exception!
      try { 
        cDataNode0.after("B(Oy|_\"),jyC>l5Ad");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = ");t]Io~hjpO";
      Document document0 = Document.createShell(");t]Io~hjpO");
      parser0.parseFragmentInput("", document0, "$1+");
      Document document1 = (Document)document0.attr(");t]Io~hjpO", "$%KQ;-");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      document0.addClass("$%KQ;-");
      PipedWriter pipedWriter1 = new PipedWriter();
      int int0 = (-326);
      try { 
        document1.indent(pipedWriter1, (-326), (Document.OutputSettings) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "$F-Pi@ x169`5B";
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x169`5B");
      Document document0 = new Document("$F-Pi@ x169`5B");
      Element element0 = document0.body();
      LeafNode leafNode0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        leafNode0.after((Node) cDataNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell(")h:&");
      String string0 = "";
      Element element0 = document0.attr(")h:&", "");
      Document document1 = (Document)document0.clone();
      document1.siblingIndex = 1181;
      document1.setParentNode(element0);
      document1.clone();
      // Undeclared exception!
      try { 
        TimeUnit.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.concurrent.TimeUnit.
         //
         verifyException("java.lang.Enum", e);
      }
  }
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("I7M<DjI{aDJ[m2", "T/^9,HA|tYOdppK");
      document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      document0.hasParent();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset(" ]");
        fail("Expecting exception: IllegalCharsetNameException");
      } catch(IllegalCharsetNameException e) {
         //
         //  ]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("abs:", "abs:");
      LinkedTransferQueue<Comment> linkedTransferQueue0 = new LinkedTransferQueue<Comment>();
      Element element0 = document0.append("abs:");
      Document document1 = (Document)element0.clone();
      Document.OutputSettings document_OutputSettings0 = null;
      // Undeclared exception!
      try { 
        document1.shouldIndent((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "[^tjIl?YL\"^.,^";
      Document document0 = new Document("[^tjIl?YL\"^.,^");
      Document document1 = new Document("[^tjIl?YL\"^.,^");
      document1.classNames();
      Element element0 = document1.prepend("[^tjIl?YL\"^.,^");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("[^tjIl?YL\"^.,^");
      CDataNode cDataNode1 = cDataNode0.clone();
      nodeArray0[1] = (Node) cDataNode1;
      cDataNode1.sourceRange();
      nodeArray0[2] = (Node) document1;
      // Undeclared exception!
      try { 
        element0.insertChildren(3539, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WAIT_FOR_FILL", ":&d15;O+)&f]%~<~8k");
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 191;
      Connection connection0 = httpConnection0.proxy("k9HZA?zED<\"lRJ`3,%", 191);
      Document document1 = document0.connection(connection0);
      document1.previousElementSibling();
      document1.sourceRange();
      document0.connection();
      CDataNode cDataNode0 = new CDataNode("k9HZA?zED<\"lRJ`3,%");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.text("typemustmatch");
      MockFile mockFile0 = new MockFile("k9HZA?zED<\"lRJ`3,%", "Content-Encoding");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "           ";
      DataNode dataNode0 = new DataNode("           ");
      DataNode dataNode1 = dataNode0.clone();
      Node[] nodeArray0 = new Node[3];
      Comment comment0 = new Comment("           ");
      nodeArray0[0] = (Node) comment0;
      comment0.outerHtml();
      nodeArray0[1] = (Node) dataNode1;
      nodeArray0[2] = (Node) dataNode0;
      dataNode1.attributesSize();
      // Undeclared exception!
      try { 
        dataNode0.addChildren(nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Collector$FirstFinder", "");
      document0.childElementsList();
      document0.attributesSize();
      Document document1 = document0.shallowClone();
      Tag tag0 = document1.tag();
      Attributes attributes0 = document1.attributes();
      document1.siblingElements();
      attributes0.html();
      Element element0 = new Element(tag0, "", attributes0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node";
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Node");
      dataNode0.hasSameValue("org.jsoup.nodes.Node");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.nodeName();
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Node");
      textNode0.getWholeText();
      // Undeclared exception!
      try { 
        textNode0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = document0.shallowClone();
      // Undeclared exception!
      try { 
        document1.childNode(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("#text", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#text", attributes0);
      pseudoTextElement0.attributesSize();
      attributes0.put("#text", "org.eclipse.jetty.util.SharedBlockingCallback$BlockerTimeoutException");
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValue("", "q,uR");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("cI\"L y5r%SAx/4xgV");
      cDataNode0.text("9}B:4h84+");
      cDataNode0.attributes();
      Comment comment0 = new Comment("9}B:4h84+");
      StringBuilder stringBuilder0 = new StringBuilder("&G");
      int int0 = 64;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(64, (-3922));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 64
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "ZPCPR*";
      Document document0 = Parser.parse("ia# l4,#Sfpf@J1L", "ZPCPR*");
      MappedByteBufferPool mappedByteBufferPool0 = new MappedByteBufferPool();
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool(mappedByteBufferPool0);
      Class<Element> class0 = Element.class;
      Collection<Element> collection0 = leakTrackingByteBufferPool0.getBeans(class0);
      leakTrackingByteBufferPool0.isManaged("ZPCPR*");
      Element element0 = document0.appendChildren(collection0);
      element0.nextSibling();
      // Undeclared exception!
      try { 
        element0.selectFirst("Eu>@HJ");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@HJ': unexpected token at '@HJ'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("link");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) textNode0;
      nodeArray0[3] = (Node) textNode0;
      nodeArray0[4] = (Node) textNode0;
      nodeArray0[5] = (Node) textNode0;
      nodeArray0[6] = (Node) textNode0;
      nodeArray0[7] = (Node) textNode0;
      nodeArray0[8] = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.addChildren(nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "[^tjIl?YL\"^.,^";
      Document document0 = Parser.parse("[^tjIl?YL\"^.,^", "[^tjIl?YL\"^.,^");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.classNames();
      Element element0 = document1.prepend("[^tjIl?YL\"^.,^");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("[^tjIl?YL\"^.,^");
      CDataNode cDataNode1 = cDataNode0.clone();
      nodeArray0[1] = (Node) cDataNode1;
      cDataNode1.sourceRange();
      nodeArray0[2] = (Node) document1;
      // Undeclared exception!
      try { 
        element0.insertChildren(3539, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      // Undeclared exception!
      try { 
        documentType0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Comment comment0 = new Comment("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Comment comment1 = comment0.setData("org.jsoup.nodes.Node$OuterHtmlVisitor");
      comment1.nodeName();
      CDataNode cDataNode0 = new CDataNode("#comment");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("4H;2");
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.cookie("4H;2", "4H;2");
      Document document1 = document0.connection(connection0);
      document0.classNames();
      document0.firstChild();
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(1, (-113));
      evaluator_IsNthLastOfType0.matches(document0, document1);
      document0.is((Evaluator) evaluator_IsNthLastOfType0);
  }
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "2";
      Document document0 = new Document("2");
      Document document1 = (Document)document0.empty();
      Document document2 = document1.shallowClone();
      document2.childNodesAsArray();
      String string1 = "K";
      document2.attr("2", "K");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      String string2 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(10);
      Parser.parse("abs:", "abs:");
      Document document0 = parser1.parseInput("jsoup", "");
      Element element0 = document0.id("y%9a)0E.");
      Element element1 = document0.clearAttributes();
      document0.updateMetaCharsetElement(false);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Parser.parseFragment("abs:", element0, "", parseErrorList0);
      // Undeclared exception!
      try { 
        element1.child((-2157));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%>g/1dCk`w\"hxf,r%", "%>g/1dCk`w\"hxf,r%");
      Document document1 = document0.normalise();
      Tag tag0 = document1.tag();
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("&B[d /;vOtu5W7g", "Invalid interestOps for {}");
      Attributes attributes2 = attributes1.putUserData("", "U");
      FormElement formElement0 = new FormElement(tag0, "U", attributes2);
      FormElement formElement1 = formElement0.clone();
      formElement1.hasSameValue((Object) null);
  }
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Comment comment0 = new Comment("tn*T)");
      CDataNode cDataNode0 = new CDataNode("tn*T)");
      comment0.hasSameValue(cDataNode0);
      comment0.hasAttr("closed accept of {}");
      Document document0 = Parser.parse("", "+X");
      comment0.parentNode = (Node) cDataNode0;
      document0.text();
      document0.text("");
      String string0 = "org.jsoup.nodes.Node";
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Node");
      dataNode0.getWholeData();
      dataNode0.setSiblingIndex(0);
      document0.doClone(dataNode0);
      comment0.root();
      dataNode0.nodeName();
      document0.normalise();
      XmlDeclaration xmlDeclaration0 = null;
      try {
        xmlDeclaration0 = new XmlDeclaration((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell(")h:&");
      String string0 = "";
      Document document1 = (Document)document0.attr(")h:&", "");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document1.filter(nodeFilter0);
      Document document2 = (Document)document0.clone();
      document2.siblingIndex = 1181;
      document2.setParentNode(document1);
      document2.clone();
      // Undeclared exception!
      try { 
        TimeUnit.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.concurrent.TimeUnit.
         //
         verifyException("java.lang.Enum", e);
      }
  }
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#text", false);
      xmlDeclaration0.previousSibling();
      xmlDeclaration0.root();
      Parser parser0 = Parser.xmlParser();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "#text");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".)lj", "");
      Document document1 = document0.normalise();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[2].hasAttr("acti");
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document1;
      nodeArray0[4].reparentChild(nodeArray0[3]);
      // Undeclared exception!
      try { 
        document1.insertChildren((-2421), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TextNode textNode0 = new TextNode("S'js2;f(U!");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      TextNode textNode1 = (TextNode)textNode0.filter(nodeFilter0);
      TextNode.normaliseWhitespace("S'js2;f(U!");
      textNode0.childNodeSize();
      textNode1.nodelistChanged();
  }
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "lh3@iC+!2F&,'\"";
      TextNode textNode0 = TextNode.createFromEncoded("lh3@iC+!2F&,'\"");
      textNode0.isBlank();
      String string1 = "#text";
      Document document0 = Parser.parse("#text", "#text");
      Elements elements0 = document0.getElementsByAttributeValueNot("lh3@iC+!2F&,'\"", "lh3@iC+!2F&,'\"");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1461), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TextNode textNode0 = new TextNode("org.eclipse.jetty.io.ArrayByteBufferPool");
      textNode0.hasSameValue("org.eclipse.jetty.io.ArrayByteBufferPool");
      textNode0.getWholeText();
  }
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = new Document("abs:");
      document0.nextElementSiblings();
      Comment comment0 = new Comment("onFillable {}");
      comment0.nodelistChanged();
      Comment comment1 = comment0.clone();
      // Undeclared exception!
      try { 
        comment1.remove();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = null;
      CDataNode cDataNode0 = new CDataNode((String) null);
      TextNode textNode0 = cDataNode0.clone();
      // Undeclared exception!
      try { 
        textNode0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TextNode.stripLeadingWhitespace("Path: {} -> Root: {}");
      CDataNode cDataNode0 = new CDataNode("jf\u0005");
      CDataNode cDataNode1 = cDataNode0.clone();
      Attributes attributes0 = cDataNode1.attributes();
      Attributes.internalKey("jf\u0005");
      attributes0.hasDeclaredValueForKey("abs:");
      DocumentType documentType0 = new DocumentType(" />", "F010:=-B", "abs:");
      // Undeclared exception!
      try { 
        documentType0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", false);
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      XmlDeclaration xmlDeclaration2 = xmlDeclaration0.clone();
      xmlDeclaration2.getWholeDeclaration();
      MockFileWriter mockFileWriter0 = new MockFileWriter("abs:");
      xmlDeclaration1.html(mockFileWriter0);
      CDataNode cDataNode0 = new CDataNode("");
      int int0 = 0;
      cDataNode0.siblingIndex = 0;
      CDataNode cDataNode1 = cDataNode0.clone();
      xmlDeclaration2.coreValue();
      cDataNode1.coreValue();
      TextNode.normaliseWhitespace("org.jsoup.nodes.Node");
      cDataNode1.setParentNode(xmlDeclaration2);
      cDataNode1.isBlank();
      xmlDeclaration1.clone();
      xmlDeclaration2.shallowClone();
      Document document0 = Parser.parse("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      document0.normalise();
      Node[] nodeArray0 = new Node[1];
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("abs:");
      Document document1 = document0.shallowClone();
      document1.getElementsContainingText("abs:");
      document1.removeAttr("");
      document0.ownText();
      document0.textNodes();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("{B*cZ-2^Y*mb)S[", false);
      String string0 = "";
      // Undeclared exception!
      try { 
        xmlDeclaration0.before("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "";
      Comment comment0 = new Comment("");
      Comment comment1 = comment0.clone();
      // Undeclared exception!
      try { 
        comment0.replaceChild(comment1, comment1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("$G}%wA0%_");
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      parseSettings0.normalizeTag("$G}%wA0%_");
      Parser parser1 = parser0.settings(parseSettings0);
      Document document1 = document0.parser(parser1);
      parseSettings0.normalizeTag("T;!4|rdQ `&4 d");
      document1.firstElementSibling();
      Document document2 = document1.clone();
      parser1.setTrackErrors(0);
      document2.childNodesCopy();
      Element element0 = document2.val("Io<f3");
      element0.id();
      Class<DataNode> class0 = DataNode.class;
      // Undeclared exception!
      try { 
        element0.selectXpath("Io<f3", class0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not evaluate XPath query [Io<f3]: com.sun.org.apache.xpath.internal.XPathException: Can not convert #BOOLEAN to a NodeList!
         //
         verifyException("org.jsoup.helper.W3CDom", e);
      }
  }
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "#text";
      DataNode dataNode0 = new DataNode("#text");
      DataNode dataNode1 = dataNode0.clone();
      Node[] nodeArray0 = new Node[7];
      // Undeclared exception!
      try { 
        dataNode1.removeChild(dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "we}|";
      CDataNode cDataNode0 = new CDataNode("we}|");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.shallowClone();
      // Undeclared exception!
      try { 
        cDataNode1.splitText(1182);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("==", "CYY;DYyJMOhL/<e");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.requestBody("CYY;DYyJMOhL/<e");
      Document document2 = document1.connection(connection0);
      document0.body();
      document2.toString();
      Tag tag0 = document0.tag();
      Attributes attributes0 = new Attributes();
      attributes0.hasKeyIgnoreCase("#text");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", attributes0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      int int0 = 1383;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "CYY;DYyJMOhL/<e", 1383, 1383);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = new Document("6E");
      Tag tag0 = document0.tag();
      Document document1 = Parser.parse("6E", "6E");
      document1.setSiblingIndex(Integer.MAX_VALUE);
      tag0.getName();
      Attributes attributes0 = document1.attributes();
      FormElement formElement0 = new FormElement(tag0, "6E", attributes0);
      FormElement formElement1 = formElement0.clone();
      // Undeclared exception!
      try { 
        formElement1.submit();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The supplied URL, '6E', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.shallowClone();
      String string0 = "";
      Document document2 = (Document)document1.appendText("");
      document2.elementSiblingIndex();
      Document document3 = (Document)document2.wrap("#9Cj?o_V");
      // Undeclared exception!
      try { 
        document2.replaceChild(document0, document3);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("F/<r<");
      org.jsoup.helper.Consumer<Object> consumer0 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      Element element0 = document0.forEachNode(consumer0);
      Element element1 = document0.appendChild(element0);
      // Undeclared exception!
      element1.after("F/<r<");
  }
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("q-uz8`O'qD\"K(dd|", "q-uz8`O'qD\"K(dd|");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      document0.absUrl("q-uz8`O'qD\"K(dd|");
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      document_OutputSettings3.prettyPrint(false);
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining("", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.nodes.Node$OuterHtmlVisitor");
      Element element0 = document0.empty();
      element0.baseUri();
  }
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "The parameter '%s' must not be null.";
      Document document0 = Document.createShell("The parameter '%s' must not be null.");
      Document document1 = document0.shallowClone();
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      document1.previousElementSiblings();
      org.jsoup.helper.Consumer<Element> consumer0 = (org.jsoup.helper.Consumer<Element>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      document1.forEach(consumer0);
      Elements elements0 = document0.select((Evaluator) evaluator_IsOnlyChild0);
      Element element0 = document1.appendChildren(elements0);
      element0.text("The parameter '%s' must not be null.");
      element0.empty();
      document1.doClone(document0);
      // Undeclared exception!
      try { 
        document0.before("The parameter '%s' must not be null.");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      document0.getElementsByIndexLessThan(0);
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("IK&;E{2 Xs((9^,W$S", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Node$OuterHtmlVisitor", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Node$OuterHtmlVisitor", attributes1);
      FormElement formElement1 = formElement0.clone();
      FormElement formElement2 = formElement1.addElement((Element) null);
      FormElement formElement3 = formElement2.addElement(formElement1);
      formElement1.siblingElements();
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("%s@%x{maxQueueLength=%s, factor=%s}");
      formElement3.selectFirst((Evaluator) evaluator_TagEndsWith0);
      int int0 = 10;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(10);
      formElement2.equals(charArrayWriter0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) null;
      nodeArray0[1] = (Node) null;
      Parser parser0 = Parser.xmlParser();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "org.jsoup.nodes.Node$OuterHtmlVisitor");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("j;}Y{NPu");
      // Undeclared exception!
      try { 
        cDataNode0.before("org.jsoup.nodes.Node$OuterHtmlVisitor");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = new Document("abs:");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.getElementsByIndexGreaterThan((-25));
      Element element0 = document0.traverse(nodeVisitor0);
      element0.outerHtml();
      element0.clone();
      Evaluator.ContainsWholeOwnText evaluator_ContainsWholeOwnText0 = new Evaluator.ContainsWholeOwnText("");
      document0.select((Evaluator) evaluator_ContainsWholeOwnText0);
  }
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "jcY]HFx;#<Ex|%Ll>";
      Document document0 = Parser.parse("jcY]HFx;#<Ex|%Ll>", "jcY]HFx;#<Ex|%Ll>");
      document0.getElementsByAttributeValueEnding("jcY]HFx;#<Ex|%Ll>", "jcY]HFx;#<Ex|%Ll>");
      document0.attr("org.eclipse.jetty.io.NullByteBufferPool", false);
      document0.outerHtml();
      Comment comment0 = new Comment("jcY]HFx;#<Ex|%Ll>");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      xmlDeclaration1.lastChild();
      // Undeclared exception!
      try { 
        xmlDeclaration0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      MockFile mockFile0 = new MockFile("");
      boolean boolean0 = true;
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter(mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = document0.normalise();
      Document document2 = document1.shallowClone();
      document2.getElementsByIndexGreaterThan((-1638));
      Element element0 = document2.lastElementSibling();
      // Undeclared exception!
      try { 
        element0.insertChildren((-649), (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("I7M<DjI{aDJ[m2", "T/^9,HA|tYOdppK");
      document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset(" ]");
        fail("Expecting exception: IllegalCharsetNameException");
      } catch(IllegalCharsetNameException e) {
         //
         //  ]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = new Document("");
      Stack<TextNode> stack0 = new Stack<TextNode>();
      Document document1 = (Document)document0.prependChildren(stack0);
      // Undeclared exception!
      try { 
        document1.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("org.eclipse.jetty.server.ServerConnector", "org.eclipse.jetty.server.ServerConnector");
      Element element0 = document0.root();
      element0.cssSelector();
  }
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(">h%]D]IDy5:,@7Q", true);
      xmlDeclaration0.toString();
  }
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.eclipse.jetty.io.AbstractEndPoint$1", "(#dS)DIuxmw*3>M$4rN");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Element element0 = document0.appendElement("org.eclipse.jetty.io.AbstractEndPoint$1");
      Element element1 = document0.appendChild(element0);
      // Undeclared exception!
      try { 
        document0.before((Node) element1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      TextNode.normaliseWhitespace("5");
      Document document0 = Document.createShell("5");
      document0.prependText("5");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#text", false);
      xmlDeclaration0.getWholeDeclaration();
  }
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(1004);
      Parser parser2 = parser1.setTrackPosition(false);
      Document document0 = parser2.parseInput("&jlqst=t>~M66oVDS", "");
      String string0 = ") cannot be less than min threads (";
      Document document1 = Parser.parse(") cannot be less than min threads (", "");
      // Undeclared exception!
      try { 
        document0.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Node$OuterHtmlVisitor", "");
      Attributes attributes0 = document0.attributes;
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Node$OuterHtmlVisitor", attributes0);
      formElement0.clone();
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.nodes.Node$OuterHtmlVisitor");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Comment comment0 = new Comment("org.jsoup.nodes.Node$OuterHtmlVisitor");
      comment0.toString();
  }
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("abx:", "abx:");
      Element element0 = document0.clearAttributes();
      document0.removeAttr("abx:");
      // Undeclared exception!
      try { 
        element0.closest(" qe4CWcXD5Kg(:");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'qe4CWcXD5Kg(:': unexpected token at '(:'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comment comment0 = new Comment((String) null);
      comment0.setData("abs:pubSysKey");
      CDataNode cDataNode0 = new CDataNode(">(r:U");
      cDataNode0.shallowClone();
  }
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.setTrackErrors(674);
      Document document0 = parser0.parseInput("", "cW1[eV,5UM2wyVB4x");
      Document document1 = document0.shallowClone();
      Element element0 = document1.tagName("qP$s;f*;Nl5 ");
      element0.getElementsContainingText("cW1[eV,5UM2wyVB4x");
      element0.hashCode();
      document1.previousElementSiblings();
      Parser.unescapeEntities("", false);
      document1.title("cW1[eV,5UM2wyVB4x");
      Parser.parseXmlFragment("", "org.jsoup.nodes.Node");
      element0.attributesSize();
  }
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "^4i$/Wls]V8m/xtw2'_");
      documentType0.lastChild();
      documentType0.clone();
      documentType0.setPubSysKey("");
      Parser.xmlParser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
  }
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "3-j5]E[my)");
      HttpConnection httpConnection0 = new HttpConnection();
      HttpCookieStore.Empty httpCookieStore_Empty0 = new HttpCookieStore.Empty();
      Connection connection0 = httpConnection0.cookieStore((CookieStore) httpCookieStore_Empty0);
      Document document1 = document0.connection(connection0);
      document1.attr("STARTING");
      document0.setBaseUri("Pta \"g*7$!m_o6SZ");
      document1.connection();
      document1.title("abs:");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.classNames();
      document1.html();
  }
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = new Document(":;");
      Parser.xmlParser();
      RegexSet regexSet0 = new RegexSet();
      document0.equals((Object) null);
      Parser.parse("abs:abs:", ":;");
  }
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "abs:";
      DataNode dataNode0 = new DataNode("abs:");
      String string1 = "5Z^t` o#zya";
      DataNode dataNode1 = dataNode0.setWholeData("5Z^t` o#zya");
      dataNode1.reparentChild(dataNode0);
      dataNode0.firstChild();
      String string2 = "WPe{hjZG5U#O@rE";
      // Undeclared exception!
      dataNode0.parentNode.after("abs:");
  }
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DataNode dataNode0 = new DataNode("abs:");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dataNode0.hasSameValue(dataNode0);
      dataNode0.firstChild();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:", false);
      dataNode0.attributesSize();
      xmlDeclaration0.name();
  }
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("abs:publicId", "abs:publicId");
      TextNode textNode0 = TextNode.createFromEncoded("abs:publicId");
      Element element0 = document0.doClone(textNode0);
      element0.hasAttr("abs:publicId");
      Element element1 = document0.prependText("abs:publicId");
      document0.getElementsByAttributeValueStarting("abg:pzbSsKey", "abs:publicId");
      element0.getElementsByAttributeValueStarting("Ij2sZhw,", "Ij2sZhw,");
      element0.previousSibling();
      element1.getElementsByAttributeValueMatching("Ij2sZhw,", "STAR");
      Tag tag0 = Tag.valueOf("[DX{;yzO*ZNeRZdNdN");
      Attributes attributes0 = element1.attributes;
      Attributes attributes1 = attributes0.put("abg:pzbSsKey", false);
      FormElement formElement0 = new FormElement(tag0, "abs:publicId", attributes1);
      textNode0.hasSameValue((Object) null);
      document0.getElementsByAttributeValueNot("abg:pzbSsKey", "[DX{;yzO*ZNeRZdNdN");
      // Undeclared exception!
      try { 
        formElement0.removeChild(element1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Parser.parse("^tEk", "^tEk");
      Element element0 = document0.html("^tEk");
      element0.hasClass("^tEk");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      document0.isBlock();
      document0.toString();
      document0.root();
      document0.getElementsByAttributeValueMatching("^tEk", "^tEk");
      element0.previousSibling();
      element0.childNodeSize();
      document0.getElementsByAttributeValueStarting("Lk5", "lBw:sP'8%)_0cv");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("^tEk", false);
  }
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.eclipse.jetty.io.ByteBufferPool$Bucket");
      Document document0 = new Document("org.eclipse.jetty.io.ByteBufferPool$Bucket");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      cDataNode0.sourceRange();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.REMOVE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Element element0 = document1.filter(nodeFilter0);
      document1.setParentNode(cDataNode0);
      document0.getElementsByTag("org.jsoup.nodes.Node");
      element0.clone();
      // Undeclared exception!
      try { 
        element0.before((Node) cDataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Comment comment0 = new Comment("O2!");
      Comment comment1 = comment0.clone();
      org.jsoup.helper.Consumer<Object> consumer0 = (org.jsoup.helper.Consumer<Object>) mock(org.jsoup.helper.Consumer.class, new ViolatedAssumptionAnswer());
      Comment comment2 = (Comment)comment1.forEachNode(consumer0);
      Comment comment3 = comment1.setData("");
      comment2.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pattern.compile("");
      Document document0 = Document.createShell("");
      document0.prependChild(comment1);
      comment3.unwrap();
      Document.createShell("");
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "abs:org.jsoup.select.evaluator$islastoftype");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", "b");
      Element element0 = document0.tagName("#text");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XT]w\bgm^&");
      element0.getAllElements();
      Pattern pattern0 = Pattern.compile("#comment");
      element0.getElementsMatchingText(pattern0);
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("abs:b", "baseUri");
      element0.closest((Evaluator) evaluator_AttributeWithValueNot0);
      Document.createShell("org.jsoup.nodes.Node");
      document0.getElementsByAttributeValueNot("G[W&~1;KCV", "p.I)fITM?&\"K");
      CDataNode cDataNode0 = new CDataNode("#text");
      cDataNode0.value = (Object) "b";
      cDataNode0.attributes();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cDataNode0.html(charArrayWriter0);
      // Undeclared exception!
      try { 
        document0.before("#comment");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Comment comment0 = new Comment("org.jsoup.nodes.Node$OuterHtmlVisitor");
      comment0.clearAttributes();
      comment0.toString();
  }
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("odd");
      document0.getElementsByAttributeValueStarting("BLp$", "abs:");
      Element element0 = (Element)document0.lastChild();
      element0.before("docmnt");
      document0.removeChild(element0);
      DataNode dataNode0 = new DataNode("abs:");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      dataNode0.siblingNodes();
      dataNode0.hasSameValue(timeUnit0);
      dataNode0.getWholeData();
      document0.removeAttr("docmnt");
      element0.getElementsByAttributeValue("|i#/;ynv21J", "org.jsoup.select.Evaluator$Id");
      document0.getElementsByAttributeValueContaining("B", "|i#/;ynv21J");
      document0.location();
      dataNode0.nodeName();
  }
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.clone();
      Element element0 = document1.appendText("");
      element0.elementSiblingIndex();
      Comment comment0 = new Comment("#9Cj?o_V");
      Comment comment1 = comment0.clone();
      Comment comment2 = comment1.setData("#9Cj?o_V");
      document1.parentNode = (Node) comment2;
      // Undeclared exception!
      try { 
        element0.wrap("#9Cj?o_V");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.shallowClone();
      Document document2 = (Document)document1.appendText("");
      document0.absUrl("5{Bw3h.<;=-");
      Document document3 = (Document)document2.wrap("#9Cj?o_V");
      // Undeclared exception!
      try { 
        document2.replaceChild(document0, document3);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$F-Pi@ x)(9`5 ");
      CDataNode cDataNode1 = (CDataNode)cDataNode0.wrap("$F-Pi@ x)(9`5 ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = new Document("$F-Pi@ x)(9`5 ");
      Element element0 = document0.body();
      CDataNode cDataNode2 = (CDataNode)cDataNode0.doClone(element0);
      cDataNode2.wrap("$F-Pi@ x)(9`5 ");
      cDataNode1.childNodesAsArray();
      document0.nodelistChanged();
      document0.outerHtml();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.normalise();
      HttpConnection httpConnection0 = new HttpConnection();
      document0.nextElementSiblings();
      element0.wrap("u'dc2zORfEDMj`,v?5");
      Parser.parseBodyFragment("<html>\n <body></body>\n</html>", "multipart/form-data");
      cDataNode1.previousSibling();
      assertFalse(cDataNode0.hasParent());
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("$F-[_Pi@ x169`5B");
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode("$F-[_Pi@ x169`5B");
      document0.nodelistChanged();
      cDataNode0.attr("", "$F-[_Pi@ x169`5B");
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      synchronousQueue0.forEach(consumer0);
      Element element1 = (Element)element0.wrap("u'dc2zORfEDMj`,v?5");
      element1.prependChild(element0);
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("$F-[_Pi@ x169`5B");
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode("$F-[_Pi@ x169`5B");
      document0.nodelistChanged();
      cDataNode0.attr("", "$F-[_Pi@ x169`5B");
      SynchronousQueue<Connection.KeyVal> synchronousQueue0 = new SynchronousQueue<Connection.KeyVal>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      synchronousQueue0.forEach(consumer0);
      Element element1 = (Element)element0.wrap("u'dc2zORfEDMj`,v?5");
      element1.prependChild(element0);
      assertEquals(1, element0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      document0.parser(parser0);
      String string1 = "_'Y'(1AW~UzC'6MYZsm";
      Document document1 = Parser.parseBodyFragment("(g7rAB[<R.qg5 i>", "");
      Document document2 = Parser.parse("", "");
      document2.hasText();
      document1.endSourceRange();
      Element element0 = document2.addClass("_'Y'(1AW~UzC'6MYZsm");
      document2.clearAttributes();
      document2.toggleClass("_'Y'(1AW~UzC'6MYZsm");
      element0.val("");
      document2.ensureChildNodes();
      document1.outerHtml();
      Parser.parse("<html>\n <head></head>\n <body>\n  (g7rAB[<r.qg5 i></r.qg5>\n </body>\n</html>", "");
      // Undeclared exception!
      try { 
        Pattern.compile("fGgr[?[^Tflz0PZ3Ft");
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 17
         // fGgr[?[^Tflz0PZ3Ft
         //                  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("abs:", "abs:");
      LinkedTransferQueue<Comment> linkedTransferQueue0 = new LinkedTransferQueue<Comment>();
      document0.firstChild();
      Document document1 = (Document)document0.append("abs:");
      Document document2 = document1.clone();
      Document.OutputSettings document_OutputSettings0 = null;
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document3 = (Document)document0.traverse(nodeVisitor0);
      document3.removeClass("WzW8#Htfj:>");
      document3.getElementsByAttributeValueStarting("abs:", "abs:");
      document3.firstChild();
      document2.closest((Evaluator) evaluator_MatchText0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("#doctype", true);
      document0.outputSettings();
      // Undeclared exception!
      try { 
        document2.shouldIndent((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = new Document("[^tjIl?YL\"^.,^");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.attributesSize();
      HashSet<String> hashSet0 = new HashSet<String>(1);
      document0.prepend("[^tjIl?YL\"^.,^");
      document0.childNodesCopy();
      Comment comment0 = new Comment("[^tjIl?YL\"^.,^");
      String string0 = comment0.getData();
      ;
}
}
