 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.maxPaddingWidth((-1));
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1334);
      assertEquals(1, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.appendText("Zv");
      document0.normalise();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prepareEncoder();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prepareEncoder();
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prepareEncoder();
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prepareEncoder();
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = document_OutputSettings0.maxPaddingWidth();
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = document_OutputSettings0.maxPaddingWidth();
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = document_OutputSettings0.maxPaddingWidth();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = document_OutputSettings0.maxPaddingWidth();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = document_OutputSettings0.indentAmount();
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = document_OutputSettings0.indentAmount();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = document_OutputSettings0.indentAmount();
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = document_OutputSettings0.indentAmount();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.escapeMode();
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.escapeMode();
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.escapeMode();
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.escapeMode();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Document document0 = new Document((String) null);
      document0.charset(charset0);
      boolean boolean0 = document0.updateMetaCharsetElement();
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Document document0 = new Document((String) null);
      document0.charset(charset0);
      boolean boolean0 = document0.updateMetaCharsetElement();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("");
      document0.setSiblingIndex(523);
      Document document1 = (Document)document0.text("|%QK");
      assertFalse(document1.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = (Document)document0.text("-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
      assertTrue(document2.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = (Document)document0.text("-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
      assertEquals(1, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = (Document)document0.text("-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Element element0 = document0.tagName("body");
      Document document1 = (Document)element0.text("org.eclipse.jetty.io.ByteBufferPool$Bucket");
      assertNotNull(document1.location());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Element element0 = document0.tagName("body");
      Document document1 = (Document)element0.text("org.eclipse.jetty.io.ByteBufferPool$Bucket");
      assertTrue(document1.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Element element0 = document0.tagName("body");
      Document document1 = (Document)element0.text("org.eclipse.jetty.io.ByteBufferPool$Bucket");
      assertEquals(1, document1.childNodeSize());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("EHMfc\"ldm?D");
      Document document1 = document0.shallowClone();
      document1.reparentChild(document0);
      assertFalse(document1.hasParent());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("EHMfc\"ldm?D");
      Document document1 = document0.shallowClone();
      document1.reparentChild(document0);
      Document document2 = (Document)document0.text("#root");
      assertFalse(document2.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("EHMfc\"ldm?D");
      Document document1 = document0.shallowClone();
      document1.reparentChild(document0);
      Document document2 = (Document)document0.text("#root");
      assertEquals(1, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("EHMfc\"ldm?D");
      Document document1 = document0.shallowClone();
      document1.reparentChild(document0);
      Document document2 = (Document)document0.text("#root");
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertEquals(0, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertTrue(document2.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = (Document)document0.tagName("body");
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = (Document)document0.tagName("body");
      Document document2 = document1.quirksMode(document_QuirksMode0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = (Document)document0.tagName("body");
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertEquals(0, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("meta", "meta");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.appendChild(document0);
      document0.quirksMode(document_QuirksMode0);
      assertEquals(0, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("T_!5]_q)+<[b*F>Qo");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      Parser parser0 = Parser.htmlParser();
      document0.parser(parser0);
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = document1.parser((Parser) null);
      assertFalse(document2.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = document1.parser((Parser) null);
      assertEquals(0, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = document1.parser((Parser) null);
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      Parser parser0 = Parser.htmlParser();
      Document document2 = document1.parser(parser0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      Parser parser0 = Parser.htmlParser();
      Document document2 = document1.parser(parser0);
      assertEquals(0, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      Parser parser0 = Parser.htmlParser();
      Document document2 = document1.parser(parser0);
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("meta", "meta");
      document0.appendChild(document0);
      Parser parser0 = Parser.xmlParser();
      document0.parser(parser0);
      assertEquals(0, document0.siblingIndex());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      Document document1 = document0.shallowClone();
      Document document2 = document1.parser((Parser) null);
      assertTrue(document2.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      Document document1 = document0.shallowClone();
      Document document2 = document1.parser((Parser) null);
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      Document document1 = document0.shallowClone();
      Document document2 = document1.parser((Parser) null);
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      Document document1 = document0.shallowClone();
      Document document2 = document1.parser((Parser) null);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      document0.parser((Parser) null);
      document0.parser();
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      document0.parser((Parser) null);
      document0.parser();
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      document0.parser((Parser) null);
      document0.parser();
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Parser parser0 = Parser.xmlParser();
      parser0.setTrackPosition(true);
      document0.parser(parser0);
      document0.parser();
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Document$OutputSettings");
      Parser parser0 = Parser.xmlParser();
      parser0.setTrackPosition(true);
      document0.parser(parser0);
      document0.parser();
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(396);
      Document document0 = parser1.parseInput("1.0", "Y'");
      document0.parser();
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(396);
      Document document0 = parser1.parseInput("1.0", "Y'");
      document0.parser();
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document document0 = new Document((String) null);
      document0.charset(charset0);
      document0.outputSettings(document_OutputSettings0);
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      document1.siblingIndex = 144;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertTrue(document2.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      document1.siblingIndex = 144;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertFalse(document_OutputSettings0.prettyPrint());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      document1.siblingIndex = 144;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      document1.siblingIndex = 144;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      document1.siblingIndex = 144;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      document1.siblingIndex = 144;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      document1.siblingIndex = 144;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertTrue(document2.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      document0.tagName("body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals(1, document1.childNodeSize());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      document0.tagName("body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      document0.tagName("body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertFalse(document_OutputSettings0.prettyPrint());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      document0.tagName("body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      document0.tagName("body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      document0.tagName("body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertNotNull(document1.location());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      document0.tagName("body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertFalse(document_OutputSettings0.prettyPrint());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertNotNull(document1.location());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertFalse(document2.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertEquals(0, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      assertFalse(document_OutputSettings0.prettyPrint());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      Document.OutputSettings document_OutputSettings1 = document0.outputSettings();
      assertEquals(0, document_OutputSettings1.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Document document0 = Document.createShell("<d|zoq");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Document document0 = Document.createShell("<d|zoq");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.outputSettings();
      assertTrue(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("<d|zoq");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.outputSettings();
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.maxPaddingWidth(0);
      document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.maxPaddingWidth(0);
      document0.outputSettings(document_OutputSettings0);
      Document.OutputSettings document_OutputSettings1 = document0.outputSettings();
      assertEquals(0, document_OutputSettings1.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outputSettings(document_OutputSettings0);
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outputSettings(document_OutputSettings0);
      document_OutputSettings0.indentAmount(0);
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outputSettings(document_OutputSettings0);
      document_OutputSettings0.indentAmount(0);
      Document.OutputSettings document_OutputSettings1 = document0.outputSettings();
      assertEquals(1, document_OutputSettings1.indentAmount());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("1-.~lk(1\"v");
      document0.outerHtml();
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = new Document("1-.~lk(1\"v");
      document0.outerHtml();
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("tJQTyx&rb+>", "tJQTyx&rb+>");
      Element element0 = document0.doClone((Node) null);
      document0.appendTo(element0);
      Document document1 = document0.normalise();
      assertEquals(1, document1.childNodeSize());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("tJQTyx&rb+>", "tJQTyx&rb+>");
      Element element0 = document0.doClone((Node) null);
      document0.appendTo(element0);
      Document document1 = document0.normalise();
      assertNotNull(document1.location());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("tJQTyx&rb+>", "tJQTyx&rb+>");
      Element element0 = document0.doClone((Node) null);
      document0.appendTo(element0);
      Document document1 = document0.normalise();
      assertFalse(document1.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      document0.setSiblingIndex((-1420));
      Document document1 = document0.normalise();
      assertNotNull(document1.location());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      document0.setSiblingIndex((-1420));
      Document document1 = document0.normalise();
      assertEquals(1, document1.childNodeSize());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      document0.setSiblingIndex((-1420));
      Document document1 = document0.normalise();
      assertFalse(document1.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("Oh|_q4D!w Z/5J#VY}");
      String string0 = document0.location();
      assertFalse(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("Oh|_q4D!w Z/5J#VY}");
      String string0 = document0.location();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GDq3P^q?", "");
      document0.location();
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GDq3P^q?", "");
      document0.location();
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>");
      Element element0 = document0.head();
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>");
      Element element0 = document0.head();
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>");
      Element element0 = document0.head();
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("'Fnr&(8G/:JVt \"Ad!!", "'Fnr&(8G/:JVt \"Ad!!");
      document0.title("");
      Element element0 = document0.head();
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("'Fnr&(8G/:JVt \"Ad!!", "'Fnr&(8G/:JVt \"Ad!!");
      document0.title("");
      Element element0 = document0.head();
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("'Fnr&(8G/:JVt \"Ad!!", "'Fnr&(8G/:JVt \"Ad!!");
      document0.title("");
      Element element0 = document0.head();
      assertEquals(1, element0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      DocumentType documentType0 = new DocumentType("eet", "eet", "SYSTEM");
      Charset charset0 = Charset.defaultCharset();
      document1.prependChild(documentType0);
      document0.charset(charset0);
      document1.documentType();
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      assertFalse(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      HttpConnection httpConnection0 = new HttpConnection();
      document0.connection((Connection) httpConnection0);
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = document1.connection((Connection) httpConnection0);
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = document1.connection((Connection) httpConnection0);
      assertEquals(0, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.siblingIndex = (-1065);
      Document document2 = document1.connection((Connection) httpConnection0);
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document2 = document1.connection((Connection) httpConnection0);
      assertTrue(document2.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document2 = document1.connection((Connection) httpConnection0);
      assertEquals(0, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document2 = document1.connection((Connection) httpConnection0);
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("meta", "meta");
      HttpConnection httpConnection0 = new HttpConnection();
      document0.appendChild(document0);
      document0.connection((Connection) httpConnection0);
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      HttpConnection httpConnection0 = new HttpConnection();
      Document document2 = document1.connection((Connection) httpConnection0);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      HttpConnection httpConnection0 = new HttpConnection();
      Document document2 = document1.connection((Connection) httpConnection0);
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      HttpConnection httpConnection0 = new HttpConnection();
      Document document2 = document1.connection((Connection) httpConnection0);
      assertEquals(0, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      HttpConnection httpConnection0 = new HttpConnection();
      Document document2 = document1.connection((Connection) httpConnection0);
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      Charset charset0 = document0.charset();
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      Document document2 = document1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      Document document2 = document1.clone();
      assertTrue(document2.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      Document document2 = document1.clone();
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      Document document1 = (Document)document0.tagName("body");
      Document document2 = document1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document document2 = document1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document document2 = document1.clone();
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document document2 = document1.clone();
      assertEquals(0, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document document2 = document1.clone();
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"[)/mg*=[=T(ZN|e", "/vm]sB^c>.}X");
      Document document1 = document0.shallowClone();
      Document document2 = document1.clone();
      assertNotNull(document2.location());
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell(")canvas");
      document0.text(")canvas");
      Element element0 = document0.body();
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell(")canvas");
      document0.text(")canvas");
      Element element0 = document0.body();
      assertEquals(0, element0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell(")canvas");
      document0.text(")canvas");
      Element element0 = document0.body();
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "Y'");
      // Undeclared exception!
      try { 
        document0.title((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "body");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.title("1.0");
  }
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "body");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.title("1.0");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = new Document(":-b.Xm2DyL");
      Document document1 = document0.shallowClone();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment(":-b.Xm2DyL", (Element) document0, "L06t/s;4", parseErrorList0);
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document1.title();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document("html");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.title();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = new Document("html");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("i9QVrrz{P+TOK`~wv`|", false);
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        document0.title();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("an;->)Cw&7tldi{");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.text("");
  }
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = new Document((String) null);
      document0.appendTo(document0);
      // Undeclared exception!
      document0.shallowClone();
  }
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("A|7Y5'", "A|7Y5'");
      // Undeclared exception!
      try { 
        document0.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.outerHtml();
  }
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.normalise();
  }
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("_S1");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.xmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("_S1", (Element) document1, "nj", parseErrorList0);
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Zv", "Zv");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell(")canvas");
      Document document1 = (Document)document0.empty();
      document0.setParentNode(document0);
      // Undeclared exception!
      document1.head();
  }
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zv:)u%yXlM~-TOC07", "zv:)u%yXlM~-TOC07");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.head();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("meta", "meta");
      // Undeclared exception!
      try { 
        document0.createElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i]n", "i]n");
      Element element0 = document0.clearAttributes();
      document0.reparentChild(element0);
      // Undeclared exception!
      document0.createElement("org.jsoup.nodes.Document$QuirksMode");
  }
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = new Document("<\"_>x");
      // Undeclared exception!
      try { 
        document0.connection((Connection) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = new Document("x55{}|`rK`R-gKcq8");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.clone();
  }
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = new Document("1-.~lk(1\"v");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document1.clone();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      document0.appendChild(document0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      document0.charset(charset0);
  }
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.charset((Charset) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document0.outputSettings(document_OutputSettings1);
      Charset charset0 = Charset.defaultCharset();
      document0.empty();
      // Undeclared exception!
      try { 
        document0.charset(charset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Document document0 = new Document((String) null);
      Comment comment0 = new Comment((String) null);
      document0.parentNode = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.charset(charset0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("`~6x]QJ(6qO");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.empty();
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.body();
  }
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document1.body();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell(")canvas");
      Element element0 = document0.body();
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell(")canvas");
      Element element0 = document0.body();
      ;
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell(")canvas");
      Element element0 = document0.body();
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("");
      document0.body();
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.outline());
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.prettyPrint());
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertEquals(1, document_OutputSettings1.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.syntax();
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.syntax();
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.syntax();
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.syntax();
      assertEquals(1, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("#root");
        fail("Expecting exception: IllegalCharsetNameException");
      } catch(IllegalCharsetNameException e) {
         //
         // #root
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.quirksMode();
      ;
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("d.?7zMT)>Tbz`");
      Document document1 = document0.parser((Parser) null);
      // Undeclared exception!
      try { 
        document1.text("d.?7zMT)>Tbz`");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XTf3ITB#||G$*", "XTf3ITB#||G$*");
      document0.updateMetaCharsetElement(true);
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = document_OutputSettings0.prettyPrint();
      ;
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = document_OutputSettings0.prettyPrint();
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = document_OutputSettings0.prettyPrint();
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = document_OutputSettings0.prettyPrint();
      ;
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      ;
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertTrue(document_OutputSettings1.prettyPrint());
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertEquals(0, document_OutputSettings1.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertEquals(1, document_OutputSettings1.indentAmount());
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.maxPaddingWidth((-758));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-1630));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      ;
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertEquals(1, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertFalse(document_OutputSettings0.prettyPrint());
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertFalse(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document2 = document0.outputSettings(document_OutputSettings1);
      Charset charset0 = Charset.defaultCharset();
      document1.charset(charset0);
      document2.normalise();
      assertEquals(1, document2.childNodeSize());
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax((Document.OutputSettings.Syntax) null);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertFalse(document1.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax((Document.OutputSettings.Syntax) null);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<1iwgWWe`g&", "<1iwgWWe`g&");
      Charset charset0 = document0.charset();
      assertFalse(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<1iwgWWe`g&", "<1iwgWWe`g&");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.normalise();
      assertFalse(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = new Document((String) null);
      Document document1 = document0.shallowClone();
      ;
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = new Document((String) null);
      Document document1 = document0.shallowClone();
      assertFalse(document1.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.helper.HttpConnection$Base", "org.jsoup.helper.HttpConnection$Base");
      document0.tagName("body");
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "body");
      Element element0 = document0.createElement("body");
      document0.appendChild(element0);
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>");
      Document document1 = document0.normalise();
      ;
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>");
      Document document1 = document0.normalise();
      assertNotNull(document1.location());
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  &lt;1iwgWWe`g&amp;\n </body>\n</html>");
      Document document1 = document0.normalise();
      assertEquals(1, document1.childNodeSize());
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "body");
      document0.title("1.0");
      document0.title("body");
      ;
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("1.0", "body");
      document0.title("1.0");
      document0.title();
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      document0.title();
      assertFalse(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      document0.title();
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      document0.title();
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      Document document1 = document0.shallowClone();
      document1.text("PUBLIC");
      document1.head();
      ;
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      Document document1 = document0.shallowClone();
      document1.text("PUBLIC");
      document1.head();
      assertEquals(1, document1.childNodeSize());
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = new Document("x55{}|`rK`R-gKcq8");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.title();
  }
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document2 = document0.outputSettings(document_OutputSettings1);
      Charset charset0 = Charset.defaultCharset();
      document1.charset(charset0);
      document2.documentType();
      assertEquals(0, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      DocumentType documentType0 = new DocumentType("eet", "eet", "SYSTEM");
      document0.prependChild(documentType0);
      DocumentType documentType1 = document0.documentType();
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      DocumentType documentType0 = new DocumentType("eet", "eet", "SYSTEM");
      document0.prependChild(documentType0);
      DocumentType documentType1 = document0.documentType();
      ;
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      DocumentType documentType0 = new DocumentType("eet", "eet", "SYSTEM");
      document0.prependChild(documentType0);
      DocumentType documentType1 = document0.documentType();
      assertFalse(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = new Document("");
      document0.documentType();
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      Connection connection0 = document0.connection();
      ;
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      Connection connection0 = document0.connection();
      ;
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Class");
      Connection connection0 = document0.connection();
      assertFalse(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      Connection connection0 = document1.connection();
      assertEquals(1, document1.childNodeSize());
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      Connection connection0 = document1.connection();
      ;
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      Connection connection0 = document1.connection();
      assertNotNull(document1.location());
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      Connection connection0 = document1.connection();
      assertFalse(document1.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = new Document((String) null);
      String string0 = document0.nodeName();
      assertFalse(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = new Document((String) null);
      String string0 = document0.nodeName();
      ;
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = new Document((String) null);
      String string0 = document0.location();
      ;
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = new Document((String) null);
      String string0 = document0.location();
      ;
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = new Document((String) null);
      boolean boolean0 = document0.updateMetaCharsetElement();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document((String) null);
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      document0.createElement("PUBLIC");
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "eet");
      document0.createElement("PUBLIC");
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = document_OutputSettings0.outline();
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = document_OutputSettings0.outline();
      assertEquals(0, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = document_OutputSettings0.outline();
      ;
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = document_OutputSettings0.outline();
      assertFalse(document_OutputSettings0.prettyPrint());
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      ;
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(0, document_OutputSettings1.indentAmount());
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      ;
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings1.outline());
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Document document0 = new Document((String) null);
      document0.charset(charset0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.quirksMode(document_QuirksMode0);
      assertEquals(1, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.charset();
      assertEquals(1, document_OutputSettings0.indentAmount());
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.charset();
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.charset();
      assertTrue(document_OutputSettings0.outline());
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.charset();
      ;
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      String string0 = document0.outerHtml();
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      String string0 = document0.outerHtml();
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$Hj*L\"4.Xgl", ":eq(");
      String string0 = document0.outerHtml();
      assertNotNull(string0);
}
