 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      // Undeclared exception!
      try { 
        Jsoup.clean("DATH", "eQ]@A>4U3.<95`%*", safelist0, (Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = Jsoup.parse("", parser0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = Jsoup.parse("_~gUHFpw", "", parser0);
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = Jsoup.parse((InputStream) null, "Indirect Buckets size=", "cghoE", parser0);
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Document document0 = Jsoup.parse((InputStream) null, "", "");
      assertNotNull(document0.tagName());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&b*M");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&b*M/&b*M");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      MockFile mockFile1 = new MockFile(mockFile0, "&b*M");
      Parser parser0 = Parser.htmlParser();
      Document document0 = Jsoup.parse((File) mockFile1, (String) null, "&amp;b*M", parser0);
      assertTrue(document0.updateMetaCharsetElement());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String string0 = Jsoup.clean("&b*M", safelist0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String string0 = Jsoup.clean("", safelist0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = Jsoup.clean("org.jsoup.Jsoup", "org.jsoup.Jsoup", safelist0, document_OutputSettings0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = Jsoup.clean("", "", safelist0, document_OutputSettings0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String string0 = Jsoup.clean("", "strike", safelist0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parseBodyFragment("LHia", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parseBodyFragment((String) null, "org.eclipse.jetty.io.SelectorManager");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parseBodyFragment((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        Jsoup.parse(uRL0, 0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // HTTP error fetching URL. Status=404, URL=[http://www.someFakeButWellFormedURL.org/fooExample]
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      try { 
        Jsoup.parse(uRL0, 1);
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        Jsoup.parse("", parser1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parse("org.jsoup.Jsoup", "", (Parser) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.Jsoup", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parse("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'baseUri' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parse((String) null, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "WTF: No buffer left to unconsume.", "", parser0);
        fail("Expecting exception: IllegalCharsetNameException");
      } catch(IllegalCharsetNameException e) {
         //
         // WTF: No buffer left to unconsume.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "", "^( fwul,Nat");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2087, (-3085));
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "org.jsoup.Jsoup", (String) null);
        fail("Expecting exception: UnsupportedCharsetException");
      } catch(UnsupportedCharsetException e) {
         //
         // org.jsoup.Jsoup
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1893), 26);
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "", "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        Jsoup.parse((InputStream) pipedInputStream0, "", "");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FCc0+vZ.}`5b", "");
      mockFile0.createNewFile();
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
      try { 
        Jsoup.parse((File) mockFile0, "", "g`=b,=", parser0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      MockFile mockFile0 = new MockFile("n+:", "n+:");
      File file0 = MockFile.createTempFile("n+:", "n+:", (File) mockFile0);
      // Undeclared exception!
      try { 
        Jsoup.parse(file0, "n+:", "n+:", parser0);
        fail("Expecting exception: UnsupportedCharsetException");
      } catch(UnsupportedCharsetException e) {
         //
         // n+:
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = MockFile.createTempFile("&o?}1KOR.v/r!)/~LT", "&o?}1KOR.v/r!)/~LT");
      // Undeclared exception!
      try { 
        Jsoup.parse(file0, "&o?}1KOR.v/r!)/~LT", "GFn5x}3,Y&J_J@o?Uy", (Parser) null);
        fail("Expecting exception: IllegalCharsetNameException");
      } catch(IllegalCharsetNameException e) {
         //
         // &o?}1KOR.v/r!)/~LT
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
      try { 
        Jsoup.parse((File) null, "r9SbHE ?fw9", "flush starting handshake {}", parser0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      File file0 = MockFile.createTempFile("Caught select() failure,trying to recover: {}", (String) null);
      // Undeclared exception!
      try { 
        Jsoup.parse(file0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'baseUri' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      File file0 = MockFile.createTempFile(" _$FaIpat{B", " _$FaIpat{B");
      // Undeclared exception!
      try { 
        Jsoup.parse(file0, "6B$,v$7C mg9", " _$FaIpat{B");
        fail("Expecting exception: IllegalCharsetNameException");
      } catch(IllegalCharsetNameException e) {
         //
         // 6B$,v$7C mg9
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parse((File) null, "Z/ztSy6_Cp!?,", "Z/ztSy6_Cp!?,");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      try { 
        Jsoup.parse((File) mockFile0, (String) null, (String) null);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      File file0 = MockFile.createTempFile("d+S`", "");
      // Undeclared exception!
      try { 
        Jsoup.parse(file0, "9pv");
        fail("Expecting exception: UnsupportedCharsetException");
      } catch(UnsupportedCharsetException e) {
         //
         // 9pv
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.jsoup.Jsoup", "org.jsoup.Jsoup");
      // Undeclared exception!
      try { 
        Jsoup.parse(file0, "Ff7.\"qhB2':h");
        fail("Expecting exception: IllegalCharsetNameException");
      } catch(IllegalCharsetNameException e) {
         //
         // Ff7.\"qhB2':h
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("OhT'n;g2IrM&\"Ner.d");
      try { 
        Jsoup.parse((File) mockFile0, ":only-of-type");
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parse((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.Jsoup", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/Read pending for {} prevented {}0Read pending for {} prevented {}");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      File file0 = MockFile.createTempFile("Read pending for {} prevented {}", "Read pending for {} prevented {}");
      try { 
        Jsoup.parse(file0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      File file0 = MockFile.createTempFile("&j>^(H#,JU{pnZ(^[-", "&j>^(H#,JU{pnZ(^[-", (File) null);
      MockFile mockFile0 = new MockFile(file0, "&j>^(H#,JU{pnZ(^[-");
      try { 
        Jsoup.parse((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.isValid("", (Safelist) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      // Undeclared exception!
      try { 
        Jsoup.isValid((String) null, safelist0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.connect("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The 'url' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      // Undeclared exception!
      try { 
        Jsoup.clean((String) null, safelist0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.clean("-", "y8IN_Tr+~-5-O9I", (Safelist) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      // Undeclared exception!
      try { 
        Jsoup.clean((String) null, "S<X*W=FF{p#<", safelist0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String string0 = Jsoup.clean("Q+we;%SHZ", "Q+we;%SHZ", safelist0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Jsoup.parseBodyFragment("cghoE", "cghoE");
      assertNotNull(document0.tagName());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "W|fu^-Pyc", "Q+we;%SHZ");
        fail("Expecting exception: IllegalCharsetNameException");
      } catch(IllegalCharsetNameException e) {
         //
         // W|fu^-Pyc
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.connect("^35e5fk?RJp`");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The supplied URL, '^35e5fk?RJp`', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = Jsoup.parse("<WHk", "org.jsoup.Jsoup", parser0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = Jsoup.parse("<WHk", "org.jsoup.Jsoup", parser0);
      assertEquals(0, document0.childNodeSize());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parse((URL) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'url' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Connection connection0 = Jsoup.newSession();
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parse((File) null, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.Jsoup", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      File file0 = MockFile.createTempFile("Caught select() failure, trying to recover: {}", (String) null);
      Document document0 = Jsoup.parse(file0, (String) null, "Caught select() failure, trying to recover: {}");
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      Parser parser0 = Parser.htmlParser();
      try { 
        Jsoup.parse((InputStream) bufferedInputStream0, ")UbOyWwMDejs>i%5hX_", "eu@ 80A", parser0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = Jsoup.parse("n+:", parser0);
      assertNotNull(document0.tagName());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockFile mockFile0 = new MockFile("&b*M");
      Parser parser0 = Parser.htmlParser();
      try { 
        Jsoup.parse((File) mockFile0, (String) null, "&amp;b*M", parser0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Jsoup.parse("&b*M");
      assertNotNull(document0.normalName());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      boolean boolean0 = Jsoup.isValid("", safelist0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.clean("+'}N9*nIQmP+L", (Safelist) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Jsoup.parse("FCc0+vZ.}`5b", "FCc0+vZ.}`5b");
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      File file0 = MockFile.createTempFile("Read pending for {} prevented {}", "Read pending for {} prevented {}");
      Document document0 = Jsoup.parse(file0);
      assertNotNull(document0.nodeName());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Jsoup.parseBodyFragment("FCc0+vZ.}`5b");
  }
