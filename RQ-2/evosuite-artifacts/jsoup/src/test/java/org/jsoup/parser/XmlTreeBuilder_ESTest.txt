 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = new Document("PJ");
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("PJ", document0, "PJ", parser0);
      Elements elements0 = document0.getElementsMatchingText("PJ");
      xmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      xmlTreeBuilder0.processStartTag("PJ");
      boolean boolean0 = xmlTreeBuilder0.processEndTag("PJ");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("j", "", parser0);
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("j", attributes0);
      xmlTreeBuilder0.insert(token_StartTag1);
      Token.EndTag token_EndTag0 = new Token.EndTag();
      Token.Tag token_Tag0 = token_EndTag0.name("");
      xmlTreeBuilder0.popStackToClose(token_EndTag0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("$", "$");
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("$", "3", parser0);
      Token.CData token_CData0 = new Token.CData("k9@f=y");
      xmlTreeBuilder0.insertNode(document0, token_CData0);
      assertNotNull(document0.nodeName());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("", "", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      xmlTreeBuilder0.insert(token_Doctype0);
      assertFalse(token_Doctype0.isForceQuirks());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("$", "3", parser0);
      Token.CData token_CData0 = new Token.CData("k9@f=y");
      xmlTreeBuilder0.insert(token_CData0);
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("r'A0!");
      Parser parser0 = Parser.xmlParser();
      xmlTreeBuilder0.initialiseParse(stringReader0, "qHds* O_v>", parser0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("+= ", "#document", parser0);
      Tokeniser tokeniser0 = xmlTreeBuilder0.tokeniser;
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      boolean boolean0 = xmlTreeBuilder0.process(token_Comment0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("+= ", "#document", parser0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      xmlTreeBuilder0.insertNode(cDataNode0);
      assertNotNull(cDataNode0.nodeName());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("PJ", "PJ");
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("PJ", document0, "PJ", parser0);
      Tokeniser tokeniser0 = xmlTreeBuilder0.tokeniser;
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      xmlTreeBuilder0.insert(token_Comment0);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("", "", parser0);
      boolean boolean0 = xmlTreeBuilder0.process(token_Doctype0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("", ")J");
      assertNotNull(document0.location());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("#$s9Drjo<");
      Document document0 = xmlTreeBuilder0.parse(stringReader0, "org.jsoup.parser.XmlTreeBuilder$1");
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("+= ", "#document", parser0);
      Tokeniser tokeniser0 = xmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("STOP", attributes0);
      xmlTreeBuilder0.insert(token_StartTag1);
      Element element0 = xmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(0, element0.siblingIndex());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("PJ", "PJ");
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("PJ", document0, "PJ", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("TD", (Attributes) null);
      Element element0 = xmlTreeBuilder0.insert(token_StartTag1);
      assertNotNull(element0.tagName());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      assertFalse(parseSettings0.preserveAttributeCase());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.process(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.EOF token_EOF0 = new Token.EOF();
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_EOF0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.process(token_EOF0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.EndTag token_EndTag0 = new Token.EndTag();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.popStackToClose(token_EndTag0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Unexpected token type: ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, (String) null, attributes0);
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parseFragment("Unexpected token type: ", formElement0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'baseUri' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parseFragment((String) null, (Element) null, "", parser0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parseFragment("Unexpected token type: ", "|hdK;.", (Parser) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parse("%1", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'baseUri' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parse((String) null, "PJ");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      xmlTreeBuilder0.parse(stringReader0, "");
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parse(stringReader0, "");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.Doctype token_Doctype0 = new Token.Doctype();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insertNode((Node) null, token_Doctype0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("+= ", "+= ", parser0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insertNode((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      CharacterReader characterReader0 = new CharacterReader("X%");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insert((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.Doctype token_Doctype0 = new Token.Doctype();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insert(token_Doctype0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.parser.XmlTreeBuilder$1");
      stringReader0.close();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.initialiseParse(stringReader0, "", parser0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.initialiseParse(pipedReader0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'baseUri' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.CData token_CData0 = new Token.CData("k9@f=y");
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insert(token_CData0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      token_Comment0.bogus = true;
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.process(token_Comment0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("+= ", "+= ", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      CDataNode cDataNode0 = new CDataNode("+= ");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("+= ", attributes0);
      Element element0 = xmlTreeBuilder0.insert(token_StartTag1);
      assertNotNull(element0.normalName());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      XmlTreeBuilder xmlTreeBuilder1 = xmlTreeBuilder0.newInstance();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Tag tag0 = Tag.valueOf("getName");
      Element element0 = new Element(tag0, "getName");
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insertNode(element0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parse(pipedReader0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'baseUri' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parseFragment((String) null, "", parser0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("PJ", "PJ");
      Parser parser0 = Parser.htmlParser();
      xmlTreeBuilder0.parseFragment("PJ", document0, "PJ", parser0);
      xmlTreeBuilder0.processStartTag("PJ");
      xmlTreeBuilder0.processEndTag("PJ");
  }
