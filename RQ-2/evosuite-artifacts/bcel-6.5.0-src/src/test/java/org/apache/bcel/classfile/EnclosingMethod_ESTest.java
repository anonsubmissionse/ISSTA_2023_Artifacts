/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:40:18 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnclosingMethod_ESTest extends EnclosingMethod_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2490), (-1539), dataInputStream0, constantPool0);
      int int0 = enclosingMethod0.getEnclosingMethodIndex();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2490), (-1539), dataInputStream0, constantPool0);
      int int0 = enclosingMethod0.getEnclosingMethodIndex();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2476), (-1526), dataInputStream0, constantPool0);
      enclosingMethod0.setEnclosingMethodIndex((byte) (-115));
      int int0 = enclosingMethod0.getEnclosingMethodIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2490), (-1539), dataInputStream0, constantPool0);
      int int0 = enclosingMethod0.getEnclosingClassIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2490), (-1539), dataInputStream0, constantPool0);
      int int0 = enclosingMethod0.getEnclosingClassIndex();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("H)x9@#[@&vfDzsVX");
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(22, 22, dataInputStream0, (ConstantPool) null);
      EnclosingMethod enclosingMethod1 = (EnclosingMethod)enclosingMethod0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("H)x9@#[@&vfDzsVX");
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(22, 22, dataInputStream0, (ConstantPool) null);
      EnclosingMethod enclosingMethod1 = (EnclosingMethod)enclosingMethod0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2476), (-1526), dataInputStream0, constantPool0);
      EnclosingMethod enclosingMethod1 = (EnclosingMethod)enclosingMethod0.copy(constantPool0);
      assertEquals(0, enclosingMethod1.getEnclosingClassIndex());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("H)x9@#[@&vfDzsVX");
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(0, 474, dataInputStream0, constantPool0);
      // Undeclared exception!
      try { 
        enclosingMethod0.getEnclosingMethod();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47806. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2476), (-1526), dataInputStream0, constantPool0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        enclosingMethod0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("H)x9@#[@&vfDzsVX");
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(0, 0, dataInputStream0, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        enclosingMethod0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2476), (-1526), dataInputStream0, constantPool0);
      // Undeclared exception!
      try { 
        enclosingMethod0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnclosingMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnclosingMethod enclosingMethod0 = null;
      try {
        enclosingMethod0 = new EnclosingMethod(0, 0, dataInputStream0, constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-115), (byte)7);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      EnclosingMethod enclosingMethod0 = null;
      try {
        enclosingMethod0 = new EnclosingMethod(0, 256, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -115
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      EnclosingMethod enclosingMethod0 = null;
      try {
        enclosingMethod0 = new EnclosingMethod(2807, (-1), dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      EnclosingMethod enclosingMethod0 = null;
      try {
        enclosingMethod0 = new EnclosingMethod(786, 0, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2490), (-1539), dataInputStream0, constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2490), (-1539), dataInputStream0, constantPool0);
      enclosingMethod0.getEnclosingMethod();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2490), (-1539), dataInputStream0, constantPool0);
      // Undeclared exception!
      try { 
        enclosingMethod0.getEnclosingMethod();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("H)x9@#[@&vfDzsVX");
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(0, 0, dataInputStream0, (ConstantPool) null);
      EnclosingMethod enclosingMethod1 = (EnclosingMethod)enclosingMethod0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("H)x9@#[@&vfDzsVX");
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(0, 0, dataInputStream0, (ConstantPool) null);
      EnclosingMethod enclosingMethod1 = (EnclosingMethod)enclosingMethod0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2476), (-1526), dataInputStream0, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      enclosingMethod0.accept(emptyVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2476), (-1526), dataInputStream0, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      enclosingMethod0.accept(emptyVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("H)x9@#[@&vfDzsVX");
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(0, 0, dataInputStream0, (ConstantPool) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      enclosingMethod0.dump(dataOutputStream0);
      assertNotNull(byteArrayOutputStream0.toString());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(0, 0, dataInputStream0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        enclosingMethod0.getEnclosingClass();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnclosingMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2490), (-1539), dataInputStream0, constantPool0);
      enclosingMethod0.setEnclosingMethodIndex((byte) (-115));
      // Undeclared exception!
      try { 
        enclosingMethod0.getEnclosingMethod();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("H)x9@#[@&vfDzsVX");
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(0, 0, dataInputStream0, (ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("H)x9@#[@&vfDzsVX");
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(0, 0, dataInputStream0, (ConstantPool) null);
      enclosingMethod0.setEnclosingClassIndex(47806);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("H)x9@#[@&vfDzsVX");
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(0, 0, dataInputStream0, (ConstantPool) null);
      int int0 = enclosingMethod0.getEnclosingMethodIndex();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("H)x9@#[@&vfDzsVX");
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.EnclosingMethod");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod(0, 0, dataInputStream0, (ConstantPool) null);
      int int0 = enclosingMethod0.getEnclosingMethodIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2490), (-1539), dataInputStream0, constantPool0);
      int int0 = enclosingMethod0.getEnclosingClassIndex();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)114);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-2490), (-1539), dataInputStream0, constantPool0);
      int int0 = enclosingMethod0.getEnclosingClassIndex();
      assertEquals(1, int0);
}
}
