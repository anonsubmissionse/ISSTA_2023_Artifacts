 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitNestHost((NestHost) null);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitModuleRequires((ModuleRequires) null);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitModuleExports((ModuleExports) null);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      MethodParameter methodParameter0 = new MethodParameter();
      emptyVisitor0.visitMethodParameter(methodParameter0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitMethod((Method) null);
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitLocalVariable((LocalVariable) null);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitEnclosingMethod((EnclosingMethod) null);
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("SAME_EXTENDED");
      emptyVisitor0.visitConstantUtf8(constantUtf8_0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantString constantString0 = new ConstantString((-2547));
      emptyVisitor0.visitConstantString(constantString0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPackage constantPackage0 = new ConstantPackage(87);
      emptyVisitor0.visitConstantPackage(constantPackage0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(58, 58);
      emptyVisitor0.visitConstantNameAndType(constantNameAndType0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      emptyVisitor0.visitConstantMethodType((ConstantMethodType) null);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2635), (-324));
      emptyVisitor0.visitConstantMethodHandle(constantMethodHandle0);
      assertEquals(0, constantMethodHandle0.getReferenceKind());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantLong constantLong0 = new ConstantLong((byte) (-93));
      emptyVisitor0.visitConstantLong(constantLong0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(98, 2787);
      emptyVisitor0.visitConstantInvokeDynamic(constantInvokeDynamic0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(63, (-2781));
      emptyVisitor0.visitConstantInterfaceMethodref(constantInterfaceMethodref0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantFloat constantFloat0 = new ConstantFloat(69);
      descendingVisitor0.visitConstantFloat(constantFloat0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantClass constantClass0 = new ConstantClass(2382);
      emptyVisitor0.visitConstantClass(constantClass0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      CodeException codeException0 = new CodeException(0, 45, 2418, 3885);
      emptyVisitor0.visitCodeException(codeException0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitParameterAnnotationEntry((ParameterAnnotationEntry) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitNestMembers((NestMembers) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
