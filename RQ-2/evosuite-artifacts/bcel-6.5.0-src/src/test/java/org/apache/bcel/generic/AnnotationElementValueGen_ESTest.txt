 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("");
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      ElementValue elementValue0 = annotationElementValueGen0.getElementValue();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen((AnnotationEntryGen) null, (ConstantPoolGen) null);
      AnnotationEntryGen annotationEntryGen0 = annotationElementValueGen0.getAnnotation();
      assertNotNull(annotationEntryGen0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("");
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      AnnotationEntryGen annotationEntryGen1 = annotationElementValueGen0.getAnnotation();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      linkedList0.add((ElementValuePairGen) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4$N&@zl");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        annotationElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4$N&@zl");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.close();
      try { 
        annotationElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("");
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = null;
      try {
        annotationElementValueGen0 = new AnnotationElementValueGen(0, annotationEntryGen0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Only element values of type annotation can be built with this ctor - type specified: 0
         //
         verifyException("org.apache.bcel.generic.AnnotationElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AnnotationElementValueGen annotationElementValueGen0 = null;
      try {
        annotationElementValueGen0 = new AnnotationElementValueGen((AnnotationElementValue) null, (ConstantPoolGen) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        annotationElementValueGen0.stringifyValue();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet
         //
         verifyException("org.apache.bcel.generic.AnnotationElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4$N&@zl");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      annotationElementValueGen0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("");
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      AnnotationEntryGen annotationEntryGen1 = annotationElementValueGen0.getAnnotation();
      assertFalse(annotationEntryGen1.isRuntimeVisible());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("I<5ca=V3wGClE@");
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, (List<ElementValuePairGen>) null, true, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(64, annotationEntryGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        annotationElementValueGen0.getElementValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }
