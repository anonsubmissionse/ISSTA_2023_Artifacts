/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:28:20 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.InnerClass;
import org.apache.bcel.classfile.InnerClasses;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.ModuleMainClass;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Field_ESTest extends Field_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Field field0 = new Field(3040, 3040, 3040, attributeArray0, constantPool1);
      // Undeclared exception!
      try { 
        field0.copy(constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Field> class0 = Field.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      InnerClass[] innerClassArray0 = new InnerClass[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      InnerClasses innerClasses0 = new InnerClasses(2861, 1202, innerClassArray0, constantPool0);
      attributeArray0[0] = (Attribute) innerClasses0;
      Field field0 = new Field(3040, 3040, 3040, attributeArray0, constantPool0);
      Field field1 = field0.copy(constantPool0);
      assertFalse(field1.isStrictfp());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      int[] intArray0 = new int[7];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(1093, (-54), intArray0, constantPool0);
      attributeArray0[0] = (Attribute) exceptionTable0;
      Field field0 = new Field(2, (-2272), 2, attributeArray0, constantPool0);
      Field field1 = field0.copy(constantPool0);
      assertFalse(field1.isVolatile());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass((-584), 0, 134, constantPool0);
      attributeArray0[0] = (Attribute) moduleMainClass0;
      Field field0 = new Field((-77), 0, (-77), attributeArray0, constantPool0);
      Field field1 = field0.copy(constantPool0);
      assertEquals(0, field1.getAccessFlags());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field(2, (-2272), 33, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        field0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 33. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field(3040, 3040, 3040, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        field0.hashCode();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3040. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field(3040, 3040, 3040, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        field0.getType();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3040. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Field field0 = new Field((-75), 879, (-1985), attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        field0.getConstantValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Field", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field((-105), (-16), (-105), (Attribute[]) null, constantPool0);
      // Undeclared exception!
      try { 
        field0.equals((Object) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -16. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Field field0 = new Field(311, 311, 311, attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        field0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Field field0 = new Field(1, 605, (-884), (Attribute[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        field0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Field", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Field field0 = null;
      try {
        field0 = new Field((Field) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Field field0 = null;
      try {
        field0 = new Field((DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = null;
      try {
        field0 = new Field(dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field(2, (-2272), (-1), attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        field0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass((-584), 6, 134, constantPool0);
      attributeArray0[0] = (Attribute) moduleMainClass0;
      Field field0 = new Field(6, 6, 134, attributeArray0, constantPool0);
      ConstantValue constantValue0 = field0.getConstantValue();
      assertNotNull(constantValue0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Field field0 = new Field(3446, 3446, (-1340), attributeArray0, (ConstantPool) null);
      Field field1 = field0.copy((ConstantPool) null);
      assertFalse(field1.isInterface());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Field field0 = new Field((-958), 395, (-958), (Attribute[]) null, (ConstantPool) null);
      Field field1 = new Field(field0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BCELComparator bCELComparator0 = Field.getComparator();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(64);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = null;
      try {
        field0 = new Field(dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Field field0 = new Field(3446, 213, (-1340), attributeArray0, (ConstantPool) null);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        field0.equals(sequenceInputStream0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.io.SequenceInputStream cannot be cast to org.apache.bcel.classfile.Field
         //
         verifyException("org.apache.bcel.classfile.Field$1", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Field field0 = new Field(3446, 3446, (-1340), attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        field0.hashCode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Field field0 = new Field(3446, 3446, (-1340), attributeArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      field0.accept(emptyVisitor0);
      assertEquals(1, field0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field(6, 6, 143, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        field0.getType();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BCELComparator bCELComparator0 = Constant.getComparator();
      Field.setComparator(bCELComparator0);
      Attribute[] attributeArray0 = new Attribute[0];
      Field field0 = new Field(3446, 213, (-1340), attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        field0.hashCode();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.Field cannot be cast to org.apache.bcel.classfile.Constant
         //
         verifyException("org.apache.bcel.classfile.Constant$1", e);
      }
  }
}
