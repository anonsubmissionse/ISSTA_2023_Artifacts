/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:30:59 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantUtf8_ESTest extends ConstantUtf8_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("4kjF]xI !/PF_Y}H)");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantUtf8_0.accept(emptyVisitor0);
      assertNotNull(constantUtf8_0.getBytes());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      String string0 = constantUtf8_0.getBytes();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConstantUtf8.getInstance((DataInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      try { 
        ConstantUtf8.getInstance((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConstantUtf8.getCachedInstance((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("G+?1nuXkhG}xKZv3");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        constantUtf8_0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("java.lang.Void");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantUtf8_0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8((ConstantUtf8) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8((DataInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(dataInputStream0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value must not be null.
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("!;{5nT,@uLiIH9");
      String string0 = constantUtf8_0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConstantUtf8.getInstance((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value must not be null.
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Valuewmut not be null.");
      // Undeclared exception!
      try { 
        constantUtf8_0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("%nFYjS");
      MockFile mockFile0 = new MockFile("%nFYjS");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantUtf8_0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantUtf8.clearStats();
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      String string0 = constantUtf8_0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantUtf8.clearCache();
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantUtf8.printStats();
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)29, (-676));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      try { 
        ConstantUtf8.getInstance((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("%nFYjS");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("%nFYjS");
      // Undeclared exception!
      try { 
        constantUtf8_0.setBytes("%nFYjS");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
}
