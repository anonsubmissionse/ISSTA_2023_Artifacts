 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 1295;
      ElementValue[] elementValueArray0 = new ElementValue[7];
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2993, 851);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(1295, constantPoolGen0);
      ElementValue elementValue0 = classElementValueGen0.getElementValue();
      elementValueArray0[0] = elementValue0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, constantPool0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      boolean boolean0 = true;
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen(arrayElementValue0, constantPoolGen1, true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1295. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ElementValue[] elementValueArray0 = new ElementValue[14];
      int int0 = 91;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(91);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantModule constantModule0 = new ConstantModule((-2584));
      ConstantModule constantModule1 = new ConstantModule(constantModule0);
      Constant constant0 = constantModule1.copy();
      constantArray0[1] = constant0;
      ConstantLong constantLong0 = new ConstantLong((-135));
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, constantPool1);
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen(arrayElementValue0, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen(91, elementValueArray0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("qi");
      constantPoolGen0.addClass(">)qgT~s_:Nj'S5z|");
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ArrayElementValue arrayElementValue0 = (ArrayElementValue)arrayElementValueGen0.getElementValue();
      ArrayElementValueGen arrayElementValueGen1 = new ArrayElementValueGen(arrayElementValue0, constantPoolGen0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)74;
      byteArray0[4] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantClass constantClass0 = new ConstantClass((byte)91);
      constantArray0[0] = (Constant) constantClass0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      arrayElementValueGen0.getElementValuesSize();
      arrayElementValueGen0.stringifyValue();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(83, (-539), constantPoolGen0);
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      arrayElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        arrayElementValueGen0.stringifyValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -539
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(91, elementValueArray0, constantPoolGen0);
      Constant[] constantArray0 = new Constant[6];
      ConstantFloat constantFloat0 = new ConstantFloat(4828.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2740), 1963);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong0 = new ConstantLong((-1890L));
      constantArray0[3] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger(374);
      constantArray0[5] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(3812, (-889), constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = null;
      try {
        simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, (ConstantPoolGen) null, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // SimpleElementValueGen class does not know how to copy this type 3812
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      arrayElementValueGen0.stringifyValue();
      arrayElementValueGen0.getElementValuesSize();
      arrayElementValueGen0.stringifyValue();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, 70);
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      arrayElementValueGen0.getElementValue();
      arrayElementValueGen0.stringifyValue();
      ElementValue elementValue0 = arrayElementValueGen0.getElementValue();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("", "");
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      constantPoolGen0.lookupFieldref("2QpWYZU4Mog_\"o(", "wT&04 :SE@", "9|CrR");
      MockPrintStream mockPrintStream0 = new MockPrintStream("9|CrR");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      char[] charArray0 = new char[0];
      mockPrintStream0.println(charArray0);
      bufferedOutputStream0.write(1336);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      arrayElementValueGen0.dump(dataOutputStream0);
      arrayElementValueGen0.getElementValue();
      dataOutputStream0.writeInt((-1096));
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-1), 91, constantPoolGen0);
      enumElementValueGen0.dump(dataOutputStream0);
      arrayElementValueGen0.addElement(enumElementValueGen0);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      arrayElementValueGen0.getElementValue();
      arrayElementValueGen0.stringifyValue();
      constantPoolGen0.lookupFieldref("[]", " (0We9251IfA", (String) null);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(68, constantPoolGen0, 99);
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInteger cannot be cast to org.apache.bcel.classfile.ConstantDouble
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("", "");
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      constantPoolGen0.lookupFieldref("2QpWYZU4Mog_\"o(", "wT&04 :SE@", "9|CrR");
      MockPrintStream mockPrintStream0 = new MockPrintStream("9|CrR");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      bufferedOutputStream0.write(1336);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      arrayElementValueGen0.dump(dataOutputStream0);
      arrayElementValueGen0.getElementValue();
      dataOutputStream0.writeByte(68);
      dataOutputStream0.writeInt((-1096));
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-2), 91, constantPoolGen0);
      enumElementValueGen0.dump(dataOutputStream0);
      arrayElementValueGen0.addElement(enumElementValueGen0);
      arrayElementValueGen0.getElementValues();
      // Undeclared exception!
      try { 
        arrayElementValueGen0.getElementValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(0, constantPoolGen0);
      arrayElementValueGen0.addElement(classElementValueGen0);
      arrayElementValueGen0.addElement(classElementValueGen0);
      arrayElementValueGen0.getElementValues();
      arrayElementValueGen0.getElementValues();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      arrayElementValueGen0.dump(dataOutputStream0);
      assertEquals(1, arrayElementValueGen0.getElementValuesSize());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      arrayElementValueGen0.stringifyValue();
      arrayElementValueGen0.getElementValuesSize();
      arrayElementValueGen0.stringifyValue();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(1622, (-539), constantPoolGen0);
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      arrayElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        arrayElementValueGen0.stringifyValue();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen class does not know how to stringify type 1622
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      arrayElementValueGen0.stringifyValue();
      arrayElementValueGen0.getElementValuesSize();
      arrayElementValueGen0.stringifyValue();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(91, constantPoolGen0, 91);
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      SimpleElementValueGen simpleElementValueGen1 = new SimpleElementValueGen(1622, (-539), constantPoolGen0);
      arrayElementValueGen0.addElement(simpleElementValueGen1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(68);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Locale locale0 = Locale.ROOT;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "LR!0uy4EOh", (Object[]) constantArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen doesnt know how to write out type 91
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("", "");
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      constantPoolGen0.lookupFieldref("2QpWYZU4Mog_\"o(", "wT&04 :SE@", "9|CrR");
      MockPrintStream mockPrintStream0 = new MockPrintStream("9|CrR");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      bufferedOutputStream0.write(1336);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      arrayElementValueGen0.dump(dataOutputStream0);
      arrayElementValueGen0.getElementValue();
      dataOutputStream0.writeInt((-1096));
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 91, constantPoolGen0);
      enumElementValueGen0.dump(dataOutputStream0);
      arrayElementValueGen0.addElement(enumElementValueGen0);
      arrayElementValueGen0.getElementValues();
      // Undeclared exception!
      try { 
        arrayElementValueGen0.getElementValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayElementValue arrayElementValue0 = null;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "K[10`WmCKPrr)";
      constantPoolGen0.addString("K[10`WmCKPrr)");
      boolean boolean0 = true;
      constantPoolGen0.addLong(0L);
      String string1 = "t>3uqA}'>;W#tfj";
      String string2 = "d3w:NoV$T";
      constantPoolGen0.lookupInterfaceMethodref("", "t>3uqA}'>;W#tfj", "d3w:NoV$T");
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen((ArrayElementValue) null, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("qi");
      constantPoolGen0.addClass(">)qgT~s_:Nj'S5z|");
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ElementValue elementValue0 = arrayElementValueGen0.getElementValue();
      ElementValueGen.copy(elementValue0, constantPoolGen0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)91;
      Constant[] constantArray0 = new Constant[6];
      ConstantClass constantClass0 = new ConstantClass((byte)91);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen((ArrayElementValue) null, constantPoolGen0, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ElementValueGen elementValueGen0 = null;
      arrayElementValueGen0.addElement((ElementValueGen) null);
      arrayElementValueGen0.getElementValues();
      arrayElementValueGen0.getElementValuesSize();
      arrayElementValueGen0.addElement((ElementValueGen) null);
      arrayElementValueGen0.getElementValuesSize();
      File file0 = MockFile.createTempFile("5S){-!", "5S){-!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "5S){-!", (Object[]) constantArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      dataOutputStream0.writeBytes("5S){-!");
      // Undeclared exception!
      try { 
        arrayElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ArrayElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = null;
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen((ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.getElementValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ArrayElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[0];
      ConstantPoolGen constantPoolGen0 = null;
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen((-2077), elementValueArray0, (ConstantPoolGen) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Only element values of type array can be built with this ctor - type specified: -2077
         //
         verifyException("org.apache.bcel.generic.ArrayElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[0];
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen(0, elementValueArray0, (ConstantPoolGen) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Only element values of type array can be built with this ctor - type specified: 0
         //
         verifyException("org.apache.bcel.generic.ArrayElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("XOg45_<");
      mockFileOutputStream0.getChannel();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.writeFloat(99);
      arrayElementValueGen0.dump(dataOutputStream0);
      arrayElementValueGen0.getElementValuesSize();
      arrayElementValueGen0.getElementValues();
      arrayElementValueGen0.getElementValuesSize();
      arrayElementValueGen0.getElementValuesSize();
      arrayElementValueGen0.stringifyValue();
      arrayElementValueGen0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      arrayElementValueGen0.getElementValue();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType("", 5024);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 5024
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      arrayElementValueGen0.stringifyValue();
      arrayElementValueGen0.getElementValuesSize();
      arrayElementValueGen0.getElementValuesSize();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      arrayElementValueGen0.addElement(enumElementValueGen0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen((ConstantPoolGen) null);
      String string0 = arrayElementValueGen0.stringifyValue();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1024);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantInteger constantInteger0 = new ConstantInteger(1024);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      DataOutputStream dataOutputStream0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, visitor0);
      ConstantString constantString0 = new ConstantString(0);
      ConstantString constantString1 = new ConstantString(constantString0);
      descendingVisitor0.visitConstantString(constantString1);
      constantMethodType0.accept(descendingVisitor0);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ArrayElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      arrayElementValueGen0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[10];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, constantPool0);
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen(arrayElementValue0, constantPoolGen0, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(68, constantPoolGen0);
      arrayElementValueGen0.addElement(classElementValueGen0);
      arrayElementValueGen0.getElementValues();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(68);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      arrayElementValueGen0.dump(dataOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(68, constantPoolGen0);
      arrayElementValueGen0.addElement(classElementValueGen0);
      arrayElementValueGen0.getElementValues();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(68);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      arrayElementValueGen0.dump(dataOutputStream0);
      assertNotNull(byteArrayOutputStream0.toString());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      arrayElementValueGen0.stringifyValue();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(90, 83, constantPoolGen0);
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      arrayElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        arrayElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(91, elementValueArray0, constantPoolGen0);
      int int0 = arrayElementValueGen0.getElementValuesSize();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[14];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen(91, elementValueArray0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      ArrayElementValue arrayElementValue0 = (ArrayElementValue)arrayElementValueGen0.getElementValue();
      ArrayElementValueGen arrayElementValueGen1 = new ArrayElementValueGen(arrayElementValue0, constantPoolGen0, false);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[16];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = null;
      try {
        arrayElementValueGen0 = new ArrayElementValueGen(921, elementValueArray0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Only element values of type array can be built with this ctor - type specified: 921
         //
         verifyException("org.apache.bcel.generic.ArrayElementValueGen", e);
      }
  }
