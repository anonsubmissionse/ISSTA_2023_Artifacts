 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(628, 1091);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = null;
      try {
        constantHTML0 = new ConstantHTML("+{+^M<)4}B x]z", "+{+^M<)4}B x]z", "+{+^M<)4}B x]z", (Method[]) null, constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1091. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = new ConstantHTML(".", "b@9==`zAcb~q5yV(Te", "b@9==`zAcb~q5yV(Te", (Method[]) null, constantPool0);
      String string0 = constantHTML0.referenceConstant(0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = new ConstantHTML(".", "b@9==`zAcb~q5yV(Te", "b@9==`zAcb~q5yV(Te", (Method[]) null, constantPool0);
      String string0 = constantHTML0.referenceConstant(0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = new ConstantHTML("\">NameAndType(", "\">NameAndType(", "\">NameAndType(", (Method[]) null, constantPool0);
      // Undeclared exception!
      try { 
        constantHTML0.referenceConstant(132);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 132
         //
         verifyException("org.apache.bcel.util.ConstantHTML", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantHTML constantHTML0 = null;
      try {
        constantHTML0 = new ConstantHTML("", "", "", (Method[]) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ConstantHTML", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantDynamic constantDynamic0 = new ConstantDynamic(0, 0);
      constantArray0[2] = (Constant) constantDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = null;
      try {
        constantHTML0 = new ConstantHTML("<TR BGCOLOR=\"#A0A0A0\"><TD>", "<TR BGCOLOR=\"#A0A0A0\"><TD>", (String) null, (Method[]) null, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown constant type 17
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Method[] methodArray0 = new Method[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = null;
      try {
        constantHTML0 = new ConstantHTML("I):2yb\".?9]B", "I):2yb\".?9]B", "\" TARGET=Constants>", methodArray0, constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.util.ConstantHTML", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(")</A><");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = null;
      try {
        constantHTML0 = new ConstantHTML(")</A></UL>", "aG*", ")</A></UL>", (Method[]) null, constantPool0);
        fail("Expecting exception: FileNotFoundException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Constant[] constantArray0 = new Constant[6];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2515, 2515);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = null;
      try {
        constantHTML0 = new ConstantHTML("Ia", "Ia", "Ia", methodArray0, constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2515. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-5), (byte) (-5));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = null;
      try {
        constantHTML0 = new ConstantHTML("", "", "", methodArray0, constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -5. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[20];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(511, 511);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = null;
      try {
        constantHTML0 = new ConstantHTML("<A HREF=\"", "<A HREF=\"", "<A HREF=\"", (Method[]) null, constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 511. Constant pool size is: 20
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Method[] methodArray0 = new Method[3];
      Constant[] constantArray0 = new Constant[9];
      ConstantString constantString0 = new ConstantString(21);
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = null;
      try {
        constantHTML0 = new ConstantHTML("6db(0b|||o+", "6db(0b|||o+", "6db(0b|||o+", methodArray0, constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[14];
      ConstantClass constantClass0 = new ConstantClass(21);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = null;
      try {
        constantHTML0 = new ConstantHTML("private", "private", "private", (Method[]) null, constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21. Constant pool size is: 14
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[23];
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = new ConstantHTML("aT", "aT", "aT", (Method[]) null, constantPool0);
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[23];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantHTML constantHTML0 = new ConstantHTML("aT", "aT", "aT", (Method[]) null, constantPool0);
      String string0 = constantHTML0.referenceConstant(4);
      assertNotNull(string0);
}
