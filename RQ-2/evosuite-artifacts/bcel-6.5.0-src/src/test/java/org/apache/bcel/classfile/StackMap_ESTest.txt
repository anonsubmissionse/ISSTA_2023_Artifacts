 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMap stackMap0 = new StackMap(151, 28, stackMapEntryArray0, constantPool0);
      // Undeclared exception!
      try { 
        stackMap0.copy(constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(14, 14, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntryArray0[0] = stackMapEntry0;
      StackMap stackMap0 = new StackMap(14, 0, stackMapEntryArray0, constantPool0);
      stackMap0.setStackMap(stackMapEntryArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMap stackMap0 = new StackMap(14, 0, stackMapEntryArray0, constantPool0);
      StackMapEntry[] stackMapEntryArray1 = stackMap0.getStackMap();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap((-31), (-31), stackMapEntryArray0, (ConstantPool) null);
      StackMapEntry[] stackMapEntryArray1 = stackMap0.getStackMap();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMap stackMap0 = new StackMap(14, 0, stackMapEntryArray0, constantPool0);
      int int0 = stackMap0.getMapLength();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap(0, 0, stackMapEntryArray0, (ConstantPool) null);
      Attribute attribute0 = stackMap0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMap stackMap0 = new StackMap(56, 56, stackMapEntryArray0, constantPool0);
      Attribute attribute0 = stackMap0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StackMap stackMap0 = new StackMap((-636), 450, (StackMapEntry[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMap0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(151, 151, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntryArray0[0] = stackMapEntry0;
      StackMap stackMap0 = new StackMap(151, 28, stackMapEntryArray0, constantPool0);
      // Undeclared exception!
      try { 
        stackMap0.setStackMap(stackMapEntryArray0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Invalid StackMap frameType: 151
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(108, 14, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntryArray0[0] = stackMapEntry0;
      StackMap stackMap0 = new StackMap(14, 0, stackMapEntryArray0, constantPool0);
      // Undeclared exception!
      try { 
        stackMap0.setStackMap(stackMapEntryArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(108, 14, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntryArray0[0] = stackMapEntry0;
      StackMap stackMap0 = new StackMap(14, 0, stackMapEntryArray0, constantPool0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<LtU7\u0006Ib9U~%#");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        stackMap0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap((-31), (-31), stackMapEntryArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Yc`xKWm+rl)Nan");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        stackMap0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMap stackMap0 = new StackMap((-860), (-665), (StackMapEntry[]) null, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        stackMap0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[2] = (byte) (-19);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      StackMap stackMap0 = null;
      try {
        stackMap0 = new StackMap((-30), (-1227), dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid frame type found while parsing stack map table: 237
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackMap stackMap0 = null;
      try {
        stackMap0 = new StackMap((-3992), 2912, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMap stackMap0 = null;
      try {
        stackMap0 = new StackMap(1685, 1685, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      StackMap stackMap0 = null;
      try {
        stackMap0 = new StackMap((-30), (-1227), dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMap stackMap0 = new StackMap((-860), (-665), (StackMapEntry[]) null, constantPool0);
      int int0 = stackMap0.getMapLength();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap((-31), (-31), stackMapEntryArray0, (ConstantPool) null);
      Attribute attribute0 = stackMap0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[6];
      StackMap stackMap0 = new StackMap(0, 244, stackMapEntryArray0, (ConstantPool) null);
      String string0 = stackMap0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[6];
      StackMap stackMap0 = new StackMap(0, 244, stackMapEntryArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMap0.setStackMap(stackMapEntryArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[1];
      StackMap stackMap0 = new StackMap(0, 0, stackMapEntryArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Yc`xKWm+rl)Nan");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        stackMap0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[0];
      StackMap stackMap0 = new StackMap((-31), (-31), stackMapEntryArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Yc`xKWm+rl)Nan");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      stackMap0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StackMapEntry[] stackMapEntryArray0 = new StackMapEntry[6];
      StackMap stackMap0 = new StackMap(0, 244, stackMapEntryArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      stackMap0.accept(emptyVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMap stackMap0 = new StackMap((-21), (-21), (StackMapEntry[]) null, constantPool0);
      StackMapEntry[] stackMapEntryArray0 = stackMap0.getStackMap();
      assertNotNull(stackMapEntryArray0);
}
