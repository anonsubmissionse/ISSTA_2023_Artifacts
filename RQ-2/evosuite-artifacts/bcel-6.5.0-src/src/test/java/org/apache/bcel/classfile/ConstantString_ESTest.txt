 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      int int0 = constantString0.getStringIndex();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-253));
      int int0 = constantString0.getStringIndex();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(2781);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantString0.getConstantValue(constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2781. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(8);
      // Undeclared exception!
      try { 
        constantString0.getBytes((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-1094));
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        constantString0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantString0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString((ConstantString) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(dataInputStream0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(2781);
      int int0 = constantString0.getStringIndex();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(174);
      // Undeclared exception!
      try { 
        constantString0.getConstantValue((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantString constantString0 = new ConstantString(dataInputStream0);
      // Undeclared exception!
      try { 
        constantString0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-183));
      MockFile mockFile0 = new MockFile("?I{WQ9=TPS", "CONSTANT_String[8](stringIndex = -183)");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      constantString0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-183));
      String string0 = constantString0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-183));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantString0.getBytes(constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -183. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-183));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantString0.accept(emptyVisitor0);
      assertEquals(0, constantString0.getStringIndex());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-183));
      constantString0.setStringIndex(16);
      assertEquals(0, constantString0.getStringIndex());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-1094));
      ConstantString constantString1 = new ConstantString(constantString0);
      assertEquals(1, constantString0.getStringIndex());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-1094));
      ConstantString constantString1 = new ConstantString(constantString0);
      ;
}
