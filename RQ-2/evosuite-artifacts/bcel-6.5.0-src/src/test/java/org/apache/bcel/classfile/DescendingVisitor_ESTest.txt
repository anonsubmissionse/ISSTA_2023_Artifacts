 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      descendingVisitor0.visitConstantPool(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int[] intArray0 = new int[2];
      ExceptionTable exceptionTable0 = new ExceptionTable(1879, (byte)3, intArray0, constantPool0);
      descendingVisitor0.visitExceptionTable(exceptionTable0);
      assertEquals(1, exceptionTable0.getNumberOfExceptions());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("};,^uKiL<LOe");
      descendingVisitor0.visitConstantUtf8(constantUtf8_0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantClass constantClass0 = new ConstantClass(67);
      descendingVisitor0.visitConstantClass(constantClass0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass((byte)3, 5753, 62, constantPool0);
      descendingVisitor0.visitModuleMainClass(moduleMainClass0);
      assertEquals(0, moduleMainClass0.getHostClassIndex());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2421);
      descendingVisitor0.visitConstantMethodType(constantMethodType0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      descendingVisitor0.visitConstantDouble(constantDouble0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      descendingVisitor0.visit();
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, (Visitor) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(493, 0, (StackMapType[]) null, (StackMapType[]) null, constantPool0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitStackMapEntry(stackMapEntry0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, (Visitor) null);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitStackMap((StackMap) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitNestMembers((NestMembers) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, (Visitor) null);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitModulePackages((ModulePackages) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitModule((Module) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitMethodParameters((MethodParameters) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitLocalVariableTypeTable((LocalVariableTypeTable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitLocalVariable((LocalVariable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitLineNumberTable((LineNumberTable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitLineNumber((LineNumber) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitJavaClass((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitInnerClass((InnerClass) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitDeprecated((Deprecated) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantPool((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantPackage((ConstantPackage) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantNameAndType((ConstantNameAndType) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantModule((ConstantModule) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantMethodref((ConstantMethodref) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantInvokeDynamic((ConstantInvokeDynamic) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)1);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantInteger(constantInteger0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantFloat(constantFloat0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFloat", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitCode((Code) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitAnnotationEntry((AnnotationEntry) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitAnnotation((Annotations) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      InnerClass[] innerClassArray0 = new InnerClass[2];
      InnerClass innerClass0 = new InnerClass((-1819), (-1819), 523, (-2140));
      innerClassArray0[0] = innerClass0;
      innerClassArray0[1] = innerClass0;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      InnerClasses innerClasses0 = new InnerClasses((byte)3, (byte)2, innerClassArray0, constantPool0);
      descendingVisitor0.visitInnerClasses(innerClasses0);
      assertEquals(0, innerClasses0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      InnerClass[] innerClassArray0 = new InnerClass[2];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      InnerClasses innerClasses0 = new InnerClasses((byte)3, (byte)2, innerClassArray0, constantPool0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitInnerClasses(innerClasses0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Attribute[] attributeArray0 = new Attribute[7];
      Method method0 = new Method(493, (-3319), (-1755), attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitMethod(method0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Attribute[] attributeArray0 = new Attribute[0];
      Field field0 = new Field((-1), (byte)2, (-1335), attributeArray0, constantPool0);
      descendingVisitor0.visitField(field0);
      assertFalse(field0.isVarArgs());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[27];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Attribute[] attributeArray0 = new Attribute[6];
      Field field0 = new Field((-1), (byte)2, (-1335), attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitField(field0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Object object0 = descendingVisitor0.predecessor((int) (byte)2);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      ConstantInteger constantInteger0 = new ConstantInteger(1926);
      descendingVisitor0.visitConstantInteger(constantInteger0);
      assertEquals(0, constantInteger0.getBytes());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue((byte)3, (byte)1, (byte)3, constantPool0);
      descendingVisitor0.visitConstantValue(constantValue0);
      assertEquals(1, constantValue0.getConstantValueIndex());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitExceptionTable((ExceptionTable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(493, 0, (StackMapType[]) null, (StackMapType[]) null, constantPool0);
      descendingVisitor0.visitStackMapEntry(stackMapEntry0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Deprecated deprecated0 = new Deprecated(31, 0, (byte[]) null, (ConstantPool) null);
      descendingVisitor0.visitDeprecated(deprecated0);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      CodeException codeException0 = new CodeException((-566), (-1265), (-6071), (-1799));
      descendingVisitor0.visitCodeException(codeException0);
      assertEquals(0, codeException0.getStartPC());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      ConstantLong constantLong0 = new ConstantLong((-1335));
      descendingVisitor0.visitConstantLong(constantLong0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(3089, (-1706));
      descendingVisitor0.visitConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertEquals(0, constantInterfaceMethodref0.getNameAndTypeIndex());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      ConstantString constantString0 = new ConstantString(1830);
      descendingVisitor0.visitConstantString(constantString0);
      assertEquals(0, constantString0.getStringIndex());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)1, (byte)1);
      descendingVisitor0.visitConstantMethodref(constantMethodref0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry((byte)2, constantPool0, true);
      descendingVisitor0.visitAnnotationEntry(annotationEntry0);
      assertEquals(1, annotationEntry0.getTypeIndex());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SourceFile sourceFile0 = new SourceFile(1535, (-1), 1032, constantPool0);
      descendingVisitor0.visitSourceFile(sourceFile0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantUtf8((ConstantUtf8) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      InnerClass innerClass0 = new InnerClass(0, (byte)3, 86, 0);
      descendingVisitor0.visitInnerClass(innerClass0);
      assertEquals(0, innerClass0.getInnerNameIndex());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)1, (byte)1);
      descendingVisitor0.visitConstantNameAndType(constantNameAndType0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      LineNumber lineNumber0 = new LineNumber((byte)3, 74);
      descendingVisitor0.visitLineNumber(lineNumber0);
      assertEquals(0, lineNumber0.getLineNumber());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantClass((ConstantClass) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      LocalVariable localVariable0 = new LocalVariable(197, (-2626), (-985), (-1235), (byte)1, constantPool0);
      descendingVisitor0.visitLocalVariable(localVariable0);
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantPackage constantPackage0 = new ConstantPackage(0);
      descendingVisitor0.visitConstantPackage(constantPackage0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Signature signature0 = new Signature((byte)3, (byte)1, dataInputStream0, constantPool0);
      descendingVisitor0.visitSignature(signature0);
      assertEquals(0, signature0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-339), (byte)3);
      descendingVisitor0.visitConstantFieldref(constantFieldref0);
      assertEquals(0, constantFieldref0.getClassIndex());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      LocalVariable localVariable0 = new LocalVariable(2, (byte)3, 2, 2, 2, constantPool0, (byte)3);
      localVariableArray0[0] = localVariable0;
      localVariableArray0[1] = localVariableArray0[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2, (byte)1, localVariableArray0, constantPool0);
      descendingVisitor0.visitLocalVariableTable(localVariableTable0);
      assertEquals(1, localVariableTable0.getTableLength());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(54, (byte)2, (LocalVariable[]) null, constantPool0);
      descendingVisitor0.visitLocalVariableTypeTable(localVariableTypeTable0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ClassElementValue classElementValue0 = new ClassElementValue(874, 3609, (ConstantPool) null);
      AnnotationDefault annotationDefault0 = new AnnotationDefault((byte)1, 874, classElementValue0, (ConstantPool) null);
      descendingVisitor0.visitAnnotationDefault(annotationDefault0);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Object object0 = descendingVisitor0.predecessor();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitModuleProvides((ModuleProvides) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      Synthetic synthetic0 = new Synthetic(20, (-1138), byteArray0, constantPool0);
      descendingVisitor0.visitSynthetic(synthetic0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitParameterAnnotationEntry((ParameterAnnotationEntry) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      LocalVariable localVariable0 = new LocalVariable(2, (byte)3, 2, 2, 2, constantPool0, (byte)3);
      localVariableArray0[0] = localVariable0;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2, (byte)1, localVariableArray0, constantPool0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitLocalVariableTable(localVariableTable0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      MethodParameter methodParameter0 = new MethodParameter();
      descendingVisitor0.visitMethodParameter(methodParameter0);
      assertEquals(1, methodParameter0.getAccessFlags());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(56, (-1016));
      descendingVisitor0.visitConstantMethodHandle(constantMethodHandle0);
      assertEquals(0, constantMethodHandle0.getReferenceKind());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantModule constantModule0 = new ConstantModule((byte)3);
      descendingVisitor0.visitConstantModule(constantModule0);
      assertEquals(0, constantModule0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte)1);
      descendingVisitor0.visitConstantFloat(constantFloat0);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      ConstantDouble constantDouble0 = new ConstantDouble((-1425.99776936));
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantDouble(constantDouble0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDouble", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitModuleMainClass((ModuleMainClass) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitEnclosingMethod((EnclosingMethod) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.current();
        fail("Expecting exception: EmptyStackException");
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitModuleOpens((ModuleOpens) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitUnknown((Unknown) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)3, (byte)3);
      descendingVisitor0.visitConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals(0, constantInvokeDynamic0.getNameAndTypeIndex());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      ConstantDynamic constantDynamic0 = new ConstantDynamic(1, (byte)2);
      descendingVisitor0.visitConstantDynamic(constantDynamic0);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      NestHost nestHost0 = new NestHost((-1762), 2, 54, (ConstantPool) null);
      descendingVisitor0.visitNestHost(nestHost0);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitBootstrapMethods((BootstrapMethods) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int[] intArray0 = new int[6];
      NestMembers nestMembers0 = new NestMembers(0, (byte)3, intArray0, constantPool0);
      descendingVisitor0.visitNestMembers(nestMembers0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, (Visitor) null);
      // Undeclared exception!
      try { 
        descendingVisitor0.visit();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      int[] intArray0 = new int[4];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ModulePackages modulePackages0 = new ModulePackages(62, 62, intArray0, constantPool0);
      descendingVisitor0.visitModulePackages(modulePackages0);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitModuleExports((ModuleExports) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      descendingVisitor0.visitJavaClass(javaClass0);
      assertFalse(javaClass0.isAbstract());
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2421);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitConstantMethodType(constantMethodType0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitModuleRequires((ModuleRequires) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        descendingVisitor0.visitParameterAnnotation((ParameterAnnotations) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPackage constantPackage0 = new ConstantPackage((byte)1);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[5] = (Constant) constantPackage0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      descendingVisitor0.visitConstantPool(constantPool0);
      ;
}
