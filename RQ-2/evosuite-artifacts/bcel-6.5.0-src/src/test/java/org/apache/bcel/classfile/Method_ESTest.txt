 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[5];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Method method0 = new Method((-877), (-877), 108, attributeArray0, constantPool1);
      // Undeclared exception!
      try { 
        method0.copy(constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[5];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-877), (-1), 108, attributeArray0, constantPool0);
      Method method1 = new Method(method0);
      // Undeclared exception!
      try { 
        method0.equals(method1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Method.setComparator((BCELComparator) null);
      BCELComparator bCELComparator0 = Method.getComparator();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Method method0 = new Method(9, 0, 9, attributeArray0, (ConstantPool) null);
      Method method1 = method0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Signature signature0 = new Signature((-670), (-670), (-670), constantPool0);
      attributeArray0[0] = (Attribute) signature0;
      Method method0 = new Method(35, (-670), 35, attributeArray0, constantPool0);
      method0.setAccessFlags(818);
      Method method1 = method0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      byte[] byteArray0 = new byte[5];
      Synthetic synthetic0 = new Synthetic(1245, (-563), byteArray0, (ConstantPool) null);
      attributeArray0[0] = (Attribute) synthetic0;
      Method method0 = new Method((-301), (-563), (-563), attributeArray0, (ConstantPool) null);
      Method method1 = method0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      byte[] byteArray0 = new byte[5];
      Synthetic synthetic0 = new Synthetic((-302), (-302), byteArray0, (ConstantPool) null);
      attributeArray0[0] = (Attribute) synthetic0;
      Method method0 = new Method();
      method0.setAttributes(attributeArray0);
      Method method1 = method0.copy((ConstantPool) null);
      assertFalse(method1.isStatic());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Method method0 = new Method(7, 17, 7, attributeArray0, (ConstantPool) null);
      Method method1 = method0.copy((ConstantPool) null);
      assertTrue(method1.isVolatile());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(35, (-670), 35, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        method0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 35. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[5];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-877), (-1), 108, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        method0.hashCode();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 108. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Method method0 = new Method();
      BCELComparator bCELComparator0 = Field.getComparator();
      Method.setComparator(bCELComparator0);
      // Undeclared exception!
      try { 
        method0.hashCode();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.Method cannot be cast to org.apache.bcel.classfile.Field
         //
         verifyException("org.apache.bcel.classfile.Field$1", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getReturnType();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getParameterAnnotationEntries();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ParameterAnnotationEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-1367), (-1757), (-1757), (Attribute[]) null, constantPool0);
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLineNumberTable();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getExceptionTable();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getCode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(35, (-670), 35, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        method0.getArgumentTypes();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 35. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.equals(method0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[6];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(54, 206);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(54, (-670), 54, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        method0.equals(constantArray0[3]);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInterfaceMethodref cannot be cast to org.apache.bcel.classfile.Method
         //
         verifyException("org.apache.bcel.classfile.Method$1", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Method method0 = null;
      try {
        method0 = new Method((Method) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = null;
      try {
        method0 = new Method(dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = null;
      try {
        method0 = new Method(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[5];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-877), (-1), 108, attributeArray0, constantPool0);
      Code code0 = method0.getCode();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[6];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-894), (-894), (-894), attributeArray0, constantPool0);
      method0.getParameterAnnotationEntries();
      ParameterAnnotationEntry[] parameterAnnotationEntryArray0 = method0.getParameterAnnotationEntries();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[6];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-894), (-894), (-894), attributeArray0, constantPool0);
      LineNumberTable lineNumberTable0 = method0.getLineNumberTable();
      assertNotNull(lineNumberTable0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[5];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-877), (-1), 108, attributeArray0, constantPool0);
      ExceptionTable exceptionTable0 = method0.getExceptionTable();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[5];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-877), (-1), 108, attributeArray0, constantPool0);
      LocalVariableTable localVariableTable0 = method0.getLocalVariableTable();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.hashCode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BCELComparator bCELComparator0 = Method.getComparator();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-1367), (-1757), (-1757), (Attribute[]) null, constantPool0);
      // Undeclared exception!
      try { 
        method0.getReturnType();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1757. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Method method0 = new Method();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      method0.accept(emptyVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getArgumentTypes();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Method method0 = null;
      try {
        method0 = new Method(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
