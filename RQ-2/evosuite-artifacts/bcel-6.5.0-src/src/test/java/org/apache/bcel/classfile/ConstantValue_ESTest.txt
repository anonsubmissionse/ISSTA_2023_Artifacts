 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantValue constantValue0 = new ConstantValue(0, 0, 0, constantPool1);
      Attribute attribute0 = constantValue0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue((-2888), (-2888), 1, (ConstantPool) null);
      constantValue0.setConstantValueIndex(21);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue(232, 232, 1, constantPool0);
      File file0 = MockFile.createTempFile("e1}`u", "p|};[q8&cndX0 x", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantValue0.dump(dataOutputStream0);
      assertEquals(0, constantValue0.getConstantValueIndex());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue(0, 0, 0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantValue0.accept(emptyVisitor0);
      assertEquals(0, constantValue0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue(0, 0, 0, (ConstantPool) null);
      int int0 = constantValue0.getConstantValueIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue((-2888), (-2888), 1, (ConstantPool) null);
      int int0 = constantValue0.getConstantValueIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue((-2888), (-2888), 1, (ConstantPool) null);
      ConstantValue constantValue1 = (ConstantValue)constantValue0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue((-2888), (-2888), 1, (ConstantPool) null);
      ConstantValue constantValue1 = (ConstantValue)constantValue0.copy((ConstantPool) null);
      assertEquals(0, constantValue1.getConstantValueIndex());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue(0, 0, (-1), constantPool0);
      // Undeclared exception!
      try { 
        constantValue0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue(0, 0, 0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        constantValue0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue((-1), 2468, 2468, (ConstantPool) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        constantValue0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantValue constantValue0 = null;
      try {
        constantValue0 = new ConstantValue((ConstantValue) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[22];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = null;
      try {
        constantValue0 = new ConstantValue((-4), (-4), (DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantValue constantValue0 = null;
      try {
        constantValue0 = new ConstantValue(0, 0, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = null;
      try {
        constantValue0 = new ConstantValue((-2810), (-2810), dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue((-1), (-1), (-1), (ConstantPool) null);
      int int0 = constantValue0.getConstantValueIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue((-2055), (-556), dataInputStream0, constantPool0);
      assertEquals(0, constantValue0.getConstantValueIndex());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue(1, 1, 1, constantPool0);
      String string0 = constantValue0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(32, 32);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue(32, 0, 0, constantPool0);
      // Undeclared exception!
      try { 
        constantValue0.toString();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Type of ConstValue invalid: CONSTANT_Fieldref[9](class_index = 32, name_and_type_index = 32)
         //
         verifyException("org.apache.bcel.classfile.ConstantValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((-123));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue(1, 1, 1, constantPool0);
      String string0 = constantValue0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue(168, 168, 1, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      try { 
        constantValue0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue(1, 1, 1, constantPool0);
      ConstantValue constantValue1 = (ConstantValue)constantValue0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue(1, 1, 1, constantPool0);
      ConstantValue constantValue1 = (ConstantValue)constantValue0.copy(constantPool0);
      assertEquals(0, constantValue1.getConstantValueIndex());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantValue constantValue0 = new ConstantValue(32, 0, 0, constantPool0);
      ConstantValue constantValue1 = new ConstantValue(constantValue0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-89), 110);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantValue constantValue0 = null;
      try {
        constantValue0 = new ConstantValue(0, 3, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantValue constantValue0 = new ConstantValue(0, 0, 0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        constantValue0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantValue", e);
      }
  }
