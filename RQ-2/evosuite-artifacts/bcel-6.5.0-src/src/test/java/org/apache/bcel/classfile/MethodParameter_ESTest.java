/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:32:10 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.MethodParameter;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodParameter_ESTest extends MethodParameter_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setNameIndex(2061);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        methodParameter0.getParameterName(constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2061. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      methodParameter0.accept(emptyVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      MethodParameter methodParameter0 = new MethodParameter(dataInputStream0);
      assertTrue(methodParameter0.isMandated());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setNameIndex(2061);
      int int0 = methodParameter0.getNameIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setNameIndex((-824));
      int int0 = methodParameter0.getNameIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setAccessFlags(2961);
      int int0 = methodParameter0.getAccessFlags();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setAccessFlags((-966));
      int int0 = methodParameter0.getAccessFlags();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setNameIndex(111);
      MethodParameter methodParameter1 = methodParameter0.copy();
      assertEquals(0, methodParameter1.getNameIndex());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setAccessFlags(55);
      MethodParameter methodParameter1 = methodParameter0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setAccessFlags((-824));
      methodParameter0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setNameIndex((-1761));
      // Undeclared exception!
      try { 
        methodParameter0.getParameterName((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.MethodParameter", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      // Undeclared exception!
      try { 
        methodParameter0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.MethodParameter", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sp$tWK5Q\"+?R&]j-k", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.close();
      try { 
        methodParameter0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3158), 108);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      MethodParameter methodParameter0 = null;
      try {
        methodParameter0 = new MethodParameter(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1552);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      MethodParameter methodParameter0 = null;
      try {
        methodParameter0 = new MethodParameter(dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      MethodParameter methodParameter0 = null;
      try {
        methodParameter0 = new MethodParameter(dataInputStream0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setAccessFlags((-773));
      boolean boolean0 = methodParameter0.isMandated();
      assertTrue(methodParameter0.isFinal());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setAccessFlags((-773));
      boolean boolean0 = methodParameter0.isMandated();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      boolean boolean0 = methodParameter0.isMandated();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setAccessFlags((-1801));
      boolean boolean0 = methodParameter0.isSynthetic();
      assertFalse(methodParameter0.isMandated());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setAccessFlags((-1801));
      boolean boolean0 = methodParameter0.isSynthetic();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      boolean boolean0 = methodParameter0.isSynthetic();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      boolean boolean0 = methodParameter0.isFinal();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      String string0 = methodParameter0.getParameterName((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      // Undeclared exception!
      try { 
        methodParameter0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.MethodParameter", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MethodParameter methodParameter0 = null;
      try {
        methodParameter0 = new MethodParameter((DataInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.MethodParameter", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      int int0 = methodParameter0.getNameIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      int int0 = methodParameter0.getAccessFlags();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setAccessFlags((-1801));
      boolean boolean0 = methodParameter0.isFinal();
      assertTrue(methodParameter0.isSynthetic());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setAccessFlags((-1801));
      boolean boolean0 = methodParameter0.isFinal();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      methodParameter0.setNameIndex((-3460));
      MethodParameter methodParameter1 = methodParameter0.copy();
      assertEquals(0, methodParameter1.getNameIndex());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MethodParameter methodParameter0 = new MethodParameter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sp$tWK5Q\"+?R&]j-k", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      methodParameter0.dump(dataOutputStream0);
      assertEquals(0, methodParameter0.getAccessFlags());
}
}
