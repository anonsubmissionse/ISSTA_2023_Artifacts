/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:54:18 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.ConstantDynamic;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantDynamic_ESTest extends ConstantDynamic_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic((-2487), 0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantDynamic0.accept(descendingVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(0, 0);
      int int0 = constantDynamic0.getBootstrapMethodAttrIndex();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(1915, 842);
      int int0 = constantDynamic0.getBootstrapMethodAttrIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantDynamic constantDynamic0 = null;
      try {
        constantDynamic0 = new ConstantDynamic((ConstantDynamic) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDynamic", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantDynamic constantDynamic0 = null;
      try {
        constantDynamic0 = new ConstantDynamic((DataInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDynamic", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-124), (byte)41);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1791);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantDynamic constantDynamic0 = null;
      try {
        constantDynamic0 = new ConstantDynamic(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantDynamic constantDynamic0 = null;
      try {
        constantDynamic0 = new ConstantDynamic(dataInputStream0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantDynamic constantDynamic0 = new ConstantDynamic(dataInputStream0);
      assertEquals(1, constantDynamic0.getClassIndex());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic((-2487), 0);
      int int0 = constantDynamic0.getBootstrapMethodAttrIndex();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantDynamic constantDynamic0 = null;
      try {
        constantDynamic0 = new ConstantDynamic(dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic((-14), (-14));
      // Undeclared exception!
      try { 
        constantDynamic0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDynamic", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic((-14), (-14));
      ConstantDynamic constantDynamic1 = new ConstantDynamic(constantDynamic0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic((-14), (-14));
      String string0 = constantDynamic0.toString();
      ;
}
}
