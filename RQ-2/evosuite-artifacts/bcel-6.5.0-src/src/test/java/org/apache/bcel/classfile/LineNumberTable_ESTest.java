/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:14:05 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LineNumber;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineNumberTable_ESTest extends LineNumberTable_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[2];
      LineNumber lineNumber0 = new LineNumber((-26), (-2934));
      lineNumberArray0[0] = lineNumber0;
      lineNumberArray0[1] = lineNumber0;
      Constant[] constantArray0 = new Constant[18];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      LineNumberTable lineNumberTable0 = new LineNumberTable((-2934), (-2934), lineNumberArray0, constantPool1);
      Attribute attribute0 = lineNumberTable0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(22, 22);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LineNumber[] lineNumberArray0 = new LineNumber[9];
      lineNumberArray0[1] = lineNumber0;
      lineNumberArray0[2] = lineNumber0;
      lineNumberArray0[3] = lineNumber0;
      LineNumber lineNumber1 = new LineNumber(dataInputStream0);
      lineNumberArray0[4] = lineNumber1;
      LineNumberTable lineNumberTable0 = new LineNumberTable(1, (-1068), lineNumberArray0, (ConstantPool) null);
      int int0 = lineNumberTable0.getSourceLine(60);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(22, 22);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LineNumber[] lineNumberArray0 = new LineNumber[9];
      lineNumberArray0[1] = lineNumber0;
      lineNumberArray0[2] = lineNumber0;
      LineNumber lineNumber1 = new LineNumber(dataInputStream0);
      lineNumberArray0[4] = lineNumber1;
      LineNumberTable lineNumberTable0 = new LineNumberTable(1, (-1068), lineNumberArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        lineNumberTable0.getSourceLine(60);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(22, 22);
      LineNumber[] lineNumberArray0 = new LineNumber[9];
      lineNumberArray0[1] = lineNumber0;
      lineNumberArray0[4] = lineNumberArray0[1];
      LineNumberTable lineNumberTable0 = new LineNumberTable(1, (-1068), lineNumberArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        lineNumberTable0.getSourceLine(60);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(982, 982, lineNumberArray0, constantPool0);
      // Undeclared exception!
      try { 
        lineNumberTable0.getSourceLine(420);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[4];
      LineNumber lineNumber0 = new LineNumber((-2766), (-2766));
      lineNumberArray0[0] = lineNumber0;
      LineNumber lineNumber1 = new LineNumber(211, 211);
      lineNumberArray0[1] = lineNumber1;
      LineNumber lineNumber2 = new LineNumber(211, (-2766));
      lineNumberArray0[2] = lineNumber2;
      LineNumberTable lineNumberTable0 = new LineNumberTable((-2766), (-2766), lineNumberArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        lineNumberTable0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(982, 982, lineNumberArray0, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      lineNumberTable0.accept(emptyVisitor0);
      assertEquals(0, lineNumberTable0.getTableLength());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[8];
      LineNumber lineNumber0 = new LineNumber(1, 0);
      lineNumberArray0[3] = lineNumber0;
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, 0, lineNumberArray0, (ConstantPool) null);
      int int0 = lineNumberTable0.getSourceLine(1);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(8, (-482), (LineNumber[]) null, constantPool0);
      LineNumber[] lineNumberArray0 = lineNumberTable0.getLineNumberTable();
      assertNotNull(lineNumberArray0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable((-1081), (-1081), lineNumberArray0, constantPool0);
      LineNumber[] lineNumberArray1 = lineNumberTable0.getLineNumberTable();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, 0, lineNumberArray0, constantPool0);
      Attribute attribute0 = lineNumberTable0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(982, 982, lineNumberArray0, constantPool0);
      Attribute attribute0 = lineNumberTable0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[2];
      Constant[] constantArray0 = new Constant[18];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable((-2934), (-2934), lineNumberArray0, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        lineNumberTable0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[8];
      LineNumberTable lineNumberTable0 = new LineNumberTable((-1), (-1), lineNumberArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        lineNumberTable0.copy((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineNumberTable lineNumberTable0 = null;
      try {
        lineNumberTable0 = new LineNumberTable((LineNumberTable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = null;
      try {
        lineNumberTable0 = new LineNumberTable((-1090), 4, dataInputStream0, constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      LineNumberTable lineNumberTable0 = null;
      try {
        lineNumberTable0 = new LineNumberTable(302, 302, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LineNumberTable lineNumberTable0 = new LineNumberTable((-618), 0, dataInputStream0, (ConstantPool) null);
      assertEquals(0, byteArrayInputStream0.available());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LineNumberTable lineNumberTable0 = null;
      try {
        lineNumberTable0 = new LineNumberTable((-618), 22, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[8];
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, 0, lineNumberArray0, (ConstantPool) null);
      LineNumber[] lineNumberArray1 = lineNumberTable0.getLineNumberTable();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, (-482), (LineNumber[]) null, constantPool0);
      int int0 = lineNumberTable0.getTableLength();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[2];
      Constant[] constantArray0 = new Constant[18];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable((-2934), (-2934), lineNumberArray0, constantPool0);
      int int0 = lineNumberTable0.getTableLength();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[2];
      LineNumber lineNumber0 = new LineNumber(0, (-2934));
      lineNumberArray0[0] = lineNumber0;
      lineNumberArray0[1] = lineNumberArray0[0];
      Constant[] constantArray0 = new Constant[18];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable((-2934), (-2934), lineNumberArray0, constantPool0);
      int int0 = lineNumberTable0.getSourceLine(11);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[2];
      LineNumber lineNumber0 = new LineNumber((-26), (-2934));
      lineNumberArray0[0] = lineNumber0;
      Constant[] constantArray0 = new Constant[18];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable((-2934), (-2934), lineNumberArray0, constantPool0);
      int int0 = lineNumberTable0.getSourceLine(11);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(982, 982, lineNumberArray0, constantPool0);
      int int0 = lineNumberTable0.getSourceLine(982);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[4];
      LineNumber lineNumber0 = new LineNumber((-2766), (-2766));
      lineNumberArray0[0] = lineNumber0;
      LineNumber lineNumber1 = new LineNumber(211, 211);
      lineNumberArray0[1] = lineNumber1;
      lineNumberArray0[2] = lineNumber1;
      lineNumberArray0[3] = lineNumber1;
      LineNumberTable lineNumberTable0 = new LineNumberTable((-2766), (-2766), lineNumberArray0, (ConstantPool) null);
      String string0 = lineNumberTable0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[4];
      LineNumber lineNumber0 = new LineNumber((-2766), (-2766));
      lineNumberArray0[0] = lineNumber0;
      lineNumberArray0[1] = lineNumberArray0[0];
      lineNumberArray0[2] = lineNumber0;
      LineNumberTable lineNumberTable0 = new LineNumberTable((-2766), (-2766), lineNumberArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        lineNumberTable0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(982, 982, lineNumberArray0, constantPool0);
      String string0 = lineNumberTable0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[8];
      LineNumberTable lineNumberTable0 = new LineNumberTable(7, 7, lineNumberArray0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("aload_3");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        lineNumberTable0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(982, 982, lineNumberArray0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2768);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      lineNumberTable0.dump(dataOutputStream0);
      assertEquals(0, lineNumberTable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LineNumberTable lineNumberTable0 = new LineNumberTable(0, 0, lineNumberArray0, constantPool0);
      lineNumberTable0.setLineNumberTable(lineNumberArray0);
      assertEquals(1, lineNumberTable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(982, 982, lineNumberArray0, constantPool0);
      // Undeclared exception!
      try { 
        lineNumberTable0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumberTable", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LineNumber[] lineNumberArray0 = new LineNumber[0];
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LineNumberTable lineNumberTable0 = new LineNumberTable(982, 982, lineNumberArray0, constantPool0);
      LineNumberTable lineNumberTable1 = new LineNumberTable(lineNumberTable0);
      ;
}
}
