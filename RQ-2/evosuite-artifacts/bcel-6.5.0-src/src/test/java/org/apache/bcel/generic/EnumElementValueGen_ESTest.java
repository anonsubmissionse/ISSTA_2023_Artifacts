/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:36:48 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantPackage;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EnumElementValue;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValueGen;
import org.apache.bcel.generic.EnumElementValueGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnumElementValueGen_ESTest extends EnumElementValueGen_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(enumElementValue0, constantPoolGen0, false);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "3BEk5Aa&", constantPoolGen0);
      String string0 = enumElementValueGen0.stringifyValue();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, (ConstantPoolGen) null);
      int int0 = enumElementValueGen0.getValueIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, (ConstantPoolGen) null);
      int int0 = enumElementValueGen0.getValueIndex();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, (ConstantPoolGen) null);
      int int0 = enumElementValueGen0.getTypeIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, (ConstantPoolGen) null);
      int int0 = enumElementValueGen0.getTypeIndex();
      assertEquals(0, enumElementValueGen0.getValueIndex());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-3888), 0, (ConstantPoolGen) null);
      int int0 = enumElementValueGen0.getTypeIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-3888), 0, (ConstantPoolGen) null);
      int int0 = enumElementValueGen0.getTypeIndex();
      assertEquals(0, enumElementValueGen0.getValueIndex());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "3BEk5Aa&", constantPoolGen0);
      String string0 = enumElementValueGen0.getEnumTypeString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "3BEk5Aa&", constantPoolGen0);
      EnumElementValue enumElementValue0 = (EnumElementValue)enumElementValueGen0.getElementValue();
      assertNotNull(enumElementValueGen0.getEnumTypeString());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "3BEk5Aa&", constantPoolGen0);
      EnumElementValue enumElementValue0 = (EnumElementValue)enumElementValueGen0.getElementValue();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "3BEk5Aa&", constantPoolGen0);
      EnumElementValue enumElementValue0 = (EnumElementValue)enumElementValueGen0.getElementValue();
      assertEquals(0, enumElementValue0.getTypeIndex());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "3BEk5Aa&", constantPoolGen0);
      EnumElementValue enumElementValue0 = (EnumElementValue)enumElementValueGen0.getElementValue();
      assertNotNull(enumElementValueGen0.getEnumValueString());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 1, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantLong cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-1872), (-1872), constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.stringifyValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1872
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPackage constantPackage0 = new ConstantPackage(0);
      constantArray0[0] = (Constant) constantPackage0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumValueString();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantPackage cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(16, (-833), constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumValueString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -833
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(1, 0, constantPoolGen0);
      constantPoolGen0.addLong(115);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumTypeString();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantLong cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(4412, (-59), constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumTypeString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4412
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addDouble(0.0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(1, 721, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getElementValue();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantDouble cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(4715, 1, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getElementValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4715
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 1620, (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        enumElementValueGen0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = null;
      try {
        enumElementValueGen0 = new EnumElementValueGen((ObjectType) null, "", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, constantPool0);
      EnumElementValueGen enumElementValueGen0 = null;
      try {
        enumElementValueGen0 = new EnumElementValueGen(enumElementValue0, (ConstantPoolGen) null, true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 101. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(249, 249, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getElementValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumTypeString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, (ConstantPoolGen) null);
      MockFile mockFile0 = new MockFile("Operand of LDC2_W must be CONSTANT_Long or CONSTANT_Double, but is '", "org.apache.bcel.generic.EnumElementValueGen");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 428);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      enumElementValueGen0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, (ConstantPoolGen) null);
      MockFile mockFile0 = new MockFile("Operand of LDC2_W must be CONSTANT_Long or CONSTANT_Double, but is '", "org.apache.bcel.generic.EnumElementValueGen");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 428);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      enumElementValueGen0.dump(dataOutputStream0);
      assertEquals(0, enumElementValueGen0.getTypeIndex());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(16, (-833), constantPoolGen0);
      int int0 = enumElementValueGen0.getValueIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(16, (-833), constantPoolGen0);
      int int0 = enumElementValueGen0.getValueIndex();
      assertEquals(0, enumElementValueGen0.getTypeIndex());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = null;
      try {
        enumElementValueGen0 = new EnumElementValueGen((EnumElementValue) null, constantPoolGen0, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        enumElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(206, 1976, constantPoolGen0);
      int int0 = enumElementValueGen0.getTypeIndex();
      assertEquals(0, enumElementValueGen0.getValueIndex());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(206, 1976, constantPoolGen0);
      int int0 = enumElementValueGen0.getTypeIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "", constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-1), 0, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getEnumValueString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
}
