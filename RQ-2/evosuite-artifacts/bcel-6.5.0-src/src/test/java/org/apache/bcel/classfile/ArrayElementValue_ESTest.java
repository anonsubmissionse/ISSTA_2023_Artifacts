/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:27:26 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import org.apache.bcel.classfile.ArrayElementValue;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ElementValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayElementValue_ESTest extends ArrayElementValue_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[0];
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, (ConstantPool) null);
      int int0 = arrayElementValue0.getElementValuesArraySize();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, constantPool0);
      int int0 = arrayElementValue0.getElementValuesArraySize();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, constantPool0);
      ElementValue[] elementValueArray1 = arrayElementValue0.getElementValuesArray();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[0];
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, (ConstantPool) null);
      ElementValue[] elementValueArray1 = arrayElementValue0.getElementValuesArray();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, constantPool0);
      MockFile mockFile0 = new MockFile("-_q!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      try { 
        arrayElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, constantPool0);
      // Undeclared exception!
      try { 
        arrayElementValue0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ArrayElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[0];
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, (ConstantPool) null);
      String string0 = arrayElementValue0.stringifyValue();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[2];
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, constantPool0);
      MockFile mockFile0 = new MockFile("-_q!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      // Undeclared exception!
      try { 
        arrayElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ArrayElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[0];
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, (ConstantPool) null);
      MockFile mockFile0 = new MockFile("{}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      arrayElementValue0.dump(dataOutputStream0);
      assertEquals(0, arrayElementValue0.getElementValueType());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ArrayElementValue arrayElementValue0 = null;
      try {
        arrayElementValue0 = new ArrayElementValue(0, elementValueArray0, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Only element values of type array can be built with this ctor - type specified: 0
         //
         verifyException("org.apache.bcel.classfile.ArrayElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ElementValue[] elementValueArray0 = new ElementValue[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, elementValueArray0, constantPool0);
      String string0 = arrayElementValue0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, (ElementValue[]) null, (ConstantPool) null);
      ElementValue[] elementValueArray0 = arrayElementValue0.getElementValuesArray();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, (ElementValue[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        arrayElementValue0.getElementValuesArraySize();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ArrayElementValue", e);
      }
  }
}
