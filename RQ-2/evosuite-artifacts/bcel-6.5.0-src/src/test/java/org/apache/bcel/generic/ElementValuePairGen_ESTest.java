/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:39:52 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.ClassElementValue;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDynamic;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.ElementValuePair;
import org.apache.bcel.classfile.SimpleElementValue;
import org.apache.bcel.generic.AnnotationElementValueGen;
import org.apache.bcel.generic.AnnotationEntryGen;
import org.apache.bcel.generic.ClassElementValueGen;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ElementValueGen;
import org.apache.bcel.generic.ElementValuePairGen;
import org.apache.bcel.generic.EnumElementValueGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.SimpleElementValueGen;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ElementValuePairGen_ESTest extends ElementValuePairGen_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("'&cWS}\"");
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, ";My&U w", constantPoolGen0);
      ElementValue elementValue0 = enumElementValueGen0.getElementValue();
      ElementValuePair elementValuePair0 = new ElementValuePair((-231), elementValue0, constantPool0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(elementValuePair0, constantPoolGen0, false);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, (ElementValueGen) null, constantPoolGen0);
      elementValuePairGen0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(1211, constantPoolGen0, 0.0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-802), simpleElementValueGen0, constantPoolGen0);
      elementValuePairGen0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-1400), constantPoolGen0, ',');
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, simpleElementValueGen0, constantPoolGen0);
      elementValuePairGen0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(209, 209, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(simpleElementValue0, constantPoolGen0, false);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("f~@%.e)^eV)>kl|G`L", simpleElementValueGen0, constantPoolGen0);
      String string0 = elementValuePairGen0.getNameString();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(1, constantPoolGen0, 0.0F);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("", simpleElementValueGen0, constantPoolGen0);
      String string0 = elementValuePairGen0.getNameString();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("@", (ElementValueGen) null, constantPoolGen0);
      int int0 = elementValuePairGen0.getNameIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-1), (ElementValueGen) null, constantPoolGen0);
      int int0 = elementValuePairGen0.getNameIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-1400), constantPoolGen0, ',');
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, simpleElementValueGen0, constantPoolGen0);
      ElementValuePair elementValuePair0 = elementValuePairGen0.getElementNameValuePair();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(1, constantPoolGen0, 0.0F);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(1, simpleElementValueGen0, constantPoolGen0);
      ElementValuePair elementValuePair0 = elementValuePairGen0.getElementNameValuePair();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-28), constantPoolGen0, (-10.638219F));
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-28), simpleElementValueGen0, constantPoolGen0);
      ElementValuePair elementValuePair0 = elementValuePairGen0.getElementNameValuePair();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("=", enumElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-977), constantPoolGen0, true);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("", simpleElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.toString();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen class does not know how to stringify type -977
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDynamic constantDynamic0 = new ConstantDynamic(0, 0);
      constantArray0[0] = (Constant) constantDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, (-372.0474203599797));
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, simpleElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.toString();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantDynamic cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(3095, (ElementValueGen) null, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3095
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, 749);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((byte)40, simpleElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.getNameString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(1211, constantPoolGen0, 0.0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-802), simpleElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.getNameString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -802
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-1), 1454, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(2766, enumElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.getElementNameValuePair();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("lconst_1", (ElementValueGen) null, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-1400), constantPoolGen0, ',');
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, simpleElementValueGen0, constantPoolGen0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("HNAwOufl");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.dump(dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen doesnt know how to write out type -1400
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(1, constantPoolGen0, 0.0F);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(1, simpleElementValueGen0, constantPoolGen0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        elementValuePairGen0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ClassElementValue classElementValue0 = new ClassElementValue(39, 0, constantPool0);
      ElementValuePair elementValuePair0 = new ElementValuePair(39, classElementValue0, constantPool0);
      ElementValuePairGen elementValuePairGen0 = null;
      try {
        elementValuePairGen0 = new ElementValuePairGen(elementValuePair0, (ConstantPoolGen) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (39)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ElementValuePairGen elementValuePairGen0 = null;
      try {
        elementValuePairGen0 = new ElementValuePairGen("ElementValuePair:[", (ElementValueGen) null, (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(0, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = null;
      try {
        elementValuePairGen0 = new ElementValuePairGen((String) null, classElementValueGen0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value must not be null.
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(1, constantPoolGen0, 0.0F);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(1, simpleElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.getNameString();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantFloat cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(604, constantPoolGen0, (short)56);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ElementValuePair elementValuePair0 = new ElementValuePair(2769, elementValue0, constantPool0);
      ElementValuePairGen elementValuePairGen0 = null;
      try {
        elementValuePairGen0 = new ElementValuePairGen(elementValuePair0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2769. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ElementValuePairGen elementValuePairGen0 = null;
      try {
        elementValuePairGen0 = new ElementValuePairGen((ElementValuePair) null, constantPoolGen0, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(0, 0, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("=", enumElementValueGen0, constantPoolGen0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(91);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      elementValuePairGen0.dump(dataOutputStream0);
      assertNotNull(byteArrayOutputStream0.toString());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen((AnnotationEntryGen) null, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("=dAU(|@FA}{/=^hj", annotationElementValueGen0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.toString();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet
         //
         verifyException("org.apache.bcel.generic.AnnotationElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-1), (ElementValueGen) null, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValuePairGen0.getElementNameValuePair();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValuePairGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, '?');
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, simpleElementValueGen0, constantPoolGen0);
      int int0 = elementValuePairGen0.getNameIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, '?');
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(0, simpleElementValueGen0, constantPoolGen0);
      elementValuePairGen0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("V");
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, ",B[|}|73ku!", constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(1, enumElementValueGen0, constantPoolGen0);
      String string0 = elementValuePairGen0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("V");
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, ",B[|}|73ku!", constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen(1, enumElementValueGen0, constantPoolGen0);
      String string0 = elementValuePairGen0.toString();
      ;
}
}
