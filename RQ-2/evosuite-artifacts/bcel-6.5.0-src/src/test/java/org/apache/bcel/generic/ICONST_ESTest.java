/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:35:05 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ICONST_ESTest extends ICONST_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ICONST iCONST0 = new ICONST(1);
      Number number0 = iCONST0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ICONST iCONST0 = new ICONST(1);
      Number number0 = iCONST0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ICONST iCONST0 = new ICONST((-1));
      Number number0 = iCONST0.getValue();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ICONST iCONST0 = new ICONST((-1));
      Number number0 = iCONST0.getValue();
      assertEquals(1, number0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ICONST iCONST0 = new ICONST();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        iCONST0.accept(instConstraintVisitor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ICONST iCONST0 = null;
      try {
        iCONST0 = new ICONST(41);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ICONST can be used only for value between -1 and 5: 41
         //
         verifyException("org.apache.bcel.generic.ICONST", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ICONST iCONST0 = null;
      try {
        iCONST0 = new ICONST((-1887));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ICONST can be used only for value between -1 and 5: -1887
         //
         verifyException("org.apache.bcel.generic.ICONST", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ICONST iCONST0 = new ICONST();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      // Undeclared exception!
      try { 
        iCONST0.accept(executionVisitor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ExecutionVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ICONST iCONST0 = new ICONST();
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = iCONST0.getType(constantPoolGen0);
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      LocalVariables localVariables0 = new LocalVariables(442);
      OperandStack operandStack0 = new OperandStack(3031, type0.THROWABLE);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      executionVisitor0.setFrame(frame0);
      iCONST0.accept(executionVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ICONST iCONST0 = new ICONST();
      Number number0 = iCONST0.getValue();
      assertEquals(0, number0);
}
}
