/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:35:32 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Visitor;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GOTO_ESTest extends GOTO_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      IfInstruction ifInstruction0 = iF_ICMPLT0.negate();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      int int0 = gOTO0.updatePosition((-611), 0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      IfInstruction ifInstruction0 = iF_ICMPLT0.negate();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) ifInstruction0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      int int0 = gOTO0.updatePosition((-611), 0);
      int int1 = gOTO0.updatePosition((-611), (-611));
      assertEquals(1, int1);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      I2S i2S0 = (I2S)InstructionConstants.I2S;
      InstructionHandle instructionHandle0 = new InstructionHandle(i2S0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      // Undeclared exception!
      try { 
        gOTO0.updatePosition(0, (-2132));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for goto[167](3):-1:  -1: i2s[147](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLT0);
      instructionList0.delete((InstructionHandle) branchHandle0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      // Undeclared exception!
      try { 
        gOTO0.updatePosition(33378, 33378);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      // Undeclared exception!
      try { 
        gOTO0.updatePosition(157, 157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        gOTO0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Target of goto[167](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      // Undeclared exception!
      try { 
        gOTO0.dump((DataOutputStream) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      // Undeclared exception!
      try { 
        gOTO0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.GOTO", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(33378);
      InstructionList instructionList0 = new InstructionList(iNSTANCEOF0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLT0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 7);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      gOTO0.updatePosition(33378, 33378);
      gOTO0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(33388);
      InstructionList instructionList0 = new InstructionList(iNSTANCEOF0);
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iF_ICMPLT0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        gOTO0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      gOTO0.accept(executionVisitor0);
      assertEquals(0, gOTO0.getIndex());
}
}
