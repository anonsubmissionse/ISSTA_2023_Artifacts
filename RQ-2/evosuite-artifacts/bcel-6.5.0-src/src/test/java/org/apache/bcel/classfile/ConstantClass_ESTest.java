/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:49:54 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantClass_ESTest extends ConstantClass_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(0);
      int int0 = constantClass0.getNameIndex();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(0);
      constantClass0.setNameIndex(2691);
      int int0 = constantClass0.getNameIndex();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(492);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantClass0.getConstantValue(constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(0);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantClass0.getBytes(constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(1407);
      // Undeclared exception!
      try { 
        constantClass0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-2969));
      // Undeclared exception!
      try { 
        constantClass0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass((ConstantClass) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1738), (byte)98);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1738
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass(dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass(dataInputStream0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      InputStream inputStream0 = classPath0.getInputStream("org.apache.bcel.classfile.ConstantClass");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      ConstantClass constantClass0 = new ConstantClass(dataInputStream0);
      assertEquals(0, constantClass0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-307));
      String string0 = constantClass0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-307));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantClass0.getBytes(constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-2774));
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantClass0.getConstantValue(constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -2774. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-2774));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertEquals(0, constantClass0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-2774));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(512);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantClass0.accept(emptyVisitor0);
      assertEquals(0, constantClass0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-307));
      int int0 = constantClass0.getNameIndex();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((-307));
      MockPrintStream mockPrintStream0 = new MockPrintStream("k-)?_kP<8sV[St-yr");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantClass0.dump(dataOutputStream0);
      assertEquals(0, constantClass0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
