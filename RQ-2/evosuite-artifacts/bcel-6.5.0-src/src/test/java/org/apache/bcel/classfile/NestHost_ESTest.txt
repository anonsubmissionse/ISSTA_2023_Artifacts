 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NestHost nestHost0 = new NestHost(0, 0, (-38), (ConstantPool) null);
      int int0 = nestHost0.getHostClassIndex();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      NestHost nestHost0 = new NestHost(3487, 0, 1829, constantPool0);
      NestHost nestHost1 = (NestHost)nestHost0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      NestHost nestHost0 = new NestHost(3487, 0, 1829, constantPool0);
      NestHost nestHost1 = (NestHost)nestHost0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost(0, 7, 7, constantPool0);
      NestHost nestHost1 = (NestHost)nestHost0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost(0, 7, 7, constantPool0);
      NestHost nestHost1 = (NestHost)nestHost0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost((-501), (-501), (-501), constantPool0);
      NestHost nestHost1 = (NestHost)nestHost0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost((-501), (-501), (-501), constantPool0);
      NestHost nestHost1 = (NestHost)nestHost0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost((-1869), (-1869), 3653, constantPool0);
      // Undeclared exception!
      try { 
        nestHost0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3653. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NestHost nestHost0 = null;
      try {
        nestHost0 = new NestHost((NestHost) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.NestHost", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NestHost nestHost0 = new NestHost(2605, 2605, 30, (ConstantPool) null);
      int int0 = nestHost0.getHostClassIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost(0, 7, 7, constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      nestHost0.accept(emptyVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestHost nestHost0 = new NestHost(1486, 1486, 1486, constantPool0);
      nestHost0.setHostClassIndex(1486);
      assertEquals(1, nestHost0.getHostClassIndex());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NestHost nestHost0 = new NestHost(2605, 2605, 30, (ConstantPool) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        nestHost0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NestHost nestHost0 = new NestHost(1, 1, 1, (ConstantPool) null);
      NestHost nestHost1 = new NestHost(nestHost0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NestHost nestHost0 = new NestHost(1, 1, 1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        nestHost0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.NestHost", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NestHost nestHost0 = null;
      try {
        nestHost0 = new NestHost((-3353), 2785, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.NestHost", e);
      }
  }
