 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.VOID;
      FieldGen fieldGen0 = new FieldGen(0, basicType0, (String) null, constantPoolGen0);
      String string0 = fieldGen0.getSignature();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      FieldGen fieldGen0 = new FieldGen(0, objectType0, (String) null, (ConstantPoolGen) null);
      ConstantPoolGen constantPoolGen0 = fieldGen0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(18, basicType0, basicType0.NO_ARGS, (String[]) null, "].Xe ", "Type can not be ", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.setType((Type) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DCONST dCONST0 = new DCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCONST0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(16, type0, (String) null, constantPoolGen0);
      String string0 = fieldGen0.getName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DCMPL dCMPL0 = new DCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPL0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(537, type0, "org.apache.bcel.generic.LXOR", (ConstantPoolGen) null);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Deprecated deprecated0 = new Deprecated(537, (-1063), (byte[]) null, constantPool0);
      fieldGen0.removeAttribute(deprecated0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(0, type0, (String) null, constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = fieldGen0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      FieldGen fieldGen0 = new FieldGen(0, objectType0, (String) null, (ConstantPoolGen) null);
      Attribute[] attributeArray0 = fieldGen0.getAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen((-29), type0, (String) null, constantPoolGen0);
      SourceFile sourceFile0 = new SourceFile(0, 8, 1, (ConstantPool) null);
      fieldGen0.addAttribute(sourceFile0);
      assertTrue(fieldGen0.isTransient());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      FieldGen fieldGen0 = new FieldGen(0, objectType0, (String) null, (ConstantPoolGen) null);
      fieldGen0.setConstantPool((ConstantPoolGen) null);
      assertTrue(fieldGen0.isNative());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BIPUSH bIPUSH0 = new BIPUSH();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = bIPUSH0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(4096, type0, "Type can not be ", constantPoolGen0);
      AnnotationEntryGen[] annotationEntryGenArray0 = fieldGen0.getAnnotationEntries();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      FieldGen fieldGen0 = null;
      try {
        fieldGen0 = new FieldGen(553, returnaddressType0, "lib/modu{es", (ConstantPoolGen) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Type can not be <return address>
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(0, type0, (String) null, constantPoolGen0);
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(type0.CLASS, linkedList0, true, constantPoolGen0);
      fieldGen0.addAnnotationEntry(annotationEntryGen0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.VOID;
      FieldGen fieldGen0 = new FieldGen(0, basicType0, (String) null, constantPoolGen0);
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(basicType0.CLASS, linkedList0, false, constantPoolGen0);
      fieldGen0.removeAnnotationEntry(annotationEntryGen0);
      assertFalse(annotationEntryGen0.isRuntimeVisible());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(0, type0, (String) null, constantPoolGen0);
      fieldGen0.removeAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCMPL fCMPL0 = new FCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(0, type0, (String) null, constantPoolGen0);
      fieldGen0.removeAnnotationEntries();
      assertTrue(fieldGen0.isStrictfp());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(18, basicType0, basicType0.NO_ARGS, (String[]) null, "].Xe ", "Type can not be ", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy("Type can not be ", constantPoolGen0);
      ;
}
