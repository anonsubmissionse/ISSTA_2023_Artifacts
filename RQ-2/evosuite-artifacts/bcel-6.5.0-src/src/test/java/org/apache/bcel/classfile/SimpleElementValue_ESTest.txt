 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(622, 2457, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueShort();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueShort() on a non SHORT ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(446, 99, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueBoolean();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueBoolean() on a non BOOLEAN ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(0, 0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueDouble();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueDouble() on a non DOUBLE ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-580), (-580), (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueFloat();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueFloat() on a non FLOAT ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-173), 771, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueLong();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueLong() on a non LONG ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(0, 0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueChar();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueChar() on a non CHAR ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(74, (-654), (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueByte();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueByte() on a non BYTE ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(66, 547, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueInt();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-727), 2139, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueString();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(0, 0, constantPool0);
      simpleElementValue0.setIndex(172);
      assertEquals(0, simpleElementValue0.getIndex());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(0, 0, (ConstantPool) null);
      int int0 = simpleElementValue0.getIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(423, (-2252), constantPool0);
      int int0 = simpleElementValue0.getIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(115, 115, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(83, 867, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueShort();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 73, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueInt();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 73. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(70, 66, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueFloat();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(68, 68, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueDouble();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 68. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(67, 67, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueChar();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(66, 66, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueByte();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(90, (-30), constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueBoolean();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(238, 238, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        simpleElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-3589), (-3589), (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // SimpleElementValue class does not know how to stringify type -3589
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(83, 83, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(66, 18, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[18];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 73, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 73. Constant pool size is: 18
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(68, 68, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 68. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(423, 423, constantPool0);
      int int0 = simpleElementValue0.getIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(1539, 1539, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        simpleElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // SimpleElementValue doesnt know how to write out type 1539
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(115, 115, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Only element values of type array can be built with this ctor - type specified: ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      simpleElementValue0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(90, 1128, (ConstantPool) null);
      MockFile mockFile0 = new MockFile("I<&|`,#R5L{mD");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      simpleElementValue0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(83, 83, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(";t-");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      simpleElementValue0.dump(dataOutputStream0);
      assertEquals(0, simpleElementValue0.getIndex());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(74, 547, (ConstantPool) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      simpleElementValue0.dump(dataOutputStream0);
      assertNotNull(byteArrayOutputStream0.toString());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(74, 547, (ConstantPool) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      simpleElementValue0.dump(dataOutputStream0);
      assertEquals(1, simpleElementValue0.getIndex());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 73, constantPool0);
      MockFile mockFile0 = new MockFile("p$\"s#7Uw?>c8m>");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      simpleElementValue0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(70, 70, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)74);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      simpleElementValue0.dump(dataOutputStream0);
      assertNotNull(byteArrayOutputStream0.toString());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(70, 70, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)74);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      simpleElementValue0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(68, 68, constantPool0);
      MockFile mockFile0 = new MockFile("CONSTANT_Fieldref[9](class_index = 68, name_and_type_index = 68)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      simpleElementValue0.dump(dataOutputStream0);
      assertEquals(0, simpleElementValue0.getIndex());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(67, 67, constantPool0);
      MockFile mockFile0 = new MockFile("CONSTANT_Fieldref[9](class_index = 67, name_and_type_index = 67)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      simpleElementValue0.dump(dataOutputStream0);
      assertEquals(0, simpleElementValue0.getIndex());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(66, 66, (ConstantPool) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      simpleElementValue0.dump(dataOutputStream0);
      assertNotNull(byteArrayOutputStream0.toString());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue((-2204), 202, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.toString();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // SimpleElementValue class does not know how to stringify type -2204
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(115, 115, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(90, 68, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(83, 552, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(74, 74, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(70, 70, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 70. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(68, 68, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 68. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(67, 67, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 67. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 73, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueShort();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueShort() on a non SHORT ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(83, 83, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueShort();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 83. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(43, 43, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueBoolean();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueBoolean() on a non BOOLEAN ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(90, 90, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueBoolean();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 90. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(90, 90, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueDouble();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueDouble() on a non DOUBLE ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 73, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueFloat();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueFloat() on a non FLOAT ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(70, 70, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueFloat();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 70. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(862, 862, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueLong();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueLong() on a non LONG ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(74, 74, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueLong();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(68, 68, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueChar();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueChar() on a non CHAR ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(67, 67, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueChar();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 67. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(0, 0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueByte();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueByte() on a non BYTE ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(66, 66, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueByte();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 66. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(74, 547, (ConstantPool) null);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueInt();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(73, 73, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueInt();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(243, 243, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueString();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Dont call getValueString() on a non STRING ElementValue
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(115, 140, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 140. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(68, 68, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.getValueDouble();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(639, 128, constantPool0);
      // Undeclared exception!
      try { 
        simpleElementValue0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
