 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.ConstantPool");
      javaClass0.isProtected(true);
      JavaClass javaClass1 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.ConstantPool");
      assertNotNull(javaClass1.getFileName());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.ConstantPool");
      javaClass0.isProtected(true);
      JavaClass javaClass1 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.ConstantPool");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.util.ClassLoaderRepository");
      javaClass0.isEnum(true);
      JavaClass javaClass1 = classLoaderRepository0.loadClass("org.apache.bcel.util.ClassLoaderRepository");
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.util.ClassLoaderRepository");
      javaClass0.isEnum(true);
      JavaClass javaClass1 = classLoaderRepository0.loadClass("org.apache.bcel.util.ClassLoaderRepository");
      assertNotNull(javaClass1.getFileName());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.ConstantPool");
      javaClass0.isAnnotation(true);
      JavaClass javaClass1 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.ConstantPool");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.ConstantPool");
      javaClass0.isAnnotation(true);
      JavaClass javaClass1 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.ConstantPool");
      assertNotNull(javaClass1.getFileName());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.isProtected(true);
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.isProtected(true);
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass1.getFileName());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.isVolatile(true);
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass1.getFileName());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.isVolatile(true);
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertTrue(javaClass1.isVolatile());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setAccessFlags((-3581));
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setAccessFlags((-3581));
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass1.getFileName());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0.getFileName());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setSuperclassNameIndex((-1431655764));
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertEquals(0, javaClass1.getSuperclassNameIndex());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setSuperclassNameIndex((-1431655764));
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass1.getFileName());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setMinor(972);
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass1.getFileName());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setMinor(972);
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertEquals(0, javaClass1.getMinor());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setMinor((-1994091957));
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertEquals(0, javaClass1.getMinor());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setMinor((-1994091957));
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass1.getFileName());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setAccessFlags((-2045222520));
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass1.getFileName());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      javaClass0.setAccessFlags((-2045222520));
      JavaClass javaClass1 = classLoaderRepository0.loadClass(class0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.Method");
      javaClass0.isProtected(true);
      JavaClass javaClass1 = classLoaderRepository0.findClass("org.apache.bcel.classfile.Method");
      assertEquals(javaClass0, javaClass1);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.classfile.Method");
      javaClass0.isProtected(true);
      JavaClass javaClass1 = classLoaderRepository0.findClass("org.apache.bcel.classfile.Method");
      assertNotNull(javaClass1.getFileName());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.loadClass("org.apache.bcel.classfile.Method$1");
      JavaClass javaClass0 = classLoaderRepository0.findClass("org.apache.bcel.classfile.Method$1");
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.loadClass("org.apache.bcel.classfile.Method$1");
      JavaClass javaClass0 = classLoaderRepository0.findClass("org.apache.bcel.classfile.Method$1");
      assertNotNull(javaClass0.getFileName());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.loadClass("java.lang.Comparable");
      JavaClass javaClass0 = classLoaderRepository0.findClass("java.lang.Comparable");
      assertNotNull(javaClass0.getFileName());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.loadClass("java.lang.Comparable");
      JavaClass javaClass0 = classLoaderRepository0.findClass("java.lang.Comparable");
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.loadClass("java.lang.Object");
      JavaClass javaClass0 = classLoaderRepository0.findClass("java.lang.Object");
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.loadClass("java.lang.Object");
      JavaClass javaClass0 = classLoaderRepository0.findClass("java.lang.Object");
      assertNotNull(javaClass0.getFileName());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      // Undeclared exception!
      try { 
        classLoaderRepository0.storeClass((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      // Undeclared exception!
      try { 
        classLoaderRepository0.removeClass((JavaClass) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      // Undeclared exception!
      try { 
        classLoaderRepository0.loadClass((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository((java.lang.ClassLoader) null);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        classLoaderRepository0.loadClass(class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader1);
      Class<JavaClass> class0 = JavaClass.class;
      try { 
        classLoaderRepository0.loadClass(class0);
        fail("Expecting exception: ClassNotFoundException");
      } catch(ClassNotFoundException e) {
         //
         // org.apache.bcel.classfile.JavaClass not found.
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.findClass("float");
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("org.apache.bcel.util.ClassLoaderRepository");
      classLoaderRepository0.storeClass(javaClass0);
      assertNotNull(javaClass0.getFileName());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      try { 
        classLoaderRepository0.loadClass("");
        fail("Expecting exception: ClassNotFoundException");
      } catch(ClassNotFoundException e) {
         //
         //  not found.
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.clear();
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      ClassPath classPath0 = classLoaderRepository0.getClassPath();
      assertNotNull(classPath0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      assertNotNull(javaClass0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      classLoaderRepository0.removeClass(javaClass0);
      assertNotNull(javaClass0.getFileName());
}
