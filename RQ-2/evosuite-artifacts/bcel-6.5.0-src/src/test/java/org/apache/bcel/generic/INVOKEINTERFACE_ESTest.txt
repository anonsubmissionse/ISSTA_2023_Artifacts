 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(256, 256);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(256, 256);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iNVOKEINTERFACE0.initFromFile(byteSequence0, true);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = iNVOKEINTERFACE0.consumeStack(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(256, 256);
      assertEquals(0, iNVOKEINTERFACE0.getCount());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(256, 256);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iNVOKEINTERFACE0.initFromFile(byteSequence0, true);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = iNVOKEINTERFACE0.toString(constantPool0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(256, 256);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iNVOKEINTERFACE0.initFromFile(byteSequence0, true);
      int int0 = iNVOKEINTERFACE0.getCount();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      iNVOKEINTERFACE0.dump(dataOutputStream0);
      assertNotNull(byteArrayOutputStream0.toString());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(0, 2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      iNVOKEINTERFACE0.dump(dataOutputStream0);
      assertEquals(0, iNVOKEINTERFACE0.getLength());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE();
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((-2379));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        iNVOKEINTERFACE0.toString(constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -2379. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE();
      Constant[] constantArray0 = new Constant[3];
      ConstantDynamic constantDynamic0 = new ConstantDynamic((-964), (-964));
      constantArray0[0] = (Constant) constantDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        iNVOKEINTERFACE0.toString(constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown constant type 17
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE();
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        iNVOKEINTERFACE0.toString(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE();
      // Undeclared exception!
      try { 
        iNVOKEINTERFACE0.initFromFile((ByteSequence) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(256, 256);
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iNVOKEINTERFACE0.initFromFile(byteSequence0, true);
      try { 
        iNVOKEINTERFACE0.initFromFile(byteSequence0, true);
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(1253, 1253);
      // Undeclared exception!
      try { 
        iNVOKEINTERFACE0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.INVOKEINTERFACE", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ireturn", true);
      mockFileOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        iNVOKEINTERFACE0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      LocalVariables localVariables0 = new LocalVariables(0);
      OperandStack operandStack0 = new OperandStack(0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      executionVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        iNVOKEINTERFACE0.accept(executionVisitor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = null;
      try {
        iNVOKEINTERFACE0 = new INVOKEINTERFACE(2396, (-30));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Number of arguments must be > 0 -30
         //
         verifyException("org.apache.bcel.generic.INVOKEINTERFACE", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE();
      int int0 = iNVOKEINTERFACE0.getCount();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE();
      Class<?>[] classArray0 = iNVOKEINTERFACE0.getExceptions();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(256, 256);
      assertEquals(0, iNVOKEINTERFACE0.getCount());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(256, 256);
      byte[] byteArray0 = new byte[25];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iNVOKEINTERFACE0.initFromFile(byteSequence0, true);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = iNVOKEINTERFACE0.consumeStack(constantPoolGen0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE();
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        iNVOKEINTERFACE0.toString(constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        iNVOKEINTERFACE0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
