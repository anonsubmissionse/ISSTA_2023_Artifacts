 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
      constantMethodHandle0.setReferenceKind(0);
      constantMethodHandle0.toString();
      constantMethodHandle0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1052, 1052);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      int int0 = 523;
      constantMethodHandle1.copy();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      constantMethodHandle1.dump(dataOutputStream0);
      Constant.readConstant(dataInputStream0);
      constantMethodHandle1.setReferenceKind(523);
      constantMethodHandle1.getReferenceKind();
      constantMethodHandle0.setReferenceKind(0);
      constantMethodHandle0.setReferenceKind(1052);
      constantMethodHandle1.setReferenceIndex((-689));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodHandle0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        constantMethodHandle0.equals(bCELComparator0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantMethodHandle cannot be cast to org.apache.bcel.classfile.JavaClass
         //
         verifyException("org.apache.bcel.classfile.JavaClass$1", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      constantMethodHandle0.accept(emptyVisitor0);
      BCELComparator bCELComparator1 = Method.getComparator();
      Constant.setComparator(bCELComparator1);
      constantMethodHandle0.toString();
      constantMethodHandle0.accept(emptyVisitor0);
      constantMethodHandle0.getReferenceKind();
      constantMethodHandle0.getReferenceKind();
      constantMethodHandle0.setReferenceKind(0);
      constantMethodHandle0.getReferenceKind();
      int int0 = 0;
      constantMethodHandle0.setReferenceKind(0);
      constantMethodHandle0.getReferenceIndex();
      constantMethodHandle0.getReferenceIndex();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantMethodHandle0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(15, 15);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle0.setReferenceIndex(3768);
      // Undeclared exception!
      try { 
        constantMethodHandle1.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = (-1144);
      int int1 = (-1);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1144), (-1));
      constantMethodHandle0.toString();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodHandle0.accept(emptyVisitor0);
      constantMethodHandle0.getReferenceKind();
      constantMethodHandle0.toString();
      constantMethodHandle0.accept(emptyVisitor0);
      constantMethodHandle0.copy();
      DataOutputStream dataOutputStream0 = null;
      // Undeclared exception!
      try { 
        constantMethodHandle0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1176), 2351);
      int int0 = constantMethodHandle0.getReferenceKind();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1176), 2351);
      int int0 = constantMethodHandle0.getReferenceKind();
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(611, 611);
      constantMethodHandle0.toString();
      constantMethodHandle0.getReferenceKind();
      constantMethodHandle0.getReferenceKind();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantMethodHandle0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(611, 611);
      constantMethodHandle0.toString();
      constantMethodHandle0.getReferenceKind();
      constantMethodHandle0.getReferenceKind();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantMethodHandle0.dump(dataOutputStream0);
      assertEquals(0, constantMethodHandle0.getReferenceKind());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 1113);
          ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
          constantMethodHandle1.getReferenceKind();
          constantMethodHandle0.setReferenceIndex(2598);
          constantMethodHandle0.setReferenceKind(4105);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor77.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1300), 212);
      int int0 = constantMethodHandle0.getReferenceIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1300), 212);
      int int0 = constantMethodHandle0.getReferenceIndex();
      assertEquals(0, constantMethodHandle0.getReferenceKind());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      String string0 = constantMethodHandle0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 783);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-502), 0);
      constantMethodHandle0.copy();
      constantMethodHandle0.setReferenceKind((-502));
      constantMethodHandle0.setReferenceIndex(0);
      constantMethodHandle0.setReferenceKind((-643));
      int int0 = constantMethodHandle0.getReferenceIndex();
      assertEquals(0, constantMethodHandle0.getReferenceKind());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-502), 0);
      constantMethodHandle0.copy();
      constantMethodHandle0.setReferenceKind((-502));
      constantMethodHandle0.setReferenceIndex(0);
      constantMethodHandle0.setReferenceKind((-643));
      int int0 = constantMethodHandle0.getReferenceIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle((ConstantMethodHandle) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataInput dataInput0 = null;
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle((DataInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1257, 1257);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle1.setReferenceKind((-1));
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1606), (-1));
      MockPrintStream mockPrintStream0 = new MockPrintStream("x3.V");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantMethodHandle0.dump(dataOutputStream0);
      assertEquals(0, constantMethodHandle0.getReferenceKind());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1606), (-1));
      MockPrintStream mockPrintStream0 = new MockPrintStream("x3.V");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantMethodHandle0.dump(dataOutputStream0);
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4126, 4126);
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      syntheticRepository0.findClass("(referenceKind = ");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantMethodHandle0.accept(descendingVisitor0);
      assertEquals(0, constantMethodHandle0.getReferenceKind());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4126, 4126);
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      syntheticRepository0.findClass("(referenceKind = ");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantMethodHandle0.accept(descendingVisitor0);
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2671), (-2671));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      int int0 = constantMethodHandle1.getReferenceIndex();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2671), (-2671));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      int int0 = constantMethodHandle1.getReferenceIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1437), 852);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle1.setReferenceKind(538);
      constantMethodHandle1.getReferenceKind();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      File file0 = MockFile.createTempFile("|JEzQUb2uF q:mwD", "");
      constantMethodHandle1.clone();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.println(false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantMethodHandle1.dump(dataOutputStream0);
      constantMethodHandle0.setReferenceIndex(0);
      constantMethodHandle0.toString();
      constantMethodHandle1.setReferenceKind((-829));
      constantMethodHandle1.accept(emptyVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
