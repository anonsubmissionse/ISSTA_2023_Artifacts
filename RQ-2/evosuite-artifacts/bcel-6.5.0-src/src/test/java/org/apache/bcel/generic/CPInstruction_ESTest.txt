 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF();
      MockFile mockFile0 = new MockFile(">:a(DxKk{#,rh/+|'0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      iNSTANCEOF0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY();
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("NL`-f^~");
      constantArray0[0] = (Constant) constantUtf8_0;
      mULTIANEWARRAY0.setOpcode((short)79);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = mULTIANEWARRAY0.toString(constantPool0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(8192);
      int int0 = iNVOKESPECIAL0.getIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF();
      iNSTANCEOF0.index = (-2283);
      int int0 = iNSTANCEOF0.getIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC();
      // Undeclared exception!
      try { 
        iNVOKEDYNAMIC0.toString(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LDC_W lDC_W0 = new LDC_W();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        lDC_W0.toString(constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC();
      // Undeclared exception!
      try { 
        iNVOKESTATIC0.toString((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InvokeInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CHECKCAST cHECKCAST0 = new CHECKCAST();
      Constant[] constantArray0 = new Constant[9];
      ConstantDynamic constantDynamic0 = new ConstantDynamic(65436, 65436);
      constantArray0[0] = (Constant) constantDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        cHECKCAST0.toString(constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown constant type 17
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF();
      // Undeclared exception!
      try { 
        iNSTANCEOF0.initFromFile((ByteSequence) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(46);
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        iNSTANCEOF0.initFromFile(byteSequence0, true);
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(88, (short)4396);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        mULTIANEWARRAY0.getType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Constant pool at index 88 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GETFIELD gETFIELD0 = new GETFIELD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        gETFIELD0.getType(constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NEW nEW0 = new NEW(2009);
      // Undeclared exception!
      try { 
        nEW0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(0);
      assertEquals(0, iNVOKESPECIAL0.getIndex());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(0);
      iNVOKESPECIAL0.setIndex(1);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(0);
      String string0 = iNVOKESPECIAL0.toString(false);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF();
      int int0 = iNSTANCEOF0.getIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CHECKCAST cHECKCAST0 = new CHECKCAST();
      // Undeclared exception!
      try { 
        cHECKCAST0.setIndex((-2971));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Negative index value: -2971
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF();
      Constant[] constantArray0 = new Constant[5];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        iNSTANCEOF0.toString(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CHECKCAST cHECKCAST0 = new CHECKCAST();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        cHECKCAST0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF();
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iNSTANCEOF0.initFromFile(byteSequence0, true);
      ;
}
