/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:38:57 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalVariable_ESTest extends LocalVariable_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, (-1), 1507, 2349, (-1), (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, (-1), 1507, 2349, (-1), (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      assertEquals(1, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, (-1), 1507, 2349, (-1), (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, (-1), 1507, 2349, (-1), (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, (-1), 1507, 2349, (-1), (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, (-1), 1507, 2349, (-1), (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(2832, 2832, 2832, 3245, 2832, (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(2832, 2832, 2832, 3245, 2832, (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(2832, 2832, 2832, 3245, 2832, (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(2832, 2832, 2832, 3245, 2832, (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(2832, 2832, 2832, 3245, 2832, (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(2832, 2832, 2832, 3245, 2832, (ConstantPool) null);
      int int0 = localVariable0.getStartPC();
      assertEquals(1, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getSignatureIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getSignatureIndex();
      assertEquals(1, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getSignatureIndex();
      assertEquals(1, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getSignatureIndex();
      assertEquals(1, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getSignatureIndex();
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getSignatureIndex();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, 1439, 1766, 0, 0, (ConstantPool) null);
      int int0 = localVariable0.getNameIndex();
      assertEquals(0, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, 1439, 1766, 0, 0, (ConstantPool) null);
      int int0 = localVariable0.getNameIndex();
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, 1439, 1766, 0, 0, (ConstantPool) null);
      int int0 = localVariable0.getNameIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, 1439, 1766, 0, 0, (ConstantPool) null);
      int int0 = localVariable0.getNameIndex();
      assertEquals(0, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, 1439, 1766, 0, 0, (ConstantPool) null);
      int int0 = localVariable0.getNameIndex();
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(0, 1439, 1766, 0, 0, (ConstantPool) null);
      int int0 = localVariable0.getNameIndex();
      assertEquals(0, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      assertEquals(1, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      localVariable0.setLength(0);
      int int0 = localVariable0.getLength();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      int int0 = localVariable0.getLength();
      assertEquals(0, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      int int0 = localVariable0.getLength();
      assertEquals(1, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      int int0 = localVariable0.getLength();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      int int0 = localVariable0.getLength();
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      int int0 = localVariable0.getLength();
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      int int0 = localVariable0.getLength();
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getIndex();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(1, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(1, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getIndex();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(1, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1352, 0, (-2353), 0, (-1), constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(0, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1352, 0, (-2353), 0, (-1), constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(0, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1352, 0, (-2353), 0, (-1), constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1352, 0, (-2353), 0, (-1), constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(0, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1352, 0, (-2353), 0, (-1), constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(0, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1352, 0, (-2353), 0, (-1), constantPool0);
      int int0 = localVariable0.getIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      localVariable0.getConstantPool();
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      localVariable0.getConstantPool();
      assertEquals(0, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      localVariable0.getConstantPool();
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      localVariable0.getConstantPool();
      assertEquals(0, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      localVariable0.getConstantPool();
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      localVariable0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      localVariable0.getConstantPool();
      assertEquals(0, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      localVariable0.getConstantPool();
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      localVariable0.getConstantPool();
      assertEquals(1, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      localVariable0.getConstantPool();
      assertEquals(1, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      localVariable0.getConstantPool();
      assertEquals(1, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      localVariable0.getConstantPool();
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      LocalVariable localVariable1 = localVariable0.copy();
      assertEquals(0, localVariable1.getStartPC());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      LocalVariable localVariable1 = localVariable0.copy();
      assertEquals(0, localVariable1.getIndex());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable(1, 0, 1, 1, 1, constantPool0, 1);
      LocalVariable localVariable1 = localVariable0.copy();
      assertEquals(1, localVariable1.getLength());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(756, 756, 756, 111, 0, (ConstantPool) null, (-5));
      LocalVariable localVariable1 = localVariable0.copy();
      assertEquals(0, localVariable1.getLength());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(756, 756, 756, 111, 0, (ConstantPool) null, (-5));
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(756, 756, 756, 111, 0, (ConstantPool) null, (-5));
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(756, 756, 756, 111, 0, (ConstantPool) null, (-5));
      LocalVariable localVariable1 = localVariable0.copy();
      assertEquals(0, localVariable1.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(756, 756, 756, 111, 0, (ConstantPool) null, (-5));
      LocalVariable localVariable1 = localVariable0.copy();
      assertEquals(0, localVariable1.getStartPC());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(756, 756, 756, 111, 0, (ConstantPool) null, (-5));
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(2313, 0, 0, (-1854), (-1854), constantPool0);
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(2313, 0, 0, (-1854), (-1854), constantPool0);
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(2313, 0, 0, (-1854), (-1854), constantPool0);
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(2313, 0, 0, (-1854), (-1854), constantPool0);
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(2313, 0, 0, (-1854), (-1854), constantPool0);
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(2313, 0, 0, (-1854), (-1854), constantPool0);
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      // Undeclared exception!
      try { 
        localVariable0.toStringShared(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(2490, 2490, 168, 2490, 2490, constantPool0);
      // Undeclared exception!
      try { 
        localVariable0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 168. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      // Undeclared exception!
      try { 
        localVariable0.getSignature();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = new LocalVariable((-425), (-425), 795, 795, (-425), constantPool0);
      // Undeclared exception!
      try { 
        localVariable0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable((LocalVariable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable((DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      localVariable0.getConstantPool();
      assertEquals(1, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      localVariable0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      localVariable0.getConstantPool();
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      localVariable0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      localVariable0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      localVariable0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getStartPC();
      assertEquals(1, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getStartPC();
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getStartPC();
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(177, 0, 1, (-2407), 1846, (ConstantPool) null);
      int int0 = localVariable0.getOrigIndex();
      assertEquals(0, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(177, 0, 1, (-2407), 1846, (ConstantPool) null);
      int int0 = localVariable0.getOrigIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(177, 0, 1, (-2407), 1846, (ConstantPool) null);
      int int0 = localVariable0.getOrigIndex();
      assertEquals(0, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(177, 0, 1, (-2407), 1846, (ConstantPool) null);
      int int0 = localVariable0.getOrigIndex();
      assertEquals(0, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(177, 0, 1, (-2407), 1846, (ConstantPool) null);
      int int0 = localVariable0.getOrigIndex();
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(177, 0, 1, (-2407), 1846, (ConstantPool) null);
      int int0 = localVariable0.getOrigIndex();
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(177, 0, 1, (-2407), 1846, (ConstantPool) null);
      // Undeclared exception!
      try { 
        localVariable0.getName();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getLength();
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getLength();
      assertEquals(1, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getLength();
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getLength();
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getLength();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 0, constantPool0);
      int int0 = localVariable0.getLength();
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getNameIndex();
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getNameIndex();
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getNameIndex();
      assertEquals(0, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getNameIndex();
      assertEquals(1, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getNameIndex();
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getNameIndex();
      assertEquals(0, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      int int0 = localVariable0.getIndex();
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      int int0 = localVariable0.getIndex();
      assertEquals(1, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      int int0 = localVariable0.getIndex();
      assertEquals(0, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      int int0 = localVariable0.getIndex();
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      int int0 = localVariable0.getIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      int int0 = localVariable0.getIndex();
      assertEquals(0, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getSignatureIndex();
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getSignatureIndex();
      assertEquals(0, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getSignatureIndex();
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getSignatureIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getSignatureIndex();
      assertEquals(1, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      int int0 = localVariable0.getSignatureIndex();
      assertEquals(1, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      // Undeclared exception!
      try { 
        localVariable0.getSignature();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      LocalVariable localVariable1 = localVariable0.copy();
      assertEquals(0, localVariable1.getLength());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      LocalVariable localVariable1 = localVariable0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable(dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      localVariable0.setSignatureIndex((-3120));
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      localVariable0.dump(dataOutputStream0);
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      localVariable0.dump(dataOutputStream0);
      assertEquals(0, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      localVariable0.dump(dataOutputStream0);
      assertEquals(1, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      localVariable0.dump(dataOutputStream0);
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      localVariable0.dump(dataOutputStream0);
      assertEquals(1, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      localVariable0.dump(dataOutputStream0);
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      localVariable0.setIndex(936);
      assertEquals(1, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      localVariable0.setStartPC((-1790));
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      assertEquals(1, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2803), (-2803), (-2803), (-1790), 107, (ConstantPool) null, (-2803));
      localVariable0.setNameIndex(107);
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      localVariable0.accept(emptyVisitor0);
      assertEquals(1, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      localVariable0.accept(emptyVisitor0);
      assertEquals(0, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      localVariable0.accept(emptyVisitor0);
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      localVariable0.accept(emptyVisitor0);
      assertEquals(0, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      localVariable0.accept(emptyVisitor0);
      assertEquals(1, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      localVariable0.accept(emptyVisitor0);
      assertEquals(1, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      localVariable0.setConstantPool((ConstantPool) null);
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      localVariable0.setConstantPool((ConstantPool) null);
      assertEquals(1, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      localVariable0.setConstantPool((ConstantPool) null);
      assertEquals(1, localVariable0.getLength());
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      localVariable0.setConstantPool((ConstantPool) null);
      assertEquals(1, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      localVariable0.setConstantPool((ConstantPool) null);
      assertEquals(1, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable(1, 1, 1, 1, 1, (ConstantPool) null, 1);
      localVariable0.setConstantPool((ConstantPool) null);
      assertEquals(1, localVariable0.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      assertEquals(0, localVariable1.getOrigIndex());
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      assertEquals(0, localVariable1.getLength());
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      assertEquals(0, localVariable1.getNameIndex());
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      assertEquals(0, localVariable0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      assertEquals(0, localVariable0.getIndex());
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      assertEquals(1, localVariable0.getStartPC());
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-1300), (-1300), (-1300), (-1300), (-2241), (ConstantPool) null, (-2241));
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      assertEquals(1, localVariable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LocalVariable localVariable0 = new LocalVariable((-2894), (-2894), (-2894), (-2894), (-2894), (ConstantPool) null, (-2894));
      // Undeclared exception!
      try { 
        localVariable0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable(1, 375, 0, 375, 1058, constantPool0, 1058);
      // Undeclared exception!
      try { 
        localVariable0.toStringShared(true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
}
