 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CHECKCAST cHECKCAST0 = new CHECKCAST();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      // Undeclared exception!
      try { 
        cHECKCAST0.accept(executionVisitor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ExecutionVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CHECKCAST cHECKCAST0 = new CHECKCAST(2072);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        cHECKCAST0.getLoadClassType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2072. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CHECKCAST cHECKCAST0 = new CHECKCAST();
      // Undeclared exception!
      try { 
        cHECKCAST0.getLoadClassType((ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CHECKCAST cHECKCAST0 = new CHECKCAST(0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      // Undeclared exception!
      try { 
        cHECKCAST0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CHECKCAST cHECKCAST0 = null;
      try {
        cHECKCAST0 = new CHECKCAST((-1959));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Negative index value: -1959
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CHECKCAST cHECKCAST0 = new CHECKCAST();
      Class<?>[] classArray0 = cHECKCAST0.getExceptions();
      ;
}
