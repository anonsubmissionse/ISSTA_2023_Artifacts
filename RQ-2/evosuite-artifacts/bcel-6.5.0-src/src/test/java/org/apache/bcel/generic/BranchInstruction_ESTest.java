/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:17:54 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BranchInstruction_ESTest extends BranchInstruction_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RET rET0 = new RET(1);
      InstructionHandle instructionHandle0 = new InstructionHandle(rET0);
      JSR jSR0 = new JSR();
      jSR0.updateTarget((InstructionHandle) null, instructionHandle0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      iF_ICMPLE0.setIndex(30);
      int int0 = iF_ICMPLE0.updatePosition((-224), (-2179));
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      iF_ICMPLE0.setIndex(30);
      int int0 = iF_ICMPLE0.updatePosition((-224), (-2179));
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1));
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iF_ICMPLE0);
      JSR_W jSR_W0 = new JSR_W(branchHandle0);
      // Undeclared exception!
      try { 
        jSR_W0.getTargetOffset(instructionHandle0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for jsr_w[201](5):-1:  -1: iconst_m1[2](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      tABLESWITCH0.setPosition(5);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) tABLESWITCH0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) tABLESWITCH0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("60#aaS\"46UuG!c;[B/");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      gOTO0.dump(dataOutputStream0);
      assertFalse(branchHandle0.hasTargeters());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      tABLESWITCH0.setPosition(5);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) tABLESWITCH0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) tABLESWITCH0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("60#aaS\"46UuG!c;[B/");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      gOTO0.dump(dataOutputStream0);
      assertEquals(0, gOTO0.getIndex());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = new Character('?');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      BranchInstruction.notifyTarget(instructionHandle0, instructionHandle0, iF_ICMPNE0);
      assertEquals(0, iF_ICMPNE0.getIndex());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LSHL lSHL0 = (LSHL)InstructionConstants.LSHL;
      InstructionHandle instructionHandle0 = new InstructionHandle(lSHL0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      instructionHandle0.swapInstruction(iFGE0);
      String string0 = iFGE0.toString(true);
      assertFalse(instructionHandle0.hasTargeters());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LSHL lSHL0 = (LSHL)InstructionConstants.LSHL;
      InstructionHandle instructionHandle0 = new InstructionHandle(lSHL0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      instructionHandle0.swapInstruction(iFGE0);
      String string0 = iFGE0.toString(true);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      gOTO0.initFromFile(byteSequence0, false);
      assertEquals(1, gOTO0.getLength());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      int int0 = tABLESWITCH0.updatePosition((-2752), (-347));
      assertEquals(0, tABLESWITCH0.getLength());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      int int0 = tABLESWITCH0.updatePosition((-2752), (-347));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      int int0 = tABLESWITCH0.updatePosition((-1), 1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1));
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iF_ICMPLE0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      int int0 = iF_ICMPNE0.getTargetOffset(branchHandle0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1));
      InstructionList instructionList0 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iF_ICMPLE0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      int int0 = iF_ICMPNE0.getTargetOffset(branchHandle0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      L2D l2D0 = (L2D)InstructionConstants.L2D;
      InstructionList instructionList0 = new InstructionList(l2D0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) l2D0, (Instruction) l2D0);
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      instructionHandle0.setPosition(1);
      int int0 = gOTO_W0.getTargetOffset(instructionHandle0);
      assertTrue(instructionHandle0.hasTargeters());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      L2D l2D0 = (L2D)InstructionConstants.L2D;
      InstructionList instructionList0 = new InstructionList(l2D0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) l2D0, (Instruction) l2D0);
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      instructionHandle0.setPosition(1);
      int int0 = gOTO_W0.getTargetOffset(instructionHandle0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) tABLESWITCH0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) tABLESWITCH0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      int int0 = gOTO0.getTargetOffset();
      assertTrue(branchHandle0.hasTargeters());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TABLESWITCH tABLESWITCH0 = new TABLESWITCH();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) tABLESWITCH0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) tABLESWITCH0);
      GOTO gOTO0 = new GOTO(branchHandle0);
      int int0 = gOTO0.getTargetOffset();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      L2D l2D0 = (L2D)InstructionConstants.L2D;
      InstructionList instructionList0 = new InstructionList(l2D0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) l2D0, (Instruction) l2D0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      instructionList0.setPositions(true);
      gOTO0.updatePosition((-55), 0);
      int int0 = gOTO0.getTargetOffset();
      assertTrue(instructionHandle0.hasTargeters());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      L2D l2D0 = (L2D)InstructionConstants.L2D;
      InstructionList instructionList0 = new InstructionList(l2D0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) l2D0, (Instruction) l2D0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      instructionList0.setPositions(true);
      gOTO0.updatePosition((-55), 0);
      int int0 = gOTO0.getTargetOffset();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GOTO_W gOTO_W0 = new GOTO_W();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) gOTO_W0);
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) gOTO_W0);
      JSR_W jSR_W0 = new JSR_W(branchHandle0);
      InstructionHandle instructionHandle0 = jSR_W0.getTarget();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      byte[] byteArray0 = new byte[2];
      int int0 = iFGT0.updatePosition((byte)44, (byte)0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      byte[] byteArray0 = new byte[2];
      int int0 = iFGT0.updatePosition((byte)44, (byte)0);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) iFGT0);
      iFGT0.target = (InstructionHandle) branchHandle0;
      InstructionHandle instructionHandle0 = iFGT0.getTarget();
      assertEquals(1, instructionHandle0.getPosition());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      L2D l2D0 = (L2D)InstructionConstants.L2D;
      InstructionList instructionList0 = new InstructionList(l2D0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) l2D0, (Instruction) l2D0);
      GOTO_W gOTO_W0 = new GOTO_W();
      gOTO_W0.setTarget(instructionHandle0);
      InstructionHandle instructionHandle1 = gOTO_W0.getTarget();
      assertTrue(instructionHandle1.hasTargeters());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      int int0 = iF_ICMPLE0.getPosition();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      int int0 = iF_ICMPLE0.updatePosition(530, 0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      int int0 = iF_ICMPLE0.updatePosition(530, 0);
      int int1 = iF_ICMPLE0.getPosition();
      assertEquals(0, int1);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE();
      iF_ICMPLE0.position = (-1);
      int int0 = iF_ICMPLE0.getPosition();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT((InstructionHandle) null);
      IfInstruction ifInstruction0 = iF_ICMPGT0.negate();
      ifInstruction0.index = 47;
      int int0 = ifInstruction0.getIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      INEG iNEG0 = new INEG();
      InstructionList instructionList0 = new InstructionList(iNEG0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IFLE iFLE0 = new IFLE(instructionHandle0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      iFLE0.toString(constantPool0);
      int int0 = iFLE0.getIndex();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      INEG iNEG0 = new INEG();
      InstructionList instructionList0 = new InstructionList(iNEG0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IFLE iFLE0 = new IFLE(instructionHandle0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      iFLE0.toString(constantPool0);
      int int0 = iFLE0.getIndex();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      // Undeclared exception!
      try { 
        lOOKUPSWITCH0.updateTarget((InstructionHandle) null, (InstructionHandle) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Select", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGE0);
      IFNE iFNE0 = new IFNE();
      BranchHandle branchHandle0 = instructionList0.insert((BranchInstruction) iFNE0);
      // Undeclared exception!
      try { 
        iFGE0.updateTarget(branchHandle0, branchHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      L2D l2D0 = (L2D)InstructionConstants.L2D;
      InstructionList instructionList0 = new InstructionList(l2D0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) l2D0, (Instruction) l2D0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      // Undeclared exception!
      try { 
        gOTO0.updatePosition(3, (-55));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid branch target position offset for goto[167](3):-1:  -1: l2d[138](1)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IFEQ iFEQ0 = new IFEQ();
      // Undeclared exception!
      try { 
        iFEQ0.toString(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      try { 
        iFGT0.initFromFile(byteSequence0, true);
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      INEG iNEG0 = new INEG();
      InstructionList instructionList0 = new InstructionList(iNEG0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iNEG0);
      instructionList0.delete(instructionHandle0, instructionHandle0);
      IFLE iFLE0 = new IFLE(instructionHandle0);
      // Undeclared exception!
      try { 
        iFLE0.getTargetOffset(instructionHandle0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GOTO gOTO0 = new GOTO();
      LASTORE lASTORE0 = (LASTORE)InstructionConstants.LASTORE;
      InstructionHandle instructionHandle0 = new InstructionHandle(lASTORE0);
      // Undeclared exception!
      try { 
        gOTO0.getTargetOffset(instructionHandle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IFLT iFLT0 = new IFLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        iFLT0.getTargetOffset();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Target of iflt[155](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      INEG iNEG0 = new INEG();
      InstructionList instructionList0 = new InstructionList(iNEG0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iNEG0);
      instructionList0.delete(instructionHandle0, instructionHandle0);
      IFLE iFLE0 = new IFLE(instructionHandle0);
      // Undeclared exception!
      try { 
        iFLE0.getTargetOffset();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSR jSR0 = new JSR();
      // Undeclared exception!
      try { 
        jSR0.getTargetOffset();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE((InstructionHandle) null);
      IfInstruction ifInstruction0 = iF_ICMPGE0.negate();
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "I");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        ifInstruction0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Target of if_icmplt[161](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      // Undeclared exception!
      try { 
        iFGE0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        iFGE0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LOOKUPSWITCH lOOKUPSWITCH0 = new LOOKUPSWITCH();
      // Undeclared exception!
      try { 
        lOOKUPSWITCH0.dispose();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Select", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      INEG iNEG0 = new INEG();
      InstructionList instructionList0 = new InstructionList(iNEG0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) iNEG0);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      iF_ACMPEQ0.toString(false);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GOTO_W gOTO_W0 = new GOTO_W((InstructionHandle) null);
      String string0 = gOTO_W0.toString(true);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      INEG iNEG0 = new INEG();
      InstructionList instructionList0 = new InstructionList(iNEG0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IFLE iFLE0 = new IFLE(instructionHandle0);
      int int0 = iFLE0.getIndex();
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      INEG iNEG0 = new INEG();
      InstructionList instructionList0 = new InstructionList(iNEG0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IFLE iFLE0 = new IFLE(instructionHandle0);
      int int0 = iFLE0.getIndex();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      boolean boolean0 = iF_ICMPGT0.containsTarget((InstructionHandle) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IFLT iFLT0 = new IFLT((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFLT0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      boolean boolean0 = iF_ICMPGT0.containsTarget(instructionHandle0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DSTORE dSTORE0 = new DSTORE(0);
      InstructionList instructionList0 = new InstructionList(dSTORE0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-3926.787F));
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) dSTORE0, (CompoundInstruction) pUSH0);
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      InstructionHandle instructionHandle1 = instructionList0.append(instructionHandle0, (CompoundInstruction) pUSH0);
      iFEQ0.setTarget(instructionHandle1);
      // Undeclared exception!
      try { 
        iFEQ0.updateTarget(instructionHandle0, instructionHandle1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Not targeting   -1: ldc[18](2) 1, but   -1: ldc[18](2) 1
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LSHL lSHL0 = (LSHL)InstructionConstants.LSHL;
      InstructionHandle instructionHandle0 = new InstructionHandle(lSHL0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LSHL lSHL0 = (LSHL)InstructionConstants.LSHL;
      InstructionHandle instructionHandle0 = new InstructionHandle(lSHL0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      instructionHandle0.dispose();
      String string0 = iFGE0.toString(true);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LSHL lSHL0 = (LSHL)InstructionConstants.LSHL;
      InstructionHandle instructionHandle0 = new InstructionHandle(lSHL0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      String string0 = iFGE0.toString(true);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LSHL lSHL0 = (LSHL)InstructionConstants.LSHL;
      InstructionHandle instructionHandle0 = new InstructionHandle(lSHL0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      String string0 = iFGE0.toString(true);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GOTO_W gOTO_W0 = new GOTO_W((InstructionHandle) null);
      String string0 = gOTO_W0.toString(false);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IFNE iFNE0 = new IFNE();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<points to itself>", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        iFNE0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LSHL lSHL0 = (LSHL)InstructionConstants.LSHL;
      InstructionHandle instructionHandle0 = new InstructionHandle(lSHL0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGE0);
      InstructionHandle instructionHandle1 = instructionList0.getEnd();
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ(instructionHandle1);
      MockFile mockFile0 = new MockFile("ifge[156](3) -> <points to itself>", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      iF_ICMPEQ0.dump(dataOutputStream0);
      assertTrue(instructionHandle0.hasTargeters());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LSHL lSHL0 = (LSHL)InstructionConstants.LSHL;
      InstructionHandle instructionHandle0 = new InstructionHandle(lSHL0);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGE0);
      InstructionHandle instructionHandle1 = instructionList0.getEnd();
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ(instructionHandle1);
      MockFile mockFile0 = new MockFile("ifge[156](3) -> <points to itself>", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      iF_ICMPEQ0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IFGT iFGT0 = new IFGT();
      InstructionHandle instructionHandle0 = iFGT0.getTarget();
      assertNotNull(instructionHandle0);
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      iFGE0.dispose();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IFGE iFGE0 = new IFGE();
      // Undeclared exception!
      try { 
        iFGE0.initFromFile((ByteSequence) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }
}
