 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IINC iINC0 = new IINC(168, (-971));
      iINC0.setIncrement((-128));
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IINC iINC0 = new IINC(127, 127);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IINC iINC0 = new IINC(127, 127);
      assertEquals(1, iINC0.getLength());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IINC iINC0 = new IINC(127, 127);
      assertEquals(1, iINC0.getIncrement());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IINC iINC0 = new IINC(127, 127);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IINC iINC0 = new IINC(255, 255);
      assertEquals(1, iINC0.getLength());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IINC iINC0 = new IINC(255, 255);
      assertEquals(0, iINC0.getIncrement());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IINC iINC0 = new IINC(255, 255);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      IINC iINC0 = new IINC(255, 255);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      IINC iINC0 = new IINC(1552, 4297);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      iINC0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IINC iINC0 = new IINC(1552, 4297);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      iINC0.dump(dataOutputStream0);
      assertEquals(0, iINC0.getIndex());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IINC iINC0 = new IINC(2926, 10);
      String string0 = iINC0.toString(true);
      assertNotNull(iINC0.getOpcode());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IINC iINC0 = new IINC(2926, 10);
      String string0 = iINC0.toString(true);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IINC iINC0 = new IINC(50, 50);
      int int0 = iINC0.getIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IINC iINC0 = new IINC(50, 50);
      int int0 = iINC0.getIncrement();
      assertEquals(0, iINC0.getOpcode());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IINC iINC0 = new IINC(50, 50);
      int int0 = iINC0.getIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IINC iINC0 = new IINC(50, 50);
      int int0 = iINC0.getIncrement();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IINC iINC0 = new IINC(168, (-971));
      int int0 = iINC0.getIncrement();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IINC iINC0 = new IINC(168, (-971));
      int int0 = iINC0.getIncrement();
      assertEquals(0, iINC0.getIndex());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IINC iINC0 = new IINC(168, (-971));
      int int0 = iINC0.getIncrement();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IINC iINC0 = new IINC(168, (-971));
      int int0 = iINC0.getIncrement();
      assertEquals(0, iINC0.getOpcode());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IINC iINC0 = new IINC();
      // Undeclared exception!
      try { 
        iINC0.initFromFile((ByteSequence) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IINC iINC0 = new IINC();
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        iINC0.initFromFile(byteSequence0, true);
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IINC iINC0 = new IINC(363, 2096);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        iINC0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IINC iINC0 = new IINC();
      iINC0.setIndex(16);
      assertEquals(1, iINC0.getIndex());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IINC iINC0 = new IINC();
      // Undeclared exception!
      try { 
        iINC0.setIndex((-3009));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Negative index value: -3009
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IINC iINC0 = new IINC();
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iINC0.initFromFile(byteSequence0, true);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IINC iINC0 = new IINC();
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iINC0.initFromFile(byteSequence0, true);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IINC iINC0 = new IINC(8, 8);
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iINC0.initFromFile(byteSequence0, false);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IINC iINC0 = new IINC(8, 8);
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      iINC0.initFromFile(byteSequence0, false);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IINC iINC0 = new IINC(185, 185);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      try { 
        iINC0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IINC iINC0 = new IINC(0, 116);
      // Undeclared exception!
      try { 
        iINC0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IINC iINC0 = new IINC();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      iINC0.dump(dataOutputStream0);
      assertEquals(1, iINC0.getLength());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IINC iINC0 = new IINC();
      // Undeclared exception!
      try { 
        iINC0.toString(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IINC iINC0 = new IINC();
      Type type0 = iINC0.getType((ConstantPoolGen) null);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IINC iINC0 = new IINC();
      int int0 = iINC0.getIncrement();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IINC iINC0 = null;
      try {
        iINC0 = new IINC((-152), (-128));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Negative index value: -152
         //
         verifyException("org.apache.bcel.generic.IINC", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IINC iINC0 = new IINC();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      iINC0.accept(executionVisitor0);
      assertEquals(0, iINC0.getIndex());
}
