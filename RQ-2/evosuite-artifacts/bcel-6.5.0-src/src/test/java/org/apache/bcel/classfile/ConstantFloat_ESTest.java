/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:45:32 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantFloat_ESTest extends ConstantFloat_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(945.29596F);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFloat0.accept(emptyVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(945.29596F);
      float float0 = constantFloat0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      float float0 = constantFloat0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(2305.0F);
      // Undeclared exception!
      try { 
        constantFloat0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFloat", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(2101.0F);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantFloat0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat((ConstantFloat) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFloat", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat((DataInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFloat", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat(dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat(dataInputStream0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      float float0 = constantFloat0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      String string0 = constantFloat0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(5026.6816F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(5026.6816F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantFloat0.setBytes(0.0F);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      MockFile mockFile0 = new MockFile("CONSTANT_Float[4](bytes = 0.0)", "CONSTANT_Float[4](bytes = 0.0)");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantFloat0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantFloat constantFloat0 = new ConstantFloat(dataInputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      // Undeclared exception!
      try { 
        constantFloat0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFloat", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Object object0 = constantFloat0.getConstantValue(constantPool0);
      ;
}
}
