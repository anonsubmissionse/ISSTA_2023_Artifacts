/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:37:54 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import org.apache.bcel.classfile.AnnotationElementValue;
import org.apache.bcel.classfile.AnnotationEntry;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnnotationElementValue_ESTest extends AnnotationElementValue_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(64, constantPool0, false);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, constantPool0);
      // Undeclared exception!
      try { 
        annotationElementValue0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 64. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AnnotationEntry annotationEntry0 = new AnnotationEntry(3177, (ConstantPool) null, false);
      AnnotationElementValue annotationElementValue0 = null;
      try {
        annotationElementValue0 = new AnnotationElementValue(3177, annotationEntry0, (ConstantPool) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Only element values of type annotation can be built with this ctor - type specified: 3177
         //
         verifyException("org.apache.bcel.classfile.AnnotationElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(64, constantPool0, false);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, constantPool0);
      AnnotationEntry annotationEntry1 = annotationElementValue0.getAnnotationEntry();
      assertEquals(0, annotationEntry1.getTypeIndex());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(64, constantPool0, false);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, constantPool0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("O");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        annotationElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      AnnotationEntry annotationEntry0 = new AnnotationEntry(64, constantPool0, false);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, constantPool0);
      // Undeclared exception!
      try { 
        annotationElementValue0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 64. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
}
