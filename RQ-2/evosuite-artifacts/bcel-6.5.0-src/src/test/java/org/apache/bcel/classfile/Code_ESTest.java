/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:59:00 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.ModuleMainClass;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.SourceFile;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Code_ESTest extends Code_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-114);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Code code0 = new Code(147, 147, 147, 147, byteArray0, (CodeException[]) null, (Attribute[]) null, constantPool0);
      code0.setCode(byteArray0);
      code0.getLineNumberTable();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, (Visitor) null);
      // Undeclared exception!
      try { 
        code0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Code", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)16;
      CodeException[] codeExceptionArray0 = new CodeException[9];
      CodeException codeException0 = new CodeException(4, 16, (byte)16, 11);
      CodeException codeException1 = new CodeException(codeException0);
      codeExceptionArray0[0] = codeException1;
      CodeException codeException2 = new CodeException(codeException0);
      codeExceptionArray0[1] = codeException2;
      CodeException codeException3 = new CodeException(codeException1);
      codeExceptionArray0[2] = codeException3;
      CodeException codeException4 = new CodeException(codeException1);
      codeExceptionArray0[3] = codeException4;
      CodeException codeException5 = new CodeException(codeException2);
      codeExceptionArray0[4] = codeException5;
      CodeException codeException6 = new CodeException(codeException5);
      codeExceptionArray0[5] = codeException6;
      CodeException codeException7 = new CodeException(3059, 0, 1587, 200);
      codeExceptionArray0[6] = codeException7;
      CodeException codeException8 = new CodeException(codeException5);
      codeExceptionArray0[7] = codeException8;
      CodeException codeException9 = new CodeException(200, 2077, 28, 28);
      codeExceptionArray0[8] = codeException9;
      Attribute[] attributeArray0 = new Attribute[1];
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(1587, (-597), 124, (ConstantPool) null);
      ModuleMainClass moduleMainClass1 = new ModuleMainClass(moduleMainClass0);
      attributeArray0[0] = (Attribute) moduleMainClass1;
      Code code0 = new Code(5, 5, 4, 5, byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      Code code1 = new Code(code0);
      code1.copy((ConstantPool) null);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-21);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1642), (-1642), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      Attribute[] attributeArray1 = new Attribute[5];
      attributeArray1[0] = (Attribute) code0;
      attributeArray1[1] = (Attribute) code0;
      attributeArray1[2] = (Attribute) code0;
      attributeArray1[3] = (Attribute) code0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      attributeArray1[4] = (Attribute) code0;
      code0.setAttributes(attributeArray1);
      code0.setExceptionTable(codeExceptionArray0);
      code0.getAttributes();
      code0.getCode();
      // Undeclared exception!
      try { 
        code0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[2] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        code0.toString(true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-79);
      byteArray0[3] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[7];
      CodeException codeException0 = new CodeException((byte)45, 50, (byte)20, (byte)0);
      codeExceptionArray0[0] = codeException0;
      CodeException codeException1 = new CodeException((-3973), 0, 16384, 0);
      codeExceptionArray0[1] = codeException1;
      CodeException codeException2 = new CodeException(0, (byte) (-79), (-1), (byte) (-79));
      CodeException codeException3 = new CodeException(codeException0);
      codeExceptionArray0[3] = codeException3;
      CodeException codeException4 = new CodeException(0, (byte)45, (-384), (-3973));
      codeExceptionArray0[4] = codeException4;
      CodeException codeException5 = new CodeException(codeException3);
      codeExceptionArray0[5] = codeException5;
      CodeException codeException6 = new CodeException((byte)125, 50, 16384, 0);
      codeExceptionArray0[6] = codeException6;
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code(100, 50, 100, 50, byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      Code code1 = new Code(code0);
      code1.getCode();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        code1.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.copy();
      JavaClass javaClass2 = javaClass1.getSuperClass();
      // Undeclared exception!
      try { 
        javaClass2.getMethod((java.lang.reflect.Method) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.JavaClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      Attribute[] attributeArray1 = new Attribute[5];
      attributeArray1[0] = (Attribute) code0;
      attributeArray1[1] = (Attribute) code0;
      code0.setNameIndex((byte) (-21));
      attributeArray1[2] = (Attribute) code0;
      attributeArray1[3] = (Attribute) code0;
      attributeArray1[4] = (Attribute) code0;
      code0.setAttributes(attributeArray1);
      code0.setExceptionTable(codeExceptionArray0);
      code0.getCode();
      // Undeclared exception!
      try { 
        code0.toString(true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      Attribute[] attributeArray1 = new Attribute[5];
      attributeArray1[0] = (Attribute) code0;
      attributeArray1[1] = (Attribute) code0;
      attributeArray1[2] = (Attribute) code0;
      attributeArray1[3] = (Attribute) code0;
      attributeArray1[4] = (Attribute) code0;
      code0.setAttributes(attributeArray1);
      code0.setExceptionTable(codeExceptionArray0);
      code0.getCode();
      // Undeclared exception!
      try { 
        code0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int int0 = 227;
      int int1 = 5;
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPath classPath1 = new ClassPath(classPath0, "org.apache.bcel.classfile.LocalVariable");
      classPath0.toString();
      InputStream inputStream0 = classPath1.getInputStream("org.apache.bcel.classfile.LocalVariable");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = new CodeException(dataInputStream0);
      codeExceptionArray0[0] = codeException0;
      Code code0 = new Code(3284, (-1), 0, 100, (byte[]) null, codeExceptionArray0, (Attribute[]) null, (ConstantPool) null);
      code0.getLocalVariableTable();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("org.apache.bcel.classfile.LocalVariable", "org.apache.bcel.classfile.LocalVariable");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"org.apache.bcel.classfile.LocalVariable\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      Attribute[] attributeArray1 = new Attribute[5];
      attributeArray1[0] = (Attribute) code0;
      attributeArray1[1] = (Attribute) code0;
      attributeArray1[2] = (Attribute) code0;
      attributeArray1[3] = (Attribute) code0;
      // Undeclared exception!
      try { 
        code0.setAttributes(attributeArray1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Code", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CodeException[] codeExceptionArray0 = new CodeException[1];
      Attribute[] attributeArray0 = new Attribute[6];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1923);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Code code0 = null;
      try {
        code0 = new Code(5, 1767, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = new CodeException((byte)0, 210, (-1799), (byte)0);
      codeExceptionArray0[0] = codeException0;
      Code code0 = new Code(210, (-699), (-699), (-699), byteArray0, codeExceptionArray0, (Attribute[]) null, (ConstantPool) null);
      ByteSequence byteSequence0 = mock(ByteSequence.class, new ViolatedAssumptionAnswer());
      code0.setLength((byte)0);
      code0.getMaxLocals();
      code0.setMaxStack(0);
      codeException0.setCatchType(0);
      code0.setNameIndex(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      code0.getMaxLocals();
      code0.getLineNumberTable();
      code0.getLocalVariableTable();
      code0.copy((ConstantPool) null);
      code0.getLocalVariableTable();
      code0.getMaxLocals();
      code0.getLineNumberTable();
      code0.copy((ConstantPool) null);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = new CodeException((byte)0, 210, (-1799), (byte)0);
      codeExceptionArray0[0] = codeException0;
      Code code0 = new Code(210, (-699), (-699), (-699), byteArray0, codeExceptionArray0, (Attribute[]) null, (ConstantPool) null);
      ByteSequence byteSequence0 = mock(ByteSequence.class, new ViolatedAssumptionAnswer());
      code0.setLength((byte)0);
      code0.setMaxStack(719);
      code0.toString(true);
      code0.setAttributes((Attribute[]) null);
      code0.getMaxLocals();
      SourceFile sourceFile0 = new SourceFile((-699), (-1799), (-1799), (ConstantPool) null);
      code0.setMaxStack(0);
      code0.setNameIndex(0);
      codeException0.setCatchType((byte)0);
      code0.getMaxLocals();
      code0.getLineNumberTable();
      code0.copy((ConstantPool) null);
      code0.getMaxLocals();
      code0.getLineNumberTable();
      code0.copy((ConstantPool) null);
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = new CodeException((byte)0, 210, (-1799), (byte)0);
      codeExceptionArray0[0] = codeException0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ConstantPool constantPool0 = null;
      Code code0 = new Code(210, (-699), (-699), (-699), byteArray0, codeExceptionArray0, (Attribute[]) null, (ConstantPool) null);
      code0.getCode();
      ByteSequence byteSequence0 = mock(ByteSequence.class, new ViolatedAssumptionAnswer());
      code0.setLength((byte)0);
      code0.toString();
      code0.setAttributes((Attribute[]) null);
      code0.getMaxLocals();
      Signature signature0 = new Signature((byte)0, 210, (-1799), (ConstantPool) null);
      code0.getExceptionTable();
      code0.setMaxStack(0);
      code0.setNameIndex(0);
      codeException0.setCatchType(1837);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        code0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      Attribute[] attributeArray1 = new Attribute[5];
      attributeArray1[0] = (Attribute) code0;
      attributeArray1[1] = (Attribute) code0;
      attributeArray1[2] = (Attribute) code0;
      attributeArray1[3] = (Attribute) code0;
      attributeArray1[4] = (Attribute) code0;
      code0.setAttributes(attributeArray1);
      code0.setExceptionTable(codeExceptionArray0);
      code0.getLineNumberTable();
      code0.getCode();
      // Undeclared exception!
      try { 
        code0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    frem
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.setExceptionTable(codeExceptionArray0);
      code0.setCode((byte[]) null);
      code0.getLineNumberTable();
      code0.getCode();
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Code code0 = new Code(147, 147, 188, 188, byteArray0, (CodeException[]) null, (Attribute[]) null, constantPool0);
      code0.setCode(byteArray0);
      code0.getLineNumberTable();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      code0.accept(descendingVisitor0);
      // Undeclared exception!
      try { 
        code0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = new CodeException((byte)0, 210, (-1799), (byte)0);
      codeExceptionArray0[0] = codeException0;
      Code code0 = new Code(210, (-699), (-699), (-699), byteArray0, codeExceptionArray0, (Attribute[]) null, (ConstantPool) null);
      ByteSequence byteSequence0 = mock(ByteSequence.class, new ViolatedAssumptionAnswer());
      code0.setLength((byte)0);
      code0.setAttributes((Attribute[]) null);
      code0.getMaxLocals();
      SourceFile sourceFile0 = new SourceFile((-699), (-1799), (-1799), (ConstantPool) null);
      code0.setNameIndex(0);
      codeException0.setCatchType((byte)0);
      code0.getMaxLocals();
      code0.getLineNumberTable();
      code0.copy((ConstantPool) null);
      code0.getMaxLocals();
      code0.getLineNumberTable();
      Attribute attribute0 = code0.copy((ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        attribute0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = new CodeException((byte)0, 210, (-1799), (byte)0);
      codeExceptionArray0[0] = codeException0;
      Code code0 = new Code(210, (-699), (-699), (-699), byteArray0, codeExceptionArray0, (Attribute[]) null, (ConstantPool) null);
      ByteSequence byteSequence0 = mock(ByteSequence.class, new ViolatedAssumptionAnswer());
      code0.setLength((byte)0);
      code0.setAttributes((Attribute[]) null);
      code0.getMaxLocals();
      SourceFile sourceFile0 = new SourceFile((-699), (-1799), (-1799), (ConstantPool) null);
      code0.setMaxStack(0);
      code0.setNameIndex(0);
      codeException0.setCatchType((byte)0);
      code0.getMaxLocals();
      code0.getLineNumberTable();
      code0.copy((ConstantPool) null);
      code0.getMaxLocals();
      code0.getLineNumberTable();
      code0.copy((ConstantPool) null);
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-114);
      byteArray0[0] = (byte) (-52);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Code code0 = new Code(147, 147, 178, 178, byteArray0, (CodeException[]) null, (Attribute[]) null, constantPool0);
      code0.setCode(byteArray0);
      code0.getLineNumberTable();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      code0.accept(descendingVisitor0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\nAttribute(s) = ", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      code0.dump(dataOutputStream0);
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Code code0 = new Code(147, 147, 178, 178, byteArray0, (CodeException[]) null, (Attribute[]) null, constantPool0);
      code0.setCode(byteArray0);
      code0.getLineNumberTable();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      code0.accept(descendingVisitor0);
      code0.getMaxStack();
      code0.getMaxLocals();
      // Undeclared exception!
      try { 
        code0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte) (-92);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1449), (byte)4);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Code code0 = null;
      try {
        code0 = new Code(1149, 2552, dataInputStream0, constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Code code0 = new Code(147, 147, 188, 188, byteArray0, (CodeException[]) null, (Attribute[]) null, constantPool0);
      code0.setCode(byteArray0);
      code0.getLineNumberTable();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      code0.toString(false);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      code0.accept(descendingVisitor0);
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.copy((ConstantPool) null);
      code0.getLineNumberTable();
      Attribute[] attributeArray1 = code0.getAttributes();
      code0.setAttributes(attributeArray1);
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-1630), (-1630), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.setExceptionTable(codeExceptionArray0);
      code0.getLineNumberTable();
      code0.getCode();
      code0.getExceptionTable();
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = new CodeException((byte)0, 210, (-1799), (byte)0);
      codeExceptionArray0[0] = codeException0;
      ConstantPool constantPool0 = null;
      Code code0 = new Code(210, (-699), (-699), (-699), byteArray0, codeExceptionArray0, (Attribute[]) null, (ConstantPool) null);
      byte[] byteArray1 = code0.getCode();
      ByteSequence byteSequence0 = mock(ByteSequence.class, new ViolatedAssumptionAnswer());
      code0.setLength((byte)0);
      code0.setCode(byteArray1);
      code0.toString();
      int int0 = 0;
      code0.setAttributes((Attribute[]) null);
      code0.getMaxStack();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Code(maxStack = -699, maxLocals = -699, code_length = 1)\n0:    nop\n\nException handler(s) = \nFrom\tTo\tHandler\tType\n0\t210\t-1799\t<Any exception>(0)\n");
      code0.getMaxLocals();
      // Undeclared exception!
      try { 
        Attribute.readAttribute((DataInput) byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Code code0 = null;
      try {
        code0 = new Code(8, 8, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.getLineNumberTable();
      code0.setConstantPool((ConstantPool) null);
      code0.setCode((byte[]) null);
      code0.getAttributes();
      code0.setExceptionTable(codeExceptionArray0);
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Code code0 = new Code(147, 147, 188, 188, byteArray0, (CodeException[]) null, (Attribute[]) null, constantPool0);
      code0.setCode(byteArray0);
      code0.setAttributes((Attribute[]) null);
      code0.getLineNumberTable();
      code0.setLength((byte) (-60));
      code0.setMaxLocals((-2638));
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.getLineNumberTable();
      Attribute attribute0 = code0.copy((ConstantPool) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        attribute0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = new CodeException(914, 210, (-1799), 914);
      codeExceptionArray0[0] = codeException0;
      Attribute[] attributeArray0 = null;
      ConstantPool constantPool0 = null;
      Code code0 = new Code(210, (-699), (-699), (-699), byteArray0, codeExceptionArray0, (Attribute[]) null, (ConstantPool) null);
      code0.getCode();
      ByteSequence byteSequence0 = mock(ByteSequence.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      code0.setLength((byte)0);
      // Undeclared exception!
      try { 
        code0.toString(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.CodeException", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Code code0 = new Code(147, 147, 188, 188, byteArray0, (CodeException[]) null, (Attribute[]) null, constantPool0);
      code0.setCode(byteArray0);
      code0.getLineNumberTable();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      code0.accept(descendingVisitor0);
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[8];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.getLineNumberTable();
      // Undeclared exception!
      try { 
        code0.copy((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Code", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.getLocalVariableTable();
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Code code0 = new Code(147, 147, 188, 188, byteArray0, (CodeException[]) null, (Attribute[]) null, constantPool0);
      code0.setCode(byteArray0);
      code0.getLineNumberTable();
      code0.toString();
      code0.getMaxLocals();
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.getLineNumberTable();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        code0.toString(true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    frem
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.getLineNumberTable();
      Code code1 = (Code)code0.copy((ConstantPool) null);
      code1.setMaxStack((-1700));
      // Undeclared exception!
      try { 
        code0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    frem
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Code code0 = new Code(147, 147, 188, 188, byteArray0, (CodeException[]) null, (Attribute[]) null, constantPool0);
      code0.setCode(byteArray0);
      code0.copy(constantPool0);
      code0.setExceptionTable((CodeException[]) null);
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.getLineNumberTable();
      code0.getAttributes();
      code0.setExceptionTable(codeExceptionArray0);
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = new CodeException((byte)0, 210, (-1799), (byte)0);
      codeExceptionArray0[0] = codeException0;
      ConstantPool constantPool0 = null;
      Code code0 = new Code(210, (-699), (-699), (-699), byteArray0, codeExceptionArray0, (Attribute[]) null, (ConstantPool) null);
      code0.getCode();
      ByteSequence byteSequence0 = mock(ByteSequence.class, new ViolatedAssumptionAnswer());
      code0.setLength((byte)0);
      code0.toString();
      int int0 = 0;
      code0.setAttributes((Attribute[]) null);
      code0.getMaxLocals();
      // Undeclared exception!
      try { 
        Attribute.readAttribute((DataInput) byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.getLineNumberTable();
      code0.copy((ConstantPool) null);
      // Undeclared exception!
      try { 
        code0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    frem
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[4];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)110;
      byteArray1[2] = (byte) (-124);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-124);
      byteArray1[5] = (byte) (-88);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.readBoolean();
      Code code0 = null;
      try {
        code0 = new Code(2118, (-2015), 115, 0, byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Code", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)2;
      CodeException[] codeExceptionArray0 = null;
      Attribute[] attributeArray0 = new Attribute[1];
      Method method0 = new Method((byte) (-120), (byte)58, (byte) (-111), attributeArray0, (ConstantPool) null);
      Method method1 = new Method(method0);
      method1.getExceptionTable();
      attributeArray0[0] = (Attribute) null;
      Code code0 = null;
      try {
        code0 = new Code(0, 130, 0, 0, byteArray0, (CodeException[]) null, attributeArray0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Code", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = new CodeException(914, 210, (-1799), 914);
      codeExceptionArray0[0] = codeException0;
      Attribute[] attributeArray0 = null;
      ConstantPool constantPool0 = null;
      Code code0 = new Code(210, (-699), (-699), (-699), byteArray0, codeExceptionArray0, (Attribute[]) null, (ConstantPool) null);
      code0.getCode();
      ByteSequence byteSequence0 = mock(ByteSequence.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      code0.setLength((byte)0);
      // Undeclared exception!
      try { 
        code0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.CodeException", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)20;
      CodeException[] codeExceptionArray0 = new CodeException[7];
      CodeException codeException0 = new CodeException((byte)45, 50, (byte)20, (byte)20);
      codeExceptionArray0[0] = codeException0;
      CodeException codeException1 = new CodeException((-3973), 0, 16384, 0);
      codeExceptionArray0[1] = codeException1;
      CodeException codeException2 = new CodeException(0, (byte) (-79), (-1), (byte) (-79));
      codeExceptionArray0[2] = codeException2;
      CodeException codeException3 = new CodeException(codeException0);
      codeExceptionArray0[3] = codeException3;
      CodeException codeException4 = new CodeException(0, (byte)45, (-384), (-3973));
      codeExceptionArray0[4] = codeException4;
      CodeException codeException5 = new CodeException(codeException3);
      codeExceptionArray0[5] = codeException5;
      CodeException codeException6 = new CodeException((byte)125, 50, 947, 0);
      codeExceptionArray0[6] = codeException6;
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code(100, 50, 100, 50, byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      Code code1 = new Code(code0);
      code1.getCode();
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code(1936, 250, 0, 250, byteArray0, (CodeException[]) null, attributeArray0, (ConstantPool) null);
      Attribute.removeAttributeReader("nz=&J$d'>i");
      code0.getMaxStack();
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 2907;
      ConstantPool constantPool0 = null;
      Code code0 = null;
      try {
        code0 = new Code(2907, 778, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Code", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Code code0 = null;
      try {
        code0 = new Code((Code) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Code", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1642), (-1642), (-2724), (-2724), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      Attribute[] attributeArray1 = new Attribute[5];
      attributeArray1[0] = (Attribute) code0;
      attributeArray1[1] = (Attribute) code0;
      attributeArray1[2] = (Attribute) code0;
      attributeArray1[3] = (Attribute) code0;
      attributeArray1[4] = (Attribute) code0;
      code0.setAttributes(attributeArray1);
      code0.setExceptionTable(codeExceptionArray0);
      code0.getCode();
      // Undeclared exception!
      try { 
        code0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = null;
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      Attribute[] attributeArray1 = new Attribute[5];
      attributeArray1[0] = (Attribute) code0;
      attributeArray1[1] = (Attribute) code0;
      attributeArray1[2] = (Attribute) code0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      attributeArray1[3] = (Attribute) code0;
      attributeArray1[4] = (Attribute) code0;
      code0.setAttributes(attributeArray1);
      code0.setExceptionTable(codeExceptionArray0);
      // Undeclared exception!
      try { 
        code0.toString(false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = new CodeException((byte)0, 197, (-1799), (byte)0);
      codeExceptionArray0[0] = codeException0;
      Code code0 = new Code(197, (-699), (-699), (-699), byteArray0, codeExceptionArray0, (Attribute[]) null, (ConstantPool) null);
      ByteSequence byteSequence0 = mock(ByteSequence.class, new ViolatedAssumptionAnswer());
      code0.setLength((byte)0);
      code0.setAttributes((Attribute[]) null);
      code0.getMaxLocals();
      code0.setMaxStack(0);
      codeException0.setCatchType(0);
      code0.setNameIndex(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      code0.getMaxLocals();
      code0.getLocalVariableTable();
      Code code1 = (Code)code0.copy((ConstantPool) null);
      code0.getLocalVariableTable();
      code0.getMaxLocals();
      code0.getLineNumberTable();
      Code code2 = new Code(code1);
      code0.toString();
      assertEquals(0, code0.getMaxStack());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2754), (-2754), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.setExceptionTable(codeExceptionArray0);
      code0.setCode((byte[]) null);
      code0.setExceptionTable((CodeException[]) null);
      code0.getCode();
      code0.getLocalVariableTable();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-56);
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code((-1630), (-1630), (-2752), (-2752), byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      code0.getLineNumberTable();
      code0.setMaxLocals((byte)103);
      code0.copy((ConstantPool) null);
      code0.getExceptionTable();
      assertEquals(1, code0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      CodeException[] codeExceptionArray0 = new CodeException[7];
      CodeException codeException0 = new CodeException(0, (byte)45, (-1), (byte)45);
      codeExceptionArray0[4] = codeException0;
      CodeException codeException1 = new CodeException((byte)125, 100, 16384, (-1));
      codeExceptionArray0[6] = codeException1;
      Attribute[] attributeArray0 = new Attribute[0];
      Code code0 = new Code(100, 100, 100, 100, byteArray0, codeExceptionArray0, attributeArray0, (ConstantPool) null);
      Code code1 = new Code(code0);
      code1.getCode();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        code1.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-114);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Code code0 = new Code(147, 147, 147, 147, byteArray0, (CodeException[]) null, (Attribute[]) null, constantPool0);
      code0.setCode(byteArray0);
      code0.getLineNumberTable();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      code0.accept(descendingVisitor0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\nAttribute(s) = ", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      code0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-114);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-38);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Code code0 = new Code(147, 147, 147, 147, byteArray0, (CodeException[]) null, (Attribute[]) null, constantPool0);
      code0.setCode(byteArray0);
      code0.getLineNumberTable();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      code0.accept(descendingVisitor0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\nAttribute(s) = ", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      code0.dump(dataOutputStream0);
      assertEquals(0, code0.getMaxStack());
}
}
