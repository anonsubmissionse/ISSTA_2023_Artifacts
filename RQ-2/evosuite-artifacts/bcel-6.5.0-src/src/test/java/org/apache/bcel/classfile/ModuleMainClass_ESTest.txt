 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(0, (-2609), 0, constantPool1);
      ModuleMainClass moduleMainClass1 = (ModuleMainClass)moduleMainClass0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(0, (-2609), 0, constantPool1);
      ModuleMainClass moduleMainClass1 = (ModuleMainClass)moduleMainClass0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(1139, 1628, 1139, (ConstantPool) null);
      moduleMainClass0.setHostClassIndex(2567);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(0, 0, 0, (ConstantPool) null);
      int int0 = moduleMainClass0.getHostClassIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass((-2215), (-5508), 0, constantPool0);
      ModuleMainClass moduleMainClass1 = (ModuleMainClass)moduleMainClass0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass((-2215), (-5508), 0, constantPool0);
      ModuleMainClass moduleMainClass1 = (ModuleMainClass)moduleMainClass0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(0, 0, 123, constantPool0);
      ModuleMainClass moduleMainClass1 = (ModuleMainClass)moduleMainClass0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(0, 0, 123, constantPool0);
      ModuleMainClass moduleMainClass1 = (ModuleMainClass)moduleMainClass0.copy(constantPool0);
      assertEquals(1, moduleMainClass1.getHostClassIndex());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(1139, 1628, 1139, (ConstantPool) null);
      // Undeclared exception!
      try { 
        moduleMainClass0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ModuleMainClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ModuleMainClass moduleMainClass0 = null;
      try {
        moduleMainClass0 = new ModuleMainClass((ModuleMainClass) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ModuleMainClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = null;
      try {
        moduleMainClass0 = new ModuleMainClass(183, 183, (DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ModuleMainClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(278, 3619, 278, constantPool0);
      int int0 = moduleMainClass0.getHostClassIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(278, 3619, 278, constantPool0);
      ModuleMainClass moduleMainClass1 = (ModuleMainClass)moduleMainClass0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(278, 3619, 278, constantPool0);
      ModuleMainClass moduleMainClass1 = (ModuleMainClass)moduleMainClass0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = null;
      try {
        moduleMainClass0 = new ModuleMainClass(0, 0, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(278, 3619, 278, constantPool0);
      // Undeclared exception!
      try { 
        moduleMainClass0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 278. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(0, 0, 317, constantPool0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ModuleMainClass: ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      moduleMainClass0.dump(dataOutputStream0);
      assertEquals(0, moduleMainClass0.getHostClassIndex());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(0, 0, 317, constantPool0);
      ModuleMainClass moduleMainClass1 = new ModuleMainClass(moduleMainClass0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ModuleMainClass moduleMainClass0 = new ModuleMainClass(278, 3619, 278, constantPool0);
      moduleMainClass0.setHostClassIndex(3619);
      // Undeclared exception!
      try { 
        moduleMainClass0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3619. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
