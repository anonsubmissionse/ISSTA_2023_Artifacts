 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      method0.getGenericSignature();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      method0.getGenericSignature();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Method method0 = new Method();
      method0.attributes_count = 682;
      // Undeclared exception!
      try { 
        method0.getGenericSignature();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      int int0 = method0.getSignatureIndex();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      int int0 = method0.getSignatureIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-102);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      int int0 = method0.getSignatureIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-102);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      int int0 = method0.getSignatureIndex();
      assertEquals(0, method0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Method method0 = new Method();
      int int0 = method0.getNameIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      int int0 = method0.getNameIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      int int0 = method0.getNameIndex();
      assertEquals(0, method0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field((-3859), (-3859), 0, (Attribute[]) null, constantPool0);
      ConstantPool constantPool1 = field0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field((-3859), (-3859), 0, (Attribute[]) null, constantPool0);
      ConstantPool constantPool1 = field0.getConstantPool();
      assertEquals(0, field0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Field field0 = new Field((-3859), (-3859), 0, (Attribute[]) null, constantPool0);
      ConstantPool constantPool1 = field0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 149, 213, attributeArray0, constantPool0);
      ConstantPool constantPool1 = method0.getConstantPool();
      assertEquals(0, method0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 149, 213, attributeArray0, constantPool0);
      ConstantPool constantPool1 = method0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 149, 213, attributeArray0, constantPool0);
      ConstantPool constantPool1 = method0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      method0.getAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      method0.getAttributes();
      assertEquals(0, method0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-1913), (-1913), 1, attributeArray0, constantPool0);
      AnnotationEntry[] annotationEntryArray0 = method0.getAnnotationEntries();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-1913), (-1913), 1, attributeArray0, constantPool0);
      AnnotationEntry[] annotationEntryArray0 = method0.getAnnotationEntries();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method((-1913), (-1913), 1, attributeArray0, constantPool0);
      AnnotationEntry[] annotationEntryArray0 = method0.getAnnotationEntries();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      assertEquals(0, fieldOrMethod0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-102);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-102);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-102);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      assertEquals(0, fieldOrMethod0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-109);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-109);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-109);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      FieldOrMethod fieldOrMethod0 = method0.copy_(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Method method0 = new Method((-2374), (-2374), (-2374), attributeArray0, (ConstantPool) null);
      FieldOrMethod fieldOrMethod0 = method0.copy_((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Method method0 = new Method((-2374), (-2374), (-2374), attributeArray0, (ConstantPool) null);
      FieldOrMethod fieldOrMethod0 = method0.copy_((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Method method0 = new Method((-2374), (-2374), (-2374), attributeArray0, (ConstantPool) null);
      FieldOrMethod fieldOrMethod0 = method0.copy_((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 149, 213, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        method0.getSignature();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 213. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getName();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = new Method((-1363), 0, (-1363), (Attribute[]) null, constantPool0);
      // Undeclared exception!
      try { 
        method0.getGenericSignature();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Field field0 = new Field((-3099), 170, 250, (Attribute[]) null, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[*KIM7hwh|_MX =u{", false);
      mockFileOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        field0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[3];
      Field field0 = new Field(1386, 1320, 1, attributeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        field0.copy_((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Method method0 = new Method();
      Attribute[] attributeArray0 = new Attribute[0];
      method0.setAttributes(attributeArray0);
      assertTrue(method0.isFinal());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = new Method((-1363), 0, (-1363), (Attribute[]) null, constantPool0);
      method0.setAttributes((Attribute[]) null);
      assertEquals(0, method0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = new Method((-1363), 0, (-1363), (Attribute[]) null, constantPool0);
      method0.setAttributes((Attribute[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Method method0 = new Method(1210, 873, 0, attributeArray0, (ConstantPool) null);
      MockFile mockFile0 = new MockFile("6*[-kT$>", "6*[-kT$>");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      method0.dump(dataOutputStream0);
      assertEquals(0, method0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Method method0 = new Method(1210, 873, 0, attributeArray0, (ConstantPool) null);
      MockFile mockFile0 = new MockFile("6*[-kT$>", "6*[-kT$>");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      method0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[1];
      Field field0 = new Field((byte)1, 1, (byte)3, attributeArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid method signature: ", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        field0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = new Method((-1363), 0, (-1363), (Attribute[]) null, constantPool0);
      int int0 = method0.getSignatureIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = new Method((-1363), 0, (-1363), (Attribute[]) null, constantPool0);
      int int0 = method0.getSignatureIndex();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Method method0 = new Method();
      Attribute[] attributeArray0 = method0.getAttributes();
      assertNotNull(attributeArray0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Method method0 = new Method((-2374), (-2374), (-2374), attributeArray0, (ConstantPool) null);
      int int0 = method0.getNameIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Method method0 = new Method((-2374), (-2374), (-2374), attributeArray0, (ConstantPool) null);
      int int0 = method0.getNameIndex();
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      Attribute[] attributeArray0 = new Attribute[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(149, 149, 0, attributeArray0, constantPool0);
      // Undeclared exception!
      try { 
        method0.getName();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 149. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      method0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      method0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      method0.getGenericSignature();
      method0.getGenericSignature();
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Method method0 = new Method(dataInputStream0, (ConstantPool) null);
      method0.getGenericSignature();
      method0.getGenericSignature();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getAnnotationEntries();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = new Method((-1363), 0, (-1363), (Attribute[]) null, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 188);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      method0.dump(dataOutputStream0);
      assertEquals(0, method0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = new Method((-1363), 0, (-1363), (Attribute[]) null, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 188);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      method0.dump(dataOutputStream0);
      assertEquals(0, method0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = new Method((-1363), 0, (-1363), (Attribute[]) null, constantPool0);
      // Undeclared exception!
      try { 
        method0.equals(method0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Method method0 = new Method();
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      method0.setConstantPool(constantPool0);
      assertTrue(method0.isSynchronized());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getSignature();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Method method0 = new Method();
      method0.setSignatureIndex(698);
      assertEquals(0, method0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = new Method((-1363), 0, (-1363), (Attribute[]) null, constantPool0);
      Method method1 = new Method(method0);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Method method0 = new Method((-1363), 0, (-1363), (Attribute[]) null, constantPool0);
      Method method1 = new Method(method0);
      assertEquals(0, method0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Method method0 = new Method();
      method0.setNameIndex((-1));
      assertEquals(0, method0.getNameIndex());
}
