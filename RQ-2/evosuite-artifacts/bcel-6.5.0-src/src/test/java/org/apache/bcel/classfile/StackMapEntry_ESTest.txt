 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2272);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 167, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(127);
      stackMapEntry0.setByteCodeOffset(167);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte)64, 247, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.updateByteCodeOffset(252);
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2279);
      assertEquals(1, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(32767, 32767, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setFrameType(32767);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid StackMap frameType
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setFrameType(250);
      assertEquals(1, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, (StackMapType[]) null, (ConstantPool) null);
      stackMapEntry0.setFrameType(63);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, 3600, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, 3600, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(126);
      stackMapEntry0.setByteCodeOffset(63);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset(0);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setByteCodeOffset(63);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setByteCodeOffset(63);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 232, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(254);
      stackMapEntry0.toString();
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      String string0 = stackMapEntry0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(127, 185, (StackMapType[]) null, (StackMapType[]) null, constantPool0);
      String string0 = stackMapEntry0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset(0);
      stackMapEntry0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setByteCodeOffset(63);
      stackMapEntry0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 232, stackMapTypeArray0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("cTz^ 9-5'9f6VP14^2R");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      stackMapEntry0.setFrameType(254);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(247, 247, (StackMapType[]) null, 247, (StackMapType[]) null, constantPool0);
      stackMapEntry0.updateByteCodeOffset(247);
      assertEquals(1, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      StackMapType[] stackMapTypeArray0 = stackMapEntry0.getTypesOfStackItems();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      StackMapType[] stackMapTypeArray0 = stackMapEntry0.getTypesOfStackItems();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      StackMapType[] stackMapTypeArray0 = stackMapEntry0.getTypesOfStackItems();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(1104, 255, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.getTypesOfLocals();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, 4, stackMapTypeArray0, 4, stackMapTypeArray0, constantPool0);
      stackMapEntry0.getNumberOfStackItems();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfLocals();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfLocals();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfLocals();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1921), (-1921), stackMapTypeArray0, (-1921), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-544), 121, (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-544), 121, (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-544), 121, (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-544), 121, (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-10), (byte)64, stackMapTypeArray0, 1950, stackMapTypeArray0, constantPool0);
      stackMapEntry0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[5];
      StackMapEntry stackMapEntry0 = new StackMapEntry(2120, (-7008), stackMapTypeArray0, (byte)0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(64);
      int int0 = stackMapEntry0.getByteCodeOffset();
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(64);
      int int0 = stackMapEntry0.getByteCodeOffset();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 167, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(127);
      int int0 = stackMapEntry0.getByteCodeOffset();
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 167, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(127);
      int int0 = stackMapEntry0.getByteCodeOffset();
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      stackMapTypeArray0[1] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.copy();
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(247, 247, (StackMapType[]) null, 247, (StackMapType[]) null, constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(247, 247, (StackMapType[]) null, 247, (StackMapType[]) null, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(247, 247, (StackMapType[]) null, 247, (StackMapType[]) null, constantPool0);
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(247, 247, (StackMapType[]) null, 247, (StackMapType[]) null, constantPool0);
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[4];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)7, 229, constantPool0);
      stackMapTypeArray0[0] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry(0, (-3346), stackMapTypeArray0, (-407), stackMapTypeArray0, constantPool0);
      // Undeclared exception!
      try { 
        stackMapEntry0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 229. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)7;
      byteArray0[0] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      // Undeclared exception!
      try { 
        stackMapEntry0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), (-19), stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(127);
      MockPrintStream mockPrintStream0 = new MockPrintStream("cTz^ 9-5'9f6VP14^2R");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1959), 218, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte) (-83);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)79);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[4] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal type for StackMapType: -1
         //
         verifyException("org.apache.bcel.classfile.StackMapType", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3262), 63);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-531), (-531), (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setByteCodeOffset((byte)8);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Invalid StackMap frameType: -531
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setByteCodeOffset((-1157));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid StackMap offset: -1157
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(949);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(949);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      stackMapTypeArray0[1] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      stackMapTypeArray0[1] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      // Undeclared exception!
      try { 
        stackMapEntry0.copy();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[7];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setTypesOfStackItems(stackMapTypeArray0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[7];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setTypesOfStackItems(stackMapTypeArray0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[7];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setTypesOfStackItems(stackMapTypeArray0);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[9];
      StackMapEntry stackMapEntry0 = new StackMapEntry(8, 8, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setTypesOfStackItems((StackMapType[]) null);
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setTypesOfLocals(stackMapTypeArray0);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[17];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), (-1927), stackMapTypeArray0, 252, (StackMapType[]) null, (ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[17];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), (-1927), stackMapTypeArray0, 252, (StackMapType[]) null, (ConstantPool) null);
      stackMapEntry0.setTypesOfLocals((StackMapType[]) null);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), (-1927), stackMapTypeArray0, 252, (StackMapType[]) null, (ConstantPool) null);
      stackMapEntry0.setFrameType(252);
      stackMapEntry0.setByteCodeOffset(63);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2272);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(248);
      stackMapEntry0.setByteCodeOffset(32767);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      stackMapEntry0.setByteCodeOffset(63);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setByteCodeOffset(0);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-544), 121, (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.updateByteCodeOffset(122);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Invalid StackMap frameType: -544
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setByteCodeOffset(32802);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid StackMap offset: 32802
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(8, 8, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(251);
      assertEquals(1, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(571, 248, stackMapTypeArray0, 248, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(247);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1921), (-1921), stackMapTypeArray0, (-1921), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1921), (-1921), stackMapTypeArray0, (-1921), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 252, (StackMapType[]) null, (-1927), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)7;
      byteArray0[0] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), (-1927), stackMapTypeArray0, 252, (StackMapType[]) null, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(248);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(248);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset((byte)84);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset((byte)84);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)7, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)7, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType stackMapType0 = new StackMapType((byte)0, (byte) (-4), constantPool0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      stackMapTypeArray0[0] = stackMapType0;
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2244);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2244);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      int int0 = stackMapEntry0.getMapEntrySize();
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-569), (-569), (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Invalid StackMap frameType: -569
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      stackMapEntry0.toString();
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(14, 0, stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(248);
      stackMapEntry0.toString();
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset((byte)84);
      stackMapEntry0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2244);
      stackMapEntry0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-544), 121, (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      String string0 = stackMapEntry0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 252, (StackMapType[]) null, (-1927), stackMapTypeArray0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(APPEND 1, offset delta=-1927, locals={null})");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      stackMapEntry0.setFrameType(255);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      MockPrintStream mockPrintStream0 = new MockPrintStream("cTz^ 9-5'9f6VP14^2R");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setFrameType(255);
      MockPrintStream mockPrintStream0 = new MockPrintStream("cTz^ 9-5'9f6VP14^2R");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      stackMapEntry0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2244);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2244);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry(14, 0, stackMapTypeArray0, 0, stackMapTypeArray0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("cTz^ 9-5'9f6VP14^2R");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      stackMapEntry0.setFrameType(248);
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      stackMapEntry0.setFrameType((byte)84);
      stackMapEntry0.setByteCodeOffset((byte)84);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StackMapEntry stackMapEntry0 = new StackMapEntry((-530), (-530), (StackMapType[]) null, (StackMapType[]) null, (ConstantPool) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid Stack map table tag: -530
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[17];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), (-1927), stackMapTypeArray0, 252, (StackMapType[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.setFrameType((-1927));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid StackMap frameType
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid frame type found while parsing stack map table: 140
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      stackMapEntry0.setByteCodeOffset(2272);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(949);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(949);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(949);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      stackMapEntry0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(8, 8, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfStackItems();
      assertEquals(1, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(8, 8, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfStackItems();
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(8, 8, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfStackItems();
      assertEquals(1, stackMapEntry0.getByteCodeOffset());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry(8, 8, stackMapTypeArray0, stackMapTypeArray0, (ConstantPool) null);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfStackItems();
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfLocals();
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfLocals();
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfLocals();
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfLocals();
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfStackItems();
      assertEquals(0, stackMapEntry0.getFrameType());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfStackItems();
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfStackItems();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      int int0 = stackMapEntry0.getNumberOfStackItems();
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-2362), (-2362), stackMapTypeArray0, (-2362), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setNumberOfLocals((-2362));
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-2362), (-2362), stackMapTypeArray0, (-2362), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setNumberOfLocals((-2362));
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-2362), (-2362), stackMapTypeArray0, (-2362), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setNumberOfLocals((-2362));
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      int int0 = stackMapEntry0.getFrameType();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfLocals();
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfLocals();
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfLocals();
      ;
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      StackMapType[] stackMapTypeArray0 = new StackMapType[2];
      StackMapEntry stackMapEntry0 = new StackMapEntry((byte) (-4), (byte)7, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfLocals();
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      int int0 = stackMapEntry0.getByteCodeOffset();
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        stackMapEntry0.updateByteCodeOffset((-1489));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid StackMap offset: -3416
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      stackMapEntry0.accept(descendingVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1927), 0, stackMapTypeArray0, 252, stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setConstantPool((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-1910), (-1910), stackMapTypeArray0, (-1910), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.setNumberOfStackItems(0);
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-2362), (-2362), stackMapTypeArray0, (-2362), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-2362), (-2362), stackMapTypeArray0, (-2362), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      StackMapEntry stackMapEntry0 = new StackMapEntry((-2362), (-2362), stackMapTypeArray0, (-2362), stackMapTypeArray0, (ConstantPool) null);
      stackMapEntry0.getConstantPool();
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
}
