 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen((-3535), 68, constantPoolGen0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 83);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      enumElementValueGen0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      String string0 = arrayElementValueGen0.stringifyValue();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "", constantPoolGen0);
      String string0 = enumElementValueGen0.stringifyValue();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(0, constantPoolGen0);
      classElementValueGen0.type = 0;
      int int0 = classElementValueGen0.getElementValueType();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(0, constantPoolGen0);
      classElementValueGen0.type = (-2280);
      int int0 = classElementValueGen0.getElementValueType();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(0, constantPoolGen0, (byte)66);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(0, constantPoolGen0);
      classElementValueGen0.type = (-2280);
      ElementValue elementValue0 = classElementValueGen0.getElementValue();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(233, (ConstantPoolGen) null);
      ConstantPoolGen constantPoolGen0 = classElementValueGen0.getConstantPool();
      assertNotNull(constantPoolGen0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(2157, 2157, constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = enumElementValueGen0.getConstantPool();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen((AnnotationEntryGen) null, constantPoolGen0);
      // Undeclared exception!
      try { 
        annotationElementValueGen0.stringifyValue();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet
         //
         verifyException("org.apache.bcel.generic.AnnotationElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(187, 187, (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        enumElementValueGen0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(3501, constantPoolGen0, 0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen class does not know how to stringify type 3501
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((int) (byte)83, constantPoolGen0, (double) 74);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.stringifyValue();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantDouble cannot be cast to org.apache.bcel.classfile.ConstantInteger
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      // Undeclared exception!
      try { 
        elementValueGen0.stringifyValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue((DataInput) null, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3), (byte)71);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(dataInputStream0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PipedInputStream pipedInputStream0 = new PipedInputStream(66);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        ElementValueGen.readElementValue(dataInputStream0, constantPoolGen0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(91, 91, constantPoolGen0);
      arrayElementValueGen0.addElement(enumElementValueGen0);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.getElementValue();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.EnumElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      arrayElementValueGen0.type = 103;
      // Undeclared exception!
      try { 
        arrayElementValueGen0.getElementValue();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Only element values of type array can be built with this ctor - type specified: 103
         //
         verifyException("org.apache.bcel.classfile.ArrayElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(1749, 1749, constantPoolGen0);
      // Undeclared exception!
      try { 
        enumElementValueGen0.getElementValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1749
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      // Undeclared exception!
      try { 
        arrayElementValueGen0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ArrayElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-5688), constantPoolGen0, '@');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b_1m|");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        simpleElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen doesnt know how to write out type -5688
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        arrayElementValueGen0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(82, constantPoolGen0, 960.876392424);
      simpleElementValueGen0.type = 83;
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantDouble cannot be cast to org.apache.bcel.classfile.ConstantInteger
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(0, constantPoolGen0);
      int int0 = classElementValueGen0.getElementValueType();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(63, constantPoolGen0, 63);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (63)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(115, constantPoolGen0, 115);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Utf8' at index 1 and got CONSTANT_Integer[3](bytes = 115)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(114, constantPoolGen0, (double) 114);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (114)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(113, constantPoolGen0, 113);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (113)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((int) (byte)112, constantPoolGen0, (double) (byte)112);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (112)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(111, constantPoolGen0, (double) 111);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (111)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(110, constantPoolGen0, (double) 110);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (110)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(109, constantPoolGen0, (double) 109);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (109)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(108, constantPoolGen0, (double) 108);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (108)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(107, constantPoolGen0, (double) 107);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (107)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(106, constantPoolGen0, 960.876392424);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (106)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(105, constantPoolGen0, (double) 105);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (105)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(104, 104, constantPoolGen0);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (104)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(103, 103, constantPoolGen0);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (103)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(102, constantPoolGen0, 960.876392424);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (102)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      EnumElementValueGen enumElementValueGen0 = new EnumElementValueGen(objectType0, "org.apche.bcel.generic.Elemen;ValueGe", constantPoolGen0);
      ElementValue elementValue0 = enumElementValueGen0.getElementValue();
      ElementValueGen elementValueGen0 = ElementValueGen.copy(elementValue0, constantPoolGen0, true);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassElementValue classElementValue0 = new ClassElementValue(100, 100, (ConstantPool) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(classElementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (100)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ClassElementValueGen classElementValueGen0 = new ClassElementValueGen(0, constantPoolGen0);
      ElementValue elementValue0 = classElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(98, constantPoolGen0, (double) 98);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (98)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(97, constantPoolGen0, (double) 97);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (97)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(96, constantPoolGen0, 958.4841208212324);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (96)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(95, constantPoolGen0, (double) 95);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (95)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((int) (byte)94, constantPoolGen0, (byte) (-116));
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (94)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(93, 93, constantPoolGen0);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (93)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(92, constantPoolGen0, (double) 92);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (92)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(90, constantPoolGen0, 960.876392424);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantDouble cannot be cast to org.apache.bcel.classfile.ConstantInteger
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(89, constantPoolGen0, (double) 89);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (89)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValue simpleElementValue0 = new SimpleElementValue(88, 69, (ConstantPool) null);
      // Undeclared exception!
      try { 
        ElementValueGen.copy(simpleElementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (88)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(87, constantPoolGen0, (double) 87);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (87)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(86, constantPoolGen0, (double) 86);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (86)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(85, constantPoolGen0, (double) 85);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (85)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(84, constantPoolGen0, (double) 84);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (84)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayElementValueGen arrayElementValueGen0 = new ArrayElementValueGen(constantPoolGen0);
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(83, constantPoolGen0, (float) 67);
      arrayElementValueGen0.addElement(simpleElementValueGen0);
      ElementValue elementValue0 = arrayElementValueGen0.getElementValue();
      ElementValueGen elementValueGen0 = ElementValueGen.copy(elementValue0, constantPoolGen0, false);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      elementValueGen0.type = (int) (byte)82;
      ElementValue elementValue0 = elementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (82)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(81, constantPoolGen0, 81);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (81)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(80, constantPoolGen0, (double) 80);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (80)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(79, constantPoolGen0, 79);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (79)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(78, constantPoolGen0, (double) 78);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (78)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(77, constantPoolGen0, (double) 77);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (77)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(76, constantPoolGen0, 76);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (76)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(75, constantPoolGen0, 0.0);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (75)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      elementValueGen0.type = 74;
      ElementValue elementValue0 = elementValueGen0.getElementValue();
      ElementValueGen elementValueGen1 = ElementValueGen.copy(elementValue0, constantPoolGen0, false);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(73, constantPoolGen0, (double) 73);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Integer' at index 1 and got CONSTANT_Double[6](bytes = 73.0)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(72, constantPoolGen0, (double) 72);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (72)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(71, constantPoolGen0, 71);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (71)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(70, constantPoolGen0, 960.876392424);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, true);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantDouble cannot be cast to org.apache.bcel.classfile.ConstantFloat
         //
         verifyException("org.apache.bcel.classfile.SimpleElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(69, constantPoolGen0, 69);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (69)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(68, constantPoolGen0, 68);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      ElementValueGen elementValueGen0 = ElementValueGen.copy(elementValue0, constantPoolGen0, false);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen(66, constantPoolGen0, 66);
      ElementValue elementValue0 = simpleElementValueGen0.getElementValue();
      ElementValueGen elementValueGen0 = ElementValueGen.copy(elementValue0, constantPoolGen0, false);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      elementValueGen0.type = 65;
      ElementValue elementValue0 = elementValueGen0.getElementValue();
      // Undeclared exception!
      try { 
        ElementValueGen.copy(elementValue0, constantPoolGen0, false);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet! (65)
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      AnnotationEntry annotationEntry0 = new AnnotationEntry(91, (ConstantPool) null, false);
      AnnotationElementValue annotationElementValue0 = new AnnotationElementValue(64, annotationEntry0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        ElementValueGen.copy(annotationElementValue0, constantPoolGen0, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.AnnotationEntry", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)64;
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 0
         //
         verifyException("org.apache.bcel.classfile.ElementValue", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        ElementValueGen.readElementValue(byteSequence0, (ConstantPoolGen) null);
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 114
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 113
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 112
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 111
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 110
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 109
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 108
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 107
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[3] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 106
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 105
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 104
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 103
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 102
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 100
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 98
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 97
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 96
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 95
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 94
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 93
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 92
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[16];
      byteArray0[3] = (byte)91;
      byteArray0[6] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        AnnotationEntryGen.read(byteSequence0, constantPoolGen0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 0
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(1, elementValueGen0.getElementValueType());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 89
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 88
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 87
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 86
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 85
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 84
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(0, elementValueGen0.getElementValueType());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 82
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 81
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 80
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 79
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 78
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 77
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 76
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 75
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(1, elementValueGen0.getElementValueType());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 72
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 71
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(1, elementValueGen0.getElementValueType());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 69
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(1, elementValueGen0.getElementValueType());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      ElementValue elementValue0 = elementValueGen0.getElementValue();
      assertEquals(1, byteSequence0.getIndex());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      ElementValue elementValue0 = elementValueGen0.getElementValue();
      ElementValueGen.copy(elementValue0, constantPoolGen0, false);
      assertEquals(1, elementValueGen0.getElementValueType());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[16];
      byteArray0[1] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[16];
      byteArray0[1] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(1, elementValueGen0.getElementValueType());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 65
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[16];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected element value kind in annotation: 0
         //
         verifyException("org.apache.bcel.generic.ElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ElementValueGen elementValueGen0 = ElementValueGen.readElementValue(byteSequence0, constantPoolGen0);
      assertEquals(1, elementValueGen0.getElementValueType());
}
