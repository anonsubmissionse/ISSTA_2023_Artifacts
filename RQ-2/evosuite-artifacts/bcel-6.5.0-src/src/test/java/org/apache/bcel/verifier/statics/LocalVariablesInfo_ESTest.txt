 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      assertNotNull(lCMP0.getName());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      assertEquals(1, lCMP0.getLength());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(0, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertNotNull(lCMP0.getName());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertEquals(1, lCMP0.getLength());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertEquals(1, type0.getSize());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertNotNull(type0.getSignature());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", 4262, 4262, type0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", 4262, 4262, type0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", 4262, 4262, type0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", 4262, 4262, type0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", 4262, 4262, type0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", 4262, 4262, type0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      String string0 = "Slot number for local variable information out of range.";
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", 4262, 4262, type0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      assertNotNull(lCMP0.getName());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      assertEquals(1, lCMP0.getLength());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertNotNull(lCMP0.getName());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertEquals(1, lCMP0.getLength());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertNotNull(type0.getSignature());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertEquals(0, type0.getSize());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-3242), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-3242), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-3242), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-3242), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-3242), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-3242), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-2066), (-2066), type0);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", (-3242), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      assertEquals(localVariablesInfo0, lCMP0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      assertEquals(1, lCMP0.getLength());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      assertNotNull(lCMP0.getName());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.DOUBLE;
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.DOUBLE;
      assertNotNull(basicType0.getSignature());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.DOUBLE;
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.DOUBLE;
      assertEquals(1, basicType0.getSize());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.DOUBLE;
      localVariablesInfo0.add(1, "", (-2066), (-2066), basicType0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.DOUBLE;
      localVariablesInfo0.add(1, "", (-2066), (-2066), basicType0);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 3037;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      int int1 = 1;
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.DOUBLE;
      localVariablesInfo0.add(1, "", (-2066), (-2066), basicType0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      localVariablesInfo0.add(207, "", 1, 0, basicType0);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      localVariablesInfo0.add(207, "", 1, 0, basicType0);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      localVariablesInfo0.add(207, "", 1, 0, basicType0);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      localVariablesInfo0.add(207, "", 1, 0, basicType0);
      LocalVariableInfo localVariableInfo1 = localVariablesInfo0.getLocalVariableInfo(1);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      localVariablesInfo0.add(207, "", 1, 0, basicType0);
      LocalVariableInfo localVariableInfo1 = localVariablesInfo0.getLocalVariableInfo(1);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      localVariablesInfo0.add(207, "", 1, 0, basicType0);
      LocalVariableInfo localVariableInfo1 = localVariablesInfo0.getLocalVariableInfo(1);
      int int1 = 0;
      int int2 = 0;
      localVariablesInfo0.add(0, "K", 0, 0, basicType0);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      localVariablesInfo0.add(207, "", 1, 0, basicType0);
      LocalVariableInfo localVariableInfo1 = localVariablesInfo0.getLocalVariableInfo(1);
      int int1 = 0;
      int int2 = 0;
      localVariablesInfo0.add(0, "K", 0, 0, basicType0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1806);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(1);
      int int0 = 0;
      BasicType basicType0 = Type.BOOLEAN;
      String string0 = Type.getMethodSignature(basicType0, basicType0.NO_ARGS);
      localVariablesInfo0.add(207, "", 1, 0, basicType0);
      LocalVariableInfo localVariableInfo1 = localVariablesInfo0.getLocalVariableInfo(1);
      int int1 = 0;
      int int2 = 0;
      localVariablesInfo0.add(0, "K", 0, 0, basicType0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = 2543;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2543);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      BasicType basicType0 = Type.CHAR;
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      BasicType basicType0 = Type.CHAR;
      assertNotNull(basicType0.getSignature());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      BasicType basicType0 = Type.CHAR;
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      BasicType basicType0 = Type.CHAR;
      assertEquals(0, basicType0.getSize());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      assertNotNull(lCMP0.getName());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(0, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertEquals(localVariablesInfo0, type0);
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertNotNull(lCMP0.getName());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertEquals(0, lCMP0.getLength());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertNotNull(type0.getSignature());
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      assertEquals(0, type0.getSize());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "", (-2066), (-2066), type0);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1);
      ObjectType objectType0 = Type.STRING;
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1);
      ObjectType objectType0 = Type.STRING;
      assertEquals(1, objectType0.getSize());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1);
      ObjectType objectType0 = Type.STRING;
      assertNotNull(objectType0.getClassName());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1);
      ObjectType objectType0 = Type.STRING;
      assertEquals(localVariablesInfo0, objectType0.getType());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1);
      ObjectType objectType0 = Type.STRING;
      assertNotNull(objectType0.getSignature());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1693);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1693);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(221);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(221);
      ObjectType objectType0 = Type.OBJECT;
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(221);
      ObjectType objectType0 = Type.OBJECT;
      assertNotNull(objectType0.getClassName());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(221);
      ObjectType objectType0 = Type.OBJECT;
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(221);
      ObjectType objectType0 = Type.OBJECT;
      assertEquals(0, objectType0.getSize());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(221);
      ObjectType objectType0 = Type.OBJECT;
      assertNotNull(objectType0.getSignature());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      String string0 = "org.apache.bcel.generic.LAND";
      BasicType basicType0 = Type.CHAR;
      assertEquals(localVariablesInfo0, basicType0);
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      String string0 = "org.apache.bcel.generic.LAND";
      BasicType basicType0 = Type.CHAR;
      assertEquals(0, basicType0.getSize());
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      String string0 = "org.apache.bcel.generic.LAND";
      BasicType basicType0 = Type.CHAR;
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      String string0 = "org.apache.bcel.generic.LAND";
      BasicType basicType0 = Type.CHAR;
      assertNotNull(basicType0.getSignature());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1575);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1575);
      LocalVariableInfo localVariableInfo0 = localVariablesInfo0.getLocalVariableInfo(0);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(190);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = (-3553);
      LocalVariablesInfo localVariablesInfo0 = null;
      try {
        localVariablesInfo0 = new LocalVariablesInfo((-3553));
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      assertNotNull(localVariablesInfo0);
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      assertEquals(localVariablesInfo0, dCMPL0);
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      assertNotNull(dCMPL0.getName());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      assertEquals(0, constantMethodType0.getDescriptorIndex());
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      assertEquals(localVariablesInfo0, type0);
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      assertNotNull(dCMPL0.getName());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      assertEquals(0, type0.getSize());
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      assertNotNull(type0.getSignature());
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "*I^R,XO/Y[n(s34Qg49", 0, 1, type0);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "*I^R,XO/Y[n(s34Qg49", 0, 1, type0);
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "*I^R,XO/Y[n(s34Qg49", 0, 1, type0);
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "*I^R,XO/Y[n(s34Qg49", 0, 1, type0);
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "*I^R,XO/Y[n(s34Qg49", 0, 1, type0);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "*I^R,XO/Y[n(s34Qg49", 0, 1, type0);
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "*I^R,XO/Y[n(s34Qg49", 0, 1, type0);
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      int int2 = 1;
      DCMPL dCMPL0 = new DCMPL();
      Constant[] constantArray0 = new Constant[1];
      int int3 = 0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCMPL0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "*I^R,XO/Y[n(s34Qg49", 0, 1, type0);
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1685);
      RET rET0 = new RET(0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = rET0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "},]&`", 1685, (-1077), type0);
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(0);
      Type type0 = Type.getReturnType("I:d^7'5s");
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(0, "I:d^7'5s", 0, 0, type0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1041);
  }
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(1780);
      localVariablesInfo0.getLocalVariableInfo(7);
      // Undeclared exception!
      try { 
        localVariablesInfo0.getLocalVariableInfo(1784);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 2179;
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(2179);
      int int1 = 0;
      String string0 = "*I^R,XO/Y[n(s34Qg49";
      DCMPL dCMPL0 = new DCMPL();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPL0.getType(constantPoolGen0);
      localVariablesInfo0.add(0, "*I^R,XO/Y[n(s34Qg49", 0, 0, type0);
      type0.toString();
      int int2 = (-1);
      // Undeclared exception!
      try { 
        localVariablesInfo0.add((-1), "double", 0, (-1), type0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(130);
      // Undeclared exception!
      try { 
        localVariablesInfo0.getLocalVariableInfo((-2));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LocalVariablesInfo localVariablesInfo0 = new LocalVariablesInfo(3037);
      LCMP lCMP0 = new LCMP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = lCMP0.getType(constantPoolGen0);
      localVariablesInfo0.add(1, "Slot number for local variable information out of range.", 1, 1, type0);
      // Undeclared exception!
      try { 
        localVariablesInfo0.add(3037, "Slot number for local variable information out of range.", 1, 1, type0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Slot number for local variable information out of range.
         //
         verifyException("org.apache.bcel.verifier.statics.LocalVariablesInfo", e);
      }
  }
