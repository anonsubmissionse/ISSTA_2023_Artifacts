 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[1];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, (-708), intArray0, (ConstantPool) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable1 = (ExceptionTable)exceptionTable0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[1];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, (-708), intArray0, (ConstantPool) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable1 = (ExceptionTable)exceptionTable0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, (-708), intArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      exceptionTable0.accept(emptyVisitor0);
      assertEquals(0, exceptionTable0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[2];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(0, 0, intArray0, constantPool0);
      int int0 = exceptionTable0.getNumberOfExceptions();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[3];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(1749, 92, intArray0, constantPool0);
      int[] intArray1 = exceptionTable0.getExceptionIndexTable();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(3792, 3792, intArray0, (ConstantPool) null);
      exceptionTable0.setNameIndex((-2128));
      Attribute attribute0 = exceptionTable0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[8];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(0, 0, intArray0, constantPool0);
      ExceptionTable exceptionTable1 = (ExceptionTable)exceptionTable0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[8];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(0, 0, intArray0, constantPool0);
      ExceptionTable exceptionTable1 = (ExceptionTable)exceptionTable0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(3792, 3792, intArray0, (ConstantPool) null);
      Attribute attribute0 = exceptionTable0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[7];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable0 = new ExceptionTable(0, 0, intArray0, constantPool0);
      // Undeclared exception!
      try { 
        exceptionTable0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[8];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable0 = new ExceptionTable((-486), (-486), intArray0, constantPool0);
      // Undeclared exception!
      try { 
        exceptionTable0.getExceptionNames();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, (-708), intArray0, (ConstantPool) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        exceptionTable0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[8];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(0, 0, intArray0, constantPool0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}f/S");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.close();
      try { 
        exceptionTable0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExceptionTable exceptionTable0 = null;
      try {
        exceptionTable0 = new ExceptionTable(134, 0, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ExceptionTable", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ExceptionTable exceptionTable0 = null;
      try {
        exceptionTable0 = new ExceptionTable(0, 4035, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, (-708), intArray0, (ConstantPool) null);
      int[] intArray1 = exceptionTable0.getExceptionIndexTable();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[3];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(1749, 1749, intArray0, constantPool0);
      // Undeclared exception!
      try { 
        exceptionTable0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, (-708), intArray0, (ConstantPool) null);
      String string0 = exceptionTable0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[3];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(1749, 1749, intArray0, constantPool0);
      exceptionTable0.setExceptionIndexTable(intArray0);
      assertEquals(0, exceptionTable0.getNumberOfExceptions());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, (-708), intArray0, (ConstantPool) null);
      exceptionTable0.setExceptionIndexTable((int[]) null);
      assertEquals(0, exceptionTable0.getNumberOfExceptions());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[2];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(0, 0, intArray0, constantPool0);
      // Undeclared exception!
      try { 
        exceptionTable0.getExceptionNames();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, (-708), intArray0, (ConstantPool) null);
      String[] stringArray0 = exceptionTable0.getExceptionNames();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, (-708), intArray0, (ConstantPool) null);
      int int0 = exceptionTable0.getNumberOfExceptions();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[3];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable(1749, 1749, intArray0, constantPool0);
      MockFile mockFile0 = new MockFile("2ovalI*+", "2ovalI*+");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      exceptionTable0.dump(dataOutputStream0);
      assertEquals(1, mockFile0.length());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 22);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = null;
      try {
        exceptionTable0 = new ExceptionTable((-1269), (-3834), dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 22);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ExceptionTable exceptionTable0 = new ExceptionTable((-1269), (-3834), dataInputStream0, constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ExceptionTable exceptionTable0 = new ExceptionTable(2710, 2, (int[]) null, constantPool0);
      assertEquals(1, exceptionTable0.getNumberOfExceptions());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(676, 676, intArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        exceptionTable0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ExceptionTable", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[0];
      ExceptionTable exceptionTable0 = new ExceptionTable(676, 676, intArray0, (ConstantPool) null);
      ExceptionTable exceptionTable1 = new ExceptionTable(exceptionTable0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExceptionTable exceptionTable0 = null;
      try {
        exceptionTable0 = new ExceptionTable((ExceptionTable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ExceptionTable", e);
      }
  }
