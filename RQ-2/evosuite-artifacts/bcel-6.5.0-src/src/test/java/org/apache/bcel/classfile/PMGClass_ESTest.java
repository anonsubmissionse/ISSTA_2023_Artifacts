/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:42:35 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.PMGClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PMGClass_ESTest extends PMGClass_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(1, 1, 104, (-679), constantPool0);
      int int0 = pMGClass0.getPMGIndex();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(1, 1, 104, (-679), constantPool0);
      int int0 = pMGClass0.getPMGIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(113, 0, 113, 0, (ConstantPool) null);
      int int0 = pMGClass0.getPMGClassIndex();
      assertEquals(0, pMGClass0.getPMGIndex());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(113, 0, 113, 0, (ConstantPool) null);
      int int0 = pMGClass0.getPMGClassIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Constant[] constantArray0 = new Constant[18];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(252, 324, 252, (-1081), constantPool0);
      int int0 = pMGClass0.getPMGClassIndex();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Constant[] constantArray0 = new Constant[18];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(252, 324, 252, (-1081), constantPool0);
      int int0 = pMGClass0.getPMGClassIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(0, 597, 3590, 0, (ConstantPool) null);
      PMGClass pMGClass1 = (PMGClass)pMGClass0.copy((ConstantPool) null);
      assertEquals(0, pMGClass1.getPMGIndex());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(0, 597, 3590, 0, (ConstantPool) null);
      PMGClass pMGClass1 = (PMGClass)pMGClass0.copy((ConstantPool) null);
      assertEquals(0, pMGClass1.getPMGClassIndex());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(113, 0, 113, 0, (ConstantPool) null);
      PMGClass pMGClass1 = (PMGClass)pMGClass0.copy((ConstantPool) null);
      assertEquals(0, pMGClass1.getPMGClassIndex());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(113, 0, 113, 0, (ConstantPool) null);
      PMGClass pMGClass1 = (PMGClass)pMGClass0.copy((ConstantPool) null);
      assertEquals(0, pMGClass1.getPMGIndex());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass((-5788), 65535, (-5788), (-5788), constantPool0);
      // Undeclared exception!
      try { 
        pMGClass0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -5788. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass((-41), (-41), 1330, 236, constantPool0);
      // Undeclared exception!
      try { 
        pMGClass0.getPMGName();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1330. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(1, 1, 99, (-679), constantPool0);
      // Undeclared exception!
      try { 
        pMGClass0.getPMGClassName();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -679. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass((-2337), (-3293), (-2337), (-2337), constantPool0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        pMGClass0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PMGClass pMGClass0 = null;
      try {
        pMGClass0 = new PMGClass((PMGClass) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.PMGClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PMGClass pMGClass0 = null;
      try {
        pMGClass0 = new PMGClass(9, 10, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      PMGClass pMGClass0 = null;
      try {
        pMGClass0 = new PMGClass(2654, (-355), dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass((-1079), (-1079), (-2108), 3208, (ConstantPool) null);
      int int0 = pMGClass0.getPMGClassIndex();
      assertEquals(0, pMGClass0.getPMGIndex());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass((-1079), (-1079), (-2108), 3208, (ConstantPool) null);
      int int0 = pMGClass0.getPMGClassIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      PMGClass pMGClass0 = new PMGClass(0, 9, 0, 0, constantPool0);
      // Undeclared exception!
      try { 
        pMGClass0.getPMGName();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(0, 526, 0, (-1), constantPool0);
      int int0 = pMGClass0.getPMGIndex();
      assertEquals(0, pMGClass0.getPMGClassIndex());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(0, 526, 0, (-1), constantPool0);
      int int0 = pMGClass0.getPMGIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(113, (-15), 113, (-15), (ConstantPool) null);
      PMGClass pMGClass1 = (PMGClass)pMGClass0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(113, (-15), 113, (-15), (ConstantPool) null);
      PMGClass pMGClass1 = (PMGClass)pMGClass0.copy((ConstantPool) null);
      assertEquals(0, pMGClass1.getPMGIndex());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(0, 0, 1116, 0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        pMGClass0.getPMGClassName();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.PMGClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(113, (-15), 113, (-15), (ConstantPool) null);
      pMGClass0.setPMGIndex((-44));
      assertEquals(0, pMGClass0.getPMGIndex());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(113, (-15), 113, (-15), (ConstantPool) null);
      PMGClass pMGClass1 = new PMGClass(pMGClass0);
      assertEquals(0, pMGClass0.getPMGIndex());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(113, (-15), 113, (-15), (ConstantPool) null);
      PMGClass pMGClass1 = new PMGClass(pMGClass0);
      assertEquals(1, pMGClass0.getPMGClassIndex());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass((-1281), (-1281), 1562, 1562, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      pMGClass0.dump(dataOutputStream0);
      assertEquals(0, pMGClass0.getPMGIndex());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass((-1281), (-1281), 1562, 1562, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      pMGClass0.dump(dataOutputStream0);
      assertEquals(0, pMGClass0.getPMGClassIndex());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(1, 1, 104, (-679), constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      pMGClass0.accept(emptyVisitor0);
      assertEquals(0, pMGClass0.getPMGIndex());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = new PMGClass(1, 1, 104, (-679), constantPool0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      pMGClass0.accept(emptyVisitor0);
      assertEquals(1, pMGClass0.getPMGClassIndex());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(0, 0, 0, 0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        pMGClass0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.PMGClass", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PMGClass pMGClass0 = null;
      try {
        pMGClass0 = new PMGClass((-1), 1913, dataInputStream0, constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PMGClass pMGClass0 = new PMGClass(0, 0, 1116, 0, (ConstantPool) null);
      pMGClass0.setPMGClassIndex(2654);
      assertEquals(1, pMGClass0.getPMGClassIndex());
}
}
