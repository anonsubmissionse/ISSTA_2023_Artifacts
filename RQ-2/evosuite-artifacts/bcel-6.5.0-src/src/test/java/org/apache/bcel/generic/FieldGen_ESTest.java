/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 21:37:00 GMT 2022
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.AnnotationElementValueGen;
import org.apache.bcel.generic.AnnotationEntryGen;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.ElementValuePairGen;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FieldGen;
import org.apache.bcel.generic.FieldObserver;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SimpleElementValueGen;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldGen_ESTest extends FieldGen_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(0, type0, "Rk", constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      FieldGen fieldGen1 = fieldGen0.copy(constantPoolGen1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DCONST dCONST0 = new DCONST(1.0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = dCONST0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(2147483645, type0, "org.apache.bcel.classfile.ConstantUtf8$1", constantPoolGen0);
      fieldGen0.setInitValue((-1678.188905214834));
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(529, type0, "", constantPoolGen0);
      fieldGen0.setInitValue((float) (-53));
      assertNotNull(fieldGen0.getName());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      FieldGen fieldGen0 = new FieldGen(727, basicType0, "}j_M<fV&);$b", (ConstantPoolGen) null);
      fieldGen0.setInitValue((byte)87);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicType basicType0 = Type.SHORT;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(1265, basicType0, (String) null, constantPoolGen0);
      fieldGen0.setInitValue((short)2);
      assertTrue(fieldGen0.isTransient());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.INT;
      FieldGen fieldGen0 = new FieldGen(19, basicType0, "org.apache.bcel.generic.FieldGen$1", constantPoolGen0);
      fieldGen0.setInitValue((-1));
      assertNotNull(fieldGen0.getSignature());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      FieldGen fieldGen0 = new FieldGen((-1580), basicType0, ":N\"", (ConstantPoolGen) null);
      fieldGen0.setInitValue(14L);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.BOOLEAN;
      FieldGen fieldGen0 = new FieldGen(19, basicType0, "org.apache.bcel.generic.FieldGen$1", constantPoolGen0);
      FieldGen fieldGen1 = new FieldGen(632, basicType0, "org.apache.bcel.generic.FieldGen$1", constantPoolGen0);
      boolean boolean0 = fieldGen0.equals(fieldGen1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-22), basicType0, "java.lang.String", constantPoolGen0);
      fieldGen0.hashCode();
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(237, type0, "", constantPoolGen0);
      String string0 = fieldGen0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("DQ25v8QG");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field(21, 0, 0, (Attribute[]) null, constantPool0);
      FieldGen fieldGen0 = null;
      try {
        fieldGen0 = new FieldGen(field0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(0, objectType0, "W;,7 }d", constantPoolGen0);
      Field field0 = fieldGen0.getField();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(0, objectType0, "W;,7 }d", constantPoolGen0);
      Field field0 = fieldGen0.getField();
      assertEquals(0, field0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldGen.setComparator((BCELComparator) null);
      BCELComparator bCELComparator0 = FieldGen.getComparator();
      assertNotNull(bCELComparator0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType("", 58);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(58, arrayType0.THROWABLE, "", constantPoolGen0);
      FieldGen fieldGen1 = fieldGen0.copy(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-55), type0, "", constantPoolGen0);
      FieldGen fieldGen1 = fieldGen0.copy(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(0, type0, "Rk", constantPoolGen0);
      fieldGen0.addObserver((FieldObserver) null);
      // Undeclared exception!
      try { 
        fieldGen0.update();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.INT;
      FieldGen fieldGen0 = new FieldGen(16, basicType0, "org.apache.bcel.generic.FieldGen$1", constantPoolGen0);
      String string0 = fieldGen0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCONST fCONST0 = new FCONST(0.0F);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = fCONST0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(1137, type0, " }cVy2nzX}x-c9", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue(false);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Types are not compatible: float vs. boolean
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen((-2484), type0, "6X+3SUa[+;=\"#TrCxZ", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue((short)877);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Only final fields may have an initial value!
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReferenceType referenceType0 = Type.NULL;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-929), referenceType0, ", but {", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue((short)2484);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Types are not compatible: <null object> vs. short
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(21, basicType0, "!", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue((short) (-1316));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Types are not compatible: boolean vs. short
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(0, basicType0, "org.apache.bcel.generic.FieldGen$1", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue((long) 0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Only final fields may have an initial value!
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType("", 58);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(58, arrayType0.OBJECT, "", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue(58);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Types are not compatible: java.lang.Object vs. int
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(21, basicType0, "!", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue((-116));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Types are not compatible: boolean vs. int
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(0, type0, "Rk", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue((float) 1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Only final fields may have an initial value!
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(21, basicType0, "!", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue(0.0F);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Types are not compatible: boolean vs. float
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("zgPmS2J,");
      FieldGen fieldGen0 = new FieldGen(59, objectType0, "", (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue((double) 59);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Types are not compatible: zgPmS2J, vs. double
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.INT;
      FieldGen fieldGen0 = new FieldGen(19, basicType0, "org.apache.bcel.generic.FieldGen$1", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue((double) 19);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Types are not compatible: int vs. double
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FieldGen fieldGen0 = new FieldGen(0, type0, "Q", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue('d');
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Only final fields may have an initial value!
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(1, basicType0, "!", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue((byte) (-53));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Only final fields may have an initial value!
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(21, basicType0, "!", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue((byte) (-53));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Types are not compatible: boolean vs. byte
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BasicType basicType0 = Type.DOUBLE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(0, basicType0, "java.lang.String", constantPoolGen0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      FieldGen.setComparator(bCELComparator0);
      // Undeclared exception!
      try { 
        fieldGen0.hashCode();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.FieldGen cannot be cast to org.apache.bcel.classfile.Constant
         //
         verifyException("org.apache.bcel.classfile.Constant$1", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-3534), objectType0, "", constantPoolGen0);
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      AnnotationElementValueGen annotationElementValueGen0 = new AnnotationElementValueGen(annotationEntryGen0, constantPoolGen0);
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen("", annotationElementValueGen0, constantPoolGen0);
      annotationEntryGen0.addElementNameValuePair(elementValuePairGen0);
      fieldGen0.addAnnotationEntry(annotationEntryGen0);
      // Undeclared exception!
      try { 
        fieldGen0.getField();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      FieldGen fieldGen0 = new FieldGen((-1580), basicType0, ":N\"", (ConstantPoolGen) null);
      // Undeclared exception!
      try { 
        fieldGen0.getField();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-9), basicType0, "", constantPoolGen0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(basicType0.CLASS, (List<ElementValuePairGen>) null, true, constantPoolGen0);
      fieldGen0.addAnnotationEntry(annotationEntryGen0);
      // Undeclared exception!
      try { 
        fieldGen0.getField();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.AnnotationEntryGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-3534), objectType0, "", constantPoolGen0);
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      SimpleElementValueGen simpleElementValueGen0 = new SimpleElementValueGen((-3534), constantPoolGen0, (-3462.9));
      ElementValuePairGen elementValuePairGen0 = new ElementValuePairGen((-3534), simpleElementValueGen0, constantPoolGen0);
      linkedList0.add(elementValuePairGen0);
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      fieldGen0.addAnnotationEntry(annotationEntryGen0);
      // Undeclared exception!
      try { 
        fieldGen0.getField();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // SimpleElementValueGen doesnt know how to write out type -3534
         //
         verifyException("org.apache.bcel.generic.SimpleElementValueGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(21, basicType0, "!", constantPoolGen0);
      Field field0 = fieldGen0.getField();
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(21, basicType0, "!", constantPoolGen0);
      Field field0 = fieldGen0.getField();
      assertEquals(0, field0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(86, type0, (String) null, constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldGen$1", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[4];
      Constant[] constantArray0 = new Constant[17];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Field field0 = new Field(910, 910, 910, attributeArray0, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FieldGen fieldGen0 = null;
      try {
        fieldGen0 = new FieldGen(field0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 910. Constant pool size is: 17
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FieldGen fieldGen0 = null;
      try {
        fieldGen0 = new FieldGen((-2455), (Type) null, "frem", (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RET rET0 = new RET();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Type type0 = rET0.getType(constantPoolGen0);
      FieldGen fieldGen0 = null;
      try {
        fieldGen0 = new FieldGen(0, type0, (String) null, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Type can not be <return address>
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH();
      Type type0 = sIPUSH0.getType((ConstantPoolGen) null);
      FieldGen fieldGen0 = new FieldGen(54, type0, "_$-G]WNW!rni8|0b", (ConstantPoolGen) null);
      fieldGen0.setInitValue((short) (-18));
      assertTrue(fieldGen0.isProtected());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(534, type0, "", constantPoolGen0);
      String string0 = fieldGen0.getSignature();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH();
      Type type0 = sIPUSH0.getType((ConstantPoolGen) null);
      FieldGen fieldGen0 = new FieldGen(54, type0, "_$-G]WNW!rni8|0b", (ConstantPoolGen) null);
      String string0 = fieldGen0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      FieldGen fieldGen0 = new FieldGen(0, objectType0, "7|I6);7w8H`Lja", constantPoolGen0);
      String string0 = fieldGen0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(21, basicType0, "!", constantPoolGen0);
      String string0 = fieldGen0.getInitValue();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(0, type0, "Rk", constantPoolGen0);
      FieldObserver fieldObserver0 = mock(FieldObserver.class, new ViolatedAssumptionAnswer());
      fieldGen0.addObserver(fieldObserver0);
      fieldGen0.update();
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.CHAR;
      FieldGen fieldGen0 = new FieldGen(19, basicType0, "org.apache.bcel.gen?ric.FieldGen1", constantPoolGen0);
      fieldGen0.update();
      assertTrue(fieldGen0.isTransient());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(0, type0, "Rk", constantPoolGen0);
      FieldObserver fieldObserver0 = mock(FieldObserver.class, new ViolatedAssumptionAnswer());
      fieldGen0.addObserver(fieldObserver0);
      FieldObserver fieldObserver1 = mock(FieldObserver.class, new ViolatedAssumptionAnswer());
      fieldGen0.removeObserver(fieldObserver1);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      FieldGen fieldGen0 = new FieldGen(0, objectType0, "7|I6);7w8H`Lja", constantPoolGen0);
      FieldObserver fieldObserver0 = mock(FieldObserver.class, new ViolatedAssumptionAnswer());
      fieldGen0.removeObserver(fieldObserver0);
      assertFalse(fieldGen0.isInterface());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AALOAD aALOAD0 = new AALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aALOAD0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(0, type0, "Rk", constantPoolGen0);
      FieldObserver fieldObserver0 = mock(FieldObserver.class, new ViolatedAssumptionAnswer());
      fieldGen0.addObserver(fieldObserver0);
      FieldObserver fieldObserver1 = mock(FieldObserver.class, new ViolatedAssumptionAnswer());
      fieldGen0.addObserver(fieldObserver1);
      assertEquals(1, fieldGen0.getModifiers());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-9), basicType0, "", constantPoolGen0);
      fieldGen0.setInitValue((byte) (-1));
      fieldGen0.getField();
      assertEquals(0, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      BasicType basicType0 = Type.FLOAT;
      FieldGen fieldGen0 = new FieldGen(534, basicType0, "#I9CN#67}#dcZHK4b", constantPoolGen0);
      fieldGen0.setInitValue((float) 534);
      fieldGen0.getField();
      assertEquals(0, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-3534), objectType0, "W]", constantPoolGen0);
      fieldGen0.setInitValue("W]");
      Field field0 = fieldGen0.getField();
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-3534), objectType0, "W]", constantPoolGen0);
      fieldGen0.setInitValue("W]");
      Field field0 = fieldGen0.getField();
      assertEquals(0, field0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-3534), objectType0, "W]", constantPoolGen0);
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      fieldGen0.addAnnotationEntry(annotationEntryGen0);
      Field field0 = fieldGen0.getField();
      assertEquals(0, field0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-3534), objectType0, "W]", constantPoolGen0);
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, false, constantPoolGen0);
      fieldGen0.addAnnotationEntry(annotationEntryGen0);
      Field field0 = fieldGen0.getField();
      assertEquals(0, field0.getSignatureIndex());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.BOOLEAN;
      FieldGen fieldGen0 = new FieldGen(19, basicType0, "org.apache.bcel.generic.FieldGen$1", constantPoolGen0);
      // Undeclared exception!
      try { 
        fieldGen0.setInitValue("org.apache.bcel.generic.FieldGen$1");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Types are not compatible: boolean vs. java.lang.String
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DCONST dCONST0 = new DCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCONST0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(2147483645, type0, "org.apache.bcel.classfile.ConstantUtf8$1", constantPoolGen0);
      fieldGen0.setInitValue((double) 2147483645);
      Field field0 = fieldGen0.getField();
      assertEquals(0, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DCONST dCONST0 = new DCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCONST0.getType(constantPoolGen0);
      FieldGen fieldGen0 = new FieldGen(2147483645, type0, "org.apache.bcel.classfile.ConstantUtf8$1", constantPoolGen0);
      fieldGen0.setInitValue((double) 2147483645);
      Field field0 = fieldGen0.getField();
      assertEquals(0, field0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.DOUBLE;
      FieldGen fieldGen0 = new FieldGen(19, basicType0, (String) null, constantPoolGen0);
      fieldGen0.setInitValue(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      BasicType basicType0 = Type.FLOAT;
      FieldGen fieldGen0 = new FieldGen(534, basicType0, "#I9CN#67}#dcZHK4b", constantPoolGen0);
      fieldGen0.setInitValue(0.0F);
      assertTrue(fieldGen0.isAbstract());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(21, basicType0, "!", constantPoolGen0);
      fieldGen0.setInitValue(true);
      assertNotNull(fieldGen0.getSignature());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(21, basicType0, "!", constantPoolGen0);
      fieldGen0.setInitValue(false);
      assertTrue(fieldGen0.isSynchronized());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-9), basicType0, "", constantPoolGen0);
      fieldGen0.setInitValue((byte) (-1));
      fieldGen0.setAccessFlags(137);
      // Undeclared exception!
      try { 
        fieldGen0.getField();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Only final fields may have an initial value!
         //
         verifyException("org.apache.bcel.generic.FieldGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BasicType basicType0 = Type.BYTE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-9), basicType0, "", constantPoolGen0);
      fieldGen0.setInitValue((byte)0);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.CHAR;
      FieldGen fieldGen0 = new FieldGen(19, basicType0, "org.apache.bcel.gen?ric.FieldGen1", constantPoolGen0);
      fieldGen0.setInitValue('{');
      Field field0 = fieldGen0.getField();
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.CHAR;
      FieldGen fieldGen0 = new FieldGen(19, basicType0, "org.apache.bcel.gen?ric.FieldGen1", constantPoolGen0);
      fieldGen0.setInitValue('{');
      Field field0 = fieldGen0.getField();
      assertEquals(0, field0.getNameIndex());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SIPUSH sIPUSH0 = new SIPUSH();
      Type type0 = sIPUSH0.getType((ConstantPoolGen) null);
      FieldGen fieldGen0 = new FieldGen((-3), type0, "_$-G]WNW!rni8|0b", (ConstantPoolGen) null);
      fieldGen0.setInitValue((short)0);
      assertTrue(fieldGen0.isFinal());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.INT;
      FieldGen fieldGen0 = new FieldGen(19, basicType0, "org.apache.bcel.generic.FieldGen$1", constantPoolGen0);
      fieldGen0.setInitValue(640);
      assertTrue(fieldGen0.isInterface());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.INT;
      FieldGen fieldGen0 = new FieldGen(19, basicType0, "org.apache.bcel.generic.FieldGen$1", constantPoolGen0);
      fieldGen0.setInitValue(0);
      assertTrue(fieldGen0.isSynthetic());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      FieldGen fieldGen0 = new FieldGen((-1580), basicType0, ":N\"", (ConstantPoolGen) null);
      fieldGen0.setInitValue((long) (-1580));
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BasicType basicType0 = Type.LONG;
      FieldGen fieldGen0 = new FieldGen((-1580), basicType0, ":N\"", (ConstantPoolGen) null);
      fieldGen0.setInitValue(0L);
      assertEquals(0, fieldGen0.getAccessFlags());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen((-3534), objectType0, "", constantPoolGen0);
      fieldGen0.setInitValue((String) null);
      assertTrue(fieldGen0.isPrivate());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.DOUBLE;
      FieldGen fieldGen0 = new FieldGen(19, basicType0, (String) null, constantPoolGen0);
      FieldGen fieldGen1 = new FieldGen(19, basicType0, "Org.ppache.bce.eneroc.FieldGen$1", constantPoolGen0);
      boolean boolean0 = fieldGen0.equals(fieldGen1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BCELComparator bCELComparator0 = FieldGen.getComparator();
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(237, type0, "", constantPoolGen0);
      FieldGen fieldGen1 = fieldGen0.copy(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      FieldGen fieldGen0 = new FieldGen(0, objectType0, "7|I6);7w8H`Lja", constantPoolGen0);
      fieldGen0.cancelInitValue();
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BasicType basicType0 = Type.BOOLEAN;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FieldGen fieldGen0 = new FieldGen(0, basicType0, "", constantPoolGen0);
      fieldGen0.hashCode();
  }
}
