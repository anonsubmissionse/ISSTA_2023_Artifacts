 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(126L);
      long long0 = constantLong0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-535L));
      long long0 = constantLong0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      // Undeclared exception!
      try { 
        constantLong0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(2249L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        constantLong0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      // Undeclared exception!
      try { 
        constantLong0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong((ConstantLong) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong((DataInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 5, (-906));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(dataInputStream0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      String string0 = constantLong0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantLong0.dump(dataOutputStream0);
      assertEquals(0, constantLong0.getBytes());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      long long0 = constantLong0.getBytes();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      Object object0 = constantLong0.getConstantValue((ConstantPool) null);
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(126L);
      constantLong0.setBytes(126L);
      assertEquals(0, constantLong0.getBytes());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(944L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantLong0.accept(descendingVisitor0);
      assertEquals(1, constantLong0.getBytes());
}
