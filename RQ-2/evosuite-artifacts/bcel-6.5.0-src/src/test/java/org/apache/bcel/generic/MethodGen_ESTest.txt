 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      MethodGen methodGen0 = new MethodGen((-2185), type0, typeArray0, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.setMaxLocals();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Constant[] constantArray0 = new Constant[7];
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      MethodGen methodGen0 = new MethodGen((-2185), type0, type0.NO_ARGS, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      LocalVariableTable localVariableTable0 = methodGen0.getLocalVariableTable(constantPoolGen1);
      assertEquals(1, constantPoolGen1.getSize());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      Constant[] constantArray0 = new Constant[7];
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      MethodGen methodGen0 = new MethodGen((-2185), type0, type0.NO_ARGS, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      LocalVariableTable localVariableTable0 = methodGen0.getLocalVariableTable(constantPoolGen1);
      assertEquals(1, localVariableTable0.getLength());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getLocalVariableTable((ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.hashCode();
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IALOAD iALOAD0 = (IALOAD)InstructionConstants.IALOAD;
      InstructionHandle instructionHandle0 = new InstructionHandle(iALOAD0);
      MethodGen.BranchTarget methodGen_BranchTarget0 = new MethodGen.BranchTarget(instructionHandle0, 415);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPG0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(198, type0, typeArray0, (String[]) null, "tasPCAJ;~wl;", "X/Wsy", instructionList0, constantPoolGen0);
      methodGen0.setArgumentName((byte)0, "X/Wsy");
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPG0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(198, type0, typeArray0, (String[]) null, "tasPCAJ;~wl;", "X/Wsy", instructionList0, constantPoolGen0);
      methodGen0.setArgumentName((byte)0, "X/Wsy");
      assertNotNull(methodGen0.getClassName());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPG0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(198, type0, typeArray0, (String[]) null, "tasPCAJ;~wl;", "X/Wsy", instructionList0, constantPoolGen0);
      methodGen0.setArgumentName((byte)0, "X/Wsy");
      assertNotNull(methodGen0.getName());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      String[] stringArray0 = new String[0];
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      MethodGen methodGen0 = new MethodGen(1280, basicType0, basicType0.NO_ARGS, stringArray0, "Xu<_{kUPvOC9X", " [", instructionList0, constantPoolGen0);
      methodGen0.getReturnType();
      assertNotNull(methodGen0.getClassName());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicType basicType0 = Type.VOID;
      String[] stringArray0 = new String[0];
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      MethodGen methodGen0 = new MethodGen(1280, basicType0, basicType0.NO_ARGS, stringArray0, "Xu<_{kUPvOC9X", " [", instructionList0, constantPoolGen0);
      methodGen0.getReturnType();
      assertNotNull(methodGen0.getName());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(2463);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((short)0, type0, type0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      methodGen0.getMethod();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int[] intArray0 = new int[0];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle1, instructionHandle0, objectType0);
      methodGen0.setMaxStack();
      int int0 = methodGen0.getMaxStack();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), objectType0, objectType0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      methodGen0.getExceptionHandlers();
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      String string0 = methodGen0.getClassName();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy("", constantPoolGen0);
      String string0 = methodGen1.getClassName();
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy("", constantPoolGen0);
      String string0 = methodGen1.getClassName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPG0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(198, type0, typeArray0, (String[]) null, "tasPCAJ;~wl;", "X/Wsy", instructionList0, constantPoolGen0);
      methodGen0.getArgumentTypes();
      assertNotNull(methodGen0.getClassName());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPG0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(198, type0, typeArray0, (String[]) null, "tasPCAJ;~wl;", "X/Wsy", instructionList0, constantPoolGen0);
      methodGen0.getArgumentTypes();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DCMPG dCMPG0 = new DCMPG();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = dCMPG0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      byte[] byteArray0 = new byte[2];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(198, type0, typeArray0, (String[]) null, "tasPCAJ;~wl;", "X/Wsy", instructionList0, constantPoolGen0);
      methodGen0.getArgumentTypes();
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[7];
      typeArray0[6] = type0;
      MethodGen methodGen0 = new MethodGen((-2185), type0, typeArray0, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      Type type1 = methodGen0.getArgumentType(6);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[7];
      typeArray0[6] = type0;
      MethodGen methodGen0 = new MethodGen((-2185), type0, typeArray0, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      Type type1 = methodGen0.getArgumentType(6);
      assertNotNull(methodGen0.getClassName());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[7];
      typeArray0[6] = type0;
      MethodGen methodGen0 = new MethodGen((-2185), type0, typeArray0, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      Type type1 = methodGen0.getArgumentType(6);
      assertNotNull(methodGen0.getName());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('V');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      String[] stringArray1 = methodGen0.getArgumentNames();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('V');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      String string0 = methodGen0.getArgumentName(0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.addLocalVariable(" \"FCZQHIMfC]h%b", type0, 2464, (InstructionHandle) null, (InstructionHandle) null, (-975));
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      LineNumberGen lineNumberGen0 = methodGen0.addLineNumber(instructionHandle0, 0);
      assertEquals(0, lineNumberGen0.getSourceLine());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.addObserver((MethodObserver) null);
      // Undeclared exception!
      try { 
        methodGen0.update();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      String string0 = methodGen0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int[] intArray0 = new int[0];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList0);
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle1);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      instructionList0.insert(instructionList1);
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      methodGen0.setMaxStack();
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      iNEG0.setOpcode((short) (-7160));
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.setMaxStack();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(403, objectType0, (Type[]) null, (String[]) null, "}20~GjeB", "}20~GjeB", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.setArgumentName(20, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      LocalVariableGen localVariableGen0 = methodGen0.addLocalVariable(", low = ", (Type) objectType0, 1280, instructionHandle0, instructionHandle0, 1280);
      localVariableGen0.setName((String) null);
      // Undeclared exception!
      try { 
        methodGen0.removeLocalVariable(localVariableGen0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BCELComparator bCELComparator0 = Method.getComparator();
      MethodGen.setComparator(bCELComparator0);
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.hashCode();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.MethodGen cannot be cast to org.apache.bcel.classfile.Method
         //
         verifyException("org.apache.bcel.classfile.Method$1", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      instructionList0.insert((BranchInstruction) iFEQ0);
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      MethodGen methodGen0 = new MethodGen((-2185), type0, type0.NO_ARGS, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getMethod();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Target of ifeq[153](3) is invalid null handle
         //
         verifyException("org.apache.bcel.generic.BranchInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      Type[] typeArray0 = new Type[19];
      MethodGen methodGen0 = new MethodGen((-2185), type0, typeArray0, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getMethod();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getMethod();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value must not be null.
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      InstructionList instructionList1 = new InstructionList(pUSH0);
      DUP2 dUP2_0 = (DUP2)InstructionConstants.DUP2;
      InstructionHandle instructionHandle0 = instructionList1.insert((Instruction) dUP2_0);
      instructionList0.append(instructionHandle0, (CompoundInstruction) pUSH0);
      // Undeclared exception!
      try { 
        methodGen0.getMethod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-114);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[0];
      // Undeclared exception!
      try { 
        MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 36352. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "org.apache.bcGl.classfile.ConstantUtf8", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getLineNumberTable((ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      String[] stringArray0 = new String[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Boolean boolean0 = Boolean.FALSE;
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(11, basicType0, (Type[]) null, stringArray0, "org.apache.bcel.verifier.statics.Pass3aVerifier$InstOperandConstraintVisitor", "", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getArgumentTypes();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getArgumentType(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MethodGen.setComparator((BCELComparator) null);
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        methodGen0.equals(iSHL0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.copy("}20~GjeB", constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value must not be null.
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.setArgumentTypes((Type[]) null);
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addParameterAnnotation(158, annotationEntryGen0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addLocalVariable((String) null, (Type) objectType0, 1280, instructionHandle0, instructionHandle0, 1280);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(908, 908, 16384, attributeArray0, constantPool0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "", constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16384. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Method method0 = new Method();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, "?tj^kA1x$7Oi;i36Y", (ConstantPoolGen) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      String[] stringArray0 = new String[7];
      byte[] byteArray0 = new byte[4];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((-399), returnaddressType0, returnaddressType0.NO_ARGS, stringArray0, "", "", instructionList0, (ConstantPoolGen) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Type can not be <return address>
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      List<AnnotationEntryGen> list0 = methodGen0.getAnnotationsOnParameter(0);
      assertNotNull(list0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      IfInstruction ifInstruction0 = iF_ACMPNE0.negate();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) ifInstruction0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[3];
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen((InstructionHandle) null, (InstructionHandle) null, (InstructionHandle) null, objectType0);
      codeExceptionGenArray0[0] = codeExceptionGen0;
      codeExceptionGenArray0[1] = codeExceptionGenArray0[0];
      codeExceptionGenArray0[2] = codeExceptionGenArray0[1];
      // Undeclared exception!
      try { 
        MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int[] intArray0 = new int[0];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      CodeExceptionGen codeExceptionGen0 = methodGen0.addExceptionHandler(instructionHandle0, instructionHandle1, instructionHandle0, objectType0);
      assertFalse(instructionHandle1.hasTargeters());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int[] intArray0 = new int[0];
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[0];
      SWITCH sWITCH0 = new SWITCH(intArray0, instructionHandleArray0, instructionHandle0);
      InstructionList instructionList1 = sWITCH0.getInstructionList();
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionList1);
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      CodeExceptionGen codeExceptionGen0 = methodGen0.addExceptionHandler(instructionHandle0, instructionHandle1, instructionHandle0, objectType0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[5];
      codeExceptionGenArray0[0] = codeExceptionGen0;
      codeExceptionGenArray0[1] = codeExceptionGen0;
      codeExceptionGenArray0[2] = codeExceptionGen0;
      codeExceptionGenArray0[3] = codeExceptionGen0;
      codeExceptionGenArray0[4] = codeExceptionGen0;
      int int0 = MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MethodGen.BranchStack methodGen_BranchStack0 = new MethodGen.BranchStack();
      MethodGen.BranchTarget methodGen_BranchTarget0 = methodGen_BranchStack0.pop();
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MethodGen.BranchStack methodGen_BranchStack0 = new MethodGen.BranchStack();
      byte[] byteArray0 = new byte[3];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iF_ACMPNE0);
      methodGen_BranchStack0.push(branchHandle0, 10);
      MethodGen.BranchTarget methodGen_BranchTarget0 = methodGen_BranchStack0.pop();
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MethodGen.BranchStack methodGen_BranchStack0 = new MethodGen.BranchStack();
      byte[] byteArray0 = new byte[3];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE();
      BranchHandle branchHandle0 = instructionList0.append(instructionHandle0, (BranchInstruction) iF_ACMPNE0);
      methodGen_BranchStack0.push(branchHandle0, 10);
      methodGen_BranchStack0.push(branchHandle0, 7);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      instructionList0.insert((Instruction) aLOAD0);
      methodGen0.setMaxLocals();
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.removeNOPs();
      assertTrue(methodGen0.isSynchronized());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      FCONST fCONST0 = new FCONST();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = fCONST0.getType(constantPoolGen0);
      MethodGen methodGen0 = new MethodGen((-2185), type0, type0.NO_ARGS, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
      methodGen0.getMethod();
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      // Undeclared exception!
      try { 
        methodGen0.addExceptionHandler(instructionHandle0, (InstructionHandle) null, (InstructionHandle) null, objectType0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Exception handler target is null instruction
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      LineNumberTable lineNumberTable0 = methodGen0.getLineNumberTable(constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      LineNumberTable lineNumberTable0 = methodGen0.getLineNumberTable(constantPoolGen0);
      assertEquals(1, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.getLocalVariableTable(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.getLocalVariableTable(constantPoolGen0);
      assertEquals(1, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = new MethodGen(5, type0, type0.NO_ARGS, stringArray0, "", "t!>!W5[", instructionList0, (ConstantPoolGen) null);
      LocalVariableGen localVariableGen0 = methodGen0.addLocalVariable("IE8$$/uEB<L'/kx", type0, (InstructionHandle) null, (InstructionHandle) null);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Type type0 = Type.UNKNOWN;
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = new MethodGen(5, type0, type0.NO_ARGS, stringArray0, "", "t!>!W5[", instructionList0, (ConstantPoolGen) null);
      LocalVariableGen localVariableGen0 = methodGen0.addLocalVariable("IE8$$/uEB<L'/kx", type0, (InstructionHandle) null, (InstructionHandle) null);
      methodGen0.getLocalVariables();
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(646, type0, type0.NO_ARGS, (String[]) null, ")", "<|F`", instructionList0, constantPoolGen0);
      methodGen0.getLocalVariables();
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(646, type0, type0.NO_ARGS, (String[]) null, ")", "<|F`", instructionList0, constantPoolGen0);
      methodGen0.getLocalVariables();
      assertNotNull(methodGen0.getClassName());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(646, type0, type0.NO_ARGS, (String[]) null, ")", "<|F`", instructionList0, constantPoolGen0);
      methodGen0.getLocalVariables();
      assertNotNull(methodGen0.getName());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('T');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      methodGen0.removeLocalVariables();
      assertTrue(methodGen0.isEnum());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.addAttribute((Attribute) null);
      Method method0 = methodGen0.getMethod();
      MethodGen methodGen1 = new MethodGen(method0, "final volatile synthetic annotation enum module org.apache.bcel.generic.ISHL )() [null]", constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.addAttribute((Attribute) null);
      Method method0 = methodGen0.getMethod();
      MethodGen methodGen1 = new MethodGen(method0, "final volatile synthetic annotation enum module org.apache.bcel.generic.ISHL )() [null]", constantPoolGen0);
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      Method method0 = methodGen0.getMethod();
      MethodGen methodGen1 = new MethodGen(method0, "PU `H6vVao-.e", constantPoolGen0);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = aLOAD0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList(aLOAD0);
      MethodGen methodGen0 = new MethodGen(0, type0, type0.NO_ARGS, (String[]) null, "", "d~[!<=g`t", instructionList0, constantPoolGen0);
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = aLOAD0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList(aLOAD0);
      MethodGen methodGen0 = new MethodGen(0, type0, type0.NO_ARGS, (String[]) null, "", "d~[!<=g`t", instructionList0, constantPoolGen0);
      methodGen0.setMaxLocals(0);
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      String string0 = methodGen0.getSignature();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.removeExceptionHandlers();
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      Attribute[] attributeArray0 = methodGen0.getCodeAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.getExceptionHandlers();
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addLocalVariable((String) null, (Type) objectType0, 1238, instructionHandle0, instructionHandle0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('T');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.setArgumentType(0, objectType0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      String[] stringArray0 = new String[0];
      PUSH pUSH0 = new PUSH(constantPoolGen0, (String) null);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)127, type0, type0.NO_ARGS, stringArray0, "^]]+#jN{|OA Gr,jd", "^]]+#jN{|OA Gr,jd", instructionList0, constantPoolGen0);
      methodGen0.setInstructionList(instructionList0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-506), basicType0, basicType0.NO_ARGS, (String[]) null, "_}KT0~{:6Vk6", "uN", (InstructionList) null, constantPoolGen0);
      methodGen0.setClassName("uN");
      assertNotNull(methodGen0.getClassName());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BasicType basicType0 = Type.INT;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-506), basicType0, basicType0.NO_ARGS, (String[]) null, "_}KT0~{:6Vk6", "uN", (InstructionList) null, constantPoolGen0);
      methodGen0.setClassName("uN");
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      Type[] typeArray0 = methodGen0.getArgumentTypes();
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "", instructionList0, constantPoolGen0);
      methodGen0.getInstructionList();
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = aLOAD0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList(aLOAD0);
      MethodGen methodGen0 = new MethodGen(0, type0, type0.NO_ARGS, (String[]) null, "", "d~[!<=g`t", instructionList0, constantPoolGen0);
      int int0 = methodGen0.getMaxLocals();
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = aLOAD0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList(aLOAD0);
      MethodGen methodGen0 = new MethodGen(0, type0, type0.NO_ARGS, (String[]) null, "", "d~[!<=g`t", instructionList0, constantPoolGen0);
      int int0 = methodGen0.getMaxLocals();
      assertNotNull(methodGen0.getName());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = aLOAD0.getType(constantPoolGen0);
      InstructionList instructionList0 = new InstructionList(aLOAD0);
      MethodGen methodGen0 = new MethodGen(0, type0, type0.NO_ARGS, (String[]) null, "", "d~[!<=g`t", instructionList0, constantPoolGen0);
      int int0 = methodGen0.getMaxLocals();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.getLineNumbers();
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.removeCodeAttribute((Attribute) null);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.setArgumentNames((String[]) null);
      // Undeclared exception!
      try { 
        methodGen0.getArgumentName(0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.addAttribute((Attribute) null);
      methodGen0.getAnnotationsOnParameter((-4016));
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.getAnnotationsOnParameter(0);
      LinkedList<ElementValuePairGen> linkedList0 = new LinkedList<ElementValuePairGen>();
      AnnotationEntryGen annotationEntryGen0 = new AnnotationEntryGen(objectType0, linkedList0, true, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addParameterAnnotation(158, annotationEntryGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 158
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.addAttribute((Attribute) null);
      String string0 = methodGen0.toString();
      assertEquals(0, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      methodGen0.addAttribute((Attribute) null);
      String string0 = methodGen0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      MethodObserver methodObserver0 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.addObserver(methodObserver0);
      methodGen0.update();
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, "*H%V7+/3_Ai", "*H%V7+/3_Ai", instructionList0, constantPoolGen0);
      methodGen0.update();
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      MethodObserver methodObserver0 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.addObserver(methodObserver0);
      methodGen0.removeObserver((MethodObserver) null);
      assertTrue(methodGen0.isSynchronized());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "org.apache.bcGl.classfile.ConstantUtf8", instructionList0, constantPoolGen0);
      MethodObserver methodObserver0 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.removeObserver(methodObserver0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "org.apache.bcGl.classfile.ConstantUtf8", instructionList0, constantPoolGen0);
      MethodObserver methodObserver0 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.removeObserver(methodObserver0);
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "org.apache.bcGl.classfile.ConstantUtf8", instructionList0, constantPoolGen0);
      MethodObserver methodObserver0 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.removeObserver(methodObserver0);
      assertNotNull(methodGen0.getName());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      MethodObserver methodObserver0 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.addObserver(methodObserver0);
      MethodObserver methodObserver1 = mock(MethodObserver.class, new ViolatedAssumptionAnswer());
      methodGen0.addObserver(methodObserver1);
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[0];
      int int0 = MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[0];
      int int0 = MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[0];
      int int0 = MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      CodeExceptionGen[] codeExceptionGenArray0 = new CodeExceptionGen[4];
      InstructionHandle instructionHandle0 = InstructionHandle.getInstructionHandle(aLOAD0);
      GOTO gOTO0 = new GOTO(instructionHandle0);
      BranchHandle branchHandle0 = instructionList0.append((BranchInstruction) gOTO0);
      CodeExceptionGen codeExceptionGen0 = methodGen0.addExceptionHandler(branchHandle0, branchHandle0, instructionHandle0, objectType0);
      codeExceptionGenArray0[0] = codeExceptionGen0;
      codeExceptionGenArray0[1] = codeExceptionGenArray0[0];
      codeExceptionGenArray0[2] = codeExceptionGenArray0[0];
      codeExceptionGenArray0[3] = codeExceptionGenArray0[0];
      // Undeclared exception!
      try { 
        MethodGen.getMaxStack(constantPoolGen0, instructionList0, codeExceptionGenArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('T');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      methodGen0.setMaxLocals();
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "org.apache.bcGl.classfile.ConstantUtf8", instructionList0, constantPoolGen0);
      methodGen0.addParameterAnnotationsAsAttribute((ConstantPoolGen) null);
      assertNotNull(methodGen0.getClassName());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "org.apache.bcGl.classfile.ConstantUtf8", instructionList0, constantPoolGen0);
      methodGen0.addParameterAnnotationsAsAttribute((ConstantPoolGen) null);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      String[] stringArray0 = new String[0];
      POP pOP0 = new POP();
      InstructionList instructionList0 = new InstructionList(pOP0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, stringArray0, "", "org.apache.bcGl.classfile.ConstantUtf8", instructionList0, constantPoolGen0);
      methodGen0.addParameterAnnotationsAsAttribute((ConstantPoolGen) null);
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.addAnnotationsAsAttribute(constantPoolGen0);
      assertTrue(methodGen0.isNative());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.addException("'void' is an illegal argument type for a method");
      methodGen0.copy(" \"FCZQHIMfC]h%b", constantPoolGen0);
      assertEquals(0, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, type0, type0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.addException("'void' is an illegal argument type for a method");
      methodGen0.copy(" \"FCZQHIMfC]h%b", constantPoolGen0);
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), objectType0, objectType0.NO_ARGS, (String[]) null, "*H%V7+/3_Ai", "*H%V7+/3_Ai", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      // Undeclared exception!
      try { 
        methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, (InstructionHandle) null, objectType0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Exception handler target is null instruction
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), objectType0, objectType0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.addExceptionHandler((InstructionHandle) null, (InstructionHandle) null, (InstructionHandle) null, objectType0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Exception handler target is null instruction
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      DUP2 dUP2_0 = (DUP2)InstructionConstants.DUP2;
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) dUP2_0);
      methodGen0.addLocalVariable("", type0, instructionHandle0, instructionHandle0);
      methodGen0.getMethod();
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      DUP2 dUP2_0 = (DUP2)InstructionConstants.DUP2;
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) dUP2_0);
      methodGen0.addLocalVariable("", type0, instructionHandle0, instructionHandle0);
      methodGen0.getMethod();
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), objectType0, objectType0.NO_ARGS, (String[]) null, "*H%V7+/3_Ai", "*H%V7+/3_Ai", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      instructionList0.insert(instructionList0);
      // Undeclared exception!
      try { 
        methodGen0.copy("*H%V7+/3_Ai", constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), objectType0, objectType0.NO_ARGS, (String[]) null, "*H%V7+/3_Ai", "*H%V7+/3_Ai", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      methodGen0.copy("*H%V7+/3_Ai", constantPoolGen0);
      assertEquals(0, constantPoolGen0.getSize());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      ObjectType objectType0 = (ObjectType)Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), objectType0, objectType0.NO_ARGS, (String[]) null, "*H%V7+/3_Ai", "*H%V7+/3_Ai", instructionList0, constantPoolGen0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      methodGen0.addExceptionHandler(instructionHandle0, instructionHandle0, instructionHandle0, objectType0);
      methodGen0.copy("*H%V7+/3_Ai", constantPoolGen0);
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FCMPG fCMPG0 = new FCMPG();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      Type type0 = fCMPG0.getType(constantPoolGen0);
      String[] stringArray0 = new String[1];
      Boolean boolean0 = new Boolean(",");
      PUSH pUSH0 = new PUSH(constantPoolGen0, boolean0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(1323, type0, type0.NO_ARGS, stringArray0, ",", "-;~S]arc_5t0ht", instructionList0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 0 vs. 1
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.VOID;
      Type[] typeArray0 = new Type[7];
      typeArray0[5] = (Type) basicType0;
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(646, basicType0, typeArray0, (String[]) null, "=HTc(=-hF+@rc", "yl#nhuX%~E7\" I", instructionList0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // 'void' is an illegal argument type for a method
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ALOAD aLOAD0 = new ALOAD(2463);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Type type0 = aLOAD0.getType(constantPoolGen0);
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      Type[] typeArray0 = new Type[6];
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((short)0, type0, typeArray0, (String[]) null, "o%`ZeFN{13^-Xx$", "", instructionList0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(8, objectType0, objectType0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      boolean boolean0 = methodGen0.equals(methodGen0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4012), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = new MethodGen((-4012), type0, type0.NO_ARGS, (String[]) null, "d0b0KDwviO-9MkNU=PJ@", ")", instructionList0, constantPoolGen0);
      boolean boolean0 = methodGen1.equals(methodGen0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4012), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = new MethodGen((-4012), type0, type0.NO_ARGS, (String[]) null, "d0b0KDwviO-9MkNU=PJ@", ")", instructionList0, constantPoolGen0);
      boolean boolean0 = methodGen1.equals(methodGen0);
      assertNotNull(methodGen1.getClassName());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4012), type0, type0.NO_ARGS, (String[]) null, ")", ")", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = new MethodGen((-4012), type0, type0.NO_ARGS, (String[]) null, "d0b0KDwviO-9MkNU=PJ@", ")", instructionList0, constantPoolGen0);
      boolean boolean0 = methodGen1.equals(methodGen0);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.hashCode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen$1", e);
      }
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, "*H%V7+/3_Ai", "*H%V7+/3_Ai", instructionList0, constantPoolGen0);
      methodGen0.removeCodeAttributes();
      assertEquals(1, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.removeException("o%`ZeFN{13^-Xx$");
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      String[] stringArray0 = new String[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character character0 = Character.valueOf('V');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-3975), objectType0, (Type[]) null, stringArray0, stringArray0[0], (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getArgumentType(0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        methodGen0.equals(iSHL0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.generic.ISHL cannot be cast to org.apache.bcel.generic.MethodGen
         //
         verifyException("org.apache.bcel.generic.MethodGen$1", e);
      }
  }
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      String[] stringArray0 = methodGen0.getExceptions();
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      methodGen0.removeLocalVariableTypeTable();
      assertTrue(methodGen0.isProtected());
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(8, objectType0, objectType0.NO_ARGS, (String[]) null, "", "", instructionList0, constantPoolGen0);
      LocalVariableTypeTable localVariableTypeTable0 = methodGen0.getLocalVariableTypeTable();
      assertNotNull(localVariableTypeTable0);
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      methodGen0.removeExceptions();
      assertNotNull(methodGen0.getClassName());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      // Undeclared exception!
      try { 
        methodGen0.getArgumentName(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("");
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(2463, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      String[] stringArray0 = methodGen0.getArgumentNames();
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      ObjectType objectType1 = (ObjectType)methodGen0.getReturnType();
      assertNotNull(objectType1.getClassName());
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFNONNULL0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(0, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      LocalVariableGen localVariableGen0 = methodGen0.addLocalVariable(", low = ", (Type) objectType0, 0, instructionHandle0, instructionHandle0, 0);
      methodGen0.removeLocalVariable(localVariableGen0);
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      Byte byte0 = new Byte((byte)6);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) byte0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen((byte)6, objectType0, objectType0.NO_ARGS, (String[]) null, "o%`ZeFN{13^-Xx$", "o%`ZeFN{13^-Xx$", instructionList0, constantPoolGen0);
      CodeExceptionGen codeExceptionGen0 = new CodeExceptionGen((InstructionHandle) null, (InstructionHandle) null, (InstructionHandle) null, objectType0);
      methodGen0.removeExceptionHandler(codeExceptionGen0);
      assertEquals(0, methodGen0.getMaxLocals());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      INEG iNEG0 = new INEG();
      InstructionHandle instructionHandle0 = new InstructionHandle(iNEG0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen(10, objectType0, objectType0.NO_ARGS, (String[]) null, (String) null, (String) null, instructionList0, constantPoolGen0);
      LineNumberGen lineNumberGen0 = methodGen0.addLineNumber(instructionHandle0, 10);
      methodGen0.removeLineNumber(lineNumberGen0);
      assertEquals(0, lineNumberGen0.getSourceLine());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<ISHL> class0 = ISHL.class;
      Type type0 = Type.getType(class0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = new MethodGen((-4016), type0, type0.NO_ARGS, (String[]) null, ".JvH[j", ".JvH[j", instructionList0, constantPoolGen0);
      methodGen0.removeLineNumbers();
      assertEquals(0, methodGen0.getMaxLocals());
}
