/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:45:22 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDynamic;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantCP_ESTest extends ConstantCP_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic((-2914), (-2914));
      constantDynamic0.setClassIndex((-2194));
      constantDynamic0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic((-1515), 7);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(162);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantDynamic0.dump(dataOutputStream0);
      assertNotNull(byteArrayOutputStream0.toString());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2482), 0);
      int int0 = constantMethodref0.getNameAndTypeIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2482), 0);
      int int0 = constantMethodref0.getNameAndTypeIndex();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1360), (-1360));
      int int0 = constantMethodref0.getNameAndTypeIndex();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1360), (-1360));
      int int0 = constantMethodref0.getNameAndTypeIndex();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(0, 0);
      int int0 = constantDynamic0.getClassIndex();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(0, 0);
      int int0 = constantDynamic0.getClassIndex();
      assertEquals(0, constantDynamic0.getNameAndTypeIndex());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1454), (-1454));
      int int0 = constantInterfaceMethodref0.getClassIndex();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1454), (-1454));
      int int0 = constantInterfaceMethodref0.getClassIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(0, 0);
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantDynamic0.getClass(constantPool0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(0, (-1580));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<illegal type>");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("<illegal type>");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      try { 
        constantFieldref0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1454), (-1454));
      String string0 = constantInterfaceMethodref0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(113, (-2993));
      int int0 = constantInvokeDynamic0.getClassIndex();
      assertEquals(0, constantInvokeDynamic0.getNameAndTypeIndex());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(113, (-2993));
      int int0 = constantInvokeDynamic0.getClassIndex();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(166, 1);
      int int0 = constantDynamic0.getNameAndTypeIndex();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(166, 1);
      int int0 = constantDynamic0.getNameAndTypeIndex();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantDynamic constantDynamic0 = new ConstantDynamic(7, (-1567));
      constantDynamic0.setNameAndTypeIndex((-190));
      assertEquals(1, constantDynamic0.getNameAndTypeIndex());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(0, (-1580));
      // Undeclared exception!
      try { 
        constantFieldref0.getClass((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-4056), 0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        constantFieldref0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      ;
}
}
