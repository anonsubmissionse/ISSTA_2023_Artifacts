 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[4];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      NestMembers nestMembers0 = new NestMembers((-1738), 52980, intArray0, constantPool1);
      NestMembers nestMembers1 = (NestMembers)nestMembers0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[4];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      NestMembers nestMembers0 = new NestMembers((-1738), 52980, intArray0, constantPool1);
      NestMembers nestMembers1 = (NestMembers)nestMembers0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[1];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestMembers nestMembers0 = new NestMembers((-329), 0, intArray0, constantPool0);
      int int0 = nestMembers0.getNumberClasses();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      NestMembers nestMembers0 = new NestMembers(14, 14, dataInputStream0, (ConstantPool) null);
      nestMembers0.getClasses();
      assertEquals(0, byteArrayInputStream0.available());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[0];
      NestMembers nestMembers0 = new NestMembers(0, 0, intArray0, (ConstantPool) null);
      Attribute attribute0 = nestMembers0.copy((ConstantPool) null);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestMembers nestMembers0 = new NestMembers(414, (-2568), intArray0, constantPool0);
      Attribute attribute0 = nestMembers0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[1];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestMembers nestMembers0 = new NestMembers((-329), 0, intArray0, constantPool0);
      // Undeclared exception!
      try { 
        nestMembers0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[1];
      NestMembers nestMembers0 = new NestMembers(0, 0, intArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        nestMembers0.getClassNames();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.NestMembers", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestMembers nestMembers0 = new NestMembers(2248, (-1738), intArray0, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        nestMembers0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      int[] intArray0 = new int[9];
      NestMembers nestMembers0 = new NestMembers(0, 24, intArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        nestMembers0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.NestMembers", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      NestMembers nestMembers0 = null;
      try {
        nestMembers0 = new NestMembers(0, (-1341), (DataInput) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.NestMembers", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1024);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestMembers nestMembers0 = null;
      try {
        nestMembers0 = new NestMembers(0, 1024, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      NestMembers nestMembers0 = null;
      try {
        nestMembers0 = new NestMembers(204, 204, dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NestMembers nestMembers0 = new NestMembers(4467, 4467, (int[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        nestMembers0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      NestMembers nestMembers0 = new NestMembers(14, 14, dataInputStream0, (ConstantPool) null);
      NestMembers nestMembers1 = new NestMembers(nestMembers0);
      assertEquals(0, byteArrayInputStream0.available());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      NestMembers nestMembers0 = new NestMembers(0, 0, intArray0, (ConstantPool) null);
      String string0 = nestMembers0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      NestMembers nestMembers0 = new NestMembers(14, 14, dataInputStream0, (ConstantPool) null);
      int[] intArray0 = new int[8];
      nestMembers0.setClasses(intArray0);
      assertEquals(0, nestMembers0.getNumberClasses());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestMembers nestMembers0 = new NestMembers(1149, 1149, intArray0, constantPool0);
      assertEquals(1, nestMembers0.getNumberClasses());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestMembers nestMembers0 = new NestMembers(1149, 1149, intArray0, constantPool0);
      nestMembers0.setClasses((int[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[2];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      NestMembers nestMembers0 = new NestMembers((-19), (-19), intArray0, constantPool0);
      // Undeclared exception!
      try { 
        nestMembers0.getClassNames();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[0];
      NestMembers nestMembers0 = new NestMembers(0, 0, intArray0, (ConstantPool) null);
      String[] stringArray0 = nestMembers0.getClassNames();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      NestMembers nestMembers0 = new NestMembers(14, 14, dataInputStream0, (ConstantPool) null);
      int int0 = nestMembers0.getNumberClasses();
      assertEquals(0, byteArrayInputStream0.available());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      NestMembers nestMembers0 = new NestMembers(14, 14, dataInputStream0, (ConstantPool) null);
      int int0 = nestMembers0.getNumberClasses();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[7];
      NestMembers nestMembers0 = new NestMembers(3449, 3449, intArray0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("lstore_3");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      nestMembers0.dump(dataOutputStream0);
      assertEquals(1, nestMembers0.getNumberClasses());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      NestMembers nestMembers0 = new NestMembers(14, 14, dataInputStream0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        nestMembers0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.NestMembers", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[0];
      NestMembers nestMembers0 = new NestMembers(0, 0, intArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      nestMembers0.accept(descendingVisitor0);
      assertEquals(0, nestMembers0.getNumberClasses());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      NestMembers nestMembers0 = new NestMembers(14, 14, dataInputStream0, (ConstantPool) null);
      nestMembers0.getClasses();
      assertEquals(0, byteArrayInputStream0.available());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      NestMembers nestMembers0 = new NestMembers(14, 14, dataInputStream0, (ConstantPool) null);
      nestMembers0.getClasses();
      assertEquals(1, nestMembers0.getNumberClasses());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NestMembers nestMembers0 = null;
      try {
        nestMembers0 = new NestMembers((NestMembers) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.NestMembers", e);
      }
  }
