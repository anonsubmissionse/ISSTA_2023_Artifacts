 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC();
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      // Undeclared exception!
      try { 
        pUTSTATIC0.accept(executionVisitor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.ExecutionVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC(1188);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        pUTSTATIC0.consumeStack(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1188. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC();
      Constant[] constantArray0 = new Constant[6];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)49);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        pUTSTATIC0.consumeStack(constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantFloat cannot be cast to org.apache.bcel.classfile.ConstantCP
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC(780);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      // Undeclared exception!
      try { 
        pUTSTATIC0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 780. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PUTSTATIC pUTSTATIC0 = null;
      try {
        pUTSTATIC0 = new PUTSTATIC((-2609));
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Negative index value: -2609
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC();
      Constant[] constantArray0 = new Constant[6];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        pUTSTATIC0.consumeStack(constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC(780);
      Class<?>[] classArray0 = pUTSTATIC0.getExceptions();
      ;
}
