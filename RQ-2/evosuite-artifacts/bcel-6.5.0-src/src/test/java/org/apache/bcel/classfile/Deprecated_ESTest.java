/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:33:08 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.Deprecated;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Deprecated_ESTest extends Deprecated_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Deprecated deprecated0 = new Deprecated(186, (-1), dataInputStream0, constantPool0);
      ConstantPool constantPool1 = constantPool0.copy();
      Attribute attribute0 = deprecated0.copy(constantPool1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Deprecated deprecated0 = new Deprecated(0, 0, byteArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      deprecated0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Deprecated deprecated0 = new Deprecated(8, (-1), byteArray0, (ConstantPool) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      deprecated0.accept(descendingVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Deprecated deprecated0 = new Deprecated(239, 0, dataInputStream0, (ConstantPool) null);
      byte[] byteArray0 = deprecated0.getBytes();
      assertNotNull(byteArray0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Deprecated deprecated0 = new Deprecated(186, (-1), dataInputStream0, constantPool0);
      byte[] byteArray0 = new byte[0];
      deprecated0.setBytes(byteArray0);
      byte[] byteArray1 = deprecated0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Deprecated deprecated0 = new Deprecated(0, (-1446), (DataInput) null, constantPool0);
      Attribute attribute0 = deprecated0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Deprecated deprecated0 = new Deprecated(186, 0, dataInputStream0, constantPool0);
      Attribute attribute0 = deprecated0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Deprecated deprecated0 = new Deprecated((-1195), 117, byteArray0, constantPool0);
      Attribute attribute0 = deprecated0.copy(constantPool0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Deprecated deprecated0 = new Deprecated(0, 0, byteArray0, constantPool0);
      // Undeclared exception!
      try { 
        deprecated0.dump((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Deprecated deprecated0 = new Deprecated(0, (-1446), (DataInput) null, constantPool0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        deprecated0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Deprecated deprecated0 = null;
      try {
        deprecated0 = new Deprecated((Deprecated) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Deprecated", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Deprecated deprecated0 = null;
      try {
        deprecated0 = new Deprecated(117, 117, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Deprecated", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Deprecated deprecated0 = null;
      try {
        deprecated0 = new Deprecated(186, 39, dataInputStream0, constantPool0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Deprecated deprecated0 = new Deprecated(0, 8, byteArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("dsb", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      deprecated0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Deprecated deprecated0 = new Deprecated(147, (-1), byteArray0, (ConstantPool) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("iload_3", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      deprecated0.dump(dataOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Deprecated deprecated0 = new Deprecated(0, 0, byteArray0, constantPool0);
      Deprecated deprecated1 = new Deprecated(deprecated0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Deprecated deprecated0 = new Deprecated(147, (-1), byteArray0, (ConstantPool) null);
      String string0 = deprecated0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Deprecated deprecated0 = new Deprecated(147, (-1), byteArray0, (ConstantPool) null);
      byte[] byteArray1 = deprecated0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Deprecated deprecated0 = new Deprecated(147, (-1), byteArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        deprecated0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Deprecated", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Deprecated deprecated0 = null;
      try {
        deprecated0 = new Deprecated(391, 391, dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
}
