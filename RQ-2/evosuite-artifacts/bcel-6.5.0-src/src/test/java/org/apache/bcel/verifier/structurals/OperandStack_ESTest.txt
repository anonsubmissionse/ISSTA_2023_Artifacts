 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      OperandStack operandStack0 = new OperandStack(69, objectType0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.push(uninitializedObjectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.merge(operandStack1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4838);
      OperandStack operandStack1 = new OperandStack(4838);
      BasicType basicType0 = Type.VOID;
      operandStack0.push(basicType0);
      // Undeclared exception!
      try { 
        operandStack0.merge(operandStack1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Cannot merge stacks of different size:
         // OperandStack A:
         // Slots used: 0 MaxStack: 4838.
         // void (Size: 0)
         // 
         // OperandStack B:
         // Slots used: 0 MaxStack: 4838.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(681);
      ObjectType objectType0 = Type.STRING;
      OperandStack operandStack1 = new OperandStack(681, objectType0);
      // Undeclared exception!
      try { 
        operandStack0.merge(operandStack1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Cannot merge stacks of different size:
         // OperandStack A:
         // Slots used: 0 MaxStack: 681.
         // 
         // OperandStack B:
         // Slots used: 1 MaxStack: 681.
         // java.lang.String (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4838);
      BasicType basicType0 = Type.VOID;
      operandStack0.push(basicType0);
      operandStack0.push(basicType0);
      operandStack0.merge(operandStack0);
      assertEquals(0, operandStack0.slotsUsed());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4838);
      BasicType basicType0 = Type.VOID;
      operandStack0.push(basicType0);
      operandStack0.push(basicType0);
      operandStack0.merge(operandStack0);
      assertEquals(0, operandStack0.maxStack());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("86'o -b+U!");
      OperandStack operandStack0 = new OperandStack(1402, objectType0);
      // Undeclared exception!
      try { 
        operandStack0.pop(147);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(0);
      operandStack0.pop(0);
      assertEquals(0, operandStack0.maxStack());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4799);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.equals(operandStack1);
      assertEquals(0, operandStack1.maxStack());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4799);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.equals(operandStack1);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(487);
      int int0 = operandStack0.slotsUsed();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(487);
      int int0 = operandStack0.slotsUsed();
      assertEquals(0, operandStack0.maxStack());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Zm62%u2kH");
      OperandStack operandStack0 = new OperandStack(71, objectType0);
      operandStack0.size();
      assertEquals(0, operandStack0.maxStack());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Zm62%u2kH");
      OperandStack operandStack0 = new OperandStack(71, objectType0);
      operandStack0.size();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4838);
      BasicType basicType0 = Type.VOID;
      operandStack0.push(basicType0);
      operandStack0.pop();
      assertEquals(0, operandStack0.maxStack());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4838);
      BasicType basicType0 = Type.VOID;
      operandStack0.push(basicType0);
      operandStack0.pop();
      assertEquals(0, operandStack0.slotsUsed());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      operandStack0.pop();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4822);
      BasicType basicType0 = Type.VOID;
      operandStack0.push(basicType0);
      operandStack0.peek(0);
      assertEquals(0, operandStack0.maxStack());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4822);
      BasicType basicType0 = Type.VOID;
      operandStack0.push(basicType0);
      operandStack0.peek(0);
      assertEquals(0, operandStack0.slotsUsed());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(11);
      BasicType basicType0 = Type.VOID;
      operandStack0.push(basicType0);
      operandStack0.peek();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(11);
      BasicType basicType0 = Type.VOID;
      operandStack0.push(basicType0);
      operandStack0.peek();
      assertEquals(0, operandStack0.slotsUsed());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(0);
      int int0 = operandStack0.maxStack();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-397));
      int int0 = operandStack0.maxStack();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(0);
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals(0, operandStack1.maxStack());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(0);
      OperandStack operandStack1 = operandStack0.getClone();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-1));
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals(0, operandStack1.maxStack());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-1));
      OperandStack operandStack1 = operandStack0.getClone();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-534));
      // Undeclared exception!
      try { 
        operandStack0.peek((-534));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 533, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(181);
      // Undeclared exception!
      try { 
        operandStack0.peek(49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-1341));
      // Undeclared exception!
      try { 
        operandStack0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Zm62%u2kH");
      OperandStack operandStack0 = new OperandStack(71, objectType0);
      OperandStack operandStack1 = new OperandStack(71);
      ObjectType objectType1 = Type.STRING;
      operandStack1.push(objectType1);
      // Undeclared exception!
      try { 
        operandStack0.merge(operandStack1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class Zm62%u2kH: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: Zm62%u2kH.class
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      OperandStack operandStack0 = new OperandStack(1209, objectType0);
      // Undeclared exception!
      try { 
        operandStack0.merge((OperandStack) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BasicType basicType0 = Type.CHAR;
      OperandStack operandStack0 = new OperandStack(88, basicType0.THROWABLE);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack1 = new OperandStack(1555, objectType0);
      // Undeclared exception!
      try { 
        operandStack0.merge(operandStack1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name 
         //
         verifyException("org.apache.bcel.util.AbstractClassPathRepository", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(0);
      String string0 = operandStack0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("'; use Type.INT instead.");
      OperandStack operandStack0 = new OperandStack(1, objectType0);
      // Undeclared exception!
      try { 
        operandStack0.toString();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` use Type/INT instead/;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(927);
      BasicType basicType0 = Type.LONG;
      operandStack0.push(basicType0);
      int int0 = operandStack0.slotsUsed();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(0);
      ObjectType objectType0 = Type.CLASS;
      // Undeclared exception!
      try { 
        operandStack0.push(objectType0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: OperandStack too small, should have thrown proper Exception elsewhere. Stack: Slots used: 0 MaxStack: 0.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4799);
      operandStack0.size();
      assertEquals(0, operandStack0.maxStack());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      OperandStack operandStack0 = new OperandStack(4799, objectType0);
      operandStack0.peek(0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectType objectType0 = Type.STRINGBUFFER;
      OperandStack operandStack0 = new OperandStack(4799, objectType0);
      operandStack0.peek(0);
      assertEquals(0, operandStack0.slotsUsed());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4838);
      // Undeclared exception!
      try { 
        operandStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      OperandStack operandStack0 = new OperandStack(69, objectType0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.push(uninitializedObjectType0);
      operandStack0.initializeObject(uninitializedObjectType0);
      assertEquals(0, operandStack0.slotsUsed());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      OperandStack operandStack0 = new OperandStack(63, objectType0);
      OperandStack operandStack1 = new OperandStack(63);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack1.push(uninitializedObjectType0);
      // Undeclared exception!
      try { 
        operandStack1.merge(operandStack0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Backwards branch with an uninitialized object on the stack detected.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ObjectType objectType0 = Type.THROWABLE;
      OperandStack operandStack0 = new OperandStack(539, objectType0);
      OperandStack operandStack1 = new OperandStack(539);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack1.push(uninitializedObjectType0);
      // Undeclared exception!
      try { 
        operandStack0.merge(operandStack1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Backwards branch with an uninitialized object on the stack detected.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ObjectType objectType0 = Type.OBJECT;
      OperandStack operandStack0 = new OperandStack(96, objectType0);
      OperandStack operandStack1 = new OperandStack(96);
      // Undeclared exception!
      try { 
        operandStack0.merge(operandStack1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Cannot merge stacks of different size:
         // OperandStack A:
         // Slots used: 1 MaxStack: 96.
         // java.lang.Object (Size: 1)
         // 
         // OperandStack B:
         // Slots used: 0 MaxStack: 96.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack(4822);
      OperandStack operandStack1 = operandStack0.getClone();
      BasicType basicType0 = Type.VOID;
      operandStack0.push(basicType0);
      // Undeclared exception!
      try { 
        operandStack1.merge(operandStack0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Cannot merge stacks of different size:
         // OperandStack A:
         // Slots used: 0 MaxStack: 4822.
         // 
         // OperandStack B:
         // Slots used: 0 MaxStack: 4822.
         // void (Size: 0)
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      OperandStack operandStack0 = null;
      try {
        operandStack0 = new OperandStack((-9), objectType0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: OperandStack too small, should have thrown proper Exception elsewhere. Stack: Slots used: 0 MaxStack: -9.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-2589));
      BasicType basicType0 = Type.SHORT;
      // Undeclared exception!
      try { 
        operandStack0.push(basicType0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: The OperandStack does not know about 'short'; use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-2591));
      BasicType basicType0 = Type.BYTE;
      // Undeclared exception!
      try { 
        operandStack0.push(basicType0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: The OperandStack does not know about 'byte'; use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-2591));
      BasicType basicType0 = Type.CHAR;
      // Undeclared exception!
      try { 
        operandStack0.push(basicType0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: The OperandStack does not know about 'char'; use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-2591));
      BasicType basicType0 = Type.BOOLEAN;
      // Undeclared exception!
      try { 
        operandStack0.push(basicType0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: The OperandStack does not know about 'boolean'; use Type.INT instead.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-5));
      // Undeclared exception!
      try { 
        operandStack0.push((Type) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Cannot push NULL onto OperandStack.
         //
         verifyException("org.apache.bcel.verifier.structurals.OperandStack", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-2587));
      operandStack0.pop((-2587));
      assertEquals(0, operandStack0.maxStack());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-5));
      boolean boolean0 = operandStack0.isEmpty();
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-5));
      boolean boolean0 = operandStack0.isEmpty();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      OperandStack operandStack0 = new OperandStack(4799, objectType0);
      boolean boolean0 = operandStack0.isEmpty();
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      OperandStack operandStack0 = new OperandStack(4799, objectType0);
      boolean boolean0 = operandStack0.isEmpty();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      OperandStack operandStack0 = new OperandStack(4799, objectType0);
      boolean boolean0 = operandStack0.isEmpty();
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      OperandStack operandStack0 = new OperandStack(103, objectType0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      boolean boolean0 = operandStack0.equals(uninitializedObjectType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      OperandStack operandStack0 = new OperandStack(103, objectType0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      boolean boolean0 = operandStack0.equals(uninitializedObjectType0);
      assertEquals(0, operandStack0.slotsUsed());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      OperandStack operandStack0 = new OperandStack(103, objectType0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      boolean boolean0 = operandStack0.equals(uninitializedObjectType0);
      assertEquals(0, operandStack0.maxStack());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OperandStack operandStack0 = new OperandStack((-2587));
      operandStack0.clear();
      assertEquals(0, operandStack0.maxStack());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      OperandStack operandStack0 = new OperandStack(4799, objectType0);
      operandStack0.hashCode();
      assertEquals(0, operandStack0.slotsUsed());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      OperandStack operandStack0 = new OperandStack(4799, objectType0);
      operandStack0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      OperandStack operandStack0 = new OperandStack(4799, objectType0);
      int int0 = operandStack0.maxStack();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      OperandStack operandStack0 = new OperandStack(4799, objectType0);
      int int0 = operandStack0.maxStack();
      assertEquals(0, operandStack0.slotsUsed());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      OperandStack operandStack0 = new OperandStack(4799, objectType0);
      operandStack0.peek();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ObjectType objectType0 = Type.CLASS;
      OperandStack operandStack0 = new OperandStack(4799, objectType0);
      operandStack0.peek();
      assertEquals(0, operandStack0.slotsUsed());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      OperandStack operandStack0 = new OperandStack(1209, objectType0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertEquals(0, operandStack1.maxStack());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      OperandStack operandStack0 = new OperandStack(1209, objectType0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ObjectType objectType0 = Type.STRING;
      OperandStack operandStack0 = new OperandStack(1209, objectType0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      ;
}
