 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Method[] methodArray0 = new Method[10];
      Attribute[] attributeArray0 = new Attribute[4];
      Constant[] constantArray0 = new Constant[24];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(492, 492, 0, attributeArray0, constantPool0);
      methodArray0[0] = method0;
      ConstantHTML constantHTML0 = new ConstantHTML("Dont call getValueDouble() on a non DOUBLE ElementValue", "Dont call getValueDouble() on a non DOUBLE ElementValue", "Dont call getValueDouble() on a non DOUBLE ElementValue", methodArray0, constantPool0);
      CodeHTML codeHTML0 = null;
      try {
        codeHTML0 = new CodeHTML("Dont call getValueDouble() on a non DOUBLE ElementValue", "Dont call getValueDouble() on a non DOUBLE ElementValue", methodArray0, constantPool0, constantHTML0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Attribute[] attributeArray0 = new Attribute[12];
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("JBo ueV,bqe()Vo=aYwOBLEE;mn%e");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 0, 0, attributeArray0, constantPool0);
      methodArray0[0] = method0;
      Attribute[] attributeArray1 = new Attribute[3];
      InnerClass[] innerClassArray0 = new InnerClass[0];
      InnerClasses innerClasses0 = new InnerClasses(89, 4, innerClassArray0, constantPool0);
      attributeArray1[0] = (Attribute) innerClasses0;
      PMGClass pMGClass0 = new PMGClass((-1169), (-1169), 2503, 1633, constantPool0);
      attributeArray1[1] = (Attribute) pMGClass0;
      byte[] byteArray0 = new byte[7];
      Unknown unknown0 = new Unknown(0, 89, byteArray0, constantPool0);
      attributeArray1[2] = (Attribute) unknown0;
      method0.setAttributes(attributeArray1);
      ConstantHTML constantHTML0 = new ConstantHTML("JBo ueV,bqe()Vo=aYwOBLEE;mn%e", "JBo ueV,bqe()Vo=aYwOBLEE;mn%e", "JBo ueV,bqe()Vo=aYwOBLEE;mn%e", methodArray0, constantPool0);
      CodeHTML codeHTML0 = null;
      try {
        codeHTML0 = new CodeHTML("JBo ueV,bqe()Vo=aYwOBLEE;mn%e", "JBo ueV,bqe()Vo=aYwOBLEE;mn%e", methodArray0, constantPool0, constantHTML0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Method[] methodArray0 = new Method[0];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("1$h}cib se,Z1$h}cib se,Z_code.html");
      FileSystemHandling.createFolder(evoSuiteFile0);
      CodeHTML codeHTML0 = null;
      try {
        codeHTML0 = new CodeHTML("1$h}cib se,Z", "1$h}cib se,Z", methodArray0, (ConstantPool) null, (ConstantHTML) null);
        fail("Expecting exception: FileNotFoundException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Method[] methodArray0 = new Method[5];
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("TOV`!j()VO!E:s");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 0, 0, attributeArray0, constantPool0);
      methodArray0[0] = method0;
      byte[] byteArray0 = new byte[3];
      Unknown unknown0 = new Unknown(0, 0, byteArray0, constantPool0);
      Attribute[] attributeArray1 = new Attribute[2];
      int[] intArray0 = new int[12];
      ExceptionTable exceptionTable0 = new ExceptionTable(0, 0, intArray0, constantPool0);
      attributeArray1[0] = (Attribute) exceptionTable0;
      attributeArray1[1] = (Attribute) unknown0;
      method0.setAttributes(attributeArray1);
      ConstantHTML constantHTML0 = new ConstantHTML("TOV`!j()VO!E:s", "TOV`!j()VO!E:s", "TOV`!j()VO!E:s", methodArray0, constantPool0);
      CodeHTML codeHTML0 = null;
      try {
        codeHTML0 = new CodeHTML("TOV`!j()VO!E:s", "TOV`!j()VO!E:s", methodArray0, constantPool0, constantHTML0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.CodeHTML", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Attribute[] attributeArray0 = new Attribute[1];
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(",oZxP!(JB)V_;>4F");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Method method0 = new Method(0, 0, 0, attributeArray0, constantPool0);
      methodArray0[0] = method0;
      Attribute[] attributeArray1 = new Attribute[0];
      method0.setAttributes(attributeArray1);
      ConstantHTML constantHTML0 = new ConstantHTML(",oZxP!(JB)V_;>4F", ",oZxP!(JB)V_;>4F", ",oZxP!(JB)V_;>4F", methodArray0, constantPool0);
      CodeHTML codeHTML0 = new CodeHTML(",oZxP!(JB)V_;>4F", ",oZxP!(JB)V_;>4F", methodArray0, constantPool0, constantHTML0);
  }
