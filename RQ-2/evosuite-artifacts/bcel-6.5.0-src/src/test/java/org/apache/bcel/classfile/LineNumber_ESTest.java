/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 09 22:54:34 GMT 2022
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LineNumber;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineNumber_ESTest extends LineNumber_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(0, 0);
      int int0 = lineNumber0.getStartPC();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(0, 0);
      int int0 = lineNumber0.getStartPC();
      assertEquals(1, lineNumber0.getLineNumber());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(65535, 0);
      int int0 = lineNumber0.getLineNumber();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(65535, 0);
      int int0 = lineNumber0.getLineNumber();
      assertEquals(0, lineNumber0.getStartPC());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(0, 624);
      LineNumber lineNumber1 = lineNumber0.copy();
      assertEquals(0, lineNumber1.getStartPC());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(0, 624);
      LineNumber lineNumber1 = lineNumber0.copy();
      assertEquals(0, lineNumber1.getLineNumber());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber((-2192), (-2192));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        lineNumber0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(3123, 3123);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        lineNumber0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(1, 1);
      // Undeclared exception!
      try { 
        lineNumber0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumber", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LineNumber lineNumber0 = null;
      try {
        lineNumber0 = new LineNumber((LineNumber) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LineNumber", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      LineNumber lineNumber0 = null;
      try {
        lineNumber0 = new LineNumber(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-465), 2555);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      LineNumber lineNumber0 = null;
      try {
        lineNumber0 = new LineNumber(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -465
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 304);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      LineNumber lineNumber0 = null;
      try {
        lineNumber0 = new LineNumber(dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      LineNumber lineNumber0 = null;
      try {
        lineNumber0 = new LineNumber(dataInputStream0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber((-3177), 1648);
      int int0 = lineNumber0.getLineNumber();
      assertEquals(0, lineNumber0.getStartPC());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber((-3177), 1648);
      int int0 = lineNumber0.getLineNumber();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("U{Y3ZH:n*G.");
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      LineNumber lineNumber0 = new LineNumber(dataInputStream0);
      int int0 = lineNumber0.getStartPC();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("U{Y3ZH:n*G.");
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      LineNumber lineNumber0 = new LineNumber(dataInputStream0);
      int int0 = lineNumber0.getStartPC();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(1, 1);
      assertEquals(1, lineNumber0.getStartPC());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber(1, 1);
      lineNumber0.setStartPC(0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("U{Y3ZH:n*G.");
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      LineNumber lineNumber0 = new LineNumber(dataInputStream0);
      LineNumber lineNumber1 = lineNumber0.copy();
      assertEquals(0, lineNumber1.getLineNumber());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("U{Y3ZH:n*G.");
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      LineNumber lineNumber0 = new LineNumber(dataInputStream0);
      LineNumber lineNumber1 = lineNumber0.copy();
      assertEquals(0, lineNumber1.getStartPC());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("U{Y3ZH:n*G.");
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      LineNumber lineNumber0 = new LineNumber(dataInputStream0);
      lineNumber0.setLineNumber(0);
      lineNumber0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("U{Y3ZH:n*G.");
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      LineNumber lineNumber0 = new LineNumber(dataInputStream0);
      String string0 = lineNumber0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber((-2192), (-2192));
      LineNumber lineNumber1 = new LineNumber(lineNumber0);
      assertEquals(1, lineNumber0.getStartPC());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LineNumber lineNumber0 = new LineNumber((-2192), (-2192));
      LineNumber lineNumber1 = new LineNumber(lineNumber0);
      assertEquals(1, lineNumber0.getLineNumber());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("U{Y3ZH:n*G.");
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      LineNumber lineNumber0 = new LineNumber(dataInputStream0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      lineNumber0.accept(emptyVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("U{Y3ZH:n*G.");
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      LineNumber lineNumber0 = new LineNumber(dataInputStream0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      lineNumber0.accept(emptyVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("U{Y3ZH:n*G.");
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      LineNumber lineNumber0 = new LineNumber(dataInputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.bcel.classfile.LocalVariableTypeTable");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3132);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      lineNumber0.dump(dataOutputStream0);
      assertEquals(1, lineNumber0.getStartPC());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("U{Y3ZH:n*G.");
      InputStream inputStream0 = classPath0.getInputStream("", "");
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      LineNumber lineNumber0 = new LineNumber(dataInputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.bcel.classfile.LocalVariableTypeTable");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3132);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      lineNumber0.dump(dataOutputStream0);
      ;
}
}
