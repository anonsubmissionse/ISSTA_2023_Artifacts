/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 20:09:51 GMT 2022
 */

package org.apache.commons.numbers.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.numbers.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Fraction fraction0 = Fraction.of(0, 640);
      fraction0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-321.6797));
      Fraction fraction1 = fraction0.ONE.divide((-3854));
      Fraction fraction2 = Fraction.from((-321.6797), 2529.5475, 1);
      Fraction fraction3 = fraction2.abs();
      Fraction fraction4 = fraction1.subtract(fraction2);
      Fraction fraction5 = fraction4.reciprocal();
      fraction5.equals(fraction3);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-321.6797));
      Fraction fraction1 = fraction0.ONE.divide((-3854));
      Fraction fraction2 = Fraction.from((-321.6797), 2529.5475, 1);
      Fraction fraction3 = fraction2.abs();
      Fraction fraction4 = fraction1.subtract(fraction2);
      Fraction fraction5 = fraction4.reciprocal();
      fraction5.equals(fraction3);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-321.6797));
      Fraction fraction1 = fraction0.ONE.divide((-3854));
      Fraction fraction2 = Fraction.from((-321.6797), 2529.5475, 1);
      Fraction fraction3 = fraction2.abs();
      Fraction fraction4 = fraction1.subtract(fraction2);
      Fraction fraction5 = fraction4.reciprocal();
      fraction5.equals(fraction3);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-321.6797));
      Fraction fraction1 = fraction0.ONE.divide((-3854));
      Fraction fraction2 = Fraction.from((-321.6797), 2529.5475, 1);
      Fraction fraction3 = fraction2.abs();
      Fraction fraction4 = fraction1.subtract(fraction2);
      Fraction fraction5 = fraction4.reciprocal();
      fraction5.equals(fraction3);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-321.6797));
      Fraction fraction1 = fraction0.ONE.divide((-3854));
      Fraction fraction2 = Fraction.from((-321.6797), 2529.5475, 1);
      Fraction fraction3 = fraction2.abs();
      Fraction fraction4 = fraction1.subtract(fraction2);
      Fraction fraction5 = fraction4.reciprocal();
      fraction5.equals(fraction3);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-321.6797));
      Fraction fraction1 = fraction0.ONE.divide((-3854));
      Fraction fraction2 = Fraction.from((-321.6797), 2529.5475, 1);
      Fraction fraction3 = fraction2.abs();
      Fraction fraction4 = fraction1.subtract(fraction2);
      Fraction fraction5 = fraction4.reciprocal();
      fraction5.equals(fraction3);
      assertEquals(0, fraction3.getNumerator());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.of(2500);
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.of(2500);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(0, fraction0.signum());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.of(2500);
      boolean boolean0 = fraction0.equals(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.of(2500);
      boolean boolean0 = fraction0.equals(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.of(305, (-1059));
      int int0 = fraction0.compareTo(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.of(305, (-1059));
      int int0 = fraction0.compareTo(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.pow(Integer.MIN_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.pow(Integer.MIN_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-3), (-1));
      Fraction fraction1 = fraction0.divide(3360);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-3), (-1));
      Fraction fraction1 = fraction0.divide(3360);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2727.41303446107);
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(0, fraction0.getNumerator());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2727.41303446107);
      Fraction fraction1 = fraction0.divide(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.of(640, 640);
      Fraction fraction1 = fraction0.ONE.subtract(3);
      Fraction fraction2 = fraction1.divide(fraction1);
      assertEquals(0, fraction2.getNumerator());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.of(640, 640);
      Fraction fraction1 = fraction0.ONE.subtract(3);
      Fraction fraction2 = fraction1.divide(fraction1);
      assertEquals(0, fraction1.intValue());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.of(640, 640);
      Fraction fraction1 = fraction0.ONE.subtract(3);
      Fraction fraction2 = fraction1.divide(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2394.1233341, 815);
      Fraction fraction1 = fraction0.add(127908);
      Fraction fraction2 = fraction1.subtract(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2394.1233341, 815);
      Fraction fraction1 = fraction0.add(127908);
      Fraction fraction2 = fraction1.subtract(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-948.3535));
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.signum());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-948.3535));
      Fraction fraction1 = fraction0.subtract(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE.divide(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction1.subtract((-2));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2394.1233341, 815);
      long long0 = fraction0.longValue();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2394.1233341, 815);
      long long0 = fraction0.longValue();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide((-1957));
      Fraction fraction2 = fraction1.subtract(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1108));
      Fraction fraction2 = fraction1.ONE.subtract(fraction1);
      assertEquals(0, fraction2.intValue());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1108));
      Fraction fraction2 = fraction1.ONE.subtract(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(1);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.signum();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.signum();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-321.6797));
      Fraction fraction1 = fraction0.ONE.divide((-3854));
      Fraction fraction2 = fraction1.reciprocal();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-321.6797));
      Fraction fraction1 = fraction0.ONE.divide((-3854));
      Fraction fraction2 = fraction1.reciprocal();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-321.6797));
      Fraction fraction1 = fraction0.ONE.divide((-3854));
      Fraction fraction2 = fraction1.reciprocal();
      assertEquals(0, fraction2.intValue());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-2));
      Fraction fraction1 = fraction0.reciprocal();
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-1.0), 2539);
      Fraction fraction1 = fraction0.reciprocal();
      assertEquals(1, fraction0.getNumerator());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-1.0), 2539);
      Fraction fraction1 = fraction0.reciprocal();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MIN_VALUE, (-794));
      Fraction fraction1 = fraction0.pow((-1));
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MIN_VALUE, (-794));
      Fraction fraction1 = fraction0.pow((-1));
      assertEquals(0, fraction0.intValue());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.parse("-394");
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.parse("1");
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.parse("395");
      assertEquals(0, fraction0.intValue());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-1), 1);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.of(21, (-688));
      Fraction fraction2 = fraction1.multiply(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.of(21, (-688));
      Fraction fraction2 = fraction1.multiply(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.of((-1080));
      Fraction fraction2 = fraction0.multiply(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE.divide(Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.multiply((-2));
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE.divide(Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.multiply((-2));
      assertEquals(0, fraction1.getNumerator());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.multiply(1397);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.from((double) 47);
      Fraction fraction1 = fraction0.multiply((-394));
      assertEquals(1, fraction0.signum());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.from((double) 47);
      Fraction fraction1 = fraction0.multiply((-394));
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      long long0 = fraction0.longValue();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1108));
      long long0 = fraction1.longValue();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1108));
      long long0 = fraction1.longValue();
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.intValue();
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.intValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.of(640, 640);
      Fraction fraction1 = fraction0.ONE.subtract(3);
      int int0 = fraction1.intValue();
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.of(640, 640);
      Fraction fraction1 = fraction0.ONE.subtract(3);
      int int0 = fraction1.intValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      int int0 = fraction1.getNumerator();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      int int0 = fraction1.getNumerator();
      assertEquals(0, fraction1.intValue());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.from(1.0, 180.736542, 274353085);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-313.075511928422));
      float float0 = fraction0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-313.075511928422));
      float float0 = fraction0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      double double0 = fraction0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1108));
      double double0 = fraction1.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-274.47696133));
      Fraction fraction1 = Fraction.from((-274.47696133), (-1887));
      Fraction fraction2 = fraction0.divide(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-274.47696133));
      Fraction fraction1 = Fraction.from((-274.47696133), (-1887));
      Fraction fraction2 = fraction0.divide(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1108));
      Fraction fraction2 = fraction1.divide(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add((-1108));
      Fraction fraction2 = fraction1.divide(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-1.0), 1207);
      Fraction fraction1 = fraction0.divide(1207);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-1.0), 1207);
      Fraction fraction1 = fraction0.divide(1207);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fraction fraction0 = Fraction.from(1718.7430557);
      Fraction fraction1 = fraction0.divide(888);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide((-1));
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-856), (-1464));
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-856), (-1464));
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-948.3535));
      Fraction fraction1 = fraction0.ONE.add(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fraction fraction0 = Fraction.of(305, (-1059));
      Fraction fraction1 = fraction0.add(1);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.add((-1957));
      assertEquals(0, fraction1.intValue());
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(353802675);
      Fraction fraction2 = fraction1.abs();
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(353802675);
      Fraction fraction2 = fraction1.abs();
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(353802675);
      Fraction fraction2 = fraction1.abs();
      assertEquals(0, fraction1.intValue());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(353802675);
      Fraction fraction2 = fraction1.abs();
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-856), (-1464));
      fraction0.abs();
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-856), (-1464));
      fraction0.abs();
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fraction fraction0 = Fraction.from(185.0, (-2303));
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MAX_VALUE);
      Fraction fraction1 = Fraction.from(2319.5293862, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fraction fraction0 = Fraction.of(523);
      // Undeclared exception!
      try { 
        fraction0.pow((-19));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.parse("kU#*`zqwohS2x}");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"kU#*`zqwohS2x}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.of((-484), 0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Denominator must be different from 0
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-299.348920080592), 3);
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = Fraction.of(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.multiply(fraction1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-1279.46));
      // Undeclared exception!
      try { 
        fraction0.multiply(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-2621), (-2621));
      // Undeclared exception!
      try { 
        fraction0.ONE.divide((Fraction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.00924511111134052, Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.of(Integer.MIN_VALUE, 2202);
      // Undeclared exception!
      try { 
        fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2051.828501);
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Fraction fraction0 = Fraction.from(1565.614616209469);
      // Undeclared exception!
      try { 
        fraction0.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Fraction fraction0 = Fraction.of(68, 68);
      // Undeclared exception!
      try { 
        fraction0.ONE.add((Fraction) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.add(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Fraction fraction0 = Fraction.of(0);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Fraction fraction0 = Fraction.from((double) 0.0F, 3274.7826359600886, 1);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-1.0));
      int int0 = fraction0.signum();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Fraction fraction0 = Fraction.from((-1.0));
      int int0 = fraction0.signum();
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      double double0 = fraction0.doubleValue();
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide(1270);
      boolean boolean0 = fraction0.equals(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide(1270);
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide(1270);
      boolean boolean0 = fraction0.equals(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.divide(1270);
      boolean boolean0 = fraction0.equals(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.divide(21);
      Fraction fraction2 = fraction1.negate();
      boolean boolean0 = fraction2.equals(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.divide(21);
      Fraction fraction2 = fraction1.negate();
      boolean boolean0 = fraction2.equals(fraction1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.divide(21);
      Fraction fraction2 = fraction1.negate();
      boolean boolean0 = fraction2.equals(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.divide(21);
      Fraction fraction2 = fraction1.negate();
      boolean boolean0 = fraction2.equals(fraction1);
      assertEquals(0, fraction0.intValue());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.divide(21);
      Fraction fraction2 = fraction1.negate();
      boolean boolean0 = fraction2.equals(fraction1);
      assertEquals(0, fraction0.signum());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      Fraction fraction2 = fraction1.ONE.multiply(fraction0);
      Fraction fraction3 = fraction1.negate();
      boolean boolean0 = fraction3.equals(fraction2);
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      Fraction fraction2 = fraction1.ONE.multiply(fraction0);
      Fraction fraction3 = fraction1.negate();
      boolean boolean0 = fraction3.equals(fraction2);
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      Fraction fraction2 = fraction1.ONE.multiply(fraction0);
      Fraction fraction3 = fraction1.negate();
      boolean boolean0 = fraction3.equals(fraction2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      Fraction fraction2 = fraction1.ONE.multiply(fraction0);
      Fraction fraction3 = fraction1.negate();
      boolean boolean0 = fraction3.equals(fraction2);
      assertEquals(0, fraction1.signum());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      Fraction fraction2 = fraction1.ONE.multiply(fraction0);
      Fraction fraction3 = fraction1.negate();
      boolean boolean0 = fraction3.equals(fraction2);
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      boolean boolean0 = fraction0.equals(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      boolean boolean0 = fraction0.equals(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      boolean boolean0 = fraction0.equals("Unable to convert %s to fraction after %d iterations");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      boolean boolean0 = fraction0.equals("Unable to convert %s to fraction after %d iterations");
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.compareTo(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      int int0 = fraction0.ONE.compareTo(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = Fraction.of(Integer.MIN_VALUE);
      int int0 = fraction1.compareTo(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = Fraction.of(Integer.MIN_VALUE);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(0, fraction1.intValue());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      int int0 = fraction0.ONE.compareTo(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      int int0 = fraction0.ONE.compareTo(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Fraction fraction0 = Fraction.of(47, (-611));
      String string0 = fraction0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      String string0 = fraction0.ZERO.toString();
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      String string0 = fraction0.ZERO.toString();
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      String string0 = fraction0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-1));
      Fraction fraction1 = fraction0.pow((-1));
      int int0 = fraction1.getDenominator();
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-1));
      Fraction fraction1 = fraction0.pow((-1));
      int int0 = fraction1.getDenominator();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Fraction fraction0 = Fraction.of((-1));
      Fraction fraction1 = fraction0.pow((-1));
      int int0 = fraction1.getDenominator();
      assertEquals(0, fraction0.signum());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.pow(112);
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.pow(112);
      assertEquals(0, fraction0.intValue());
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.pow(21);
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.ZERO.multiply(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction1.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Denominator must be different from 0
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.pow(0);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      fraction0.ONE.pow(1);
      assertEquals(1, fraction0.intValue());
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      fraction0.ONE.pow(1);
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      // Undeclared exception!
      try { 
        fraction0.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // integer overflow
         //
         verifyException("org.apache.commons.numbers.core.ArithmeticUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      // Undeclared exception!
      try { 
        fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The value to divide by must not be zero
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.divide(0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The value to divide by must not be zero
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      Fraction fraction2 = fraction1.multiply(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(1, fraction0.getNumerator());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      Fraction fraction1 = fraction0.ONE.multiply(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.multiply(0);
      assertEquals(0, fraction1.longValue());
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.multiply(0);
      assertEquals(0, fraction0.intValue());
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ONE.subtract(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
//TOGA incorrect assertion       assertTrue(fraction1.byteValue());
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = fraction0.ZERO.add(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.divide(21);
      Fraction fraction2 = fraction1.subtract(1);
      assertEquals(1, fraction0.getNumerator());
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21);
      Fraction fraction1 = fraction0.ZERO.divide(21);
      Fraction fraction2 = fraction1.subtract(1);
      assertEquals(0, fraction2.intValue());
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.add((-1));
      Fraction fraction2 = fraction1.subtract(Integer.MIN_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.add((-1));
      Fraction fraction2 = fraction1.subtract(Integer.MIN_VALUE);
      assertEquals(1, fraction1.signum());
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(0);
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      Fraction fraction2 = fraction1.add(1642);
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Fraction fraction0 = Fraction.of(21475);
      Fraction fraction1 = fraction0.ZERO.divide(fraction0);
      Fraction fraction2 = fraction1.add(1642);
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.add(0);
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Fraction fraction0 = Fraction.of(Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Fraction fraction0 = Fraction.parse("1 / -13");
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Fraction fraction0 = Fraction.parse("0");
      assertEquals(0, fraction0.intValue());
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.from(2566.469, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Denominator must be different from 0
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0, 894);
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.from((double) 2500, (-4543.864), 552);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Epsilon must be positive: 552
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.from((double) (-1), (-2956.5), (-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Max iterations must be strictly positive: -1
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.from(1.5288142859049003E-4, 0.0, 1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Unable to convert 1.5288142859049003E-4 to fraction after 1 iterations
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Fraction fraction0 = Fraction.from(2.6528496164246462E-6, Integer.MIN_VALUE);
      assertEquals(0, fraction0.signum());
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.from((-1465.450088636), 5.186823193170653E-16, 47);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Overflow trying to convert -1465.450088636 to fraction (9962997249/6798592)
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Fraction fraction0 = Fraction.of(0, 0);
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Denominator must be different from 0
         //
         verifyException("org.apache.commons.numbers.fraction.Fraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.reciprocal();
      assertEquals(0, fraction1.intValue());
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      int int0 = fraction0.getDenominator();
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Fraction fraction0 = Fraction.from(0.0);
      int int0 = fraction0.getDenominator();
      assertEquals(0, fraction0.byteValue());
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Fraction fraction0 = Fraction.of(4205);
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Fraction fraction0 = Fraction.of(4205);
      int int0 = fraction0.getNumerator();
      assertEquals(0, fraction0.getDenominator());
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Fraction fraction0 = Fraction.of(4205);
      float float0 = fraction0.floatValue();
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(1, fraction0.signum());
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(1, fraction1.signum());
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.zero();
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.one();
      assertEquals(0, fraction1.intValue());
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      fraction0.hashCode();
  }
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.intValue();
      assertEquals(0, int0);
}
}
