 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(916.5148, 916.5148);
      complex0.norm();
      Complex complex1 = complex0.multiplyImaginary(4.0);
      Complex complex2 = Complex.ofPolar(4.0, 4.0);
      Complex complex3 = complex0.ONE.multiply(complex1);
      complex1.I.exp();
      complex0.subtract(Double.NaN);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.ONE.cosh();
      complex1.real();
      Complex complex6 = complex0.pow(complex3);
      Complex complex7 = complex6.ONE.subtract((-1592.5));
      complex7.ZERO.proj();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex2.sin();
      complex9.ZERO.multiply(4.0);
      Complex complex10 = complex9.I.sinh();
      complex3.divideImaginary((-2128.27));
      complex1.atan();
      complex8.abs();
      complex2.subtractFromImaginary(916.5148);
      Complex complex11 = Complex.ofCartesian(4.0, Double.NaN);
      Complex complex12 = Complex.ofCis(2.718281828459045);
      complex0.divideImaginary((-2587.0078411673));
      complex12.toString();
      complex12.divide(complex9);
      complex5.norm();
      complex10.log();
      complex11.exp();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(1.0);
      Complex complex2 = Complex.ofCis(4029.359);
      complex2.ZERO.isFinite();
      Complex complex3 = complex0.multiplyImaginary(1.0);
      Complex complex4 = Complex.I;
      complex2.add(complex4);
      Complex.ofCis(1034.74743297094);
      complex3.ONE.subtractImaginary(0.0);
      Complex complex5 = complex3.sin();
      complex5.ONE.subtractFromImaginary(736.8067826479);
      complex1.abs();
      Complex complex6 = complex2.asin();
      complex6.add(0.0);
      Complex complex7 = complex0.log();
      complex7.ZERO.negate();
      Complex.ofPolar((-0.9999999999995585), 0.5430806348152439);
      Complex complex8 = complex7.pow(4029.359);
      complex8.abs();
      Complex complex9 = complex7.subtractFrom((-2196.4090200786));
      complex9.negate();
      complex7.pow(complex2);
      Complex.ofCartesian(1.34217729E8, Double.POSITIVE_INFINITY);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(916.5148, 916.5148);
      complex0.norm();
      Complex complex1 = complex0.multiplyImaginary(4.0);
      Complex complex2 = Complex.ofPolar(4.0, 4.0);
      Complex complex3 = complex0.ONE.multiply(complex1);
      complex1.I.exp();
      complex0.subtract(Double.NaN);
      Complex complex4 = Complex.ofPolar(Double.NaN, 4.0);
      Complex complex5 = complex4.ONE.cosh();
      complex1.real();
      Complex complex6 = complex0.pow(complex3);
      Complex complex7 = complex6.ONE.subtract((-1592.5));
      complex7.ZERO.proj();
      Complex complex8 = complex3.tanh();
      Complex complex9 = Complex.I;
      complex9.ZERO.multiply(4.0);
      complex9.I.sinh();
      complex5.ZERO.multiply(1679998.75723808);
      complex3.divideImaginary((-2128.27));
      complex1.atan();
      complex8.abs();
      complex2.subtractFromImaginary(916.5148);
      Complex.ofCartesian(4.0, Double.NaN);
      Complex complex10 = Complex.ofCis(2.718281828459045);
      complex0.divideImaginary((-2587.0078411673));
      complex10.toString();
      complex10.divide(complex9);
      complex5.norm();
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1919.77524895, 0.0);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = Complex.ofCartesian(1919.77524895, 2.2250738585072014E-308);
      Complex complex3 = complex1.I.addImaginary(0.0);
      Complex complex4 = Complex.ofCartesian(0.0, 3667.416193328);
      Complex complex5 = complex4.ONE.subtractFromImaginary(259.948318);
      Complex complex6 = complex5.ZERO.log10();
      Complex complex7 = complex6.I.tan();
      complex7.ZERO.log10();
      complex4.I.exp();
      Complex.ofCartesian(3707.54, 0.0);
      Complex complex8 = Complex.ofCis(0.0);
      complex4.acosh();
      Complex complex9 = complex0.pow(complex4);
      Complex complex10 = complex9.atanh();
      complex10.ONE.subtractFromImaginary(259.948318);
      complex6.acosh();
      complex5.atanh();
      complex8.cos();
      Complex complex11 = Complex.I;
      complex3.pow(complex11);
      // Undeclared exception!
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-86.8));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex1.proj();
      Complex complex5 = complex4.exp();
      complex3.ZERO.divideImaginary((-86.8));
      complex2.norm();
      complex3.conj();
      Complex complex6 = complex5.addImaginary(8.496532405356104);
      Complex complex7 = complex6.pow(281.2282453994905);
      Complex complex8 = complex2.asinh();
      complex8.ONE.sin();
      complex7.asinh();
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-1.0));
      complex0.I.negate();
      Complex complex1 = complex0.ZERO.pow((-1.0));
      complex1.ONE.subtractFromImaginary((-1.0));
      complex0.isFinite();
      complex0.tanh();
      complex0.sinh();
      double double0 = 0.0;
      complex1.addImaginary(0.0);
      // Undeclared exception!
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cannot compute zeroth root
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex1.subtractImaginary(0.0);
      Complex complex3 = complex1.pow(complex0);
      complex1.cos();
      Complex complex4 = complex0.exp();
      complex4.I.conj();
      complex0.exp();
      Complex complex5 = complex1.sin();
      complex2.I.multiply(complex1);
      complex1.ONE.addImaginary(0.0);
      complex3.asin();
      complex2.add(complex4);
      complex5.acos();
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex1.subtractImaginary(0.0);
      Complex complex3 = complex1.pow(complex0);
      complex1.cos();
      Complex complex4 = complex0.exp();
      complex4.I.conj();
      complex0.exp();
      Complex complex5 = complex1.sin();
      complex1.ONE.addImaginary(0.0);
      Complex complex6 = complex3.asin();
      Complex complex7 = complex2.add(complex4);
      complex5.acos();
      complex6.atan();
      complex1.log();
      complex7.tan();
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      complex1.I.toString();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.subtract((-907.132001584));
      complex3.ZERO.log();
      Complex complex4 = complex3.I.log10();
      Complex complex5 = complex4.ZERO.sinh();
      complex4.divideImaginary(8.988465674311579E307);
      Complex complex6 = complex2.asinh();
      complex1.ZERO.toString();
      complex6.ONE.subtractFrom((-1.0));
      Complex complex7 = complex6.subtractFromImaginary((-227.98051594195294));
      Complex complex8 = complex0.tan();
      Complex complex9 = complex1.subtractImaginary(1.7976931348623157E308);
      complex7.I.multiply(1713.518);
      complex9.log10();
      Complex complex10 = Complex.ofPolar(5023.721248253042, 5023.721248253042);
      Complex complex11 = complex9.cos();
      Complex complex12 = complex0.addImaginary(5023.721248253042);
      complex12.isNaN();
      Complex complex13 = complex9.subtractImaginary((-227.98051594195294));
      Complex complex14 = complex13.cos();
      complex8.cos();
      complex5.isInfinite();
      complex7.sinh();
      complex10.addImaginary(708.0);
      complex14.add(8.988465674311579E307);
      complex11.abs();
      complex10.pow(complex1);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(5023.721248253042, 5023.721248253042);
      Complex complex1 = complex0.proj();
      Complex complex2 = complex1.pow(complex0);
      complex0.toString();
      Complex complex3 = complex1.multiplyImaginary(0.0);
      complex3.ZERO.nthRoot((-297));
      Complex complex4 = complex1.I.cos();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex2.subtract(complex0);
      complex6.ONE.addImaginary(5023.721248253042);
      complex6.ONE.log10();
      Complex complex7 = complex5.I.sinh();
      Complex complex8 = complex7.ZERO.subtract((double) (-297));
      complex8.ONE.addImaginary(354.0);
      complex2.ONE.hashCode();
      complex2.arg();
      Complex complex9 = complex4.tanh();
      complex5.isInfinite();
      complex4.hashCode();
      Complex complex10 = complex1.pow(0.0);
      complex1.add(0.0);
      complex1.ZERO.subtractFromImaginary(5023.721248253042);
      complex5.add(complex4);
      complex10.pow(0.0);
      complex6.isFinite();
      complex9.multiply((double) (-297));
      Complex.parse("(-4777.165681228247,-1554.497743402724)");
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-3059.678428811595), 1919.77524895);
      Complex complex1 = Complex.ofCis((-332.87215696135));
      complex1.nthRoot((-1));
      Complex complex2 = complex0.multiply((-1.0));
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex3.ZERO.add(1881.6);
      complex6.ONE.multiplyImaginary(0.0);
      Complex complex7 = complex5.ZERO.add(466.4516896854);
      Complex complex8 = complex3.exp();
      Complex complex9 = complex3.subtract(complex4);
      Complex complex10 = complex9.I.add(complex8);
      complex2.norm();
      complex4.asin();
      complex4.ZERO.cosh();
      Complex complex11 = complex4.divideImaginary((-3059.678428811595));
      complex11.ZERO.pow(complex2);
      complex0.cosh();
      Complex complex12 = complex7.subtract(complex8);
      complex12.I.hashCode();
      complex5.proj();
      complex10.add(2612.2170119072);
      Complex complex13 = complex4.asinh();
      complex13.divideImaginary(1919.77524895);
      // Undeclared exception!
      try { 
        Complex.parse("VStl<}NFl!OK4@");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"VStl<}NFl!OK4@\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.nthRoot(1025);
      Complex complex1 = Complex.ofCartesian((-3333.369), (-3333.369));
      Complex complex2 = complex0.pow(complex1);
      complex0.abs();
      Complex complex3 = complex2.atanh();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.sinh();
      complex5.ZERO.subtractFrom(1826.8961254595624);
      Complex.ofCartesian((-2.1294592595800146), (-3333.369));
      complex0.isNaN();
      complex4.cos();
      complex4.asinh();
      complex4.abs();
      complex5.sqrt();
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.conj();
      Complex complex3 = complex0.ZERO.divide(complex1);
      complex1.ZERO.conj();
      Complex.ofCis((-1612.0));
      Complex.ofCartesian(0.0, (-2208.63539225));
      complex3.ZERO.acosh();
      Complex complex4 = Complex.ofPolar(3329.2, 3329.2);
      Complex complex5 = Complex.ofCis(2833.0);
      complex3.I.multiply(2833.0);
      complex0.real();
      Complex complex6 = complex2.divide(2833.0);
      Complex complex7 = complex3.cos();
      Complex complex8 = complex3.acosh();
      complex7.getImaginary();
      complex2.real();
      complex4.imag();
      Complex complex9 = complex4.add(0.0);
      Complex complex10 = complex9.subtract(2.0);
      Complex complex11 = complex8.multiplyImaginary((-5550.044003));
      complex10.cos();
      complex6.atan();
      complex4.sinh();
      complex11.divideImaginary(3329.2);
      complex8.sqrt();
      complex5.divide((-6.004342555630177));
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ofCis(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.ofCartesian(0.0, 0.0);
      Complex complex3 = Complex.I;
      complex2.I.multiplyImaginary(1383.0);
      Complex complex4 = Complex.ofPolar(0.0, 1383.0);
      complex4.I.add(complex1);
      Complex complex5 = Complex.ofPolar((-97.64113348), (-97.64113348));
      complex3.sqrt();
      complex5.acosh();
      complex5.acos();
      complex2.isFinite();
      complex5.toString();
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ofCis(400.54721);
      Complex complex1 = complex0.acos();
      complex0.ZERO.hashCode();
      complex1.ZERO.multiplyImaginary(0.0);
      Complex complex2 = Complex.ofPolar(400.54721, 400.54721);
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex3.ONE.divideImaginary(0.0);
      complex0.toString();
      Complex complex5 = complex0.divideImaginary(400.54721);
      Complex complex6 = complex5.ZERO.divide(complex1);
      complex6.subtract(0.0);
      Complex.ofCartesian(0.0, 0.0);
      Complex complex7 = Complex.ofCartesian(0.0, 0.0);
      complex7.ZERO.divide(400.54721);
      Complex.ofCartesian(0.0, 1.0);
      complex4.sqrt();
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.proj();
      Complex complex2 = Complex.ofCartesian(1.5707963267948966, (-874.58788952803));
      Complex complex3 = complex0.pow(complex2);
      complex3.ZERO.multiply(complex2);
      Complex complex4 = complex0.acosh();
      complex1.ZERO.tan();
      complex0.ZERO.nthRoot((-513));
      Complex complex5 = complex0.proj();
      complex5.ZERO.pow((double) (-513));
      Complex.ofCis(1.4142135623730951);
      Complex complex6 = Complex.ofPolar(1.4142135623730951, (-513));
      complex6.ONE.hashCode();
      complex4.ZERO.proj();
      Complex complex7 = complex4.asinh();
      complex7.isNaN();
      complex4.pow(complex6);
      Object object0 = new Object();
      complex5.equals(object0);
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.conj();
      Complex complex3 = complex0.ZERO.divide(complex1);
      complex1.ZERO.conj();
      Complex.ofCis((-1612.0));
      Complex.ofCartesian(0.0, (-2208.63539225));
      Complex complex4 = complex3.ZERO.acosh();
      Complex complex5 = Complex.ofPolar(3329.2, 3329.2);
      Complex.ofCis(2833.0);
      complex3.I.multiply(2833.0);
      Complex complex6 = complex1.I.add(complex4);
      complex0.real();
      Complex complex7 = complex2.divide(2833.0);
      Complex complex8 = complex3.cos();
      Complex complex9 = complex6.acosh();
      complex8.getImaginary();
      complex6.real();
      complex5.imag();
      Complex complex10 = complex5.add(0.0);
      Complex complex11 = complex10.subtract(2.0);
      Complex complex12 = complex9.multiplyImaginary((-5550.044003));
      Complex complex13 = complex11.cos();
      complex7.atan();
      complex5.sinh();
      complex12.divideImaginary(3329.2);
      complex9.sqrt();
      complex13.subtractFromImaginary(3329.2);
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtractFromImaginary(0.0);
      complex1.negate();
      complex1.toString();
      Complex complex2 = Complex.ofPolar(0.0, 0.0);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = complex3.ONE.multiply(0.0);
      complex5.sqrt();
      Complex complex6 = complex5.exp();
      complex6.I.tan();
      complex5.sinh();
      Complex complex7 = Complex.ofPolar(0.0, 0.0);
      complex2.exp();
      Complex complex8 = Complex.ofCartesian(5550.3770645941195, 5550.3770645941195);
      complex8.ZERO.add(complex0);
      Complex complex9 = complex8.negate();
      Complex complex10 = complex9.ONE.proj();
      complex8.ZERO.tanh();
      Complex complex11 = complex1.ONE.subtract(complex0);
      Complex complex12 = complex4.tanh();
      complex12.nthRoot(1);
      Complex complex13 = complex8.add(complex10);
      Complex complex14 = Complex.ONE;
      complex10.ONE.exp();
      complex7.add(complex14);
      Complex.parse("(-0.0,-1.0)");
      complex14.equals(complex1);
      complex0.multiply(complex9);
      complex13.proj();
      complex8.arg();
      complex14.isNaN();
      complex11.equals("(-0.0,-1.0)");
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ofCis(Double.POSITIVE_INFINITY);
      complex0.I.log10();
      Complex complex1 = complex0.ONE.tan();
      Complex.ofPolar((-272.44637741071), (-29.06448065143764));
      complex0.ONE.acosh();
      Complex complex2 = complex0.atanh();
      complex2.norm();
      complex1.sqrt();
      Complex.ofCis(1.5707963267948966);
      complex2.asinh();
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-1.0), (-1.0));
      complex0.add((-1.0));
      complex0.divide((-366.441829902));
      Complex.ofCartesian((-2775.8052302368), 8.988465674311579E307);
      complex0.abs();
      // Undeclared exception!
      try { 
        Complex.parse("nQTP!FP'g&ISd+F&");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"nQTP!FP'g&ISd+F&\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(2007.8, 2007.8);
      Complex complex1 = complex0.ZERO.divideImaginary(2007.8);
      Complex complex2 = Complex.ofCartesian(2007.8, 1.5574077246549023);
      Complex complex3 = complex2.ZERO.negate();
      complex3.ZERO.multiplyImaginary(1.5574077246549023);
      Complex complex4 = complex3.ONE.multiplyImaginary(1.5574077246549023);
      complex4.ONE.tan();
      complex2.addImaginary(2007.8);
      Complex complex5 = Complex.ofCartesian(1.7976931348623157E308, (-75.2));
      Complex complex6 = complex1.add(complex5);
      complex6.atanh();
      Complex complex7 = complex1.subtractImaginary(2585.14180718291);
      complex1.cosh();
      complex1.isInfinite();
      complex7.acos();
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.log10();
      Complex complex2 = complex0.I.divideImaginary((-2035.86683288));
      complex2.divideImaginary((-2035.86683288));
      Complex complex3 = Complex.ofPolar((-2035.86683288), (-2035.86683288));
      Complex complex4 = complex2.ZERO.sqrt();
      complex1.I.subtract((-2035.86683288));
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex1.subtractFrom((-2035.86683288));
      complex0.pow(complex3);
      complex5.multiply((-2035.86683288));
      Complex complex7 = complex6.ZERO.exp();
      complex4.I.acosh();
      Complex complex8 = complex0.divideImaginary(270.2046592732837);
      complex8.ZERO.isFinite();
      complex1.abs();
      complex0.isFinite();
      complex1.sqrt();
      Complex complex9 = Complex.ofCartesian((-4237.74), 2124.0);
      Complex complex10 = complex9.ONE.conj();
      complex10.I.toString();
      Complex complex11 = Complex.ofCartesian((-2035.86683288), (-1956.247125));
      complex11.ONE.multiply(complex7);
      complex5.abs();
      complex2.nthRoot(274);
      complex1.multiply(complex3);
      complex7.nthRoot(274);
      complex4.subtractFrom(270.2046592732837);
      complex4.proj();
      complex3.arg();
      Complex.parse("(0.0,1.0)");
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(0.7853981633974483, 1480.81351);
      Complex complex1 = complex0.I.add(complex0);
      complex1.ZERO.add(complex0);
      complex0.getImaginary();
      complex0.acos();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.ZERO.exp();
      complex3.ZERO.subtractFromImaginary(1.0);
      Complex complex4 = complex0.asin();
      complex2.isFinite();
      Complex complex5 = complex0.ZERO.conj();
      Complex complex6 = complex0.cos();
      Complex.ofPolar(1480.81351, 1.0);
      complex4.sin();
      complex6.isFinite();
      complex6.sin();
      Complex complex7 = complex4.divide(0.7853981633974483);
      complex6.acosh();
      complex4.negate();
      complex5.addImaginary(1480.81351);
      Complex complex8 = complex4.subtract(complex7);
      complex8.I.toString();
      complex0.getReal();
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtractFrom(-0.0);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.I.subtract(complex1);
      complex2.ZERO.nthRoot(3);
      complex3.ZERO.toString();
      Complex complex4 = complex3.ZERO.pow((-1284.0));
      Complex complex5 = Complex.ofCartesian((-3651.61737788605), (-3651.61737788605));
      Complex complex6 = complex1.multiplyImaginary(0.871039212443466);
      complex6.ONE.add((-1085.23));
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.ONE.pow(complex0);
      Complex complex9 = Complex.ofCartesian(-0.0, -0.0);
      complex8.I.divide((-1284.0));
      complex9.ZERO.acosh();
      complex0.ONE.toString();
      complex0.isFinite();
      complex1.equals("(0.0,0.0)");
      Complex complex10 = complex4.tan();
      Complex complex11 = complex9.multiply(complex10);
      complex2.ZERO.toString();
      complex3.ZERO.add(0.0);
      complex11.isFinite();
      complex8.cos();
      complex6.exp();
      complex5.cosh();
      complex8.subtract((double) 3);
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(176.05, 0.5);
      Complex complex1 = complex0.add((-2486.0863638198375));
      Complex complex2 = complex1.subtractFrom((-7.5097389567322));
      Complex complex3 = Complex.ofCis(0.0);
      Complex complex4 = complex2.multiply((-1174.6772450304136));
      complex4.addImaginary(1.0);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.acosh();
      complex6.cosh();
      complex1.multiply(complex2);
      Complex complex7 = Complex.ofPolar(4.0, 0.5);
      complex3.pow(complex7);
      complex7.asin();
      complex2.exp();
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1881.6, 1881.6);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.addImaginary(16.0);
      complex1.I.multiplyImaginary(Double.NaN);
      complex2.ONE.cosh();
      complex1.ZERO.subtractFromImaginary(1881.6);
      complex0.ONE.nthRoot((-1028));
      Complex complex3 = Complex.ofCartesian((-3977.3161231594), 1881.6);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ONE.subtract(16.0);
      complex0.I.hashCode();
      complex3.exp();
      Complex complex6 = complex0.subtractImaginary((-2587.9874383044976));
      complex6.I.pow((-2944.826));
      complex6.nthRoot((-1028));
      Complex complex7 = complex3.ZERO.acosh();
      complex3.cosh();
      complex3.isNaN();
      complex3.asinh();
      complex7.tan();
      complex6.pow(complex7);
      complex3.isInfinite();
      complex7.exp();
      complex5.atan();
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(2.409919865102884E-181, 911.15);
      Complex complex1 = Complex.ofCartesian(2.409919865102884E-181, 2.409919865102884E-181);
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex2.ZERO.log10();
      complex0.ONE.cos();
      Complex complex4 = complex3.ZERO.log10();
      Complex complex5 = complex4.ONE.divide(0.0);
      Complex complex6 = complex3.ONE.addImaginary(2.409919865102884E-181);
      Complex complex7 = complex6.subtractFrom((-983.31));
      complex7.ZERO.cosh();
      Complex complex8 = complex3.I.tanh();
      complex0.arg();
      complex2.ONE.toString();
      Complex complex9 = complex8.divide(911.15);
      complex1.I.tan();
      Complex.parse("(1.0,0.0)");
      complex0.norm();
      Complex complex10 = complex1.log();
      Complex complex11 = complex8.divide(complex1);
      complex8.conj();
      Complex complex12 = Complex.ofCartesian(0.0, 1785.1958286);
      Complex complex13 = complex12.I.divide(0.0);
      Complex complex14 = complex10.divide(complex3);
      complex11.pow(complex14);
      Complex complex15 = complex13.subtract(complex2);
      complex15.tan();
      complex5.multiplyImaginary((-1837.65209018002));
      complex4.multiply(0.0);
      complex9.isInfinite();
      Complex complex16 = complex15.asin();
      complex6.multiply(complex8);
      complex16.exp();
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = Complex.ofCis((-1.0));
      Complex complex1 = complex0.subtract((-1.0));
      complex1.I.proj();
      // Undeclared exception!
      try { 
        complex1.I.add((Complex) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      int int0 = 548405248;
      // Undeclared exception!
      complex0.ZERO.nthRoot(548405248);
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 1380.4619659;
      Complex complex0 = Complex.ofCartesian(1380.4619659, 0.0);
      Complex complex1 = complex0.ZERO.tan();
      complex0.abs();
      complex1.ONE.cosh();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiplyImaginary(1380.4619659);
      Complex complex4 = complex3.ZERO.subtract(complex0);
      complex1.acosh();
      complex4.I.toString();
      complex2.log10();
      // Undeclared exception!
      try { 
        Complex.parse("\"bv:");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"\"bv:\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ofPolar(708.0, 745.23015634);
      Complex complex2 = complex1.sinh();
      Complex.ofPolar(0.0, 745.23015634);
      complex1.I.subtractFromImaginary(708.0);
      Complex complex3 = complex1.addImaginary(Double.POSITIVE_INFINITY);
      complex3.multiply(complex0);
      Complex complex4 = complex0.add(complex1);
      complex1.divide(complex4);
      Complex complex5 = complex1.asinh();
      complex5.I.isFinite();
      complex5.divideImaginary(1709.0502);
      complex4.isInfinite();
      Complex complex6 = Complex.ofCartesian(1709.0502, 745.23015634);
      complex5.conj();
      Complex complex7 = complex1.cosh();
      complex7.ONE.add(1709.0502);
      complex4.add(2.0);
      complex2.getImaginary();
      complex6.conj();
      complex6.negate();
      complex6.asin();
      complex5.log10();
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1919.77524895, 0.0);
      Complex complex1 = complex0.I.cos();
      Complex.ofCartesian(1919.77524895, 2.2250738585072014E-308);
      complex1.I.addImaginary(0.0);
      Complex complex2 = Complex.ofCartesian(0.0, 3667.416193328);
      Complex complex3 = complex2.ONE.subtractFromImaginary(259.948318);
      Complex complex4 = complex3.ZERO.log10();
      Complex complex5 = complex4.I.tan();
      complex5.ZERO.log10();
      Complex.ofCartesian(3707.54, 0.0);
      Complex complex6 = Complex.ofCis(0.0);
      complex2.acosh();
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex7.atanh();
      complex8.ONE.subtractFromImaginary(259.948318);
      complex4.acosh();
      complex3.atanh();
      complex6.cos();
      // Undeclared exception!
      try { 
        Complex.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.cos();
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.I.subtractImaginary((-440.04561027049));
      complex2.I.subtractImaginary((-440.04561027049));
      Complex complex3 = Complex.ofPolar((-440.04561027049), (-440.04561027049));
      complex1.sin();
      complex0.multiply(2.0);
      complex3.isNaN();
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(343.00166556044, 343.00166556044);
      complex0.ONE.nthRoot(1079);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.I.divide(complex1);
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex0.log10();
      complex5.multiplyImaginary(343.00166556044);
      complex4.atanh();
      complex4.hashCode();
      Complex.ofCartesian(0.0, 1079);
      complex0.ZERO.divide(0.0);
      Complex.ofCartesian(0.0, (-1622.8585));
      Complex complex6 = complex4.atanh();
      Complex complex7 = complex6.ZERO.divide(complex2);
      complex6.ONE.toString();
      complex1.subtract(complex6);
      complex2.pow(complex4);
      complex6.acosh();
      complex7.subtractImaginary(0.0);
      complex3.subtractImaginary(1971.85);
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.ofCartesian(0.0, 0.0);
      Complex complex1 = complex0.atanh();
      complex0.ONE.add(complex1);
      Complex complex2 = complex1.subtractFromImaginary(0.0);
      Complex complex3 = complex0.asinh();
      Complex complex4 = complex0.add(complex3);
      complex0.I.negate();
      Complex complex5 = complex0.ZERO.tan();
      Complex complex6 = complex0.I.sqrt();
      complex6.ONE.subtract(0.0);
      complex5.ZERO.cosh();
      Complex complex7 = complex0.conj();
      complex4.divide(complex3);
      complex4.toString();
      Complex complex8 = complex1.atanh();
      complex8.log10();
      Complex complex9 = complex7.divide(complex4);
      Complex complex10 = Complex.ofCartesian(0.0, 0.0);
      complex10.I.proj();
      Complex complex11 = Complex.ofCis(0.0);
      Complex complex12 = complex9.subtract(complex11);
      double double1 = 1514.3043498863;
      complex12.I.add(1514.3043498863);
      Complex complex13 = complex7.atanh();
      complex13.isNaN();
      complex2.log();
      // Undeclared exception!
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cannot compute zeroth root
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(3.141592653589793, 3.141592653589793);
      complex0.pow(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.conj();
      complex2.conj();
      Complex complex3 = complex1.divideImaginary((-876.8657));
      complex0.abs();
      Complex complex4 = complex1.multiply(3.141592653589793);
      complex4.I.divideImaginary(3.141592653589793);
      Complex.ofCis((-2402.0));
      Complex complex5 = complex3.I.divideImaginary(80.523509);
      complex5.ZERO.cos();
      Complex complex6 = complex0.sin();
      complex3.arg();
      complex6.sqrt();
      complex0.sinh();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.I.negate();
      complex0.getImaginary();
      Complex complex9 = Complex.ofCis((-876.8657));
      complex3.atan();
      complex9.ZERO.isFinite();
      complex8.atan();
      complex9.multiplyImaginary((-3.141592653589793));
      complex7.hashCode();
      complex2.multiply(80.523509);
      complex9.abs();
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Complex.parse("(qmS%KU");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Expected end delimiter ')' for input \"(qmS%KU\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      // Undeclared exception!
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Complex.parse("'>sb6b2J{RI(5U2,nG!");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"'>sb6b2J{RI(5U2,nG!\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-1543.2), (-180.114196209));
      complex0.asin();
      // Undeclared exception!
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cannot compute zeroth root
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ofCartesian(0.0, 1297.4106636017073);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.divideImaginary(2707.78536);
      Complex complex4 = complex0.negate();
      complex4.ONE.subtractFromImaginary(617.45660489);
      complex2.I.exp();
      Complex complex5 = complex1.ONE.multiply(2824.211232015);
      complex2.ONE.subtractImaginary(1297.4106636017073);
      Complex complex6 = complex3.I.tanh();
      Complex complex7 = complex2.sin();
      Complex complex8 = complex3.cos();
      complex8.exp();
      Complex complex9 = complex3.subtract(2707.78536);
      Complex complex10 = complex6.cosh();
      complex9.subtractFromImaginary(0.0);
      complex7.ONE.subtract(2707.78536);
      complex6.pow(complex5);
      complex7.pow(complex6);
      Complex complex11 = complex9.acos();
      complex9.subtract(complex10);
      complex3.subtractFromImaginary((-626.4510147769244));
      complex11.tan();
      complex4.isFinite();
      complex9.ONE.exp();
      complex11.subtractFrom(0.0);
      complex0.negate();
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log10();
      complex0.I.isFinite();
      complex0.isFinite();
      Complex complex1 = complex0.I.addImaginary(2.2471164185778946E307);
      Complex complex2 = complex0.divide(0.0);
      complex2.sqrt();
      complex2.add(complex0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ONE.tan();
      complex4.ZERO.proj();
      complex4.ZERO.sqrt();
      complex0.abs();
      Complex complex5 = complex1.proj();
      complex5.isFinite();
      // Undeclared exception!
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cannot compute zeroth root
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.nthRoot(12);
      Complex complex1 = Complex.ofCartesian(1.5707963267948966, 1.5707963267948966);
      Complex complex2 = complex0.I.add((double) 12);
      Complex complex3 = complex2.I.multiply((-2139.68));
      complex0.I.conj();
      Complex complex4 = complex3.I.sinh();
      complex0.pow(complex1);
      Complex complex5 = complex1.subtractFrom(12);
      complex0.pow(complex1);
      complex1.ZERO.pow(complex4);
      complex0.sqrt();
      complex5.addImaginary(1.5707963267948966);
      Complex complex6 = complex4.tan();
      complex6.multiply((-4366.359889013005));
      Complex.ofCartesian((-2139.68), 0.0);
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.negate();
      complex1.ONE.sqrt();
      complex2.atan();
      Complex complex3 = complex2.sqrt();
      complex3.ONE.cos();
      complex3.abs();
      Complex complex4 = complex2.acos();
      complex4.conj();
      complex2.ONE.tanh();
      complex1.imag();
      complex1.divide(complex2);
      Complex complex5 = complex3.pow(0.0);
      complex5.subtractFromImaginary(0.0);
      complex0.abs();
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asinh();
      complex1.addImaginary(0.0);
      double double0 = 2267.8776853494;
      Complex complex2 = complex1.ONE.sin();
      int int0 = 0;
      // Undeclared exception!
      try { 
        complex2.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cannot compute zeroth root
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(2124.0, 2124.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.conj();
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex0.proj();
      complex6.ZERO.multiplyImaginary(0.0);
      Complex.ofCartesian(2.0, 1.0);
      Complex complex7 = complex2.cos();
      complex5.conj();
      complex7.getImaginary();
      Object object0 = new Object();
      complex1.equals(object0);
      complex3.log();
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(0.0, 0.0);
      Complex complex1 = Complex.ofCis(0.0);
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex0.subtractFromImaginary(0.0);
      complex4.ZERO.toString();
      Complex complex5 = complex4.atanh();
      Complex complex6 = complex1.subtract(complex5);
      complex6.cosh();
      complex5.I.log10();
      complex6.nthRoot((-321));
      Complex complex7 = complex6.I.pow(0.0);
      complex7.ZERO.multiply((double) (-321));
      Complex complex8 = Complex.ofCis(3000.297528);
      Complex.ofCis((-321));
      Complex complex9 = complex8.I.acosh();
      Complex complex10 = Complex.I;
      Complex complex11 = complex9.I.divide(complex10);
      complex10.ONE.negate();
      complex11.ZERO.divide(0.7071067811865476);
      complex9.ONE.add(complex3);
      Complex complex12 = complex6.multiply(complex8);
      complex12.ONE.multiply(0.0);
      Complex.parse("(0.0,0.0)");
      complex5.pow(complex4);
      Complex complex13 = complex0.negate();
      complex13.ZERO.multiplyImaginary((-943.5708771455));
      complex2.acos();
      complex0.nthRoot((-321));
      complex1.imag();
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conj();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex0.I.proj();
      Complex complex5 = complex0.ONE.tanh();
      Complex complex6 = complex3.cosh();
      complex3.log();
      Complex complex7 = complex6.I.log();
      Complex.ofCartesian((-1508.03), 0.0);
      complex7.I.conj();
      Complex complex8 = complex5.ZERO.add((-1508.03));
      complex8.ZERO.add(0.0);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex4.I.acosh();
      Complex complex11 = complex6.I.multiply(complex9);
      complex11.ONE.add((-1.0));
      complex0.log();
      complex1.getReal();
      complex5.toString();
      complex4.divide(0.0);
      Complex.parse("(0.7615941559557649,0.0)");
      complex9.tan();
      complex5.isNaN();
      complex2.I.log();
      Complex complex12 = complex8.subtractImaginary(3847.9457854019474);
      complex1.pow((-1.0));
      complex2.add(0.0);
      complex10.pow(0.0);
      complex12.multiply(0.0);
      Complex.ofPolar(0.0, 1.5707963267948966);
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ofCis(0.0);
      complex0.ONE.nthRoot(744);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.proj();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.divide(complex1);
      complex4.I.addImaginary((-1688.157352390292));
      complex4.ZERO.toString();
      Complex complex5 = complex0.multiply(complex1);
      complex5.ONE.toString();
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex1.ZERO.sinh();
      Complex complex8 = complex7.ZERO.multiply(0.0);
      Complex complex9 = complex8.ONE.multiply(complex3);
      Complex complex10 = complex5.divideImaginary(744);
      Complex complex11 = Complex.ofCis(3246.9817985024);
      complex11.conj();
      complex11.hashCode();
      complex1.divide(complex11);
      Complex complex12 = Complex.parse("(1.0,0.0)");
      complex3.log();
      Complex complex13 = Complex.ofCis(3246.9817985024);
      complex10.nthRoot(1024);
      complex7.exp();
      complex9.multiply(complex10);
      complex13.abs();
      complex0.add(complex12);
      complex3.asinh();
      complex6.tanh();
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ZERO.cos();
      complex3.ONE.subtractFrom((-2474.1));
      complex3.nthRoot(177);
      complex1.pow(0.0);
      Complex.ofCis(0.0);
      Complex.ofPolar(0.0, 0.0);
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(2272.316, 2272.316);
      Complex complex1 = Complex.ofCartesian((-3386.1243117690124), 2272.316);
      Complex complex2 = complex0.ONE.subtractFromImaginary((-3386.1243117690124));
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex0.I.divide(complex1);
      complex0.isFinite();
      Complex complex4 = complex1.exp();
      complex4.ONE.acosh();
      Complex complex5 = Complex.ofPolar(2272.316, 1.0);
      complex5.abs();
      complex4.subtractImaginary(0.0);
      complex4.log10();
      complex3.sinh();
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-1916.597827), (-1054.68686737));
      Complex complex1 = complex0.ONE.conj();
      Complex complex2 = complex0.log10();
      Complex complex3 = complex0.I.divide((-1916.597827));
      complex3.ZERO.cosh();
      Complex complex4 = complex1.subtract((-1916.597827));
      complex1.ONE.log10();
      complex0.isInfinite();
      complex1.acosh();
      Complex complex5 = complex0.subtractImaginary(578.7563856239187);
      complex4.conj();
      complex2.acosh();
      complex5.nthRoot(2977);
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(2475.37650919, 1814.8);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.equals("");
      complex2.ONE.sin();
      complex0.isInfinite();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.sqrt();
      complex4.sinh();
      Complex complex5 = complex2.add(1814.8);
      Complex complex6 = complex2.divideImaginary(2475.37650919);
      Complex.ofPolar((-2601.1091145675805), 0.0);
      complex6.ZERO.isFinite();
      Complex.ofPolar(2475.37650919, Double.POSITIVE_INFINITY);
      complex6.isFinite();
      complex2.acosh();
      complex3.isNaN();
      complex2.imag();
      Complex complex7 = complex5.pow(complex2);
      complex7.arg();
      complex5.cos();
      complex1.arg();
      complex7.divideImaginary(Double.POSITIVE_INFINITY);
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.imag();
      Complex complex1 = complex0.proj();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex2.ONE.cosh();
      complex4.ONE.log();
      Complex complex5 = complex1.ZERO.multiply(0.0);
      complex5.ZERO.acosh();
      Complex complex6 = complex1.ZERO.cos();
      Complex complex7 = complex2.ONE.acosh();
      complex7.I.proj();
      Complex complex8 = complex1.tan();
      complex8.hashCode();
      complex8.isFinite();
      Complex complex9 = complex3.I.proj();
      complex8.imag();
      Complex complex10 = complex7.tanh();
      complex10.ZERO.divideImaginary(0.0);
      Complex complex11 = complex5.acosh();
      Complex complex12 = complex7.ZERO.pow(1.0);
      complex5.toString();
      Complex.ofPolar(0.0, 1.0);
      complex11.equals(complex7);
      complex5.I.tanh();
      complex5.conj();
      complex3.abs();
      complex2.ZERO.add(complex6);
      Complex.ofPolar(1.543080634815244, 0.0);
      complex12.cosh();
      complex11.tanh();
      complex9.getReal();
      complex6.log();
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.ZERO.tan();
      complex1.ONE.subtract(1.0);
      Complex.ofPolar(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      Complex complex3 = complex0.atanh();
      complex0.I.tanh();
      complex2.subtractFromImaginary(1.0);
      Complex complex4 = complex3.pow(1.0);
      complex4.ZERO.log10();
      Complex complex5 = complex4.atanh();
      Complex complex6 = Complex.ofCis(1.0);
      complex6.I.pow(1.0);
      complex5.ONE.multiply(complex6);
      Complex complex7 = complex3.sqrt();
      complex7.tan();
      complex1.sqrt();
      complex4.divide(3456.719468);
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-1788.81), (-1788.81));
      complex0.asinh();
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.isFinite();
      complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.multiply((-2005.14));
      Complex complex4 = complex2.I.divide((-2005.14));
      Complex complex5 = complex2.add(complex0);
      complex5.ONE.sinh();
      complex0.toString();
      complex5.sinh();
      Complex complex6 = complex0.conj();
      complex6.toString();
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex7.I.log();
      complex1.divide((-2005.14));
      Complex complex9 = complex8.subtractFrom((-2005.14));
      complex1.log();
      complex3.I.add(0.0);
      complex1.acosh();
      complex3.atanh();
      complex4.acosh();
      complex0.log();
      complex8.getReal();
      complex9.getReal();
      complex3.subtractFrom((-2203.4580005));
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.proj();
      Complex complex1 = complex0.subtractFromImaginary((-54.0));
      Complex complex2 = complex0.subtractFrom((-54.0));
      Complex complex3 = complex0.ONE.add((-2260.85014));
      complex3.ZERO.cosh();
      Complex complex4 = complex1.ONE.subtract((-2260.85014));
      complex1.divideImaginary((-4763.343638962));
      Complex complex5 = complex0.divideImaginary((-54.0));
      Complex complex6 = complex5.ONE.add(complex0);
      Complex complex7 = complex6.I.add((-54.0));
      complex7.I.subtract(complex2);
      complex5.I.toString();
      complex0.add(complex3);
      complex3.tanh();
      complex4.cosh();
      Complex.ofCartesian(Double.NEGATIVE_INFINITY, (-2260.85014));
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conj();
      complex0.divide(1.0);
      Complex complex2 = complex1.divide((-190.3));
      Complex complex3 = Complex.ofCis(2.718281828459045);
      complex2.equals(complex3);
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex.ofPolar(3.141592653589793, 3.141592653589793);
      complex1.tan();
      // Undeclared exception!
      try { 
        Complex.parse("j");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"j\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ofCis(2772.7964015955913);
      complex0.I.nthRoot((-1));
      complex0.isNaN();
      Complex complex1 = complex0.asinh();
      complex1.tanh();
      complex1.getReal();
      complex1.subtract((-1922.73));
      Complex complex2 = complex1.atan();
      complex1.sqrt();
      complex1.ZERO.subtractFromImaginary(2772.7964015955913);
      Complex complex3 = complex0.conj();
      complex0.ZERO.proj();
      Complex complex4 = complex3.multiply((-0.5500462942392044));
      complex4.ZERO.cos();
      complex4.ONE.hashCode();
      Complex complex5 = complex4.tanh();
      complex5.subtract((double) (-1));
      complex3.add((-738.64667694));
      complex2.sinh();
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract(0.0);
      // Undeclared exception!
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = Complex.ofPolar(0.0, (-3637.43));
      Complex.ofCartesian((-3637.43), 0.0);
      Complex complex2 = complex0.conj();
      Complex complex3 = complex2.ZERO.log10();
      Complex complex4 = complex0.sqrt();
      complex3.pow(0.0);
      complex4.subtractImaginary((-3637.43));
      Complex complex5 = complex2.divide(0.0);
      complex2.I.negate();
      complex1.ONE.divide(complex3);
      int int0 = 0;
      // Undeclared exception!
      try { 
        complex5.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cannot compute zeroth root
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.toString();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex0.ZERO.subtractImaginary(0.0);
      complex0.getImaginary();
      complex0.norm();
      Complex complex4 = complex1.ZERO.proj();
      Complex complex5 = complex3.multiply(0.0);
      complex3.ZERO.subtractFromImaginary(0.0);
      Complex complex6 = Complex.ofCis(1.0);
      complex6.isFinite();
      Complex complex7 = complex6.tanh();
      complex5.ONE.conj();
      Complex complex8 = complex1.divide(1.0);
      Complex complex9 = complex2.atan();
      Complex.ofCis(0.0);
      complex5.imag();
      Complex complex10 = complex5.acos();
      complex3.conj();
      Complex complex11 = complex3.atanh();
      complex11.ONE.sinh();
      complex10.cos();
      complex2.asin();
      complex4.divide(complex8);
      complex9.abs();
      Complex.ofPolar((-128.60078), 0.0);
      complex9.multiply(complex1);
      Complex complex12 = Complex.ofPolar(0.0, 0.0);
      complex7.subtract(complex12);
      complex4.tanh();
      complex1.divideImaginary(0.0);
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.sqrt();
      complex0.equals(complex2);
      complex2.isInfinite();
      Complex complex3 = complex1.ONE.pow(130.589929);
      Complex.ofCartesian(130.589929, 130.589929);
      complex3.ONE.tanh();
      Complex complex4 = complex1.multiplyImaginary(1584.2881000061764);
      Complex complex5 = Complex.ofCartesian(667.8, 0.0);
      complex2.divide(complex5);
      complex1.tanh();
      complex1.real();
      complex1.arg();
      complex4.I.divideImaginary(1.0);
      Complex complex6 = complex4.multiplyImaginary((-1.0));
      Complex complex7 = Complex.ofPolar(0.0, 93.6);
      Complex complex8 = complex1.add(complex7);
      Complex complex9 = complex8.multiplyImaginary(1584.2881000061764);
      complex5.tanh();
      Complex complex10 = complex9.sqrt();
      complex6.tanh();
      Complex complex11 = complex10.cos();
      complex11.I.log();
      Complex complex12 = complex8.exp();
      complex12.ZERO.log10();
      complex10.sin();
      complex0.subtract(complex6);
      complex5.negate();
      complex5.addImaginary(0.0);
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ofCis(0.0);
      Complex complex1 = complex0.I.subtractFromImaginary((-256.667478629971));
      complex0.I.isFinite();
      complex0.isNaN();
      Complex complex2 = complex1.ZERO.sinh();
      complex2.acosh();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex3.acosh();
      complex3.tanh();
      Complex complex5 = complex0.log10();
      complex4.I.proj();
      complex5.ZERO.proj();
      complex5.ONE.multiply(complex4);
      complex5.I.hashCode();
      Complex complex6 = complex0.acos();
      complex6.ZERO.cosh();
      complex6.ONE.negate();
      Complex complex7 = Complex.ofPolar((-256.667478629971), 0.0);
      complex7.atan();
      complex1.proj();
      // Undeclared exception!
      try { 
        Complex.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.sqrt();
      complex1.ONE.add(complex2);
      Complex complex4 = Complex.ofPolar((-2551.456432481336), (-2551.456432481336));
      complex4.log();
      Complex complex5 = complex0.log10();
      complex5.I.log();
      complex3.ZERO.addImaginary(0.0);
      Complex complex6 = complex1.multiply(0.0);
      complex6.log10();
      complex3.multiply(0.0);
      complex6.subtractFromImaginary((-2551.456432481336));
      Complex.ofPolar(0.0, 0.0);
      complex1.divideImaginary((-2873.66301179));
      Complex complex7 = Complex.ofPolar(0.0, (-2551.456432481336));
      Complex complex8 = complex4.divide(complex7);
      complex1.pow((-1.0));
      complex8.asinh();
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double double0 = 2754.33751960615;
      Complex complex0 = Complex.ofPolar(2754.33751960615, 1416.0);
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.ONE.cosh();
      complex2.log10();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.tan();
      complex4.ZERO.subtract(0.0);
      Complex complex5 = complex3.ZERO.divide(complex1);
      complex5.ZERO.cosh();
      Object object0 = new Object();
      Complex complex6 = complex3.subtractFrom(587.6);
      complex0.equals(object0);
      complex0.I.add(complex6);
      complex3.abs();
      complex0.conj();
      String string0 = null;
      // Undeclared exception!
      try { 
        Complex.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.ONE.log();
      complex2.ONE.divideImaginary((-226.0));
      Complex complex3 = complex1.ZERO.divideImaginary((-226.0));
      complex2.ONE.subtractFrom(861.1);
      // Undeclared exception!
      try { 
        complex3.I.pow((Complex) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(0.0, 408.6366);
      complex0.asinh();
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ofCis((-1.0));
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.ZERO.conj();
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = Complex.I;
      complex0.ZERO.multiply(complex4);
      Complex complex5 = complex3.I.log10();
      Complex complex6 = complex3.ZERO.tan();
      complex6.ONE.divide((-3580.247227));
      Complex.ofPolar((-1.0), 0.0);
      complex0.arg();
      complex1.tan();
      complex2.getImaginary();
      Complex complex7 = complex2.exp();
      complex5.hashCode();
      complex7.conj();
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.subtractFrom((-185.633076089));
      complex1.ZERO.add(127.5278);
      Complex complex2 = Complex.ofCis(127.5278);
      Complex complex3 = complex1.sin();
      Complex.ofCartesian(127.5278, (-185.633076089));
      complex2.getReal();
      Complex complex4 = complex3.subtractFrom((-0.28911050225648527));
      complex3.subtractFrom((-185.633076089));
      Complex complex5 = complex4.proj();
      complex4.ZERO.divide(complex5);
      Complex complex6 = Complex.ofCis(0.0);
      complex6.sin();
      complex2.sin();
      complex6.isInfinite();
      complex4.asin();
      complex1.sinh();
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex1.I.subtractFrom(0.0);
      Complex complex2 = complex1.multiplyImaginary((-637.9));
      Complex complex3 = complex2.ONE.addImaginary(0.0);
      complex3.ONE.subtractImaginary(0.0);
      Complex complex4 = complex0.subtractImaginary((-637.9));
      complex4.I.tan();
      complex0.hashCode();
      Complex complex5 = Complex.I;
      complex5.ZERO.multiplyImaginary((-637.9));
      complex1.divide(complex5);
      complex2.ONE.pow((-637.9));
      Complex complex6 = complex2.cos();
      complex6.sinh();
      Complex complex7 = complex2.pow(complex0);
      complex7.tan();
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(complex1);
      double double0 = (-685.056104072476);
      Complex complex3 = complex1.ZERO.pow((-685.056104072476));
      Complex complex4 = complex3.ZERO.divide(complex0);
      complex0.hashCode();
      complex4.I.divide(complex2);
      Complex complex5 = complex2.cosh();
      complex4.arg();
      complex2.getImaginary();
      Complex complex6 = complex2.conj();
      complex6.ONE.negate();
      complex2.proj();
      complex3.subtractImaginary((-54.0));
      complex1.asinh();
      complex5.subtractFromImaginary((-54.0));
      complex4.I.conj();
      // Undeclared exception!
      try { 
        Complex.parse("");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(0.0, (-1510.203076845698));
      Complex complex1 = Complex.ofCis(0.0);
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.divide(0.0);
      complex0.ONE.divide(0.0);
      complex0.getImaginary();
      Complex complex4 = complex0.tanh();
      complex1.log();
      Complex complex5 = complex2.add(complex3);
      complex4.I.sinh();
      complex5.log10();
      Complex complex6 = complex1.cos();
      complex2.multiplyImaginary(0.0);
      complex4.sqrt();
      Complex.ofCis(2300.897247507);
      complex0.arg();
      complex2.subtract(complex6);
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(2463.5714, 2.718281828459045);
      Complex complex1 = complex0.acosh();
      complex0.getImaginary();
      Complex complex2 = complex1.multiplyImaginary(2.718281828459045);
      Complex.ofCis(Double.NEGATIVE_INFINITY);
      complex2.conj();
      complex1.tan();
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.arg();
      complex0.divideImaginary(0.0);
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(665.1675, 665.1675);
      Complex complex1 = complex0.ONE.multiply((-322.36487));
      complex1.ONE.add(16.0);
      complex0.equals("Z^3 Awb7]YQ}km/j");
      Complex complex2 = complex0.subtractImaginary(665.1675);
      Complex complex3 = complex0.add((-1.0));
      complex3.ONE.negate();
      complex2.ONE.toString();
      complex2.ZERO.pow((-235.9057322027367));
      Complex.ofPolar((-596.2229841951042), (-596.2229841951042));
      complex2.cos();
      complex3.multiplyImaginary(2415.27502988604);
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-45.23), (-45.23));
      Complex complex1 = Complex.ofCis(0.0);
      complex0.I.divide(complex1);
      complex0.getImaginary();
      complex0.isFinite();
      Complex complex2 = Complex.ofCartesian((-45.23), (-45.23));
      complex2.conj();
      complex2.imag();
      complex0.atan();
      complex1.multiply((-45.23));
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-1247.382552206849));
      Complex complex1 = complex0.asinh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.proj();
      Complex complex4 = complex0.cos();
      complex4.I.tanh();
      Complex complex5 = complex3.subtractFromImaginary((-125.996336061));
      Object object0 = new Object();
      complex0.equals(object0);
      complex5.toString();
      complex2.isInfinite();
      complex2.sqrt();
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1.4142135623730951, (-1.0));
      complex0.proj();
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atanh();
      double double0 = (-54.0);
      complex1.divide((-54.0));
      // Undeclared exception!
      try { 
        Complex.parse("sJ#)#<$wg74hrgg");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"sJ#)#<$wg74hrgg\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-1.0));
      complex0.I.negate();
      complex0.ZERO.pow((-1.0));
      complex0.isFinite();
      complex0.tanh();
      complex0.sinh();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cannot compute zeroth root
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.pow(2.2250738585072014E-308);
      complex0.ZERO.nthRoot(4849);
      complex0.toString();
      complex0.acosh();
      complex0.addImaginary(4849);
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-2361.7943812818235), (-2361.7943812818235));
      complex0.norm();
      Complex complex1 = Complex.ofCartesian(1.1156145398908783E7, 0.0);
      Complex complex2 = Complex.ofCis(0.0);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.ZERO.sinh();
      complex4.I.cos();
      Complex complex6 = complex5.ZERO.log10();
      Complex complex7 = complex6.ONE.divide(complex3);
      complex1.atan();
      Complex.ofCis(3147.84995776139);
      complex2.getReal();
      complex7.imag();
      complex4.subtract(0.0);
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ofCis(400.54721);
      Complex complex1 = complex0.acos();
      complex0.ZERO.hashCode();
      complex1.ZERO.multiplyImaginary(0.0);
      Complex complex2 = Complex.ofPolar(400.54721, 400.54721);
      Complex complex3 = complex1.ONE.multiply(complex2);
      complex3.ONE.divideImaginary(0.0);
      complex0.toString();
      Complex complex4 = complex0.divideImaginary(400.54721);
      Complex complex5 = complex4.ZERO.divide(complex1);
      complex5.subtract(0.0);
      Complex.ofCartesian(0.0, 0.0);
      Complex.ofCartesian(0.0, 0.0);
      Complex.ofCartesian(0.0, 1.0);
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(0.0, 0.0);
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex0.ONE.divide(1156.4);
      complex2.sinh();
      Complex complex4 = complex1.ZERO.subtract(complex3);
      complex4.ONE.add(complex3);
      Complex.ofCartesian((-4596.9526303852), 1256.2486060741);
      Complex complex5 = complex0.addImaginary((-4596.9526303852));
      complex5.I.sinh();
      complex0.imag();
      Complex complex6 = complex2.multiply(complex5);
      complex6.ONE.subtract(complex2);
      Complex complex7 = complex5.subtractFromImaginary(3.141592653589793);
      Complex complex8 = complex7.log();
      Complex complex9 = complex3.sinh();
      complex9.ZERO.conj();
      Complex complex10 = complex0.addImaginary(3.141592653589793);
      Complex complex11 = Complex.ofCis(1768.22059538904);
      complex10.add(complex11);
      Complex complex12 = complex8.I.tan();
      complex10.isInfinite();
      complex8.real();
      complex12.abs();
      complex0.tanh();
      complex3.real();
      Complex.ofPolar(8.43383206553671, (-1.0));
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(2485.2440903732463, (-1.0));
      Complex complex1 = complex0.ZERO.multiply(2485.2440903732463);
      Complex complex2 = complex0.log();
      complex0.subtractFromImaginary(2485.2440903732463);
      complex0.ONE.tanh();
      Complex complex3 = complex0.divideImaginary(0.0);
      complex0.addImaginary(2485.2440903732463);
      complex3.arg();
      complex2.atanh();
      complex1.addImaginary(0.0);
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-1802.6781495), 2914.1665587031);
      Complex complex1 = complex0.I.log();
      complex0.ONE.hashCode();
      complex0.subtractImaginary(2914.1665587031);
      complex0.sinh();
      complex1.tanh();
      complex0.add(complex1);
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(0.0, 0.0);
      Complex complex1 = complex0.ZERO.proj();
      Complex complex2 = complex1.I.subtractFromImaginary(455.4959981362);
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.exp();
      complex3.add(complex1);
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cos();
      complex0.norm();
      complex0.imag();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ONE.multiply(complex0);
      complex2.toString();
      complex1.divide(1.0);
      complex0.subtractImaginary(1.0);
      Complex.ofCartesian(0.0, (-805.709531014918));
      Complex complex4 = Complex.ofPolar((-805.709531014918), 343.11);
      complex3.subtract(complex4);
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divideImaginary((-2047.930406574));
      Complex complex2 = complex1.multiply(complex0);
      complex0.ONE.add(complex1);
      complex2.ONE.pow((-1.0));
      Complex complex3 = complex0.tanh();
      complex1.atan();
      complex3.subtract(complex0);
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      Complex complex0 = Complex.ofPolar(0.0, 0.0);
      double double2 = 2575.0;
      Complex complex1 = Complex.ofPolar(2575.0, 2575.0);
      complex0.ONE.sinh();
      complex0.multiply(complex1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cannot compute zeroth root
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ofCis(0.0);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = Complex.ofCis(0.0);
      Complex complex3 = complex0.I.log10();
      Complex complex4 = complex1.ZERO.add((-4239.96));
      complex4.I.hashCode();
      complex0.ONE.multiply(complex1);
      complex0.addImaginary((-2420.6756881399674));
      Complex complex5 = complex3.sin();
      complex5.hashCode();
      complex2.equals((Object) null);
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ofCis(2156.59531758);
      complex0.ONE.log();
      Complex.ofPolar(2156.59531758, 2156.59531758);
      Complex complex1 = complex0.divide(708.0);
      complex1.add(2156.59531758);
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-2285.73), 0.0);
      Complex complex1 = complex0.cos();
      complex1.ONE.log();
      Complex complex2 = complex0.acos();
      complex2.I.isFinite();
      Complex complex3 = complex1.cosh();
      complex2.divide(complex1);
      Complex complex4 = complex1.sqrt();
      complex4.ONE.log();
      Complex complex5 = complex1.subtractFrom(0.0);
      complex0.imag();
      complex1.tanh();
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = Complex.ofCis(880.589);
      Complex complex8 = complex7.subtractImaginary(880.589);
      complex8.acos();
      complex3.add(complex5);
      complex4.cos();
      complex6.arg();
      complex4.subtractFrom(880.589);
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ofCis(955.008527771236);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.sin();
      complex2.ONE.tan();
      Complex.ofCis(955.008527771236);
      complex0.multiply(complex2);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ONE.sqrt();
      complex4.ZERO.sqrt();
      complex1.sin();
      Complex complex5 = complex1.tanh();
      complex5.ZERO.add(1748.0);
      complex0.tanh();
      complex3.divideImaginary((-4875.42922888071));
      complex0.cosh();
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-153.91));
      complex0.acosh();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ofPolar((-734.13548696), (-2406.11848));
      complex2.ZERO.log();
      complex1.log10();
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ofCis((-1275.13984697829));
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex2.ZERO.acosh();
      Complex complex4 = complex3.subtractFrom((-4030.9054524));
      complex0.equals((Object) null);
      complex2.ONE.tan();
      complex0.arg();
      Complex complex5 = complex3.log10();
      complex4.toString();
      complex4.acosh();
      complex1.hashCode();
      complex5.asinh();
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ZERO.tan();
      complex2.ZERO.divideImaginary(0.0);
      Complex complex3 = complex0.pow(2.0);
      complex0.imag();
      complex0.abs();
      complex1.subtract(complex3);
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.imag();
      // Undeclared exception!
      try { 
        Complex.parse("");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-3720.2141653831));
      Complex complex1 = Complex.ofPolar((-2677.6521), 0.0);
      complex0.divide(complex1);
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acosh();
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(0.0, 0.0);
      complex0.acosh();
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Complex.parse("");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Complex.parse("(x,y)");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Could not parse real part 'x' for input \"(x,y)\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atanh();
      complex2.norm();
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex2.ZERO.pow(0.0);
      Complex complex3 = complex2.negate();
      complex3.ONE.subtractFrom(0.0);
      complex1.atanh();
      complex0.log10();
      Complex complex4 = Complex.ofCis(1.5707963267948966);
      complex4.ONE.log10();
      complex4.arg();
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-1541.566905844), (-1541.566905844));
      complex0.getReal();
      Complex complex1 = complex0.log10();
      Complex complex2 = complex0.subtractFrom((-1541.566905844));
      complex2.ZERO.proj();
      complex0.conj();
      complex0.divideImaginary(Double.NaN);
      complex1.isFinite();
      complex0.nthRoot((-882));
  }
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-2225.59374849861));
      Complex complex2 = complex1.ZERO.subtractImaginary((-2225.59374849861));
      complex0.ZERO.log10();
      complex0.toString();
      complex2.asin();
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex0.pow(complex1);
      Complex complex2 = complex0.subtractImaginary(1589.888495560928);
      complex2.I.multiplyImaginary((-284.23));
      Complex.ofCis(-0.0);
      complex2.negate();
      // Undeclared exception!
      try { 
        Complex.parse("");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-2361.667055832), (-2361.667055832));
      complex0.multiply((-2361.667055832));
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtractImaginary((-1289.16));
      complex1.multiply(0.0);
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(228.745, 0.0);
      Complex complex1 = Complex.ofCis(228.745);
      Complex complex2 = complex1.addImaginary(1853.29);
      Complex complex3 = Complex.ofCis((-70.2167253306));
      complex0.ZERO.subtractFrom(0.0);
      Complex complex4 = complex3.ZERO.subtractImaginary(1.5707963267948966);
      complex4.ONE.isFinite();
      Complex complex5 = complex2.divide(complex0);
      complex5.log();
      complex3.tanh();
      complex0.imag();
      complex3.sinh();
      Complex complex6 = Complex.ofCartesian(228.745, 0.0);
      complex6.subtractFromImaginary(1.5707963267948966);
      complex0.toString();
      complex3.getReal();
      complex2.tanh();
      complex4.subtract(complex5);
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.ZERO.subtractFromImaginary(328.83815282);
      complex2.subtractFrom(328.83815282);
      Complex.ofCis(0.0);
      complex3.I.multiplyImaginary((-3121.0));
      Complex.ofCartesian(367.0, 328.83815282);
      Complex complex4 = complex0.subtract((-1587.283200983429));
      complex4.getImaginary();
      complex2.asin();
      complex0.norm();
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.ofCis(0.0);
      complex0.conj();
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.ofCis(1.0);
      Complex complex1 = complex0.proj();
      complex1.I.cos();
      complex0.subtractFromImaginary((-2460.045143));
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtractFromImaginary((-2055.0));
      // Undeclared exception!
      try { 
        Complex.parse("");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(0.0, 0.0);
      complex0.isNaN();
      complex0.hashCode();
      Complex complex1 = complex0.ZERO.divideImaginary(664.294166);
      complex0.equals(":C3P-");
      complex1.subtractFromImaginary(0.0);
      Complex.ofPolar(664.294166, 2.2250738585072014E-308);
      complex1.imag();
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.subtractImaginary(0.0);
      Complex.ofCartesian(0.0, (-2296.0242390333));
      complex1.ZERO.negate();
      complex0.pow(complex1);
  }
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex1.acosh();
      Complex.ofCis(1.0);
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.ofCis(1.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.add(complex0);
      complex1.asinh();
      complex2.pow(1.0);
      complex0.subtract(1.0);
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ofCartesian((-1747.42343), (-1747.42343));
      Complex complex2 = Complex.ONE;
      complex1.ONE.multiply(complex2);
      complex1.sqrt();
      complex0.divide(complex1);
      // Undeclared exception!
      try { 
        Complex.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.ofPolar(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.subtractFrom(0.0);
      complex2.ZERO.conj();
      complex0.ONE.multiplyImaginary((-5182.987101658363));
      Complex complex3 = complex1.sin();
      int int0 = 0;
      // Undeclared exception!
      try { 
        complex3.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cannot compute zeroth root
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex.ofCartesian(0.0, (-2296.0242390333));
      complex1.ZERO.negate();
      complex0.pow(complex1);
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.ofCis(941.99681563);
      complex0.getImaginary();
  }
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        Complex.parse("i,`}Gba:H!0_");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"i,`}Gba:H!0_\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide(0.0);
      Complex complex2 = complex1.subtractImaginary(0.0);
      Complex complex3 = complex1.pow(complex0);
      complex1.cos();
      Complex complex4 = complex0.exp();
      complex4.I.conj();
      complex0.exp();
      Complex complex5 = complex1.sin();
      complex1.ONE.addImaginary(0.0);
      Complex complex6 = complex3.asin();
      complex6.I.multiply(complex3);
      complex2.add(complex4);
      complex5.acos();
      complex1.cosh();
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.conj();
      complex1.ONE.tan();
      Complex complex2 = complex0.subtractFromImaginary((-1.0));
      Complex complex3 = Complex.ofCartesian((-842.70806187), (-1.0));
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex0.I.pow(complex3);
      Complex complex6 = complex5.I.sin();
      complex6.I.proj();
      complex0.sqrt();
      complex5.cosh();
      Complex complex7 = complex5.ZERO.tan();
      complex7.ONE.add(0.0);
      complex4.multiply(complex3);
      Complex.ofPolar((-842.70806187), (-1.0));
      complex2.subtractFrom(2671.7343705194517);
      complex4.log();
      complex6.atan();
      complex2.equals(complex4);
      Complex complex8 = complex5.exp();
      complex8.sqrt();
      Complex complex9 = complex6.subtractFrom(1.7976931348623157E308);
      complex9.real();
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(0.7853981633974483, 1480.81351);
      Complex complex1 = complex0.acosh();
      Complex complex2 = complex1.I.add(complex0);
      complex2.ZERO.add(complex1);
      complex0.getImaginary();
      complex0.acos();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.ZERO.exp();
      complex4.ZERO.subtractFromImaginary(1.0);
      Complex complex5 = complex1.asin();
      complex3.isFinite();
      Complex complex6 = complex0.ZERO.conj();
      Complex complex7 = complex1.cos();
      Complex.ofPolar(1480.81351, 1.0);
      complex5.sin();
      complex7.isFinite();
      complex7.sin();
      Complex complex8 = complex5.divide(0.0);
      complex7.acosh();
      Complex complex9 = complex5.negate();
      complex9.ONE.subtractFrom((-975.1312136267));
      complex9.I.conj();
      complex6.addImaginary(0.0);
      complex5.subtract(complex8);
      // Undeclared exception!
      try { 
        Complex.parse("Expected end delimiter");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"Expected end delimiter\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-1.0));
      complex0.I.negate();
      Complex complex1 = complex0.ZERO.pow((-1.0));
      complex1.subtractFromImaginary(82.7231);
      complex0.isFinite();
      complex0.tanh();
      complex0.sinh();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // cannot compute zeroth root
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.ofCis(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.proj();
      Complex complex3 = complex1.ONE.add(0.0);
      complex3.ZERO.hashCode();
      complex2.I.multiplyImaginary(1383.0);
      Complex.ofPolar(0.0, 1383.0);
      Complex.ofCis(1383.0);
      Complex.ofPolar((-97.64113348), (-97.64113348));
      complex1.isNaN();
      // Undeclared exception!
      try { 
        Complex.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.ZERO.log10();
      Complex complex2 = complex0.I.divideImaginary((-2035.86683288));
      complex2.divideImaginary((-2035.86683288));
      Complex complex3 = Complex.ofPolar((-2035.86683288), (-2035.86683288));
      Complex complex4 = complex2.I.add(complex1);
      Complex complex5 = complex2.ZERO.sqrt();
      complex1.I.subtract((-2035.86683288));
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex1.subtractFrom((-2035.86683288));
      complex4.pow(complex3);
      complex6.multiply((-2035.86683288));
      Complex complex8 = complex7.ZERO.exp();
      complex5.I.acosh();
      Complex complex9 = complex0.divideImaginary(270.2046592732837);
      complex9.ZERO.isFinite();
      complex1.abs();
      complex0.isFinite();
      complex1.sqrt();
      Complex complex10 = Complex.ofCartesian((-4237.74), 2124.0);
      Complex complex11 = complex10.ONE.conj();
      complex11.I.toString();
      Complex.ofCartesian((-2035.86683288), (-1956.247125));
      complex6.abs();
      complex2.nthRoot(274);
      complex4.multiply(complex3);
      complex8.nthRoot(274);
      complex5.subtractFrom(270.2046592732837);
      complex5.proj();
      complex3.arg();
  }
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(5059.7, 0.0);
      Complex complex1 = complex0.proj();
      Complex complex2 = complex1.ZERO.pow(5059.7);
      Complex complex3 = complex0.I.multiply(5059.7);
      Complex complex4 = Complex.ofCartesian(203.3, (-417.373019191));
      complex3.ONE.add(complex4);
      complex0.ZERO.proj();
      complex0.I.tanh();
      complex2.I.subtractImaginary(5059.7);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex2.I.subtractFrom(2124.0);
      Complex complex7 = complex1.cos();
      complex7.I.pow(complex2);
      complex5.pow(5261.3969824441);
      complex7.I.log10();
      Complex complex8 = complex6.cos();
      complex8.I.sinh();
      complex7.toString();
      complex2.pow(2124.0);
  }
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1919.77524895, 0.0);
      Complex complex1 = complex0.I.cos();
      Complex.ofCartesian(1919.77524895, 2.2250738585072014E-308);
      complex1.I.addImaginary(0.0);
      Complex complex2 = Complex.ofCartesian(0.0, 3667.416193328);
      Complex complex3 = complex2.ONE.subtractFromImaginary(3667.416193328);
      Complex complex4 = complex3.ZERO.log10();
      Complex complex5 = complex4.I.tan();
      complex5.ZERO.log10();
      Complex.ofCartesian(3707.54, 0.0);
      Complex complex6 = Complex.ofCis(0.0);
      complex2.acosh();
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex7.atanh();
      complex8.ONE.subtractFromImaginary(1919.77524895);
      complex4.acosh();
      complex3.atanh();
      complex6.cos();
      // Undeclared exception!
      try { 
        Complex.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1881.6, 2.2250738585072014E-308);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.addImaginary(16.0);
      complex1.I.multiplyImaginary(Double.NaN);
      complex2.ONE.cosh();
      complex1.ZERO.subtractFromImaginary(2.2250738585072014E-308);
      complex0.ONE.nthRoot((-1028));
      Complex complex3 = Complex.ofCartesian((-3977.3161231594), 2.2250738585072014E-308);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ONE.subtract(16.0);
      complex0.I.hashCode();
      complex3.exp();
      Complex complex6 = complex0.subtractImaginary((-2587.9874383044976));
      Complex complex7 = complex6.I.pow((-2944.826));
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1881.6, 2.2250738585072014E-308);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.addImaginary(16.0);
      complex1.I.multiplyImaginary(Double.NaN);
      complex2.ONE.cosh();
      complex1.ZERO.subtractFromImaginary(2.2250738585072014E-308);
      complex0.ONE.nthRoot((-1028));
      Complex complex3 = Complex.ofCartesian((-3977.3161231594), 2.2250738585072014E-308);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ONE.subtract(16.0);
      complex0.I.hashCode();
      complex3.exp();
      Complex complex6 = complex0.subtractImaginary((-2587.9874383044976));
      Complex complex7 = complex6.I.pow((-2944.826));
      complex6.nthRoot((-1028));
      Complex complex8 = complex3.ZERO.acosh();
      Complex complex9 = complex3.cosh();
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1881.6, 2.2250738585072014E-308);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.addImaginary(16.0);
      complex1.I.multiplyImaginary(Double.NaN);
      complex2.ONE.cosh();
      complex1.ZERO.subtractFromImaginary(2.2250738585072014E-308);
      complex0.ONE.nthRoot((-1028));
      Complex complex3 = Complex.ofCartesian((-3977.3161231594), 2.2250738585072014E-308);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ONE.subtract(16.0);
      complex0.I.hashCode();
      complex3.exp();
      Complex complex6 = complex0.subtractImaginary((-2587.9874383044976));
      Complex complex7 = complex6.I.pow((-2944.826));
      complex6.nthRoot((-1028));
      Complex complex8 = complex3.ZERO.acosh();
      Complex complex9 = complex3.cosh();
      complex3.isNaN();
      complex3.asinh();
      complex8.tan();
      Complex complex10 = complex6.pow(complex8);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1881.6, 2.2250738585072014E-308);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.addImaginary(16.0);
      complex1.I.multiplyImaginary(Double.NaN);
      complex2.ONE.cosh();
      complex1.ZERO.subtractFromImaginary(2.2250738585072014E-308);
      complex0.ONE.nthRoot((-1028));
      Complex complex3 = Complex.ofCartesian((-3977.3161231594), 2.2250738585072014E-308);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.ONE.subtract(16.0);
      complex0.I.hashCode();
      complex3.exp();
      Complex complex6 = complex0.subtractImaginary((-2587.9874383044976));
      Complex complex7 = complex6.I.pow((-2944.826));
      complex6.nthRoot((-1028));
      Complex complex8 = complex3.ZERO.acosh();
      Complex complex9 = complex3.cosh();
      complex3.isNaN();
      complex3.asinh();
      complex8.tan();
      Complex complex10 = complex6.pow(complex8);
      complex3.isInfinite();
      complex8.exp();
      Complex complex11 = complex5.atan();
      ;
}
