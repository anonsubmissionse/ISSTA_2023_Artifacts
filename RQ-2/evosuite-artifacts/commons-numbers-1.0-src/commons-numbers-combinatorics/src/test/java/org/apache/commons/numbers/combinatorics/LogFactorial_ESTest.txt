 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      assertNotNull(logFactorial0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(21);
      logFactorial0.value(21);
      logFactorial1.withCache(0);
      LogFactorial logFactorial2 = logFactorial0.withCache(620);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(226);
      LogFactorial logFactorial2 = logFactorial1.withCache(0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      double double0 = logFactorial0.value(1338);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      logFactorial0.withCache(0);
      double double0 = logFactorial0.value(1);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        logFactorial0.withCache((-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Number -1 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      int int0 = 3;
      logFactorial0.withCache(3);
      int int1 = (-2132);
      // Undeclared exception!
      try { 
        logFactorial0.value((-2132));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Number -2,132 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      double double0 = logFactorial0.value(2596);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      // Undeclared exception!
      try { 
        logFactorial0.withCache((-560));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Number -560 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(5001);
      double double0 = logFactorial1.value(593);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(9);
      LogFactorial logFactorial2 = logFactorial1.withCache(9);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      // Undeclared exception!
      try { 
        logFactorial0.value((-1990));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Number -1,990 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      double double0 = logFactorial0.value(0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(251);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      // Undeclared exception!
      try { 
        logFactorial0.value((-1211));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Number -1,211 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      // Undeclared exception!
      try { 
        logFactorial0.withCache((-2172));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Number -2,172 is negative
         //
         verifyException("org.apache.commons.numbers.combinatorics.LogFactorial", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      LogFactorial logFactorial1 = logFactorial0.withCache(48);
      logFactorial0.value(48);
      LogFactorial logFactorial2 = logFactorial1.withCache(0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      double double0 = logFactorial0.value(13);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LogFactorial logFactorial0 = LogFactorial.create();
      double double0 = logFactorial0.value(13);
      LogFactorial logFactorial1 = logFactorial0.withCache(13);
      LogFactorial logFactorial2 = logFactorial1.withCache(1493);
      double double1 = logFactorial2.value(13);
      ;
}
