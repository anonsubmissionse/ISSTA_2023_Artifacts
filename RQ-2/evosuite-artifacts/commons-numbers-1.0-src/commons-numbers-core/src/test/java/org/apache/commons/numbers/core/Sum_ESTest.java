/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 20:03:19 GMT 2022
 */

package org.apache.commons.numbers.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.numbers.core.Sum;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Sum_ESTest extends Sum_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Sum sum0 = Sum.create();
      Sum sum1 = Sum.of(1.0);
      Sum sum2 = sum0.add(sum1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[7];
      Sum sum0 = Sum.ofProducts(doubleArray0, doubleArray1);
      assertNotNull(sum0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Sum sum0 = Sum.create();
      Sum sum1 = sum0.addProduct(1531.4233575515, (-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Sum sum0 = Sum.create();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1298.42806955926);
      Sum sum1 = sum0.add(doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (-1298.42806955926);
      doubleArray1[3] = (-1735.11);
      Sum sum2 = sum1.add(doubleArray1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Sum sum0 = Sum.of((-962.8));
      double double0 = sum0.getAsDouble();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        Sum.ofProducts((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.core.Sum", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sum.of((double[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.core.Sum", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Sum sum0 = Sum.create();
      // Undeclared exception!
      try { 
        sum0.addProducts((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.core.Sum", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Sum sum0 = Sum.create();
      // Undeclared exception!
      try { 
        sum0.add((double[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.core.Sum", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Sum sum0 = Sum.create();
      double[] doubleArray0 = new double[4];
      Sum sum1 = sum0.addProducts(doubleArray0, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sum sum0 = Sum.create();
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[2];
      // Undeclared exception!
      try { 
        sum0.addProducts(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 4 != 2
         //
         verifyException("org.apache.commons.numbers.core.Sum", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sum sum0 = Sum.create();
      Sum sum1 = sum0.add(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sum sum0 = Sum.create();
      double double0 = sum0.getAsDouble();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[52];
      doubleArray0[32] = 6.696928794914171E299;
      Sum sum0 = Sum.ofProducts(doubleArray0, doubleArray0);
      double double0 = sum0.getAsDouble();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        Sum.ofProducts(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 3 != 10
         //
         verifyException("org.apache.commons.numbers.core.Sum", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Sum sum0 = Sum.of(doubleArray0);
      assertNotNull(sum0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sum sum0 = Sum.create();
      sum0.accept(0.0);
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sum sum0 = Sum.create();
      // Undeclared exception!
      try { 
        sum0.add((Sum) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.core.Sum", e);
      }
  }
}
