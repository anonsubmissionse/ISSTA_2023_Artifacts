 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = ExtendedPrecision.squareLowUnscaled(2197153.950345831, 2197153.950345831);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow((-936.2371631875933), 6.696928794914171E299, (-936.2371631875933));
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(0.0, (-1.6184630754644558E303), (-1.6184630754644558E303));
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow((-939.92993453), 651.19495644507, 6.696928794914171E299);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(6.696928794914171E299, (-2416.72432995489), 1.0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(46.67337040425585, 0.0, Double.POSITIVE_INFINITY);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = ExtendedPrecision.twoSumLow(0.0, 0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = ExtendedPrecision.twoSumLow(0.0, (-2948.9439618974), 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double double0 = ExtendedPrecision.squareLowUnscaled(0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      double double0 = ExtendedPrecision.squareLowUnscaled(6.696928794914171E299, (-48.783572));
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(3560.0989618974, (-1.0), (-611.155));
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = ExtendedPrecision.isNotNormal(0.0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = ExtendedPrecision.isNotNormal((-619.1901007));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = ExtendedPrecision.highPartUnscaled(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = ExtendedPrecision.highPartUnscaled(193.00044);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = ExtendedPrecision.highPartUnscaled((-661.9200725));
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(6.696928794914171E299, 6.696928794914171E299, 6.696928794914171E299);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow(1.073741824E9, 1.073741824E9, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = ExtendedPrecision.productLow((-1481.78006812), (-1481.78006812), (-1481.78006812));
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = ExtendedPrecision.twoSumLow((-1481.78006812), 4.827483284366341E12, 2197153.950345831);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = ExtendedPrecision.squareLowUnscaled(0.0, 938.395932709);
      ;
}
