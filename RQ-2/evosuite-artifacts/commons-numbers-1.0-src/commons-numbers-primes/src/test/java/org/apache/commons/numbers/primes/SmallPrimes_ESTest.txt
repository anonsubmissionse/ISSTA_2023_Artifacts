 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      List<Integer> list0 = SmallPrimes.trialDivision(1932);
      int int0 = 637;
      List<Integer> list1 = SmallPrimes.trialDivision(637);
      SmallPrimes.millerRabinPrimeTest(25326001);
      SmallPrimes.smallTrialDivision(1932, list1);
      SmallPrimes.boundedTrialDivision(637, 507, list0);
      List<Integer> list2 = SmallPrimes.trialDivision(25326001);
      SmallPrimes.boundedTrialDivision(2556, 2556, list2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.clear();
      SmallPrimes.boundedTrialDivision(637, 21, linkedList0);
      // Undeclared exception!
      try { 
        SmallPrimes.millerRabinPrimeTest((-161));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      List<Integer> list0 = SmallPrimes.trialDivision(3673);
      SmallPrimes.smallTrialDivision(3673, list0);
      SmallPrimes.millerRabinPrimeTest(3673);
      SmallPrimes.boundedTrialDivision(3673, 3673, list0);
      // Undeclared exception!
      try { 
        SmallPrimes.millerRabinPrimeTest((-603));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SmallPrimes.millerRabinPrimeTest(1905);
      SmallPrimes.trialDivision((-69));
      SmallPrimes.millerRabinPrimeTest(1905);
      int int0 = (-1781);
      SmallPrimes.trialDivision((-1781));
      int int1 = (-1);
      // Undeclared exception!
      try { 
        SmallPrimes.millerRabinPrimeTest((-1));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      List<Integer> list0 = SmallPrimes.trialDivision(3331);
      SmallPrimes.smallTrialDivision(3331, list0);
      int int0 = (-1);
      int int1 = 461;
      SmallPrimes.boundedTrialDivision((-1), 461, list0);
      SmallPrimes.boundedTrialDivision((-1), 4525, list0);
      int int2 = 177;
      SmallPrimes.millerRabinPrimeTest(177);
      int int3 = 2902;
      SmallPrimes.boundedTrialDivision(2902, 177, list0);
      int int4 = 0;
      // Undeclared exception!
      SmallPrimes.smallTrialDivision(0, list0);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      List<Integer> list0 = SmallPrimes.trialDivision(1183);
      List<Integer> list1 = SmallPrimes.trialDivision(1183);
      SmallPrimes.boundedTrialDivision(1183, 2015, list1);
      SmallPrimes.millerRabinPrimeTest(2015);
      SmallPrimes.millerRabinPrimeTest(313);
      // Undeclared exception!
      SmallPrimes.smallTrialDivision(0, list0);
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SmallPrimes.millerRabinPrimeTest(4373);
      int int0 = 173;
      List<Integer> list0 = SmallPrimes.trialDivision(173);
      List<Integer> list1 = SmallPrimes.trialDivision(4373);
      SmallPrimes.smallTrialDivision(173, list0);
      int int1 = 1477;
      SmallPrimes.millerRabinPrimeTest(1477);
      SmallPrimes.millerRabinPrimeTest(4373);
      SmallPrimes.smallTrialDivision(173, list1);
      SmallPrimes.millerRabinPrimeTest(1);
      List<Integer> list2 = SmallPrimes.trialDivision((-1785));
      SmallPrimes.boundedTrialDivision((-4380), 0, list1);
      // Undeclared exception!
      SmallPrimes.smallTrialDivision(0, list2);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SmallPrimes.millerRabinPrimeTest(305);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-283));
      Integer integer1 = new Integer((-283));
      linkedList0.remove((Object) integer1);
      Integer.getInteger("wc@xTs[}ub*", (Integer) null);
      Integer integer2 = new Integer((-1401));
      Integer integer3 = new Integer((-283));
      linkedList0.add(integer3);
      linkedList0.add(integer2);
      Integer integer4 = new Integer(3529);
      Integer.getInteger("wc@xTs[}ub*", integer4);
      Integer.divideUnsigned((-1744), 511);
      linkedList0.add(integer0);
      SmallPrimes.smallTrialDivision(511, linkedList0);
      SmallPrimes.millerRabinPrimeTest(3067);
      SmallPrimes.millerRabinPrimeTest(8405020);
      SmallPrimes.trialDivision(511);
      SmallPrimes.trialDivision((-1));
      SmallPrimes.boundedTrialDivision(0, 463, linkedList0);
      // Undeclared exception!
      SmallPrimes.trialDivision(0);
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SmallPrimes.trialDivision(1);
      SmallPrimes.trialDivision(1);
      SmallPrimes.trialDivision(1);
      SmallPrimes.millerRabinPrimeTest(1);
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int int0 = 0;
      List<Integer> list0 = null;
      // Undeclared exception!
      try { 
        SmallPrimes.smallTrialDivision(0, (List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      int int0 = 702;
      List<Integer> list0 = null;
      // Undeclared exception!
      try { 
        SmallPrimes.boundedTrialDivision((-1), 702, (List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.primes.SmallPrimes", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      SmallPrimes.trialDivision(0);
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SmallPrimes.boundedTrialDivision((-6376), (-2029), linkedList0);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      linkedList1.offerFirst((Integer) null);
      SmallPrimes.boundedTrialDivision(1236, 1236, linkedList1);
      SmallPrimes.smallTrialDivision(1236, linkedList0);
      Integer integer0 = new Integer((-492));
      Integer.compare((-101), 1);
      linkedList0.add(integer0);
      SmallPrimes.boundedTrialDivision(1236, 3785, linkedList1);
      SmallPrimes.boundedTrialDivision(2156, 1236, linkedList0);
      SmallPrimes.smallTrialDivision(2156, linkedList0);
      List<Integer> list0 = SmallPrimes.trialDivision(925);
      SmallPrimes.millerRabinPrimeTest(2382);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      SmallPrimes.boundedTrialDivision(1, 2156, linkedList2);
      List<Integer> list1 = SmallPrimes.trialDivision(3785);
      SmallPrimes.smallTrialDivision(925, list0);
      SmallPrimes.boundedTrialDivision(0, 1, linkedList1);
      SmallPrimes.boundedTrialDivision(4873, (-3231), linkedList0);
      SmallPrimes.boundedTrialDivision(1236, 0, list1);
      // Undeclared exception!
      try { 
        SmallPrimes.millerRabinPrimeTest((-3231));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) "Q22^wBq&AHxuL;^ypz");
      linkedList1.add((Object) linkedList0);
      linkedList0.removeAll(linkedList1);
      linkedList0.remove((Object) "Q22^wBq&AHxuL;^ypz");
      // Undeclared exception!
      SmallPrimes.smallTrialDivision(0, linkedList0);
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmallPrimes.millerRabinPrimeTest(806);
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List<Integer> list0 = SmallPrimes.trialDivision((-860));
      SmallPrimes.smallTrialDivision(3823, list0);
      SmallPrimes.boundedTrialDivision(3823, 0, list0);
      List<Integer> list1 = SmallPrimes.trialDivision((-860));
      SmallPrimes.millerRabinPrimeTest(3823);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(list1);
      linkedList0.removeAll(list0);
      SmallPrimes.boundedTrialDivision(1462, 3823, linkedList0);
      SmallPrimes.boundedTrialDivision(3823, 2211, list0);
      SmallPrimes.millerRabinPrimeTest(3823);
      // Undeclared exception!
      try { 
        SmallPrimes.millerRabinPrimeTest(0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Integer> list0 = SmallPrimes.trialDivision((-1));
      SmallPrimes.boundedTrialDivision(0, (-1), list0);
      SmallPrimes.boundedTrialDivision((-1), 0, list0);
      SmallPrimes.smallTrialDivision(3828, list0);
      SmallPrimes.boundedTrialDivision(0, 3828, list0);
      SmallPrimes.boundedTrialDivision(1, (-354), list0);
      SmallPrimes.smallTrialDivision((-1), list0);
      SmallPrimes.millerRabinPrimeTest(1);
      SmallPrimes.boundedTrialDivision(1, 0, list0);
      SmallPrimes.millerRabinPrimeTest(503);
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<Integer> list0 = SmallPrimes.trialDivision((-1985));
      SmallPrimes.boundedTrialDivision(1889, (-1985), list0);
      SmallPrimes.millerRabinPrimeTest(1889);
      SmallPrimes.boundedTrialDivision(1889, 0, list0);
      List<Integer> list1 = SmallPrimes.trialDivision(480);
      SmallPrimes.smallTrialDivision(480, list1);
      SmallPrimes.smallTrialDivision(1229, list0);
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<Integer> list0 = SmallPrimes.trialDivision(491);
      SmallPrimes.trialDivision(491);
      SmallPrimes.smallTrialDivision(711, list0);
      SmallPrimes.millerRabinPrimeTest(477);
      // Undeclared exception!
      SmallPrimes.boundedTrialDivision(711, 25326001, list0);
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Integer> list0 = SmallPrimes.trialDivision(401);
      SmallPrimes.boundedTrialDivision((-1926), (-996), list0);
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmallPrimes.millerRabinPrimeTest(709);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SmallPrimes.boundedTrialDivision(709, 193, linkedList0);
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      SmallPrimes.boundedTrialDivision(1132, 489, linkedList1);
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 46;
      SmallPrimes.millerRabinPrimeTest(46);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(46);
      Integer.compare(1012, 1012);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(46);
      int int1 = SmallPrimes.PRIMES_LAST;
      Integer.max(0, 2);
      Integer.toUnsignedString((-184));
      Integer.toUnsignedString(2);
      linkedList0.push(integer1);
      int int2 = SmallPrimes.PRIMES_LAST;
      // Undeclared exception!
      try { 
        SmallPrimes.millerRabinPrimeTest(0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmallPrimes.millerRabinPrimeTest(4373);
      List<Integer> list0 = SmallPrimes.trialDivision(173);
      List<Integer> list1 = SmallPrimes.trialDivision(4373);
      SmallPrimes.smallTrialDivision(173, list0);
      int int0 = 1477;
      SmallPrimes.millerRabinPrimeTest(1477);
      SmallPrimes.millerRabinPrimeTest(4373);
      SmallPrimes.smallTrialDivision(173, list1);
      SmallPrimes.millerRabinPrimeTest(1);
      List<Integer> list2 = SmallPrimes.trialDivision((-1785));
      SmallPrimes.boundedTrialDivision((-4380), 0, list1);
      Integer integer0 = new Integer((-4380));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SmallPrimes.boundedTrialDivision(1, 486, linkedList0);
      SmallPrimes.millerRabinPrimeTest(3965);
      SmallPrimes.smallTrialDivision(4373, list2);
      SmallPrimes.smallTrialDivision(173, list0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        SmallPrimes.millerRabinPrimeTest(0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(633);
      SmallPrimes.millerRabinPrimeTest(633);
      SmallPrimes.boundedTrialDivision((-1673), 1816, linkedList0);
      // Undeclared exception!
      try { 
        SmallPrimes.millerRabinPrimeTest((-7));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 3331;
      int int1 = 177;
      SmallPrimes.millerRabinPrimeTest(177);
      int int2 = (-3790);
      // Undeclared exception!
      try { 
        SmallPrimes.millerRabinPrimeTest((-3790));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      List<Integer> list0 = SmallPrimes.trialDivision(4717);
      SmallPrimes.smallTrialDivision(4717, list0);
      List<Integer> list1 = SmallPrimes.trialDivision(4717);
      SmallPrimes.smallTrialDivision(4717, list1);
      SmallPrimes.trialDivision(2677);
      SmallPrimes.smallTrialDivision(2677, list1);
      SmallPrimes.trialDivision(2495);
      SmallPrimes.smallTrialDivision(320, list0);
      SmallPrimes.smallTrialDivision(1, list1);
      SmallPrimes.smallTrialDivision(4717, list1);
      int int0 = (-755);
      // Undeclared exception!
      try { 
        SmallPrimes.millerRabinPrimeTest((-755));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
