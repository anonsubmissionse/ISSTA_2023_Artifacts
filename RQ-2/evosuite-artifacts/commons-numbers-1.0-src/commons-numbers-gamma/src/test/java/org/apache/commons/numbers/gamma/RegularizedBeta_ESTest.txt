 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RegularizedBeta.value(0.20432801226943745, 1253.0104022331, 1602.20978);
      RegularizedBeta.value(1253.0104022331, 1253.0104022331, (-1265.6310500641));
      RegularizedBeta.value(0.7956719877305626, 0.7956719877305626, 1.5730667146864778E-175);
      RegularizedBeta.value(1116.02005759, 0.7956719877305626, 0.20432801226943745);
      RegularizedBeta.value(1.280502823881162E-4, (-1626.48828256274), (-352.5));
      RegularizedBeta.value(1602.20978, 1744.5, 463.9);
      RegularizedBeta.value((-1197.8475299958307), (-1512.6472185823), Double.NaN, Double.NaN, (-816));
      RegularizedBeta.value(4043.987, 460.12412624759, 460.12412624759, (-6.439293542825908E-15), (-816));
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RegularizedBeta.value(0.9189385332046727, 0.9189385332046727, 0.0);
      RegularizedBeta.value(0.9189385332046727, (-184.22211114103916), (-184.22211114103916));
      RegularizedBeta.value(0.9996478269464218, 2.5, 6.820161668496171E-10, 0.9996478269464218, 7);
      RegularizedBeta.value(1.0, (-3758.12668), 0.1138367452034943);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RegularizedBeta.value(659.435254904, 1.280502823881162E-4, 659.435254904);
      double double0 = 0.9996478269464218;
      RegularizedBeta.value(0.9996478269464218, 1.5728330277104463E-12, 1.5728330277104463E-12);
      RegularizedBeta.value(0.5000000000062532, 0.676100460882094, 659.435254904);
      int int0 = 1422;
      RegularizedBeta.value((-5786.04486596576), (-3815.8), 1.280502823881162E-4, (-3815.8), 1422);
      int int1 = 3;
      RegularizedBeta.value(3204.534992125476, 1.5728330277104463E-12, 1.0, 1.280502823881162E-4, 3);
      RegularizedBeta.value(0.9996478269464218, (-3815.8), 3204.534992125476, 1.0, 3);
      // Undeclared exception!
      try { 
        RegularizedBeta.value(1.5728330277104463E-12, 0.676100460882094, Double.POSITIVE_INFINITY, (-3535.6118826751294), (-724));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // maximal count ({0}) exceeded
         //
         verifyException("org.apache.commons.numbers.fraction.ContinuedFraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 0.0;
      RegularizedBeta.value(0.0, 0.0, 1139.8790740068544);
      int int0 = 587;
      RegularizedBeta.value(1.0E-14, 4421.755543, 0.9975195621083629, 4421.755543, 587);
      RegularizedBeta.value(4421.755543, (-1200.001), (double) 587, Double.NaN, 587);
      RegularizedBeta.value(709.466, 709.466, 5246.22499184);
      RegularizedBeta.value(Double.NaN, 1004.5, Double.NaN);
      double double1 = Double.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        RegularizedBeta.value(1.0E-14, Double.POSITIVE_INFINITY, 4421.755543);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Continued fraction diverged to NaN for value {0}
         //
         verifyException("org.apache.commons.numbers.fraction.ContinuedFraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = (-971.68);
      RegularizedBeta.value((-971.68), (-971.68), (-971.68));
      double double1 = 0.9995620616714262;
      int int0 = 4;
      RegularizedBeta.value(Double.NaN, 0.9995620616714262, 0.9995620616714262, (-971.68), 4);
      double double2 = 6.8716741130671986E-9;
      double double3 = (-5.952380952380953E-10);
      int int1 = 2146201249;
      RegularizedBeta.value(6.8716741130671986E-9, (-5.952380952380953E-10), 1818.6536662734, 1818.6536662734, 2146201249);
      double double4 = 1673.5836583;
      RegularizedBeta.value(1673.5836583, 2.0, (double) 2146201249);
      double double5 = 0.08333333333333333;
      // Undeclared exception!
      RegularizedBeta.value(0.08333333333333333, 2.0, (double) 2146201249, (-23.629283895076), 2146201249);
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RegularizedBeta.value(0.5, 0.5, 0.5);
      RegularizedBeta.value(0.49999999999999983, (-665.98), 0.5);
      RegularizedBeta.value(0.0, 0.0, 0.0);
      RegularizedBeta.value(0.0, Double.NaN, 0.5);
      RegularizedBeta.value(1865.60813644995, (-2150.550038244635), (-1.643181065367639E-4));
      RegularizedBeta.value(0.49999999999999983, (-223.650486196), Double.NaN);
      RegularizedBeta.value(0.0, 1865.60813644995, Double.NaN, 0.0, 3656);
      RegularizedBeta.value(2.0, Double.NaN, Double.NaN, (-1347.0), 3656);
      RegularizedBeta.value((-412.87), 142.449030679, 2145.9716800252, (-412.87), (-3287));
      RegularizedBeta.value(913.0, (-9.837447530487956E-5), 0.0, (-1827.78821719), 2625);
      RegularizedBeta.value(0.0, Double.NaN, 1.0);
      RegularizedBeta.value(1.0E-14, (-2310.0), (-514.666693));
      RegularizedBeta.value(681.83, (-2399.0498340197246), (-1347.0), 2145.9716800252, 3656);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = 3596.69;
      RegularizedBeta.value(0.0, 3596.69, 0.0);
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      RegularizedBeta.value(0.0, 104.0806354880748, 3596.69, (-3116.78), Integer.MAX_VALUE);
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RegularizedBeta.value(8.441822398385275E-5, 8.441822398385275E-5, 2559.07, 2343.1027, 3760);
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RegularizedBeta.value(0.9189385332046727, 0.9189385332046727, 1.0E-14);
      double double0 = (-1.542460098679661E-20);
      int int0 = 3909;
      // Undeclared exception!
      try { 
        RegularizedBeta.value(0.9189385332046727, 1708.53606176727, 1708.53606176727, (-1.542460098679661E-20), 3909);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // maximal count ({0}) exceeded
         //
         verifyException("org.apache.commons.numbers.fraction.ContinuedFraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RegularizedBeta.value((-1557.9882820893163), 1.0, 921.12, (-481.238634429766), Integer.MAX_VALUE);
      RegularizedBeta.value(1.0, 921.12, (-1557.9882820893163), 0.0, Integer.MAX_VALUE);
      RegularizedBeta.value(0.0, (-138.4100146), (-138.4100146));
      RegularizedBeta.value(1259.8191854650108, (-1168.32821005697), 921.12);
      RegularizedBeta.value(Double.NaN, 1.0, (-1080.6), Double.NaN, 1);
      double double0 = RegularizedBeta.value((double) 1, 2519.01126, 1259.8191854650108);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegularizedBeta.value((-1557.9882820893163), 1.0, 921.12, (-481.238634429766), Integer.MAX_VALUE);
      RegularizedBeta.value(1.0, 921.12, (-1557.9882820893163), 0.0, Integer.MAX_VALUE);
      RegularizedBeta.value(0.0, (-138.4100146), (-138.4100146));
      RegularizedBeta.value(1259.8191854650108, (-1168.32821005697), 921.12);
      RegularizedBeta.value(Double.NaN, 1.0, (-1080.6), Double.NaN, 1);
      double double0 = RegularizedBeta.value((double) 1, 2519.01126, 1259.8191854650108);
      double double1 = RegularizedBeta.value(3392.0, 1.0, 0.0, 0.0, (-2087));
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = RegularizedBeta.value(1.0, 2034.549064239999, 2034.549064239999);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = RegularizedBeta.value(1.0, 2034.549064239999, 2034.549064239999);
      RegularizedBeta.value(1.0, (-940.3590865662), (-940.3590865662));
      RegularizedBeta.value(Double.NaN, Double.NaN, 1.0E-14, 0.0, (-1630));
      RegularizedBeta.value(1.0E-14, 284.26069543, 2034.549064239999);
      RegularizedBeta.value(191.15898, 0.0, 1.0);
      RegularizedBeta.value(2034.549064239999, 191.15898, 0.0);
      double double1 = RegularizedBeta.value(Double.NaN, 36.4321138, (-940.3590865662), Double.NaN, 942);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegularizedBeta.value((-144.603), 0.0, (-144.603));
      double double0 = RegularizedBeta.value(95.67865803356906, 0.0, (-144.603));
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegularizedBeta.value((-144.603), 0.0, (-144.603));
      double double0 = RegularizedBeta.value(95.67865803356906, 0.0, (-144.603));
      double double1 = RegularizedBeta.value(0.0, 3.6899182659531625E-6, 1570.398, 1542.960125672, 13);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 1.0E-14;
      int int0 = (-1342);
      // Undeclared exception!
      try { 
        RegularizedBeta.value(1.0E-14, 1.0E-14, 1.0E-14, 1.0E-14, (-1342));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // maximal count ({0}) exceeded
         //
         verifyException("org.apache.commons.numbers.fraction.ContinuedFraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = RegularizedBeta.value(1.0, 1.0, 1.0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = RegularizedBeta.value(1.0, 1.0, 1.0);
      RegularizedBeta.value(0.0, 1.0, 0.0, (-1.0), Integer.MAX_VALUE);
      RegularizedBeta.value((-1.0), 1.0, 1.0);
      double double1 = RegularizedBeta.value((-511.6905159906381), Double.NaN, 0.0, 1.0, (-490));
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = RegularizedBeta.value(7.936507936507937E-8, 7.936507936507937E-8, 7.936507936507937E-8);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = RegularizedBeta.value(7.936507936507937E-8, 7.936507936507937E-8, 7.936507936507937E-8);
      double double1 = RegularizedBeta.value(508.01945982, 7.936507936507937E-8, Double.NaN, (-1.917526917518546E-13), (-2295));
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = RegularizedBeta.value((-1943.5421770083715), (-1943.5421770083715), 0.0, 1874.0237607902698, 0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = RegularizedBeta.value((-4711.10735123555), Double.NaN, (-5324.42246), Double.NaN, 1);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = RegularizedBeta.value(Double.NaN, 3536.2, 0.0, 0.0, 2);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegularizedBeta.value(879.42630225, 879.42630225, 879.42630225);
      RegularizedBeta.value(Double.NaN, 1715.6255125, Double.NaN);
      double double0 = RegularizedBeta.value(Double.NaN, (-2054.90320361813), 879.42630225);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegularizedBeta.value(879.42630225, 879.42630225, 879.42630225);
      RegularizedBeta.value(Double.NaN, 1715.6255125, Double.NaN);
      double double0 = RegularizedBeta.value(Double.NaN, (-2054.90320361813), 879.42630225);
      double double1 = RegularizedBeta.value(1.0E-14, 5368.4450439399, 1715.6255125);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegularizedBeta.value(0.0, (-1.0), 0.0, 0.0, 0);
      RegularizedBeta.value((double) 0, (-1.0), 0.0);
      double double0 = RegularizedBeta.value(851.9, (-1019.7497), 640.47732832487, 0.0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RegularizedBeta.value(1.0, 1.0, (-1427.680685688), (-1427.680685688), 2053);
      double double0 = RegularizedBeta.value((-1.0), (double) 2053, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = RegularizedBeta.value(4.652362892704858E-5, 4.652362892704858E-5, 73.4364);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = RegularizedBeta.value(1.0, 1.0, 1.0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = RegularizedBeta.value(1.0, 1.0, 1.0);
      double double1 = RegularizedBeta.value(1.0, 0.0, 1388.4778767467676);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = RegularizedBeta.value(0.0, 0.0, 0.0, (-1409.98), (-717));
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = RegularizedBeta.value(1134.0, (-1416.6), (-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = RegularizedBeta.value(1992.4476498903102, 1992.4476498903102, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = RegularizedBeta.value((-1.0), 0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = RegularizedBeta.value(3.399464998481189E-5, 3.399464998481189E-5, 3.399464998481189E-5);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = RegularizedBeta.value((-2933.22), (-2933.22), (-2933.22));
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 1.280502823881162E-4;
      int int0 = 1345;
      RegularizedBeta.value((-1117.7098567909225), (-1117.7098567909225), (double) 1345);
      // Undeclared exception!
      try { 
        RegularizedBeta.value(1.280502823881162E-4, 1.280502823881162E-4, Double.POSITIVE_INFINITY, (double) 1345, 1345);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Continued fraction diverged to NaN for value {0}
         //
         verifyException("org.apache.commons.numbers.fraction.ContinuedFraction", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RegularizedBeta.value((double) 1371898260, (double) 1371898260, (double) 1371898260);
      RegularizedBeta.value((-16.827733105534673), Double.NaN, (double) 1371898260, (-16.827733105534673), 1371898260);
      RegularizedBeta.value((-16.827733105534673), (-16.827733105534673), Double.NaN);
      double double0 = RegularizedBeta.value(Double.NaN, Double.NaN, Double.NaN, (double) 1371898260, 1371898260);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = RegularizedBeta.value(0.92369523371, 0.92369523371, (-179.2344384225));
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = RegularizedBeta.value(0.92369523371, 0.92369523371, (-179.2344384225));
      RegularizedBeta.value(0.92369523371, (-179.2344384225), (-179.2344384225));
      double double1 = RegularizedBeta.value(0.92369523371, 0.92369523371, 0.92369523371);
      ;
}
