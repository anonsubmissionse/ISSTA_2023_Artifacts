 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(3463.98137620781, 3463.98137620781, (-2490.6213902602), (-2490.6213902602));
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Slerp slerp0 = new Slerp(quaternion1, quaternion0);
      Quaternion quaternion2 = slerp0.apply(3463.98137620781);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(3463.98137620781, 3463.98137620781, (-2490.6213902602), (-2490.6213902602));
      Slerp slerp0 = new Slerp(quaternion0, quaternion0);
      Quaternion quaternion1 = slerp0.apply((-2490.6213902602));
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Slerp slerp0 = new Slerp(quaternion0, quaternion0);
      Quaternion quaternion1 = slerp0.apply(9.094370252694);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Slerp slerp0 = new Slerp(quaternion0, quaternion0);
      Quaternion quaternion1 = slerp0.apply(9.094370252694);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Slerp slerp0 = null;
      try {
        slerp0 = new Slerp((Quaternion) null, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Slerp", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, 0.0, 0.0, 0.0);
      Slerp slerp0 = null;
      try {
        slerp0 = new Slerp(quaternion0, quaternion0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Slerp slerp0 = new Slerp(quaternion0, quaternion0);
      Quaternion quaternion1 = slerp0.apply(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Slerp slerp0 = new Slerp(quaternion0, quaternion0);
      Quaternion quaternion1 = slerp0.apply(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.ONE;
      Slerp slerp0 = new Slerp(quaternion1, quaternion0);
      Quaternion quaternion2 = slerp0.apply((-3963.5402174500628));
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Slerp slerp0 = new Slerp(quaternion0, quaternion0);
      // Undeclared exception!
      try { 
        slerp0.apply(Double.NaN);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
