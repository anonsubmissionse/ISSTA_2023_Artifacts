 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.parse("d|5=/H[<qkh");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Expected start string: [
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      boolean boolean0 = quaternion0.isPure(0.0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.divide(0.0);
      double double0 = quaternion0.dot(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.divide(0.0);
      double double0 = quaternion0.dot(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.divide(0.0);
      double double0 = quaternion0.dot(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.divide(0.0);
      double double0 = quaternion0.dot(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.divide(0.0);
      double double0 = quaternion0.dot(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        Quaternion.of((-3361.573832614), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Size of array must be 3
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.of(-0.0, (-118.4363348), -0.0, (-118.4363348));
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.of(-0.0, (-118.4363348), -0.0, (-118.4363348));
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.of(-0.0, (-118.4363348), -0.0, (-118.4363348));
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.of(-0.0, (-118.4363348), -0.0, (-118.4363348));
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.of(-0.0, (-118.4363348), -0.0, (-118.4363348));
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.of(-0.0, (-118.4363348), -0.0, (-118.4363348));
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.of(-0.0, (-118.4363348), -0.0, (-118.4363348));
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply(1354.11);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply(1354.11);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply(1354.11);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply(1354.11);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply(1354.11);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply(1354.11);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply(1354.11);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply(1354.11);
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.ONE;
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.ONE;
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.ONE;
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.ONE;
      Quaternion quaternion2 = Quaternion.subtract(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.ONE;
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.ONE;
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.ONE;
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.ONE;
      Quaternion quaternion2 = Quaternion.subtract(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1.48644365380068;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = quaternion0.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1.48644365380068;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = quaternion0.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1.48644365380068;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = quaternion0.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1.48644365380068;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = quaternion0.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1.48644365380068;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = quaternion0.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1.48644365380068;
      Quaternion quaternion1 = Quaternion.of(doubleArray0);
      Quaternion quaternion2 = quaternion0.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.add(quaternion0);
      Quaternion quaternion2 = quaternion1.subtract(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.add(quaternion0);
      Quaternion quaternion2 = quaternion1.subtract(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.add(quaternion0);
      Quaternion quaternion2 = quaternion1.subtract(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.add(quaternion0);
      Quaternion quaternion2 = quaternion1.subtract(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.add(quaternion0);
      Quaternion quaternion2 = quaternion1.subtract(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.add(quaternion0);
      Quaternion quaternion2 = quaternion1.subtract(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = quaternion0.J.add(quaternion0);
      Quaternion quaternion2 = quaternion1.subtract(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.multiply(1100.04260545259);
      Quaternion quaternion3 = quaternion2.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.multiply(1100.04260545259);
      Quaternion quaternion3 = quaternion2.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.multiply(1100.04260545259);
      Quaternion quaternion3 = quaternion2.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.multiply(1100.04260545259);
      Quaternion quaternion3 = quaternion2.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.multiply(1100.04260545259);
      Quaternion quaternion3 = quaternion2.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.multiply(1100.04260545259);
      Quaternion quaternion3 = quaternion2.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.multiply(1100.04260545259);
      Quaternion quaternion3 = quaternion2.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.multiply(1100.04260545259);
      Quaternion quaternion3 = quaternion2.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.multiply(1100.04260545259);
      Quaternion quaternion3 = quaternion2.subtract(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[0.0 0.0 1.0 0.0]");
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[0.0 0.0 1.0 0.0]");
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[0.0 0.0 1.0 0.0]");
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[0.0 0.0 1.0 0.0]");
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[-4315.30240731 -4315.30240731 -2253.5926053393355 -2253.5926053393355]");
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[-4315.30240731 -4315.30240731 -2253.5926053393355 -2253.5926053393355]");
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[-4315.30240731 -4315.30240731 -2253.5926053393355 -2253.5926053393355]");
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[-4315.30240731 -4315.30240731 -2253.5926053393355 -2253.5926053393355]");
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1004.3305498944);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1004.3305498944);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1004.3305498944);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1004.3305498944);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3566.234);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3566.234);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3566.234);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3566.234);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3637.49;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3637.49;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3637.49;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3637.49;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.NaN;
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.NaN;
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.NaN;
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = Double.NaN;
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1004.3305498944);
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1004.3305498944);
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1004.3305498944);
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1004.3305498944);
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.0;
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.0;
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.0;
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.0;
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3566.234);
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3566.234);
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3566.234);
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-3566.234);
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3637.49;
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3637.49;
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3637.49;
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3637.49;
      Quaternion quaternion0 = Quaternion.of(5043610.688722, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2976.30989157503);
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2976.30989157503);
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2976.30989157503);
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2976.30989157503);
      Quaternion quaternion0 = Quaternion.of(Double.NaN, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = Quaternion.of(-0.0, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = Quaternion.of(-0.0, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = Quaternion.of(-0.0, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = Quaternion.of(-0.0, doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = Quaternion.of((-1.0), doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = Quaternion.of((-1.0), doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = Quaternion.of((-1.0), doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Quaternion quaternion0 = Quaternion.of((-1.0), doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.ONE.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.normSq();
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.normSq();
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.normSq();
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.normSq();
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.normSq();
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.norm();
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.norm();
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.norm();
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.norm();
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.norm();
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.norm();
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1.0, 0.0, 0.0, 0.0);
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = quaternion1.norm();
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(Double.NaN, Double.NaN, Double.NaN, 0.0);
      Quaternion quaternion1 = quaternion0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(Double.NaN, Double.NaN, Double.NaN, 0.0);
      Quaternion quaternion1 = quaternion0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(Double.NaN, Double.NaN, Double.NaN, 0.0);
      Quaternion quaternion1 = quaternion0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(Double.NaN, Double.NaN, Double.NaN, 0.0);
      Quaternion quaternion1 = quaternion0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(Double.NaN, Double.NaN, Double.NaN, 0.0);
      Quaternion quaternion1 = quaternion0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion2 = quaternion1.inverse();
      Quaternion quaternion3 = Quaternion.multiply(quaternion2, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion2 = quaternion1.inverse();
      Quaternion quaternion3 = Quaternion.multiply(quaternion2, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.multiply(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.multiply(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.multiply(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.multiply(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.multiply(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.I;
      Quaternion quaternion2 = Quaternion.multiply(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.I;
      Quaternion quaternion2 = Quaternion.multiply(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.I;
      Quaternion quaternion2 = Quaternion.multiply(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.I;
      Quaternion quaternion2 = Quaternion.multiply(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1204.5, 1204.5, (-144.672349), 1204.5);
      Quaternion quaternion1 = Quaternion.of((-144.672349), 1.0, (-2424.0), (-144.672349));
      Quaternion quaternion2 = quaternion0.multiply(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1204.5, 1204.5, (-144.672349), 1204.5);
      Quaternion quaternion1 = Quaternion.of((-144.672349), 1.0, (-2424.0), (-144.672349));
      Quaternion quaternion2 = quaternion0.multiply(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1204.5, 1204.5, (-144.672349), 1204.5);
      Quaternion quaternion1 = Quaternion.of((-144.672349), 1.0, (-2424.0), (-144.672349));
      Quaternion quaternion2 = quaternion0.multiply(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1204.5, 1204.5, (-144.672349), 1204.5);
      Quaternion quaternion1 = Quaternion.of((-144.672349), 1.0, (-2424.0), (-144.672349));
      Quaternion quaternion2 = quaternion0.multiply(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1204.5, 1204.5, (-144.672349), 1204.5);
      Quaternion quaternion1 = quaternion0.multiply(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1204.5, 1204.5, (-144.672349), 1204.5);
      Quaternion quaternion1 = quaternion0.multiply(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1204.5, 1204.5, (-144.672349), 1204.5);
      Quaternion quaternion1 = quaternion0.multiply(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1204.5, 1204.5, (-144.672349), 1204.5);
      Quaternion quaternion1 = quaternion0.multiply(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.of(Double.NaN, Double.NaN, Double.NaN, Double.NaN);
      Quaternion quaternion2 = quaternion0.J.multiply(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion0.J.multiply(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion0.J.multiply(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion0.J.multiply(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion0.J.multiply(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.K.multiply((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.K.multiply((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.K.multiply((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.K.multiply((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1274.3769715917, 1274.3769715917, 1.0, 0.0);
      Quaternion quaternion1 = quaternion0.I.multiply((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1274.3769715917, 1274.3769715917, 1.0, 0.0);
      Quaternion quaternion1 = quaternion0.I.multiply((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1274.3769715917, 1274.3769715917, 1.0, 0.0);
      Quaternion quaternion1 = quaternion0.I.multiply((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1274.3769715917, 1274.3769715917, 1.0, 0.0);
      Quaternion quaternion1 = quaternion0.I.multiply((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1274.3769715917, 1274.3769715917, 1.0, 0.0);
      Quaternion quaternion1 = quaternion0.I.multiply((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(1274.3769715917, 1274.3769715917, 1.0, 0.0);
      Quaternion quaternion1 = quaternion0.I.multiply((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2223.3221, 1.0, 1.0, 2223.3221);
      Quaternion quaternion1 = quaternion0.multiply(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2223.3221, 1.0, 1.0, 2223.3221);
      Quaternion quaternion1 = quaternion0.multiply(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2223.3221, 1.0, 1.0, 2223.3221);
      Quaternion quaternion1 = quaternion0.multiply(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2223.3221, 1.0, 1.0, 2223.3221);
      Quaternion quaternion1 = quaternion0.multiply(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      boolean boolean0 = quaternion0.ZERO.isUnit((-3255.6511124785));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      double double0 = quaternion0.getZ();
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, (-1.0), 0.0, (-1.0));
      double double0 = quaternion0.getZ();
      ;
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, (-1.0), 0.0, (-1.0));
      double double0 = quaternion0.getZ();
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, (-1.0), 0.0, (-1.0));
      double double0 = quaternion0.getZ();
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, (-1.0), 0.0, (-1.0));
      double double0 = quaternion0.getZ();
      ;
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      double double0 = quaternion0.getY();
      ;
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-2352.92551877), (-2352.92551877), (-2352.92551877), (-2352.92551877));
      double double0 = quaternion0.getY();
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-2352.92551877), (-2352.92551877), (-2352.92551877), (-2352.92551877));
      double double0 = quaternion0.getY();
      ;
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-2352.92551877), (-2352.92551877), (-2352.92551877), (-2352.92551877));
      double double0 = quaternion0.getY();
      ;
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-2352.92551877), (-2352.92551877), (-2352.92551877), (-2352.92551877));
      double double0 = quaternion0.getY();
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = quaternion1.getX();
      ;
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = quaternion1.getX();
      ;
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = quaternion1.getX();
      ;
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = quaternion1.getX();
      ;
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = quaternion1.getX();
      ;
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = quaternion1.getX();
      ;
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = quaternion1.getX();
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1.0), (-1.0), 1588.019, 1588.019);
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = quaternion1.getX();
      ;
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      double double0 = quaternion0.getX();
      ;
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      double double0 = quaternion0.getX();
      ;
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      double double0 = quaternion0.getX();
      ;
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      double double0 = quaternion0.getX();
      ;
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      double double0 = quaternion0.getW();
      ;
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      double double0 = quaternion0.getW();
      ;
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      double double0 = quaternion0.getW();
      ;
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      double double0 = quaternion0.getW();
      ;
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      double double0 = quaternion0.getW();
      ;
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      double double0 = quaternion0.getW();
      ;
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      double double0 = quaternion0.getW();
      ;
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      double double0 = quaternion0.getW();
      ;
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      double double0 = quaternion0.getScalarPart();
      ;
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-133.12593), 1.0, 1.0, 1147.677629778);
      double double0 = quaternion0.getScalarPart();
      ;
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-133.12593), 1.0, 1.0, 1147.677629778);
      double double0 = quaternion0.getScalarPart();
      ;
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-133.12593), 1.0, 1.0, 1147.677629778);
      double double0 = quaternion0.getScalarPart();
      ;
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-133.12593), 1.0, 1.0, 1147.677629778);
      double double0 = quaternion0.getScalarPart();
      ;
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = Quaternion.dot(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = Quaternion.dot(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = Quaternion.dot(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = Quaternion.dot(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      double double0 = Quaternion.dot(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = Quaternion.dot(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = Quaternion.dot(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = Quaternion.dot(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      double double0 = Quaternion.dot(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      double double0 = quaternion1.dot(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      double double0 = quaternion1.dot(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1387.91411), 5279.96, 4671.9141656, (-4715.140694012482));
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1.0, 4671.9141656);
      double double0 = quaternion1.dot(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1387.91411), 5279.96, 4671.9141656, (-4715.140694012482));
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1.0, 4671.9141656);
      double double0 = quaternion1.dot(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1387.91411), 5279.96, 4671.9141656, (-4715.140694012482));
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1.0, 4671.9141656);
      double double0 = quaternion1.dot(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1387.91411), 5279.96, 4671.9141656, (-4715.140694012482));
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1.0, 4671.9141656);
      double double0 = quaternion1.dot(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-1387.91411), 5279.96, 4671.9141656, (-4715.140694012482));
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1.0, 4671.9141656);
      double double0 = quaternion1.dot(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.divide(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.divide(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.divide(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.divide(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.divide(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.divide(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.divide(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.divide(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = quaternion0.divide(1.48644365380068);
      ;
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = quaternion0.divide(1.48644365380068);
      ;
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = quaternion0.divide(1.48644365380068);
      ;
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = quaternion0.divide(1.48644365380068);
      ;
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = quaternion0.divide(1.48644365380068);
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = quaternion0.divide(1.48644365380068);
      ;
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = quaternion0.divide(1.48644365380068);
      ;
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-318.138773);
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      Quaternion quaternion1 = quaternion0.divide(1.48644365380068);
      ;
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.divide((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.divide((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.divide((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.divide((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = quaternion0.divide(0.0);
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = quaternion0.divide(0.0);
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2437.46, 1100.04260545259, 1100.04260545259, 1100.04260545259);
      Quaternion quaternion1 = quaternion0.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2437.46, 1100.04260545259, 1100.04260545259, 1100.04260545259);
      Quaternion quaternion1 = quaternion0.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2437.46, 1100.04260545259, 1100.04260545259, 1100.04260545259);
      Quaternion quaternion1 = quaternion0.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2437.46, 1100.04260545259, 1100.04260545259, 1100.04260545259);
      Quaternion quaternion1 = quaternion0.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2437.46, 1100.04260545259, 1100.04260545259, 1100.04260545259);
      Quaternion quaternion1 = quaternion0.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2437.46, 1100.04260545259, 1100.04260545259, 1100.04260545259);
      Quaternion quaternion1 = quaternion0.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2437.46, 1100.04260545259, 1100.04260545259, 1100.04260545259);
      Quaternion quaternion1 = quaternion0.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(2437.46, 1100.04260545259, 1100.04260545259, 1100.04260545259);
      Quaternion quaternion1 = quaternion0.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.negate();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.J.multiply((-2039.0));
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.add(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.add(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.add(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.multiply(quaternion0, quaternion0);
      Quaternion quaternion2 = Quaternion.add(quaternion0, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1039.4707027508, (-1587.21524));
      Quaternion quaternion2 = quaternion1.add(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1039.4707027508, (-1587.21524));
      Quaternion quaternion2 = quaternion1.add(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1039.4707027508, (-1587.21524));
      Quaternion quaternion2 = quaternion1.add(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1039.4707027508, (-1587.21524));
      Quaternion quaternion2 = quaternion1.add(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.of(0.0, 0.0, 1039.4707027508, (-1587.21524));
      Quaternion quaternion2 = quaternion1.add(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.of((-1018.669156), 0.0, (-1018.669156), Double.NaN);
      Quaternion quaternion2 = quaternion0.I.add(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.of((-1018.669156), 0.0, (-1018.669156), Double.NaN);
      Quaternion quaternion2 = quaternion0.I.add(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.of((-1018.669156), 0.0, (-1018.669156), Double.NaN);
      Quaternion quaternion2 = quaternion0.I.add(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.of((-1018.669156), 0.0, (-1018.669156), Double.NaN);
      Quaternion quaternion2 = quaternion0.I.add(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.of((-1018.669156), 0.0, (-1018.669156), Double.NaN);
      Quaternion quaternion2 = quaternion0.I.add(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.of((-1018.669156), 0.0, (-1018.669156), Double.NaN);
      Quaternion quaternion2 = quaternion0.I.add(quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = quaternion0.I.add(quaternion0);
      Quaternion quaternion2 = quaternion0.K.subtract(quaternion1);
      Quaternion quaternion3 = quaternion0.K.add(quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = quaternion0.I.add(quaternion0);
      Quaternion quaternion2 = quaternion0.K.subtract(quaternion1);
      Quaternion quaternion3 = quaternion0.K.add(quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = quaternion0.I.add(quaternion0);
      Quaternion quaternion2 = quaternion0.K.subtract(quaternion1);
      Quaternion quaternion3 = quaternion0.K.add(quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = quaternion0.I.add(quaternion0);
      Quaternion quaternion2 = quaternion0.K.subtract(quaternion1);
      Quaternion quaternion3 = quaternion0.K.add(quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.add(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.add(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.add(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.add(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.subtract((Quaternion) null, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      // Undeclared exception!
      try { 
        quaternion0.subtract((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.of((double[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        Quaternion.of(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Size of array must be 3
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.of(1102.3785626691, (double[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.multiply((Quaternion) null, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      // Undeclared exception!
      try { 
        quaternion0.I.multiply((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      // Undeclared exception!
      try { 
        quaternion0.equals((Quaternion) null, 0.0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.dot((Quaternion) null, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      // Undeclared exception!
      try { 
        quaternion0.dot((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.add((Quaternion) null, (Quaternion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      // Undeclared exception!
      try { 
        quaternion0.add((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.conjugate();
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.conjugate();
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.conjugate();
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.conjugate();
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.conjugate();
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.conjugate();
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.conjugate();
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.conjugate();
      Quaternion quaternion2 = quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.K.negate();
      quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.K.negate();
      quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.K.negate();
      quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.K.negate();
      quaternion1.negate();
      ;
}
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.divide((-1978.502878));
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.divide((-1978.502878));
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.divide((-1978.502878));
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.divide((-1978.502878));
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.divide((-1978.502878));
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.divide((-1978.502878));
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.divide((-1978.502878));
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.divide((-1978.502878));
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      // Undeclared exception!
      try { 
        quaternion0.ZERO.normalize();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      double double0 = Quaternion.dot(quaternion0, quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      double double0 = quaternion0.getW();
      ;
}
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      double double0 = quaternion0.J.norm();
      ;
}
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.parse("[");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Expected end string: ]
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[5456.8 5456.8 0.0 5456.8]");
      ;
}
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[5456.8 5456.8 0.0 5456.8]");
      ;
}
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[5456.8 5456.8 0.0 5456.8]");
      ;
}
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.parse("[5456.8 5456.8 0.0 5456.8]");
      ;
}
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(Double.NaN, Double.NaN, Double.NaN, Double.NaN);
      // Undeclared exception!
      try { 
        quaternion0.inverse();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.inverse();
      Quaternion quaternion2 = Quaternion.add(quaternion1, quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.I.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.I.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.I.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.I.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.I.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.I.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.I.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      Quaternion quaternion1 = quaternion0.I.inverse();
      Quaternion quaternion2 = quaternion1.conjugate();
      ;
}
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.ONE.negate();
      Quaternion quaternion2 = quaternion1.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.ONE.negate();
      Quaternion quaternion2 = quaternion1.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.ONE.negate();
      Quaternion quaternion2 = quaternion1.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.ONE.negate();
      Quaternion quaternion2 = quaternion1.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.ONE.negate();
      Quaternion quaternion2 = quaternion1.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.ONE.negate();
      Quaternion quaternion2 = quaternion1.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.ONE.negate();
      Quaternion quaternion2 = quaternion1.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.ONE.negate();
      Quaternion quaternion2 = quaternion1.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-460.4283906271185), (-460.4283906271185), 0.0, (-460.4283906271185));
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = quaternion0.I.negate();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      boolean boolean0 = quaternion0.isPure(1113.3168320847305);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      boolean boolean0 = quaternion0.isPure(Double.NaN);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.of(2808.795978798271, 2808.795978798271, 2808.795978798271, 3036.8025552);
      boolean boolean0 = quaternion0.I.equals(quaternion1, 2808.795978798271);
      ;
}
 @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.of(2808.795978798271, 2808.795978798271, 2808.795978798271, 3036.8025552);
      boolean boolean0 = quaternion0.I.equals(quaternion1, 2808.795978798271);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.of(2808.795978798271, 2808.795978798271, 2808.795978798271, 3036.8025552);
      boolean boolean0 = quaternion0.I.equals(quaternion1, 2808.795978798271);
      ;
}
 @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.of(2808.795978798271, 2808.795978798271, 2808.795978798271, 3036.8025552);
      boolean boolean0 = quaternion0.I.equals(quaternion1, 2808.795978798271);
      ;
}
 @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      Quaternion quaternion1 = Quaternion.of(2808.795978798271, 2808.795978798271, 2808.795978798271, 3036.8025552);
      boolean boolean0 = quaternion0.I.equals(quaternion1, 2808.795978798271);
      ;
}
 @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      boolean boolean0 = quaternion1.equals(quaternion0, (-1395.475109122607));
      ;
}
 @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      boolean boolean0 = quaternion1.equals(quaternion0, (-1395.475109122607));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      boolean boolean0 = quaternion1.equals(quaternion0, (-1395.475109122607));
      ;
}
 @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      boolean boolean0 = quaternion1.equals(quaternion0, (-1395.475109122607));
      ;
}
 @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      boolean boolean0 = quaternion1.equals(quaternion0, (-1395.475109122607));
      ;
}
 @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.I.negate();
      boolean boolean0 = quaternion0.K.equals(quaternion1, Double.NaN);
      ;
}
 @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.I.negate();
      boolean boolean0 = quaternion0.K.equals(quaternion1, Double.NaN);
      ;
}
 @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.I.negate();
      boolean boolean0 = quaternion0.K.equals(quaternion1, Double.NaN);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.I.negate();
      boolean boolean0 = quaternion0.K.equals(quaternion1, Double.NaN);
      ;
}
 @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.I.negate();
      boolean boolean0 = quaternion0.K.equals(quaternion1, Double.NaN);
      ;
}
 @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      boolean boolean0 = quaternion0.equals(quaternion0, 5456.8);
      ;
}
 @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      boolean boolean0 = quaternion0.equals(quaternion0, 5456.8);
      ;
}
 @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      boolean boolean0 = quaternion0.equals(quaternion0, 5456.8);
      ;
}
 @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      boolean boolean0 = quaternion0.equals(quaternion0, 5456.8);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      boolean boolean0 = quaternion0.equals(quaternion0, 5456.8);
      ;
}
 @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      boolean boolean0 = quaternion0.ZERO.equals(quaternion0, (-1.0));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.K;
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.K;
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = Quaternion.add(quaternion0, quaternion0);
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.subtract(quaternion0, quaternion0);
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-4315.30240731), 2905.607549151, 2905.607549151, (-4315.30240731));
      Quaternion quaternion1 = quaternion0.multiply(-0.0);
      Quaternion quaternion2 = Quaternion.J;
      boolean boolean0 = quaternion1.equals((Object) quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-4315.30240731), 2905.607549151, 2905.607549151, (-4315.30240731));
      Quaternion quaternion1 = quaternion0.multiply(-0.0);
      Quaternion quaternion2 = Quaternion.J;
      boolean boolean0 = quaternion1.equals((Object) quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-4315.30240731), 2905.607549151, 2905.607549151, (-4315.30240731));
      Quaternion quaternion1 = quaternion0.multiply(-0.0);
      Quaternion quaternion2 = Quaternion.J;
      boolean boolean0 = quaternion1.equals((Object) quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-4315.30240731), 2905.607549151, 2905.607549151, (-4315.30240731));
      Quaternion quaternion1 = quaternion0.multiply(-0.0);
      Quaternion quaternion2 = Quaternion.J;
      boolean boolean0 = quaternion1.equals((Object) quaternion2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-4315.30240731), 2905.607549151, 2905.607549151, (-4315.30240731));
      Quaternion quaternion1 = quaternion0.multiply(-0.0);
      Quaternion quaternion2 = Quaternion.J;
      boolean boolean0 = quaternion1.equals((Object) quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-4315.30240731), 2905.607549151, 2905.607549151, (-4315.30240731));
      Quaternion quaternion1 = quaternion0.multiply(-0.0);
      Quaternion quaternion2 = Quaternion.J;
      boolean boolean0 = quaternion1.equals((Object) quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-4315.30240731), 2905.607549151, 2905.607549151, (-4315.30240731));
      Quaternion quaternion1 = quaternion0.multiply(-0.0);
      Quaternion quaternion2 = Quaternion.J;
      boolean boolean0 = quaternion1.equals((Object) quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-4315.30240731), 2905.607549151, 2905.607549151, (-4315.30240731));
      Quaternion quaternion1 = quaternion0.multiply(-0.0);
      Quaternion quaternion2 = Quaternion.J;
      boolean boolean0 = quaternion1.equals((Object) quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-4315.30240731), 2905.607549151, 2905.607549151, (-4315.30240731));
      Quaternion quaternion1 = quaternion0.multiply(-0.0);
      Quaternion quaternion2 = Quaternion.J;
      boolean boolean0 = quaternion1.equals((Object) quaternion2);
      ;
}
 @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = Quaternion.I;
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = Quaternion.I;
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = Quaternion.I;
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = Quaternion.I;
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = Quaternion.I;
      boolean boolean0 = quaternion0.equals((Object) quaternion1);
      ;
}
 @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      boolean boolean0 = quaternion0.equals((Object) quaternion0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Object object0 = new Object();
      boolean boolean0 = quaternion0.equals(object0);
      ;
}
 @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Object object0 = new Object();
      boolean boolean0 = quaternion0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Object object0 = new Object();
      boolean boolean0 = quaternion0.equals(object0);
      ;
}
 @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Object object0 = new Object();
      boolean boolean0 = quaternion0.equals(object0);
      ;
}
 @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Object object0 = new Object();
      boolean boolean0 = quaternion0.equals(object0);
      ;
}
 @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.normalize();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.normalize();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.normalize();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.normalize();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.normalize();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.normalize();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.normalize();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.normalize();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of((-666.73361), (-666.73361), (-666.73361), (-666.73361));
      Quaternion quaternion1 = quaternion0.normalize();
      Quaternion quaternion2 = quaternion1.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(Double.NaN, (-1.0), (-1.0), (-1.0));
      // Undeclared exception!
      try { 
        quaternion0.normalize();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      // Undeclared exception!
      try { 
        quaternion0.ZERO.positivePolarForm();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      Quaternion quaternion1 = quaternion0.K.negate();
      Quaternion quaternion2 = quaternion1.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.parse("')");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Expected start string: [
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      double double0 = quaternion0.getX();
      ;
}
 @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      double double0 = quaternion0.getY();
      ;
}
 @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      String string0 = quaternion0.J.toString();
      ;
}
 @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      String string0 = quaternion0.J.toString();
      ;
}
 @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      String string0 = quaternion0.J.toString();
      ;
}
 @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      String string0 = quaternion0.J.toString();
      ;
}
 @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      String string0 = quaternion0.J.toString();
      ;
}
 @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      double double0 = quaternion0.getScalarPart();
      ;
}
 @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      quaternion0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      quaternion0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      quaternion0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      quaternion0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      double[] doubleArray0 = quaternion0.getVectorPart();
      ;
}
 @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      double double0 = quaternion0.getZ();
      ;
}
 @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      double double0 = quaternion0.dot(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(5456.8, 5456.8, 0.0, 5456.8);
      Quaternion quaternion1 = quaternion0.positivePolarForm();
      ;
}
 @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      double double0 = quaternion0.normSq();
      ;
}
 @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.J;
      boolean boolean0 = quaternion0.isUnit(1.0);
      assertTrue(boolean0);
}
