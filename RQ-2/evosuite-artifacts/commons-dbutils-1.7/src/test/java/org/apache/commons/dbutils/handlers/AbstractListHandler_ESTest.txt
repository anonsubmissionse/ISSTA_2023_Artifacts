 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColumnListHandler<Integer> columnListHandler0 = new ColumnListHandler<Integer>(0);
      // Undeclared exception!
      try { 
        columnListHandler0.handle((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.handlers.AbstractListHandler", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ArrayListHandler arrayListHandler0 = new ArrayListHandler();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2016)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        arrayListHandler0.handle(resultSet0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.BasicRowProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ColumnListHandler<LinkedList<Object>> columnListHandler0 = new ColumnListHandler<LinkedList<Object>>();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, false).when(resultSet0).next();
      List<LinkedList<Object>> list0 = columnListHandler0.handle(resultSet0);
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ColumnListHandler<LinkedList<Object>> columnListHandler0 = new ColumnListHandler<LinkedList<Object>>("");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      List<LinkedList<Object>> list0 = columnListHandler0.handle(resultSet0);
      assertEquals(1, list0.size());
}
