 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanProcessor beanProcessor0 = new BeanProcessor();
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor(beanProcessor0);
      BeanMapHandler<Object, Object> beanMapHandler0 = new BeanMapHandler<Object, Object>(class0, basicRowProcessor0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      doReturn(true, false).when(resultSet0).next();
      Map<Object, Object> map0 = beanMapHandler0.handle(resultSet0);
      assertTrue(map0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanMapHandler<HashMap<Object, Integer>, Object> beanMapHandler0 = new BeanMapHandler<HashMap<Object, Integer>, Object>(class0, "F#@gHp");
      Map<HashMap<Object, Integer>, Object> map0 = beanMapHandler0.createMap();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanMapHandler<HashMap<Object, Integer>, Integer> beanMapHandler0 = new BeanMapHandler<HashMap<Object, Integer>, Integer>(class0);
      // Undeclared exception!
      try { 
        beanMapHandler0.handle((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.handlers.AbstractKeyedHandler", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanMapHandler<String, Object> beanMapHandler0 = new BeanMapHandler<String, Object>(class0, 0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-4104)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("0Zo>\"`F").when(resultSet0).getObject(anyInt());
      doReturn(true).when(resultSet0).next();
      // Undeclared exception!
      try { 
        beanMapHandler0.handle(resultSet0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.BeanProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanMapHandler<String, Integer> beanMapHandler0 = new BeanMapHandler<String, Integer>(class0, "org.apache.commons.dbutils.handlers.AbstractKeyedHandler");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true).when(resultSet0).next();
      try { 
        beanMapHandler0.handle(resultSet0);
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
         //
         // Cannot create java.lang.Integer: java.lang.Integer
         //
         verifyException("org.apache.commons.dbutils.BeanProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanMapHandler<String, Integer> beanMapHandler0 = new BeanMapHandler<String, Integer>(class0, "org.apache.commons.dbutils.handlers.AbstractKeyedHandler");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Map<String, Integer> map0 = beanMapHandler0.handle(resultSet0);
      assertEquals(1, map0.size());
}
