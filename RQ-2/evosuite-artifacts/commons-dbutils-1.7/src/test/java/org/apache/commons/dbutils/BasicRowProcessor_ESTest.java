/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 14:58:31 GMT 2022
 */

package org.apache.commons.dbutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.dbutils.BasicRowProcessor;
import org.apache.commons.dbutils.BeanProcessor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicRowProcessor_ESTest extends BasicRowProcessor_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      Class<Object> class0 = Object.class;
      List<Object> list0 = basicRowProcessor0.toBeanList(resultSet0, (Class<?>) class0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      Class<String> class0 = String.class;
      List<String> list0 = basicRowProcessor0.toBeanList(resultSet0, (Class<? extends String>) class0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      Object[] objectArray0 = basicRowProcessor0.toArray(resultSet0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        basicRowProcessor0.toMap(resultSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.BasicRowProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      Class<String> class0 = String.class;
      basicRowProcessor0.toBeanList(resultSet0, (Class<?>) class0);
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-908)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        basicRowProcessor0.toBeanList(resultSet0, (Class<?>) class0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.BeanProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Class<Integer> class0 = Integer.class;
      try { 
        basicRowProcessor0.toBean(resultSet0, (Class<? extends Integer>) class0);
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
         //
         // Cannot create java.lang.Integer: java.lang.Integer
         //
         verifyException("org.apache.commons.dbutils.BeanProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        basicRowProcessor0.toBean((ResultSet) null, (Class<? extends String>) class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.BeanProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2021)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        basicRowProcessor0.toBean(resultSet0, (Class<?>) class0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.BeanProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        basicRowProcessor0.toArray(resultSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.BasicRowProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1166)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        basicRowProcessor0.toArray(resultSet0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.BasicRowProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor((BeanProcessor) null);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        basicRowProcessor0.toBeanList((ResultSet) null, (Class<? extends String>) class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.dbutils.BasicRowProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(28).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(basicRowProcessor0, basicRowProcessor0, basicRowProcessor0, basicRowProcessor0, basicRowProcessor0).when(resultSet0).getObject(anyInt());
      Object[] objectArray0 = basicRowProcessor0.toArray(resultSet0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      Class<Object> class0 = Object.class;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      Object object0 = basicRowProcessor0.toBean(resultSet0, (Class<?>) class0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = BasicRowProcessor.instance();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      Class<Integer> class0 = Integer.class;
      try { 
        basicRowProcessor0.toBeanList(resultSet0, (Class<? extends Integer>) class0);
        fail("Expecting exception: SQLException");
      } catch(SQLException e) {
         //
         // Cannot create java.lang.Integer: java.lang.Integer
         //
         verifyException("org.apache.commons.dbutils.BeanProcessor", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicRowProcessor basicRowProcessor0 = new BasicRowProcessor();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null, "", "", ".4xrgNHf?4O1T").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("", ".4xrgNHf?4O1T", "").when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, ".4xrgNHf?4O1T").when(resultSet0).getObject(anyInt());
      Map<String, Object> map0 = basicRowProcessor0.toMap(resultSet0);
      assertTrue(map0.isEmpty());
}
}
