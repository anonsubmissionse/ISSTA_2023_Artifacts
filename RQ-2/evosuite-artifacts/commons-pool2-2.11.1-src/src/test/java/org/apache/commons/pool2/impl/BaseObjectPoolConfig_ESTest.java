/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 19:06:44 GMT 2022
 */

package org.apache.commons.pool2.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.time.chrono.ChronoLocalDate;
import org.apache.commons.pool2.impl.BaseObjectPoolConfig;
import org.apache.commons.pool2.impl.DefaultEvictionPolicy;
import org.apache.commons.pool2.impl.GenericKeyedObjectPoolConfig;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseObjectPoolConfig_ESTest extends BaseObjectPoolConfig_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GenericObjectPoolConfig<ChronoLocalDate> genericObjectPoolConfig0 = new GenericObjectPoolConfig<ChronoLocalDate>();
      genericObjectPoolConfig0.setTestOnCreate(true);
      genericObjectPoolConfig0.toString();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setEvictionPolicyClassName("org.apache.commons.pool2.impl.GenericObjectPoolConfig");
      StringBuilder stringBuilder0 = new StringBuilder();
      genericObjectPoolConfig0.toStringAppendFields(stringBuilder0);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setNumTestsPerEvictionRun(8);
      genericObjectPoolConfig0.toString();
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis((-1L));
      genericKeyedObjectPoolConfig0.toString();
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(759L);
      genericObjectPoolConfig0.toString();
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      genericKeyedObjectPoolConfig0.toString();
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setFairness(true);
      genericObjectPoolConfig0.toString();
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(false);
      genericObjectPoolConfig0.toString();
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setTestWhileIdle(false);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setTestOnReturn(false);
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTestOnBorrow(false);
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setMinEvictableIdleTime(genericObjectPoolConfig0.DEFAULT_MAX_WAIT);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setJmxEnabled(true);
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      GenericKeyedObjectPoolConfig<DefaultEvictionPolicy<String>> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<DefaultEvictionPolicy<String>>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setBlockWhenExhausted(true);
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenericObjectPoolConfig<ChronoLocalDate> genericObjectPoolConfig0 = new GenericObjectPoolConfig<ChronoLocalDate>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      genericObjectPoolConfig0.getTimeBetweenEvictionRuns();
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      genericObjectPoolConfig0.getDurationBetweenEvictionRuns();
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTime();
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleDuration();
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig1 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig1.setMinEvictableIdleTime(genericObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      genericObjectPoolConfig1.getMinEvictableIdleTime();
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setMinEvictableIdleTimeMillis((-2882L));
      genericKeyedObjectPoolConfig0.getMinEvictableIdleDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setMinEvictableIdleTimeMillis((-2882L));
      genericKeyedObjectPoolConfig0.getMinEvictableIdleDuration();
      assertEquals(0, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setMinEvictableIdleTimeMillis((-2882L));
      genericKeyedObjectPoolConfig0.getMinEvictableIdleDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setMinEvictableIdleTimeMillis((-2882L));
      genericKeyedObjectPoolConfig0.getMinEvictableIdleDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setMinEvictableIdleTimeMillis((-2882L));
      genericKeyedObjectPoolConfig0.getMinEvictableIdleDuration();
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWait(genericKeyedObjectPoolConfig0.DEFAULT_MIN_EVICTABLE_IDLE_DURATION);
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWait(genericKeyedObjectPoolConfig0.DEFAULT_MIN_EVICTABLE_IDLE_DURATION);
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWait(genericKeyedObjectPoolConfig0.DEFAULT_MIN_EVICTABLE_IDLE_DURATION);
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertEquals(0, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWait(genericKeyedObjectPoolConfig0.DEFAULT_MIN_EVICTABLE_IDLE_DURATION);
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWait(genericKeyedObjectPoolConfig0.DEFAULT_MIN_EVICTABLE_IDLE_DURATION);
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWait(genericKeyedObjectPoolConfig0.DEFAULT_MIN_EVICTABLE_IDLE_DURATION);
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWait(genericKeyedObjectPoolConfig0.DEFAULT_MIN_EVICTABLE_IDLE_DURATION);
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWait(genericKeyedObjectPoolConfig0.DEFAULT_MIN_EVICTABLE_IDLE_DURATION);
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWait(genericKeyedObjectPoolConfig0.DEFAULT_MIN_EVICTABLE_IDLE_DURATION);
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWait(genericKeyedObjectPoolConfig0.DEFAULT_MIN_EVICTABLE_IDLE_DURATION);
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWait(genericKeyedObjectPoolConfig0.DEFAULT_MIN_EVICTABLE_IDLE_DURATION);
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(1800000L);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(1800000L);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutDuration();
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(1800000L);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutDuration();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(1800000L);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(1800000L);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutDuration();
      assertEquals(0, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(1800000L);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(1800000L);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutDuration();
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(1800000L);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutDuration();
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(1800000L);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(1800000L);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(1800000L);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutDuration();
      assertFalse(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis((long) 0);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeout();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis((long) 0);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeout();
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis((long) 0);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeout();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis((long) 0);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeout();
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis((long) 0);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeout();
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis((long) 0);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeout();
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis((long) 0);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeout();
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis((long) 0);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeout();
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis((long) 0);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeout();
      assertEquals(0, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis((long) 0);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeout();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis((long) 0);
      genericKeyedObjectPoolConfig0.getEvictorShutdownTimeout();
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GenericObjectPoolConfig<ChronoLocalDate> genericObjectPoolConfig0 = new GenericObjectPoolConfig<ChronoLocalDate>();
      StringBuilder stringBuilder0 = new StringBuilder();
      genericObjectPoolConfig0.toStringAppendFields(stringBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(0L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertTrue(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRunsMillis(1777L);
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setTestWhileIdle(true);
      boolean boolean0 = genericKeyedObjectPoolConfig0.getTestWhileIdle();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setTestOnReturn(true);
      boolean boolean0 = genericKeyedObjectPoolConfig0.getTestOnReturn();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(true);
      boolean boolean0 = genericKeyedObjectPoolConfig0.getTestOnCreate();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setTestOnBorrow(true);
      boolean boolean0 = genericKeyedObjectPoolConfig0.getTestOnBorrow();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setSoftMinEvictableIdleTimeMillis(0L);
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertEquals(0, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      Duration duration0 = BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_DURATION;
      genericKeyedObjectPoolConfig0.setSoftMinEvictableIdleTime(duration0);
      long long0 = genericKeyedObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setNumTestsPerEvictionRun(0);
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      GenericObjectPoolConfig<ChronoLocalDate> genericObjectPoolConfig0 = new GenericObjectPoolConfig<ChronoLocalDate>();
      genericObjectPoolConfig0.setNumTestsPerEvictionRun((-1379));
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertEquals(1, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTimeMillis(0);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setMinEvictableIdleTime(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME);
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      assertEquals(1, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setMaxWaitMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertTrue(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertTrue(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setMaxWaitMillis(8);
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setLifo(false);
      boolean boolean0 = genericKeyedObjectPoolConfig0.getLifo();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNamePrefix((String) null);
      String string0 = genericKeyedObjectPoolConfig0.getJmxNamePrefix();
      assertFalse(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNamePrefix((String) null);
      String string0 = genericKeyedObjectPoolConfig0.getJmxNamePrefix();
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNamePrefix((String) null);
      String string0 = genericKeyedObjectPoolConfig0.getJmxNamePrefix();
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNamePrefix((String) null);
      String string0 = genericKeyedObjectPoolConfig0.getJmxNamePrefix();
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNamePrefix((String) null);
      String string0 = genericKeyedObjectPoolConfig0.getJmxNamePrefix();
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNamePrefix((String) null);
      String string0 = genericKeyedObjectPoolConfig0.getJmxNamePrefix();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNamePrefix((String) null);
      String string0 = genericKeyedObjectPoolConfig0.getJmxNamePrefix();
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNamePrefix((String) null);
      String string0 = genericKeyedObjectPoolConfig0.getJmxNamePrefix();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNamePrefix((String) null);
      String string0 = genericKeyedObjectPoolConfig0.getJmxNamePrefix();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNamePrefix((String) null);
      String string0 = genericKeyedObjectPoolConfig0.getJmxNamePrefix();
      assertFalse(genericKeyedObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNamePrefix((String) null);
      String string0 = genericKeyedObjectPoolConfig0.getJmxNamePrefix();
      assertEquals(0, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertNotNull(genericObjectPoolConfig0.getJmxNameBase());
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("pool");
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      assertEquals(1, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      ;
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      ;
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNameBase());
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      GenericKeyedObjectPoolConfig<String> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<String>();
      genericKeyedObjectPoolConfig0.setJmxNameBase("");
      String string0 = genericKeyedObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      assertFalse(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      genericObjectPoolConfig0.setJmxEnabled(false);
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      assertTrue(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setFairness(true);
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertEquals(0, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertFalse(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      ;
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      GenericKeyedObjectPoolConfig<ChronoLocalDate> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<ChronoLocalDate>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(0L);
      long long0 = genericKeyedObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      ;
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName((String) null);
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertTrue(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName((String) null);
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName((String) null);
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName((String) null);
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertFalse(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName((String) null);
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertEquals(1, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName((String) null);
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName((String) null);
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName((String) null);
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      ;
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName((String) null);
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      ;
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName((String) null);
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName((String) null);
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName("");
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setEvictionPolicyClassName("");
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      ;
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericObjectPoolConfig0.getEvictionPolicy();
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericObjectPoolConfig0.getEvictionPolicy();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericObjectPoolConfig0.getEvictionPolicy();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericObjectPoolConfig0.getEvictionPolicy();
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericObjectPoolConfig0.getEvictionPolicy();
      ;
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericObjectPoolConfig0.getEvictionPolicy();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericObjectPoolConfig0.getEvictionPolicy();
      assertTrue(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericObjectPoolConfig0.getEvictionPolicy();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericObjectPoolConfig0.getEvictionPolicy();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericObjectPoolConfig0.getEvictionPolicy();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      genericObjectPoolConfig0.getEvictionPolicy();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      // Undeclared exception!
      try { 
        genericKeyedObjectPoolConfig0.toStringAppendFields((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.BaseObjectPoolConfig", e);
      }
  }
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      ;
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertTrue(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      ;
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      ;
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setEvictorShutdownTimeout(genericKeyedObjectPoolConfig0.DEFAULT_MAX_WAIT);
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      ;
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRuns((Duration) null);
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRuns((Duration) null);
      ;
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRuns((Duration) null);
      assertEquals(1, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRuns((Duration) null);
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRuns((Duration) null);
      assertTrue(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRuns((Duration) null);
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRuns((Duration) null);
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRuns((Duration) null);
      ;
}
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRuns((Duration) null);
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRuns((Duration) null);
      assertFalse(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTimeBetweenEvictionRuns((Duration) null);
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      ;
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertTrue(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      long long0 = genericObjectPoolConfig0.getTimeBetweenEvictionRunsMillis();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.setJmxNamePrefix("L[M?");
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      ;
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      ;
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      ;
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      assertEquals(1, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      ;
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      assertTrue(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      ;
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      String string0 = genericObjectPoolConfig0.getJmxNamePrefix();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      ;
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertEquals(0, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertFalse(genericKeyedObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      ;
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      ;
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertFalse(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertTrue(genericKeyedObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.getMaxWaitDuration();
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertEquals(1, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      ;
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertTrue(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      ;
}
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      ;
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      String string0 = genericObjectPoolConfig0.getJmxNameBase();
      ;
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestWhileIdle();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestWhileIdle();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestWhileIdle();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestWhileIdle();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestWhileIdle();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestWhileIdle();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestWhileIdle();
      ;
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestWhileIdle();
      assertTrue(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestWhileIdle();
      ;
}
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestWhileIdle();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestWhileIdle();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.getEvictionPolicy();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.getEvictionPolicy();
      ;
}
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.getEvictionPolicy();
      ;
}
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.getEvictionPolicy();
      assertEquals(1, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.getEvictionPolicy();
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.getEvictionPolicy();
      ;
}
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.getEvictionPolicy();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.getEvictionPolicy();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.getEvictionPolicy();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.getEvictionPolicy();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<ChronoLocalDate>>();
      genericObjectPoolConfig0.getEvictionPolicy();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnReturn();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnReturn();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnReturn();
      ;
}
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnReturn();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnReturn();
      ;
}
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnReturn();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnReturn();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnReturn();
      assertFalse(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnReturn();
      assertFalse(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnReturn();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnReturn();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setFairness(false);
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setFairness(false);
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setFairness(false);
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setFairness(false);
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setFairness(false);
      assertFalse(genericKeyedObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setFairness(false);
      assertFalse(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setFairness(false);
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setFairness(false);
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setFairness(false);
      assertEquals(0, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setFairness(false);
      assertFalse(genericKeyedObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setFairness(false);
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      ;
}
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      ;
}
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      ;
}
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getSoftMinEvictableIdleTimeMillis();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnCreate();
      assertFalse(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnCreate();
      assertFalse(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnCreate();
      ;
}
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnCreate();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnCreate();
      assertFalse(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnCreate();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnCreate();
      ;
}
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnCreate();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnCreate();
      assertTrue(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnCreate();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnCreate();
      ;
}
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      assertFalse(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setBlockWhenExhausted(false);
      boolean boolean0 = genericObjectPoolConfig0.getBlockWhenExhausted();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      ;
}
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      ;
}
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      ;
}
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      assertTrue(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      assertEquals(1, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      assertFalse(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      ;
}
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getFairness();
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnBorrow();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnBorrow();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnBorrow();
      ;
}
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnBorrow();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnBorrow();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnBorrow();
      assertFalse(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnBorrow();
      ;
}
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnBorrow();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnBorrow();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnBorrow();
      assertFalse(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getTestOnBorrow();
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_DURATION);
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_DURATION);
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_DURATION);
      assertFalse(genericKeyedObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_DURATION);
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_DURATION);
      assertEquals(1, genericKeyedObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_DURATION);
      assertFalse(genericKeyedObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_DURATION);
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_DURATION);
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_DURATION);
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_DURATION);
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      genericKeyedObjectPoolConfig0.setEvictorShutdownTimeoutMillis(genericKeyedObjectPoolConfig0.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_DURATION);
      ;
}
 @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      ;
}
 @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      assertFalse(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      assertTrue(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      assertTrue(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      GenericObjectPoolConfig<DefaultEvictionPolicy<String>> genericObjectPoolConfig0 = new GenericObjectPoolConfig<DefaultEvictionPolicy<String>>();
      boolean boolean0 = genericObjectPoolConfig0.getJmxEnabled();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      genericObjectPoolConfig0.setTestOnBorrow(true);
      genericObjectPoolConfig0.toString();
      assertTrue(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      ;
}
 @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertTrue(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      ;
}
 @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      ;
}
 @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getEvictorShutdownTimeoutMillis();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertEquals(1, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      ;
}
 @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertFalse(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      ;
}
 @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      String string0 = genericObjectPoolConfig0.getEvictionPolicyClassName();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.getMinEvictableIdleTime();
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.getMinEvictableIdleTime();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.getMinEvictableIdleTime();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.getMinEvictableIdleTime();
      assertFalse(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.getMinEvictableIdleTime();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.getMinEvictableIdleTime();
      ;
}
 @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.getMinEvictableIdleTime();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.getMinEvictableIdleTime();
      ;
}
 @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.getMinEvictableIdleTime();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.getMinEvictableIdleTime();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.getMinEvictableIdleTime();
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getLifo();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getLifo();
      assertTrue(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getLifo();
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getLifo();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getLifo();
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getLifo();
      ;
}
 @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getLifo();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getLifo();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getLifo();
      assertFalse(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getLifo();
      assertFalse(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      boolean boolean0 = genericObjectPoolConfig0.getLifo();
      ;
}
 @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      ;
}
 @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      ;
}
 @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMinEvictableIdleTimeMillis();
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      ;
}
 @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      ;
}
 @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      ;
}
 @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      ;
}
 @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      long long0 = genericObjectPoolConfig0.getMaxWaitMillis();
      assertFalse(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      ;
}
 @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      assertTrue(genericKeyedObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      ;
}
 @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      assertFalse(genericKeyedObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      assertTrue(genericKeyedObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      ;
}
 @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Object> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Object>();
      genericKeyedObjectPoolConfig0.setTestOnCreate(false);
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(true);
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(true);
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(true);
      assertEquals(0, genericObjectPoolConfig0.getNumTestsPerEvictionRun());
}
 @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(true);
      assertTrue(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(true);
      assertTrue(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(true);
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(true);
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(true);
      ;
}
 @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(true);
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(true);
      assertTrue(genericObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      genericObjectPoolConfig0.setLifo(true);
      assertTrue(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertTrue(genericObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertTrue(genericObjectPoolConfig0.getTestWhileIdle());
}
 @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertTrue(genericObjectPoolConfig0.getJmxEnabled());
}
 @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertNotNull(genericObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertTrue(genericObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertTrue(genericObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertNotNull(genericObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      ;
}
 @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertFalse(genericObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      int int0 = genericObjectPoolConfig0.getNumTestsPerEvictionRun();
      assertTrue(genericObjectPoolConfig0.getBlockWhenExhausted());
}
 @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      boolean boolean0 = genericKeyedObjectPoolConfig0.getBlockWhenExhausted();
      assertFalse(genericKeyedObjectPoolConfig0.getTestOnCreate());
}
 @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      boolean boolean0 = genericKeyedObjectPoolConfig0.getBlockWhenExhausted();
      assertTrue(genericKeyedObjectPoolConfig0.getLifo());
}
 @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      boolean boolean0 = genericKeyedObjectPoolConfig0.getBlockWhenExhausted();
      assertNotNull(genericKeyedObjectPoolConfig0.getJmxNamePrefix());
}
 @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      boolean boolean0 = genericKeyedObjectPoolConfig0.getBlockWhenExhausted();
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnBorrow());
}
 @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      boolean boolean0 = genericKeyedObjectPoolConfig0.getBlockWhenExhausted();
      ;
}
 @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      boolean boolean0 = genericKeyedObjectPoolConfig0.getBlockWhenExhausted();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      boolean boolean0 = genericKeyedObjectPoolConfig0.getBlockWhenExhausted();
      ;
}
 @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      boolean boolean0 = genericKeyedObjectPoolConfig0.getBlockWhenExhausted();
      assertFalse(genericKeyedObjectPoolConfig0.getFairness());
}
 @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      boolean boolean0 = genericKeyedObjectPoolConfig0.getBlockWhenExhausted();
      assertNotNull(genericKeyedObjectPoolConfig0.getEvictionPolicyClassName());
}
 @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      boolean boolean0 = genericKeyedObjectPoolConfig0.getBlockWhenExhausted();
      assertTrue(genericKeyedObjectPoolConfig0.getTestOnReturn());
}
 @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      GenericKeyedObjectPoolConfig<Integer> genericKeyedObjectPoolConfig0 = new GenericKeyedObjectPoolConfig<Integer>();
      boolean boolean0 = genericKeyedObjectPoolConfig0.getBlockWhenExhausted();
      assertFalse(genericKeyedObjectPoolConfig0.getTestWhileIdle());
}
}
