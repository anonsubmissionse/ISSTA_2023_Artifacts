 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn("SYM<C*>").when(pooledObjectFactory0).toString();
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      StringBuilder stringBuilder0 = new StringBuilder();
      ((BaseObjectPool)softReferenceObjectPool0).toStringAppendFields(stringBuilder0);
      assertTrue(softReferenceObjectPool0.isClosed());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PooledObject<String> pooledObject0 = (PooledObject<String>) mock(PooledObject.class, new ViolatedAssumptionAnswer());
      doReturn("SYM<C*>").when(pooledObject0).getObject();
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledObject0).when(pooledObjectFactory0).makeObject();
      doReturn(true, false).when(pooledObjectFactory0).validateObject(nullable(org.apache.commons.pool2.PooledObject.class));
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.borrowObject();
      softReferenceObjectPool0.returnObject("SYM<C*>");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PooledObject<String> pooledObject0 = (PooledObject<String>) mock(PooledObject.class, new ViolatedAssumptionAnswer());
      doReturn("q").when(pooledObject0).getObject();
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledObject0).when(pooledObjectFactory0).makeObject();
      doReturn(true).when(pooledObjectFactory0).validateObject(nullable(org.apache.commons.pool2.PooledObject.class));
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.borrowObject();
      softReferenceObjectPool0.invalidateObject("q");
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      ((BaseObjectPool)softReferenceObjectPool0).;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      assertTrue(softReferenceObjectPool0.isClosed());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PooledObject<String> pooledObject0 = (PooledObject<String>) mock(PooledObject.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pooledObject0).getObject();
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledObject0).when(pooledObjectFactory0).makeObject();
      doReturn(false).when(pooledObjectFactory0).validateObject(nullable(org.apache.commons.pool2.PooledObject.class));
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.addObject();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.clear();
      assertTrue(softReferenceObjectPool0.isClosed());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Integer> softReferenceObjectPool0 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory0);
      softReferenceObjectPool0.close();
      boolean boolean0 = softReferenceObjectPool0.isClosed();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      int int0 = softReferenceObjectPool0.getNumIdle();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Integer> softReferenceObjectPool0 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory0);
      int int0 = softReferenceObjectPool0.getNumActive();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PooledObject<String> pooledObject0 = (PooledObject<String>) mock(PooledObject.class, new ViolatedAssumptionAnswer());
      doReturn("SYM<C*>").when(pooledObject0).getObject();
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledObject0).when(pooledObjectFactory0).makeObject();
      doReturn(true).when(pooledObjectFactory0).validateObject(nullable(org.apache.commons.pool2.PooledObject.class));
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.borrowObject();
      int int0 = softReferenceObjectPool0.getNumActive();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      // Undeclared exception!
      try { 
        ((BaseObjectPool)softReferenceObjectPool0).toStringAppendFields((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.BaseObjectPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Integer> softReferenceObjectPool0 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory0);
      Integer integer0 = new Integer((-3038));
      try { 
        softReferenceObjectPool0.returnObject(integer0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Returned object not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      try { 
        softReferenceObjectPool0.invalidateObject("aoBLG*");
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Object to invalidate is not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      PooledObject<Integer> pooledObject0 = (PooledObject<Integer>) mock(PooledObject.class, new ViolatedAssumptionAnswer());
      PooledObjectFactory<Integer> pooledObjectFactory1 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory1).makeObject();
      SoftReferenceObjectPool<Integer> softReferenceObjectPool1 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory1);
      try { 
        softReferenceObjectPool1.borrowObject();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>((PooledObjectFactory<String>) null);
      try { 
        softReferenceObjectPool0.borrowObject();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      try { 
        softReferenceObjectPool0.addObject();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      softReferenceObjectPool0.close();
      try { 
        softReferenceObjectPool0.addObject();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Pool not open
         //
         verifyException("org.apache.commons.pool2.BaseObjectPool", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Integer> softReferenceObjectPool0 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory0);
      boolean boolean0 = softReferenceObjectPool0.isClosed();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.close();
      try { 
        softReferenceObjectPool0.borrowObject();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Pool not open
         //
         verifyException("org.apache.commons.pool2.BaseObjectPool", e);
      }
  }
