 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      assertEquals(0, int1);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean2 = linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean2 = linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean2 = linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean2 = linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean2 = linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean2 = linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean2 = linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean2 = linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean2 = linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      assertNotNull(chronoLocalDate0);
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = new Integer(2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean2 = linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      assertNotNull(chronoUnit0);
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertEquals(linkedBlockingDeque0, locale0);
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1);
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.getISO3Language());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.getISO3Country());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.getCountry());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.getLanguage());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.toString());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.getVariant());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean1 = linkedBlockingDeque2.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean1 = linkedBlockingDeque2.hasTakeWaiters();
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean1 = linkedBlockingDeque2.hasTakeWaiters();
      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>(457);
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean1 = linkedBlockingDeque2.hasTakeWaiters();
      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>(457);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean1 = linkedBlockingDeque2.hasTakeWaiters();
      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>(457);
      Integer integer0 = new Integer(1379);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean1 = linkedBlockingDeque2.hasTakeWaiters();
      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>(457);
      Integer integer0 = new Integer(1379);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      String[] stringArray0 = Locale.getISOCountries();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean1 = linkedBlockingDeque2.hasTakeWaiters();
      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>(457);
      Integer integer0 = new Integer(1379);
      Duration duration0 = Duration.ofSeconds((-1415000000000L), (long) 457);
      assertEquals(linkedBlockingDeque3, duration0);
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      LinkedBlockingDeque<Locale> linkedBlockingDeque1 = new LinkedBlockingDeque<Locale>();
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(linkedBlockingDeque0, set0);
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      assertTrue(integer0);
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      assertTrue(stream0);
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      assertTrue(duration1);
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      assertTrue(boolean4);
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      assertTrue(boolean6);
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      assertNotNull(object1);
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      assertTrue(boolean7);
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Integer>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Integer>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Integer>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Integer>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      assertNotNull(string1);
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      assertEquals(1, int1);
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      assertNotNull(chronoLocalDate0);
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      ;
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object2 = linkedBlockingDeque2.pollFirst(1L, timeUnit1);
      assertNotNull(object2);
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object2 = linkedBlockingDeque2.pollFirst(1L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object2 = linkedBlockingDeque2.pollFirst(1L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object2 = linkedBlockingDeque2.pollFirst(1L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object2 = linkedBlockingDeque2.pollFirst(1L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object2 = linkedBlockingDeque2.pollFirst(1L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      String string0 = "'4y,DH|]Y?";
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string1 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object2 = linkedBlockingDeque2.pollFirst(1L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      ;
}
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      assertEquals(linkedBlockingDeque0, charset0);
}
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0.name());
}
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0.toString());
}
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
}
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      ;
}
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0.displayName());
}
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      linkedBlockingDeque0.addLast("J//ZZy]\"k9T3u5N#.");
      ;
}
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      linkedBlockingDeque0.addLast("J//ZZy]\"k9T3u5N#.");
      Set<String> set0 = charset0.aliases();
      ;
}
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      linkedBlockingDeque0.addLast("J//ZZy]\"k9T3u5N#.");
      Set<String> set0 = charset0.aliases();
      ;
}
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      linkedBlockingDeque0.addLast("J//ZZy]\"k9T3u5N#.");
      Set<String> set0 = charset0.aliases();
      ;
}
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      linkedBlockingDeque0.addLast("J//ZZy]\"k9T3u5N#.");
      Set<String> set0 = charset0.aliases();
      assertNotNull(charset0.toString());
}
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      linkedBlockingDeque0.addLast("J//ZZy]\"k9T3u5N#.");
      Set<String> set0 = charset0.aliases();
      ;
}
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      linkedBlockingDeque0.addLast("J//ZZy]\"k9T3u5N#.");
      Set<String> set0 = charset0.aliases();
      ;
}
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      linkedBlockingDeque0.addLast("J//ZZy]\"k9T3u5N#.");
      Set<String> set0 = charset0.aliases();
      ;
}
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      linkedBlockingDeque0.addLast("J//ZZy]\"k9T3u5N#.");
      Set<String> set0 = charset0.aliases();
      ;
}
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3);
      String string0 = "J//ZZy]\"k9T3u5N#.";
      Charset charset0 = Charset.defaultCharset();
      linkedBlockingDeque0.addLast("J//ZZy]\"k9T3u5N#.");
      Set<String> set0 = charset0.aliases();
      ;
}
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      ;
}
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      ;
}
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      ;
}
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      ;
}
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      ;
}
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      ;
}
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      ;
}
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      ;
}
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      assertTrue(integer0);
}
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      ;
}
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      ;
}
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      ;
}
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ;
}
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ;
}
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
}
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      assertNotNull(object1);
}
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      ;
}
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      ;
}
 @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      ;
}
 @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      ;
}
 @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      assertEquals(0, object1);
}
 @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      assertNotNull(duration1);
}
 @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      assertTrue(boolean4);
}
 @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      assertTrue(boolean6);
}
 @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      assertNotNull(object2);
}
 @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-514));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Object object1 = linkedBlockingDeque1.takeLast();
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object2 = linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object3 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.peek();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      assertTrue(boolean7);
}
 @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      ;
}
 @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      ;
}
 @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      ;
}
 @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertTrue(integer1);
}
 @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ;
}
 @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertEquals(0, hashMap0.size());
}
 @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      ;
}
 @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      ;
}
 @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      String string0 = linkedBlockingDeque1.pollFirst();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      String string0 = linkedBlockingDeque1.pollFirst();
      ;
}
 @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      String string0 = linkedBlockingDeque1.pollFirst();
      ;
}
 @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(5);
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = new LinkedList<Locale.LanguageRange>();
      boolean boolean1 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean2 = linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      String string0 = linkedBlockingDeque1.pollFirst();
      int int0 = 915;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(915);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertEquals(linkedBlockingDeque0, locale0);
}
 @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1);
}
 @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.toString());
}
 @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.getISO3Country());
}
 @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.getLanguage());
}
 @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.getISO3Language());
}
 @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.getVariant());
}
 @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      assertNotNull(locale1.getCountry());
}
 @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      LinkedBlockingDeque<Locale> linkedBlockingDeque0 = new LinkedBlockingDeque<Locale>(1379, false);
      Locale locale0 = Locale.JAPAN;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast(locale0, (-1415000000000L), timeUnit0);
      Locale locale1 = linkedBlockingDeque0.takeFirst();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ;
}
 @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ;
}
 @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ;
}
 @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      String string0 = linkedBlockingDeque0.pollFirst();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      String string0 = linkedBlockingDeque0.pollFirst();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(915);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      ;
}
 @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      ;
}
 @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      ;
}
 @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(5);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      ;
}
 @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      ;
}
 @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(5);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(5);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(5, false);
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(5);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(5, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Object object0 = linkedBlockingDeque2.pollLast((long) 5, timeUnit0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(5);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(5, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Object object0 = linkedBlockingDeque2.pollLast((long) 5, timeUnit0);
      boolean boolean0 = linkedBlockingDeque1.contains((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      ;
}
 @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      ;
}
 @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      ;
}
 @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      ;
}
 @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
}
 @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertEquals(0, hashMap0.size());
}
 @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertNotNull(list0);
}
 @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertEquals(0, hashMap0.size());
}
 @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.add(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      ;
}
 @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      String string0 = linkedBlockingDeque1.pollFirst();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer1 = linkedBlockingDeque0.pollLast();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      String string0 = linkedBlockingDeque1.pollFirst();
      int int0 = 915;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque2 = new LinkedBlockingDeque<ChronoLocalDate>(915);
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      assertEquals(linkedBlockingDeque0, locale0);
}
 @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Integer integer0 = new Integer((-21));
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Integer integer0 = new Integer((-21));
      ;
}
 @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Integer integer0 = new Integer((-21));
      Duration duration0 = Duration.ofHours(685L);
      assertEquals(linkedBlockingDeque0, duration0);
}
 @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Integer integer0 = new Integer((-21));
      Duration duration0 = Duration.ofHours(685L);
      boolean boolean0 = linkedBlockingDeque0.offer(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = null;
      String string0 = locale0.getDisplayScript((Locale) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Integer integer0 = new Integer((-21));
      Duration duration0 = Duration.ofHours(685L);
      boolean boolean0 = linkedBlockingDeque0.offer(integer0, duration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      int int0 = 4;
      boolean boolean0 = false;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(4, false);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      int int0 = 4;
      boolean boolean0 = false;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(4, false);
      ;
}
 @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      int int0 = 4;
      boolean boolean0 = false;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(4, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      int int0 = 4;
      boolean boolean0 = false;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(4, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      int int0 = 4;
      boolean boolean0 = false;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(4, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      ;
}
 @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ;
}
 @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertEquals(0, hashMap0.size());
}
 @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      ;
}
 @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertEquals(0, hashMap0.size());
}
 @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.retainAll(list0);
      ;
}
 @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.retainAll(list0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.retainAll(list0);
      assertEquals(0, hashMap0.size());
}
 @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.retainAll(list0);
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.retainAll(list0);
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.retainAll(list0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.retainAll(list0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      ;
}
 @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      String string0 = linkedBlockingDeque1.pollFirst();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, true);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      boolean boolean0 = linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(true);
      String string0 = linkedBlockingDeque1.pollFirst();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque2 = new LinkedBlockingDeque<ChronoLocalDate>(915);
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      ;
}
 @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      ;
}
 @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      ;
}
 @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      ;
}
 @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      ;
}
 @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer2 = linkedBlockingDeque0.pollFirst();
      assertNotNull(integer2);
}
 @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer2 = linkedBlockingDeque0.pollFirst();
      ;
}
 @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer2 = linkedBlockingDeque0.pollFirst();
      ;
}
 @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2147449131));
      linkedBlockingDeque0.putLast(integer0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer1 = new Integer(5);
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer2 = linkedBlockingDeque0.pollFirst();
      ;
}
 @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      ;
}
 @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      String string0 = linkedBlockingDeque0.remove();
      ;
}
 @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      String string0 = linkedBlockingDeque0.remove();
      ;
}
 @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      String string0 = linkedBlockingDeque0.remove();
      ;
}
 @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      String string0 = linkedBlockingDeque0.remove();
      boolean boolean1 = linkedBlockingDeque0.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      String string0 = linkedBlockingDeque0.remove();
      boolean boolean1 = linkedBlockingDeque0.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      String string0 = linkedBlockingDeque0.remove();
      boolean boolean1 = linkedBlockingDeque0.hasTakeWaiters();
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      ;
}
 @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      ;
}
 @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      ;
}
 @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(699);
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(699);
      ;
}
 @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(699);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      boolean boolean0 = linkedBlockingDeque1.offer(integer0, (long) 699, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(699);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      boolean boolean0 = linkedBlockingDeque1.offer(integer0, (long) 699, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(699);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      boolean boolean0 = linkedBlockingDeque1.offer(integer0, (long) 699, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object0 = linkedBlockingDeque0.poll((-3675L), timeUnit1);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(699);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      boolean boolean0 = linkedBlockingDeque1.offer(integer0, (long) 699, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object0 = linkedBlockingDeque0.poll((-3675L), timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(699);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      boolean boolean0 = linkedBlockingDeque1.offer(integer0, (long) 699, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object0 = linkedBlockingDeque0.poll((-3675L), timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(699);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      boolean boolean0 = linkedBlockingDeque1.offer(integer0, (long) 699, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      Object object0 = linkedBlockingDeque0.poll((-3675L), timeUnit1);
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque2 = new LinkedBlockingDeque<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      ;
}
 @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      ;
}
 @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      ;
}
 @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0);
}
 @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      assertTrue(integer1);
}
 @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      ;
}
 @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      ;
}
 @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      assertTrue(boolean4);
}
 @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertTrue(boolean5);
}
 @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      ;
}
 @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      ;
}
 @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      assertEquals(1, duration0);
}
 @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-1016));
      boolean boolean3 = linkedHashSet0.add(integer1);
      boolean boolean4 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean5 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.size();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean6 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      assertTrue(boolean6);
}
 @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      ;
}
 @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      ;
}
 @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      ;
}
 @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0);
}
 @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertTrue(boolean4);
}
 @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      ;
}
 @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      assertTrue(boolean5);
}
 @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      Duration duration1 = null;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      Duration duration1 = null;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      Duration duration1 = null;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      Duration duration1 = null;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      Duration duration1 = null;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      Duration duration1 = null;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(false);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(linkedBlockingDeque0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertEquals(linkedBlockingDeque0, zoneId0);
}
 @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(linkedBlockingDeque0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque0.pollLast((-1029L), timeUnit0);
      assertNotNull(chronoLocalDate0);
}
 @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(linkedBlockingDeque0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque0.pollLast((-1029L), timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>(linkedBlockingDeque0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque0.pollLast((-1029L), timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      ;
}
 @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      linkedBlockingDeque0.addFirst("evdRh1)ced");
      ;
}
 @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      linkedBlockingDeque0.addFirst("evdRh1)ced");
      Duration duration0 = Duration.ofMillis(0L);
      ;
}
 @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      linkedBlockingDeque0.addFirst("evdRh1)ced");
      Duration duration0 = Duration.ofMillis(0L);
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      linkedBlockingDeque0.addFirst("evdRh1)ced");
      Duration duration0 = Duration.ofMillis(0L);
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      linkedBlockingDeque0.addFirst("evdRh1)ced");
      Duration duration0 = Duration.ofMillis(0L);
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      linkedBlockingDeque0.addFirst("evdRh1)ced");
      Duration duration0 = Duration.ofMillis(0L);
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque1 = new LinkedBlockingDeque<Locale.LanguageRange>(false);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      ;
}
 @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      ;
}
 @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      ;
}
 @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      ;
}
 @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      ;
}
 @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      ;
}
 @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      ;
}
 @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      ;
}
 @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      ;
}
 @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      ;
}
 @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      ;
}
 @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      ;
}
 @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1.toString());
}
 @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test909()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test910()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test911()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test912()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale1.toString());
}
 @Test(timeout = 4000)
  public void test913()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test914()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test915()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test916()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test917()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test918()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test919()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test920()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test921()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test922()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test923()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test924()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test925()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test926()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test927()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test928()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test929()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test930()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test931()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test932()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test933()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test934()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test935()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test936()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test937()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test938()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test939()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test940()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test941()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test942()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      ;
}
 @Test(timeout = 4000)
  public void test943()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      ;
}
 @Test(timeout = 4000)
  public void test944()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      ;
}
 @Test(timeout = 4000)
  public void test945()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      ;
}
 @Test(timeout = 4000)
  public void test946()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test947()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test948()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test949()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test950()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      ;
}
 @Test(timeout = 4000)
  public void test951()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test952()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test953()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test954()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>();
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test955()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test956()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>();
      Iterator<String> iterator0 = linkedBlockingDeque3.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test957()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>();
      Iterator<String> iterator0 = linkedBlockingDeque3.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test958()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>();
      Iterator<String> iterator0 = linkedBlockingDeque3.iterator();
      Duration duration0 = Duration.ofSeconds((-16138800000000000L));
      ;
}
 @Test(timeout = 4000)
  public void test959()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test960()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test961()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test962()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test963()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      assertTrue(duration0);
}
 @Test(timeout = 4000)
  public void test964()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      assertTrue(duration1);
}
 @Test(timeout = 4000)
  public void test965()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      ;
}
 @Test(timeout = 4000)
  public void test966()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      assertTrue(duration2);
}
 @Test(timeout = 4000)
  public void test967()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test968()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test969()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test970()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test971()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test972()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test973()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      assertTrue(integer0);
}
 @Test(timeout = 4000)
  public void test974()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      ;
}
 @Test(timeout = 4000)
  public void test975()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test976()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test977()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test978()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test979()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test980()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test981()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test982()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test983()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test984()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test985()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test986()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      assertEquals(linkedBlockingDeque1, integer1);
}
 @Test(timeout = 4000)
  public void test987()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      ;
}
 @Test(timeout = 4000)
  public void test988()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      ;
}
 @Test(timeout = 4000)
  public void test989()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test990()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test991()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test992()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test993()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test994()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test995()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test996()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test997()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test998()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test999()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      Iterator<Integer> iterator1 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      Iterator<Integer> iterator1 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      Iterator<Integer> iterator1 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      Iterator<Integer> iterator1 = linkedBlockingDeque2.iterator();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      Iterator<Integer> iterator1 = linkedBlockingDeque2.iterator();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.poll((long) (-4017), timeUnit0);
      assertNotNull(chronoLocalDate0);
}
 @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      Iterator<Integer> iterator1 = linkedBlockingDeque2.iterator();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.poll((long) (-4017), timeUnit0);
      Iterator<Object> iterator2 = linkedBlockingDeque1.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      Iterator<Integer> iterator1 = linkedBlockingDeque2.iterator();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.poll((long) (-4017), timeUnit0);
      Iterator<Object> iterator2 = linkedBlockingDeque1.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      Iterator<Integer> iterator1 = linkedBlockingDeque2.iterator();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.poll((long) (-4017), timeUnit0);
      Iterator<Object> iterator2 = linkedBlockingDeque1.iterator();
      Object object1 = linkedBlockingDeque1.peekLast();
      assertNotNull(object1);
}
 @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer1 = new Integer((-2144));
      boolean boolean3 = linkedBlockingDeque2.add(integer1);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      Iterator<Integer> iterator1 = linkedBlockingDeque2.iterator();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.poll((long) (-4017), timeUnit0);
      Iterator<Object> iterator2 = linkedBlockingDeque1.iterator();
      Object object1 = linkedBlockingDeque1.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      ;
}
 @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      ;
}
 @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      ;
}
 @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      ;
}
 @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      ;
}
 @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      ;
}
 @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      ;
}
 @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      ;
}
 @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      ;
}
 @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      ;
}
 @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      ;
}
 @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      ;
}
 @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      ;
}
 @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      ;
}
 @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      ;
}
 @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      ;
}
 @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      ;
}
 @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      ;
}
 @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      ;
}
 @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      ;
}
 @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      ;
}
 @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      ;
}
 @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      ;
}
 @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      ;
}
 @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      ;
}
 @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      ;
}
 @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      ;
}
 @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      ;
}
 @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      ;
}
 @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque4);
}
 @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      assertEquals(linkedBlockingDeque3, linkedBlockingDeque5);
}
 @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(6, false);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      boolean boolean0 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      boolean boolean1 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      Integer integer0 = new Integer(6);
      boolean boolean2 = linkedBlockingDeque0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3710, true);
      linkedBlockingDeque2.push("");
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque2);
      Object object0 = linkedBlockingDeque3.element();
      Object object1 = linkedBlockingDeque2.take();
      Locale locale0 = new Locale("", "", "defaultValue");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque5 = new LinkedBlockingDeque<String>(set0);
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      ;
}
 @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      ;
}
 @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      ;
}
 @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      ;
}
 @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      ;
}
 @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      ;
}
 @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      ;
}
 @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      ;
}
 @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      ;
}
 @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      ;
}
 @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      ;
}
 @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      ;
}
 @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      ;
}
 @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      assertEquals(linkedBlockingDeque2, integer0);
}
 @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      ;
}
 @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean3 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean3 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean3 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean3 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean3 = linkedBlockingDeque1.contains(integer0);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean3 = linkedBlockingDeque1.contains(integer0);
      Integer integer1 = linkedBlockingDeque2.pop();
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean3 = linkedBlockingDeque1.contains(integer0);
      Integer integer1 = linkedBlockingDeque2.pop();
      ;
}
 @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration1.withSeconds(78180000000000L);
      long long0 = duration1.toDays();
      Duration duration3 = duration0.minus(duration1);
      boolean boolean0 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean2 = linkedBlockingDeque2.add(integer0);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean3 = linkedBlockingDeque1.contains(integer0);
      Integer integer1 = linkedBlockingDeque2.pop();
      ;
}
 @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      assertTrue(duration0);
}
 @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      assertTrue(duration1);
}
 @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      ;
}
 @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      assertTrue(duration2);
}
 @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      assertTrue(integer0);
}
 @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      ;
}
 @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      assertEquals(linkedBlockingDeque0, duration3);
}
 @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      ;
}
 @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      ;
}
 @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      ;
}
 @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      ;
}
 @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      ;
}
 @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      ;
}
 @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      ;
}
 @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      ;
}
 @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      ;
}
 @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      Duration duration2 = duration0.minus(duration1);
      Integer integer0 = new Integer((-4017));
      boolean boolean1 = linkedBlockingDeque1.removeLastOccurrence(integer0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Duration duration3 = duration0.withSeconds((-4017));
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      ;
}
 @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      ;
}
 @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      ;
}
 @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      assertNotNull(integer2);
}
 @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      ;
}
 @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      assertEquals(linkedBlockingDeque0, list0);
}
 @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      ;
}
 @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      ;
}
 @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      ;
}
 @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      ;
}
 @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      ;
}
 @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      ;
}
 @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      ;
}
 @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      ;
}
 @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      ;
}
 @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      ;
}
 @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      ;
}
 @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      ;
}
 @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      ;
}
 @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      assertEquals(linkedBlockingDeque3, linkedBlockingDeque4);
}
 @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      linkedBlockingDeque0.clear();
      ;
}
 @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      linkedBlockingDeque0.clear();
      boolean boolean2 = linkedBlockingDeque4.remove(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      linkedBlockingDeque0.clear();
      boolean boolean2 = linkedBlockingDeque4.remove(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      linkedBlockingDeque0.clear();
      boolean boolean2 = linkedBlockingDeque4.remove(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      linkedBlockingDeque0.clear();
      boolean boolean2 = linkedBlockingDeque4.remove(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      linkedBlockingDeque0.clear();
      boolean boolean2 = linkedBlockingDeque4.remove(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      linkedBlockingDeque0.clear();
      boolean boolean2 = linkedBlockingDeque4.remove(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      linkedBlockingDeque0.clear();
      boolean boolean2 = linkedBlockingDeque4.remove(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Object object0 = new Object();
      Integer integer0 = new Integer(734);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Integer integer1 = linkedBlockingDeque1.pollLast((long) 734, timeUnit0);
      Integer integer2 = linkedBlockingDeque1.peekFirst();
      String string0 = linkedBlockingDeque1.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(734);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque2, locale_FilteringMode0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(list0);
      int int0 = linkedBlockingDeque3.remainingCapacity();
      linkedBlockingDeque3.putFirst(">");
      Object[] objectArray1 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<String> linkedBlockingDeque4 = new LinkedBlockingDeque<String>(false);
      Object object1 = linkedBlockingDeque4.peekLast();
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      linkedBlockingDeque0.clear();
      boolean boolean2 = linkedBlockingDeque4.remove(object0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(2787);
      ;
}
 @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(2787);
      ;
}
 @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(2787);
      Stream<Object> stream0 = linkedBlockingDeque0.parallelStream();
      ;
}
 @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(2787);
      Stream<Object> stream0 = linkedBlockingDeque0.parallelStream();
      ;
}
 @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(2787);
      Stream<Object> stream0 = linkedBlockingDeque0.parallelStream();
      boolean boolean0 = false;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(2787);
      Stream<Object> stream0 = linkedBlockingDeque0.parallelStream();
      boolean boolean0 = false;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      String string0 = linkedBlockingDeque1.poll();
      ;
}
 @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(2787);
      Stream<Object> stream0 = linkedBlockingDeque0.parallelStream();
      boolean boolean0 = false;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      String string0 = linkedBlockingDeque1.poll();
      Object object0 = linkedBlockingDeque1.pollLast();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque2 = new LinkedBlockingDeque<Locale.LanguageRange>(true);
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque2 = new LinkedBlockingDeque<Locale.LanguageRange>(true);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque2 = new LinkedBlockingDeque<Locale.LanguageRange>(true);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      Object object0 = linkedBlockingDeque3.peekLast();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque2 = new LinkedBlockingDeque<Locale.LanguageRange>(true);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      Object object0 = linkedBlockingDeque3.peekLast();
      boolean boolean1 = linkedBlockingDeque2.removeLastOccurrence((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque2 = new LinkedBlockingDeque<Locale.LanguageRange>(true);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(true);
      Object object0 = linkedBlockingDeque3.peekLast();
      boolean boolean1 = linkedBlockingDeque2.removeLastOccurrence((Object) null);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(set0);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(set0);
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(set0);
      linkedBlockingDeque0.clear();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(set0);
      linkedBlockingDeque0.clear();
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(set0);
      linkedBlockingDeque0.clear();
      boolean boolean0 = true;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(set0);
      linkedBlockingDeque0.clear();
      boolean boolean0 = true;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      ;
}
 @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      ;
}
 @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      ;
}
 @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      assertTrue(integer0);
}
 @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      ;
}
 @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      ;
}
 @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      ;
}
 @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      ;
}
 @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      ;
}
 @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      ;
}
 @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      ;
}
 @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      ;
}
 @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      ;
}
 @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      int int0 = (-422);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.contains("_[aVP.");
      Integer integer0 = new Integer((-422));
      linkedBlockingDeque1.addFirst("_[aVP.");
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) integer0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(642);
      ;
}
 @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(642);
      ;
}
 @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(642);
      Duration duration0 = Duration.ZERO;
      assertEquals(linkedBlockingDeque0, duration0);
}
 @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(642);
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(642);
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0, duration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(642);
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0, duration0);
      Integer integer1 = linkedBlockingDeque0.peekFirst();
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(642);
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0, duration0);
      Integer integer1 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(642);
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0, duration0);
      Integer integer1 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(642);
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0, duration0);
      Integer integer1 = linkedBlockingDeque0.peekFirst();
      Integer integer2 = linkedBlockingDeque0.removeLast();
      ;
}
 @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(642);
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0, duration0);
      Integer integer1 = linkedBlockingDeque0.peekFirst();
      Integer integer2 = linkedBlockingDeque0.removeLast();
      ;
}
 @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer(642);
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0, duration0);
      Integer integer1 = linkedBlockingDeque0.peekFirst();
      Integer integer2 = linkedBlockingDeque0.removeLast();
      ;
}
 @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      assertTrue(duration0);
}
 @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      assertTrue(duration1);
}
 @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      ;
}
 @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      ;
}
 @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      assertTrue(duration2);
}
 @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      ;
}
 @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      assertEquals(linkedBlockingDeque2, integer0);
}
 @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      ;
}
 @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      assertNotNull(object1);
}
 @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      assertTrue(boolean4);
}
 @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      assertNotNull(object2);
}
 @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      boolean boolean5 = linkedBlockingDeque1.remove((Object) iterator0);
      ;
}
 @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      boolean boolean5 = linkedBlockingDeque1.remove((Object) iterator0);
      ;
}
 @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      boolean boolean5 = linkedBlockingDeque1.remove((Object) iterator0);
      ;
}
 @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      boolean boolean5 = linkedBlockingDeque1.remove((Object) iterator0);
      ;
}
 @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      boolean boolean5 = linkedBlockingDeque1.remove((Object) iterator0);
      ;
}
 @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      boolean boolean5 = linkedBlockingDeque1.remove((Object) iterator0);
      ;
}
 @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      Object object2 = linkedBlockingDeque1.pollFirst(duration1);
      boolean boolean5 = linkedBlockingDeque1.remove((Object) iterator0);
      ;
}
 @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      ;
}
 @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      ;
}
 @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      ;
}
 @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      ;
}
 @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      assertEquals(0, object0);
}
 @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      assertNotNull(object2);
}
 @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      assertEquals(0, object2);
}
 @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      Duration duration0 = Duration.ofMinutes(Integer.MAX_VALUE);
      assertNotNull(duration0);
}
 @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      ;
}
 @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      ;
}
 @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      assertEquals(linkedBlockingDeque0, duration0);
}
 @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      ;
}
 @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      ;
}
 @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      ;
}
 @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      ;
}
 @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      ;
}
 @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      ;
}
 @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      ;
}
 @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      ;
}
 @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      ;
}
 @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      ;
}
 @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      ;
}
 @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      ;
}
 @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      ;
}
 @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      ;
}
 @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      ;
}
 @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      ;
}
 @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      ;
}
 @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      ;
}
 @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      Object object1 = linkedBlockingDeque0.getFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      Object object1 = linkedBlockingDeque0.getFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      Object object1 = linkedBlockingDeque0.getFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      Object object1 = linkedBlockingDeque0.getFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      Object object1 = linkedBlockingDeque0.getFirst();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      Object object1 = linkedBlockingDeque0.getFirst();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer((-2559));
      Duration duration0 = Duration.ofMinutes((-4483L));
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration1.withSeconds((-2559));
      Duration duration3 = duration1.negated();
      Duration duration4 = duration0.minus(duration1);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object object0 = linkedBlockingDeque0.pollFirst((-4483L), timeUnit0);
      boolean boolean0 = duration0.equals("D/`lB_3eHv~m");
      boolean boolean1 = linkedBlockingDeque0.offerFirst((Object) integer0, duration0);
      Object object1 = linkedBlockingDeque0.getFirst();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      Duration duration0 = Duration.ofSeconds(0L);
      assertEquals(linkedBlockingDeque0, duration0);
}
 @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      Duration duration0 = Duration.ofSeconds(0L);
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      Duration duration0 = chronoUnit0.getDuration();
      assertTrue(duration0);
}
 @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      Duration duration0 = chronoUnit0.getDuration();
      int int0 = 0;
      Duration duration1 = duration0.withNanos(0);
      assertTrue(duration1);
}
 @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      Duration duration0 = chronoUnit0.getDuration();
      int int0 = 0;
      Duration duration1 = duration0.withNanos(0);
      ;
}
 @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      Duration duration0 = chronoUnit0.getDuration();
      int int0 = 0;
      Duration duration1 = duration0.withNanos(0);
      ;
}
 @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque1.peekLast();
      boolean boolean0 = linkedBlockingDeque0.add(linkedBlockingDeque1);
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      Duration duration0 = chronoUnit0.getDuration();
      int int0 = 0;
      Duration duration1 = duration0.withNanos(0);
      ;
}
 @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(0);
      Duration duration0 = Duration.ofSeconds(0L, 0L);
      assertEquals(linkedBlockingDeque0, duration0);
}
 @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(0);
      Duration duration0 = Duration.ofSeconds(0L, 0L);
      boolean boolean0 = linkedBlockingDeque0.offer(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(0);
      Duration duration0 = Duration.ofSeconds(0L, 0L);
      boolean boolean0 = linkedBlockingDeque0.offer(integer0, duration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Integer integer0 = linkedBlockingDeque0.pollFirst(1L, timeUnit0);
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      ;
}
 @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      ;
}
 @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      String string0 = linkedBlockingDeque2.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      String string0 = linkedBlockingDeque2.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      String string0 = linkedBlockingDeque2.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      String string0 = linkedBlockingDeque2.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      String string0 = linkedBlockingDeque2.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      String string0 = linkedBlockingDeque2.toString();
      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>(3625);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      String string0 = linkedBlockingDeque2.toString();
      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>(3625);
      ;
}
 @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      String string0 = linkedBlockingDeque2.toString();
      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>(3625);
      Object object0 = linkedBlockingDeque3.pollFirst();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      int int0 = 3625;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(3625, true);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.forEach(consumer0);
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("defaultValue", 0L, timeUnit0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      boolean boolean1 = linkedBlockingDeque1.contains(linkedBlockingDeque0);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(3625);
      String string0 = linkedBlockingDeque2.toString();
      LinkedBlockingDeque<Integer> linkedBlockingDeque3 = new LinkedBlockingDeque<Integer>(3625);
      Object object0 = linkedBlockingDeque3.pollFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      int int0 = linkedBlockingDeque0.size();
      ;
}
 @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque1.removeFirstOccurrence(linkedBlockingDeque0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque1.removeFirstOccurrence(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.peekFirst();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque1.removeFirstOccurrence(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.peekFirst();
      String string1 = linkedBlockingDeque1.peekFirst();
      assertNotNull(string1);
}
 @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque1.removeFirstOccurrence(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.peekFirst();
      String string1 = linkedBlockingDeque1.peekFirst();
      boolean boolean1 = linkedBlockingDeque0.removeAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque1.removeFirstOccurrence(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.peekFirst();
      String string1 = linkedBlockingDeque1.peekFirst();
      boolean boolean1 = linkedBlockingDeque0.removeAll(linkedBlockingDeque1);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      Spliterator<String> spliterator0 = linkedBlockingDeque0.spliterator();
      assertEquals(linkedBlockingDeque0, spliterator0);
}
 @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      boolean boolean0 = true;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      boolean boolean0 = true;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      ;
}
 @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      ;
}
 @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      assertNotNull(chronoLocalDate0);
}
 @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean0 = linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      String string0 = linkedBlockingDeque1.remove();
      boolean boolean1 = linkedBlockingDeque1.hasTakeWaiters();
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Object object0 = linkedBlockingDeque2.peek();
      Iterator<Object> iterator0 = linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      Object object1 = linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      ChronoLocalDate chronoLocalDate0 = linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      assertNotNull(chronoUnit0);
}
 @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test1677()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      ;
}
 @Test(timeout = 4000)
  public void test1678()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test1679()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1680()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      assertNotNull(objectArray0);
}
 @Test(timeout = 4000)
  public void test1681()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1682()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1683()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test1684()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1685()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      ;
}
 @Test(timeout = 4000)
  public void test1686()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      ;
}
 @Test(timeout = 4000)
  public void test1687()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      ;
}
 @Test(timeout = 4000)
  public void test1688()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test1689()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1690()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1691()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1692()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1693()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(3858);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test1694()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(3858);
      ;
}
 @Test(timeout = 4000)
  public void test1695()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(3858);
      boolean boolean0 = linkedBlockingDeque2.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test1696()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(3858);
      boolean boolean0 = linkedBlockingDeque2.hasTakeWaiters();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1697()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(3858);
      boolean boolean0 = linkedBlockingDeque2.hasTakeWaiters();
      Duration duration1 = duration0.minusHours(3858L);
      assertTrue(duration1);
}
 @Test(timeout = 4000)
  public void test1698()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(3858);
      boolean boolean0 = linkedBlockingDeque2.hasTakeWaiters();
      Duration duration1 = duration0.minusHours(3858L);
      ;
}
 @Test(timeout = 4000)
  public void test1699()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(3858);
      boolean boolean0 = linkedBlockingDeque2.hasTakeWaiters();
      Duration duration1 = duration0.minusHours(3858L);
      ;
}
 @Test(timeout = 4000)
  public void test1700()  throws Throwable  {
      int int0 = 3858;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3858);
      Integer integer0 = linkedBlockingDeque0.peekFirst();
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Duration duration0 = Duration.ofMinutes(3858);
      String string0 = "";
      linkedBlockingDeque1.putFirst("");
      long long0 = duration0.toMinutes();
      Object object0 = linkedBlockingDeque1.pollLast(duration0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(3858);
      boolean boolean0 = linkedBlockingDeque2.hasTakeWaiters();
      Duration duration1 = duration0.minusHours(3858L);
      ;
}
 @Test(timeout = 4000)
  public void test1701()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1702()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1703()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      int int1 = linkedBlockingDeque0.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test1704()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      int int1 = linkedBlockingDeque0.getTakeQueueLength();
      assertEquals(1, int1);
}
 @Test(timeout = 4000)
  public void test1705()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      int int1 = linkedBlockingDeque0.getTakeQueueLength();
      int int2 = linkedBlockingDeque0.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test1706()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      int int1 = linkedBlockingDeque0.getTakeQueueLength();
      int int2 = linkedBlockingDeque0.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test1707()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      int int1 = linkedBlockingDeque0.getTakeQueueLength();
      int int2 = linkedBlockingDeque0.getTakeQueueLength();
      assertEquals(0, int2);
}
 @Test(timeout = 4000)
  public void test1708()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test1709()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      assertEquals(linkedBlockingDeque0, duration0);
}
 @Test(timeout = 4000)
  public void test1710()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      ;
}
 @Test(timeout = 4000)
  public void test1711()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      ;
}
 @Test(timeout = 4000)
  public void test1712()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      ;
}
 @Test(timeout = 4000)
  public void test1713()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      int int0 = duration0.compareTo(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1714()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      int int0 = duration0.compareTo(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1715()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      int int0 = duration0.compareTo(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1716()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      int int0 = duration0.compareTo(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1717()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      int int0 = duration0.compareTo(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test1718()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      int int0 = duration0.compareTo(duration1);
      Integer integer0 = linkedBlockingDeque0.pollLast(duration0);
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test1719()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      int int0 = duration0.compareTo(duration1);
      Integer integer0 = linkedBlockingDeque0.pollLast(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1720()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      int int0 = duration0.compareTo(duration1);
      Integer integer0 = linkedBlockingDeque0.pollLast(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1721()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Duration duration0 = Duration.ofMillis(628L);
      Duration duration1 = Duration.ofSeconds(628L, 628L);
      int int0 = duration0.compareTo(duration1);
      Integer integer0 = linkedBlockingDeque0.pollLast(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1722()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1618, true);
      ;
}
 @Test(timeout = 4000)
  public void test1723()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1618, true);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast("v0hW13;.\"DK<%f|K5", (long) 1618, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1724()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1618, true);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerLast("v0hW13;.\"DK<%f|K5", (long) 1618, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1725()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1726()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(7, false);
      ;
}
 @Test(timeout = 4000)
  public void test1727()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(7, false);
      boolean boolean0 = linkedBlockingDeque0.offerLast("");
      ;
}
 @Test(timeout = 4000)
  public void test1728()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(7, false);
      boolean boolean0 = linkedBlockingDeque0.offerLast("");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1729()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(7, false);
      boolean boolean0 = linkedBlockingDeque0.offerLast("");
      Duration duration0 = Duration.ofSeconds((long) 7, 0L);
      assertTrue(duration0);
}
 @Test(timeout = 4000)
  public void test1730()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(7, false);
      boolean boolean0 = linkedBlockingDeque0.offerLast("");
      Duration duration0 = Duration.ofSeconds((long) 7, 0L);
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1731()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(7, false);
      boolean boolean0 = linkedBlockingDeque0.offerLast("");
      Duration duration0 = Duration.ofSeconds((long) 7, 0L);
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1732()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(7, false);
      boolean boolean0 = linkedBlockingDeque0.offerLast("");
      Duration duration0 = Duration.ofSeconds((long) 7, 0L);
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1733()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1734()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1735()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1736()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1737()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1738()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1739()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test1740()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      ;
}
 @Test(timeout = 4000)
  public void test1741()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      ;
}
 @Test(timeout = 4000)
  public void test1742()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1743()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test1744()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      ;
}
 @Test(timeout = 4000)
  public void test1745()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      ;
}
 @Test(timeout = 4000)
  public void test1746()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1747()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1748()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      ;
}
 @Test(timeout = 4000)
  public void test1749()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      ;
}
 @Test(timeout = 4000)
  public void test1750()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      ;
}
 @Test(timeout = 4000)
  public void test1751()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      ;
}
 @Test(timeout = 4000)
  public void test1752()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test1753()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      Object object1 = linkedBlockingDeque1.pollLast();
      ;
}
 @Test(timeout = 4000)
  public void test1754()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      Object object1 = linkedBlockingDeque1.pollLast();
      ;
}
 @Test(timeout = 4000)
  public void test1755()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      Object object1 = linkedBlockingDeque1.pollLast();
      ;
}
 @Test(timeout = 4000)
  public void test1756()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      Object object1 = linkedBlockingDeque1.pollLast();
      assertNotNull(object1);
}
 @Test(timeout = 4000)
  public void test1757()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      Object object1 = linkedBlockingDeque1.pollLast();
      int int1 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test1758()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      Object object1 = linkedBlockingDeque1.pollLast();
      int int1 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test1759()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      Object object1 = linkedBlockingDeque1.pollLast();
      int int1 = linkedBlockingDeque1.size();
      assertEquals(1, int1);
}
 @Test(timeout = 4000)
  public void test1760()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      long long0 = (-336L);
      String string0 = linkedBlockingDeque0.pollLast();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst("&9", (-336L), timeUnit0);
      String string1 = linkedBlockingDeque0.peekFirst();
      int int0 = Integer.MAX_VALUE;
      boolean boolean1 = linkedBlockingDeque0.isEmpty();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, true);
      Duration duration0 = Duration.ofNanos((-336L));
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean2 = linkedBlockingDeque1.offerFirst((Object) "&9");
      Object object1 = linkedBlockingDeque1.pollLast();
      int int1 = linkedBlockingDeque1.size();
      linkedBlockingDeque0.addLast("defaultValue");
      ;
}
 @Test(timeout = 4000)
  public void test1761()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1762()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      ;
}
 @Test(timeout = 4000)
  public void test1763()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      ;
}
 @Test(timeout = 4000)
  public void test1764()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      ;
}
 @Test(timeout = 4000)
  public void test1765()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      String string1 = linkedBlockingDeque0.take();
      assertNotNull(string1);
}
 @Test(timeout = 4000)
  public void test1766()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      String string1 = linkedBlockingDeque0.take();
      ;
}
 @Test(timeout = 4000)
  public void test1767()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      String string1 = linkedBlockingDeque0.take();
      ;
}
 @Test(timeout = 4000)
  public void test1768()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      String string1 = linkedBlockingDeque0.take();
      assertNotNull(string1);
}
 @Test(timeout = 4000)
  public void test1769()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      String string1 = linkedBlockingDeque0.take();
      int int0 = 7;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(7);
      ;
}
 @Test(timeout = 4000)
  public void test1770()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      String string1 = linkedBlockingDeque0.take();
      int int0 = 7;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(7);
      ;
}
 @Test(timeout = 4000)
  public void test1771()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      String string1 = linkedBlockingDeque0.take();
      int int0 = 7;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(7);
      Duration duration0 = Duration.ofMinutes(7);
      assertEquals(linkedBlockingDeque0, duration0);
}
 @Test(timeout = 4000)
  public void test1772()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      String string0 = "defaultValue";
      linkedBlockingDeque0.putLast("defaultValue");
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      String string1 = linkedBlockingDeque0.take();
      int int0 = 7;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(7);
      Duration duration0 = Duration.ofMinutes(7);
      JapaneseEra japaneseEra0 = JapaneseEra.TAISHO;
      assertEquals(linkedBlockingDeque0, japaneseEra0);
}
 @Test(timeout = 4000)
  public void test1773()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1774()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1775()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1776()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Iterator<Object> iterator0 = linkedBlockingDeque1.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1777()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Iterator<Object> iterator0 = linkedBlockingDeque1.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test1778()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Iterator<Object> iterator0 = linkedBlockingDeque1.iterator();
      linkedBlockingDeque0.interuptTakeWaiters();
      Iterator<Object> iterator1 = linkedBlockingDeque1.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test1779()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Iterator<Object> iterator0 = linkedBlockingDeque1.iterator();
      linkedBlockingDeque0.interuptTakeWaiters();
      Iterator<Object> iterator1 = linkedBlockingDeque1.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test1780()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Iterator<Object> iterator0 = linkedBlockingDeque1.iterator();
      linkedBlockingDeque0.interuptTakeWaiters();
      Iterator<Object> iterator1 = linkedBlockingDeque1.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test1781()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1782()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(677);
      ;
}
 @Test(timeout = 4000)
  public void test1783()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(677);
      Duration duration0 = Duration.ofNanos(1L);
      ;
}
 @Test(timeout = 4000)
  public void test1784()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(677);
      Duration duration0 = Duration.ofNanos(1L);
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1785()  throws Throwable  {
      int int0 = 402;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(402, true);
      ;
}
 @Test(timeout = 4000)
  public void test1786()  throws Throwable  {
      int int0 = 402;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(402, true);
      ;
}
 @Test(timeout = 4000)
  public void test1787()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1788()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1789()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1790()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test1791()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test1792()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      ;
}
 @Test(timeout = 4000)
  public void test1793()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      ;
}
 @Test(timeout = 4000)
  public void test1794()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      ;
}
 @Test(timeout = 4000)
  public void test1795()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      assertEquals(linkedBlockingDeque1, integer2);
}
 @Test(timeout = 4000)
  public void test1796()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      ;
}
 @Test(timeout = 4000)
  public void test1797()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      ;
}
 @Test(timeout = 4000)
  public void test1798()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      ;
}
 @Test(timeout = 4000)
  public void test1799()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      assertEquals(linkedBlockingDeque1, integer3);
}
 @Test(timeout = 4000)
  public void test1800()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      ;
}
 @Test(timeout = 4000)
  public void test1801()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      ;
}
 @Test(timeout = 4000)
  public void test1802()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      ;
}
 @Test(timeout = 4000)
  public void test1803()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      ;
}
 @Test(timeout = 4000)
  public void test1804()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      ;
}
 @Test(timeout = 4000)
  public void test1805()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      ;
}
 @Test(timeout = 4000)
  public void test1806()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      ;
}
 @Test(timeout = 4000)
  public void test1807()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      ;
}
 @Test(timeout = 4000)
  public void test1808()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      ;
}
 @Test(timeout = 4000)
  public void test1809()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      ;
}
 @Test(timeout = 4000)
  public void test1810()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      integerArray0[4] = integer4;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test1811()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      integerArray0[4] = integer4;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test1812()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      integerArray0[4] = integer4;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test1813()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      integerArray0[4] = integer4;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test1814()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      integerArray0[4] = integer4;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test1815()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-243));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-673));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-774));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-243));
      integerArray0[4] = integer4;
      Integer[] integerArray1 = linkedBlockingDeque1.toArray(integerArray0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.poll((-1820L), timeUnit0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1816()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1817()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      ;
}
 @Test(timeout = 4000)
  public void test1818()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      ;
}
 @Test(timeout = 4000)
  public void test1819()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1820()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1821()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1822()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1823()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1824()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0);
}
 @Test(timeout = 4000)
  public void test1825()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1826()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1827()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test1828()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1829()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1830()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1831()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test1832()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1833()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test1834()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1835()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1836()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1837()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1838()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1839()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1840()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1841()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test1842()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test1843()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test1844()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test1845()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test1846()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test1847()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test1848()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test1849()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1850()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertTrue(boolean4);
}
 @Test(timeout = 4000)
  public void test1851()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1852()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1853()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test1854()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test1855()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      ;
}
 @Test(timeout = 4000)
  public void test1856()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test1857()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test1858()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofMillis(0L);
      assertEquals(1, duration0);
}
 @Test(timeout = 4000)
  public void test1859()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1860()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1861()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1862()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1863()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1864()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1865()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1866()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1867()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      boolean boolean0 = linkedBlockingDeque0.removeLastOccurrence(integer0);
      boolean boolean1 = linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      boolean boolean2 = linkedHashSet0.add(integer0);
      boolean boolean3 = linkedHashSet0.retainAll(linkedBlockingDeque0);
      boolean boolean4 = linkedBlockingDeque0.addAll(linkedHashSet0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, false);
      int int0 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofMillis(0L);
      boolean boolean5 = linkedBlockingDeque0.offerFirst(integer0, duration0);
      assertTrue(boolean5);
}
 @Test(timeout = 4000)
  public void test1868()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1869()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque0.clear();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1870()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque0.clear();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1871()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque0.clear();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1872()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque0.clear();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedHashSet0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test1873()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque0.clear();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedHashSet0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test1874()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque0.clear();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedHashSet0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test1875()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque0.clear();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedHashSet0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test1876()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      linkedBlockingDeque0.clear();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedHashSet0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test1877()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1878()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1879()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1880()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Integer>) linkedList0, (-2108));
      ;
}
 @Test(timeout = 4000)
  public void test1881()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Integer>) linkedList0, (-2108));
      ;
}
 @Test(timeout = 4000)
  public void test1882()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Integer>) linkedList0, (-2108));
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1883()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super Integer>) linkedList0, (-2108));
      ;
}
 @Test(timeout = 4000)
  public void test1884()  throws Throwable  {
      Collection<Integer> collection0 = null;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = null;
      try {
        linkedBlockingDeque0 = new LinkedBlockingDeque<Object>((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }
 @Test(timeout = 4000)
  public void test1885()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1, true);
      ;
}
 @Test(timeout = 4000)
  public void test1886()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1, true);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      String string0 = linkedBlockingDeque0.pollFirst((long) 1, timeUnit0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1887()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1, true);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      String string0 = linkedBlockingDeque0.pollFirst((long) 1, timeUnit0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1888()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1, true);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      String string0 = linkedBlockingDeque0.pollFirst((long) 1, timeUnit0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1889()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1, true);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      String string0 = linkedBlockingDeque0.pollFirst((long) 1, timeUnit0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1890()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1, true);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      String string0 = linkedBlockingDeque0.pollFirst((long) 1, timeUnit0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test1891()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1, true);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      String string0 = linkedBlockingDeque0.pollFirst((long) 1, timeUnit0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      int int0 = linkedBlockingDeque1.drainTo((Collection<? super Integer>) linkedBlockingDeque2, (-1903));
      ;
}
 @Test(timeout = 4000)
  public void test1892()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1, true);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      String string0 = linkedBlockingDeque0.pollFirst((long) 1, timeUnit0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      int int0 = linkedBlockingDeque1.drainTo((Collection<? super Integer>) linkedBlockingDeque2, (-1903));
      ;
}
 @Test(timeout = 4000)
  public void test1893()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(1, true);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      String string0 = linkedBlockingDeque0.pollFirst((long) 1, timeUnit0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>();
      int int0 = linkedBlockingDeque1.drainTo((Collection<? super Integer>) linkedBlockingDeque2, (-1903));
      ;
}
 @Test(timeout = 4000)
  public void test1894()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1895()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test1896()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1897()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1898()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1899()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test1900()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.poll(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1901()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.poll(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1902()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.poll(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1903()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.poll(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1904()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.poll(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1905()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.poll(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1906()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.poll(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1907()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1908()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Duration duration0 = Duration.ZERO;
      assertEquals(linkedBlockingDeque0, duration0);
}
 @Test(timeout = 4000)
  public void test1909()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Duration duration0 = Duration.ZERO;
      String string0 = linkedBlockingDeque0.pollLast(duration0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1910()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1911()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1912()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1913()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
}
 @Test(timeout = 4000)
  public void test1914()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1915()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1916()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      ;
}
 @Test(timeout = 4000)
  public void test1917()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      ;
}
 @Test(timeout = 4000)
  public void test1918()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      ;
}
 @Test(timeout = 4000)
  public void test1919()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test1920()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test1921()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1922()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test1923()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      ;
}
 @Test(timeout = 4000)
  public void test1924()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      ;
}
 @Test(timeout = 4000)
  public void test1925()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1926()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1927()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1928()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test1929()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test1930()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      String string2 = linkedBlockingDeque0.take();
      ;
}
 @Test(timeout = 4000)
  public void test1931()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      String string2 = linkedBlockingDeque0.take();
      ;
}
 @Test(timeout = 4000)
  public void test1932()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      String string2 = linkedBlockingDeque0.take();
      ;
}
 @Test(timeout = 4000)
  public void test1933()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      String string2 = linkedBlockingDeque0.take();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test1934()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      String string2 = linkedBlockingDeque0.take();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1935()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      String string2 = linkedBlockingDeque0.take();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      boolean boolean3 = linkedBlockingDeque1.remove((Object) stream0);
      ;
}
 @Test(timeout = 4000)
  public void test1936()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      String string2 = linkedBlockingDeque0.take();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      boolean boolean3 = linkedBlockingDeque1.remove((Object) stream0);
      ;
}
 @Test(timeout = 4000)
  public void test1937()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      String string2 = linkedBlockingDeque0.take();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      boolean boolean3 = linkedBlockingDeque1.remove((Object) stream0);
      ;
}
 @Test(timeout = 4000)
  public void test1938()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      String string2 = linkedBlockingDeque0.take();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      boolean boolean3 = linkedBlockingDeque1.remove((Object) stream0);
      ;
}
 @Test(timeout = 4000)
  public void test1939()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      String string2 = linkedBlockingDeque0.take();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      boolean boolean3 = linkedBlockingDeque1.remove((Object) stream0);
      ;
}
 @Test(timeout = 4000)
  public void test1940()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.isEmpty();
      String string0 = linkedBlockingDeque0.poll();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Spliterator<String> spliterator0 = linkedHashSet0.spliterator();
      boolean boolean1 = linkedBlockingDeque0.addAll(linkedHashSet0);
      String string1 = linkedBlockingDeque0.poll();
      Stream<String> stream0 = linkedBlockingDeque0.stream();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean2 = linkedBlockingDeque0.offerLast("Deque full", 0L, timeUnit0);
      String string2 = linkedBlockingDeque0.take();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      boolean boolean3 = linkedBlockingDeque1.remove((Object) stream0);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test1941()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      ;
}
 @Test(timeout = 4000)
  public void test1942()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      ;
}
 @Test(timeout = 4000)
  public void test1943()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test1944()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      ;
}
 @Test(timeout = 4000)
  public void test1945()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      ;
}
 @Test(timeout = 4000)
  public void test1946()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1947()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1948()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1949()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      ;
}
 @Test(timeout = 4000)
  public void test1950()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      ;
}
 @Test(timeout = 4000)
  public void test1951()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      ;
}
 @Test(timeout = 4000)
  public void test1952()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      assertEquals(1, int1);
}
 @Test(timeout = 4000)
  public void test1953()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test1954()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1955()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      int int2 = linkedBlockingDeque1.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test1956()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      int int2 = linkedBlockingDeque1.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test1957()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      int int2 = linkedBlockingDeque1.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test1958()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      int int2 = linkedBlockingDeque1.getTakeQueueLength();
      assertEquals(0, int2);
}
 @Test(timeout = 4000)
  public void test1959()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      int int2 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofSeconds((-3802L));
      assertEquals(0, duration0);
}
 @Test(timeout = 4000)
  public void test1960()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      int int2 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofSeconds((-3802L));
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1961()  throws Throwable  {
      int int0 = 584;
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(584, false);
      Integer integer0 = new Integer(584);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      int int1 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      int int2 = linkedBlockingDeque1.getTakeQueueLength();
      Duration duration0 = Duration.ofSeconds((-3802L));
      Object object0 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test1962()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1963()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1964()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1965()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test1966()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1967()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test1968()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      ;
}
 @Test(timeout = 4000)
  public void test1969()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      ;
}
 @Test(timeout = 4000)
  public void test1970()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1971()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1972()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1973()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1974()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      ;
}
 @Test(timeout = 4000)
  public void test1975()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      ;
}
 @Test(timeout = 4000)
  public void test1976()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      ;
}
 @Test(timeout = 4000)
  public void test1977()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1978()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1979()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1980()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1981()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1982()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1983()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1984()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1985()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1986()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1987()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1988()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      Integer integer0 = new Integer(3924);
      boolean boolean0 = linkedHashSet0.add(integer0);
      int int0 = 1;
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(1, true);
      int int1 = linkedBlockingDeque0.drainTo((Collection<? super Object>) linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test1989()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1990()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test1991()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test1992()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1993()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test1994()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      ;
}
 @Test(timeout = 4000)
  public void test1995()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      ;
}
 @Test(timeout = 4000)
  public void test1996()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      ;
}
 @Test(timeout = 4000)
  public void test1997()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1998()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test1999()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2000()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2001()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2002()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2003()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2004()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2005()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2006()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2007()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2008()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2009()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2010()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2011()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2012()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2013()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2014()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2015()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2016()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      ;
}
 @Test(timeout = 4000)
  public void test2017()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      ;
}
 @Test(timeout = 4000)
  public void test2018()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      ;
}
 @Test(timeout = 4000)
  public void test2019()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test2020()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2021()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2022()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2023()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2024()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2025()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2026()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2027()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2028()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2029()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2030()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test2031()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2032()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2033()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2034()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2035()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2036()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2037()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2038()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2039()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2040()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2041()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2042()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test2043()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2044()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2045()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2046()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2047()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2048()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2049()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2050()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2051()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2052()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2053()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2054()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2055()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2056()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2057()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2058()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2059()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2060()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2061()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2062()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      assertEquals(0, int1);
}
 @Test(timeout = 4000)
  public void test2063()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2064()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2065()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2066()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2067()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2068()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2069()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2070()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2071()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2072()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2073()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2074()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2075()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2076()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2077()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2078()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2079()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2080()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2081()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2082()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2083()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2084()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2085()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2086()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2087()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2088()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2089()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2090()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2091()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2092()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2093()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2094()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2095()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2096()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2097()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2098()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test2099()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      assertNotNull(integer2);
}
 @Test(timeout = 4000)
  public void test2100()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2101()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2102()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2103()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2104()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2105()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2106()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2107()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2108()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2109()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2110()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2111()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2112()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2113()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2114()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2115()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2116()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2117()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2118()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2119()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2120()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2121()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2122()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2123()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2124()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2125()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2126()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2127()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2128()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2129()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2130()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2131()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2132()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2133()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2134()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2135()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2136()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2137()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2138()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2139()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2140()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2141()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      ;
}
 @Test(timeout = 4000)
  public void test2142()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      ;
}
 @Test(timeout = 4000)
  public void test2143()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      ;
}
 @Test(timeout = 4000)
  public void test2144()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      ;
}
 @Test(timeout = 4000)
  public void test2145()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      ;
}
 @Test(timeout = 4000)
  public void test2146()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      assertEquals(1, int4);
}
 @Test(timeout = 4000)
  public void test2147()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      ;
}
 @Test(timeout = 4000)
  public void test2148()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2149()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2150()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2151()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2152()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2153()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2154()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2155()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2156()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer1 = linkedBlockingDeque1.getLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer2 = linkedBlockingDeque0.peekLast();
      Integer integer3 = linkedBlockingDeque1.pop();
      int int3 = linkedBlockingDeque3.getTakeQueueLength();
      Object object1 = linkedBlockingDeque3.poll();
      int int4 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2157()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test2158()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object object0 = linkedBlockingDeque0.poll();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test2159()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(2513, false);
      ;
}
 @Test(timeout = 4000)
  public void test2160()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(2513, false);
      ;
}
 @Test(timeout = 4000)
  public void test2161()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(2513, false);
      Integer integer0 = new Integer(2);
      assertEquals(linkedBlockingDeque1, integer0);
}
 @Test(timeout = 4000)
  public void test2162()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(2513, false);
      Integer integer0 = new Integer(2);
      ;
}
 @Test(timeout = 4000)
  public void test2163()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(2513, false);
      Integer integer0 = new Integer(2);
      linkedBlockingDeque1.push(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2164()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(2513, false);
      Integer integer0 = new Integer(2);
      linkedBlockingDeque1.push(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2165()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2166()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String string0 = linkedBlockingDeque0.pollFirst();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2167()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String string0 = linkedBlockingDeque0.pollFirst();
      String string1 = linkedBlockingDeque0.peekLast();
      assertNotNull(string1);
}
 @Test(timeout = 4000)
  public void test2168()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String string0 = linkedBlockingDeque0.pollFirst();
      String string1 = linkedBlockingDeque0.peekLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test2169()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String string0 = linkedBlockingDeque0.pollFirst();
      String string1 = linkedBlockingDeque0.peekLast();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Duration duration0 = Duration.ofMinutes((-2065L));
      assertEquals(linkedBlockingDeque0, duration0);
}
 @Test(timeout = 4000)
  public void test2170()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test2171()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      ;
}
 @Test(timeout = 4000)
  public void test2172()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      int int0 = 7;
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(7);
      ;
}
 @Test(timeout = 4000)
  public void test2173()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2174()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.put(";?");
      ;
}
 @Test(timeout = 4000)
  public void test2175()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.put(";?");
      String string0 = "org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr";
      boolean boolean0 = linkedBlockingDeque0.offer("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr");
      ;
}
 @Test(timeout = 4000)
  public void test2176()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.put(";?");
      String string0 = "org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr";
      boolean boolean0 = linkedBlockingDeque0.offer("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2177()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.put(";?");
      String string0 = "org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr";
      boolean boolean0 = linkedBlockingDeque0.offer("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr");
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test2178()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.put(";?");
      String string0 = "org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr";
      boolean boolean0 = linkedBlockingDeque0.offer("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr");
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test2179()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.put(";?");
      String string0 = "org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr";
      boolean boolean0 = linkedBlockingDeque0.offer("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr");
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Object object0 = linkedBlockingDeque1.pollLast();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test2180()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.put(";?");
      String string0 = "org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr";
      boolean boolean0 = linkedBlockingDeque0.offer("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr");
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Object object0 = linkedBlockingDeque1.pollLast();
      ;
}
 @Test(timeout = 4000)
  public void test2181()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.put(";?");
      String string0 = "org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr";
      boolean boolean0 = linkedBlockingDeque0.offer("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr");
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Object object0 = linkedBlockingDeque1.pollLast();
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test2182()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.put(";?");
      String string0 = "org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr";
      boolean boolean0 = linkedBlockingDeque0.offer("org.apache.commons.pool2.impl.LinkedBlockingDeque$DescendingItr");
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(true);
      Object object0 = linkedBlockingDeque1.pollLast();
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2183()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      ;
}
 @Test(timeout = 4000)
  public void test2184()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      ;
}
 @Test(timeout = 4000)
  public void test2185()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test2186()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2187()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      ;
}
 @Test(timeout = 4000)
  public void test2188()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test2189()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(699);
      Iterator<Object> iterator0 = linkedBlockingDeque0.descendingIterator();
      linkedBlockingDeque0.put(iterator0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test2190()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test2191()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test2192()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2193()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2194()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2195()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2196()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2197()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2198()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(objectArray1, charBuffer0);
}
 @Test(timeout = 4000)
  public void test2199()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2200()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2201()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasArray());
}
 @Test(timeout = 4000)
  public void test2202()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2203()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2204()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.capacity());
}
 @Test(timeout = 4000)
  public void test2205()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.isReadOnly());
}
 @Test(timeout = 4000)
  public void test2206()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test2207()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2208()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test2209()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charBuffer0.position());
}
 @Test(timeout = 4000)
  public void test2210()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2211()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '[';
      charArray0[3] = 'x';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = linkedBlockingDeque0.toArray(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2212()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2213()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = linkedBlockingDeque0.toArray(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2214()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = linkedBlockingDeque0.toArray(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2215()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = linkedBlockingDeque0.toArray(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2216()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = linkedBlockingDeque0.toArray(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2217()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = linkedBlockingDeque0.toArray(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2218()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = linkedBlockingDeque0.toArray(stringArray0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test2219()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = linkedBlockingDeque0.toArray(stringArray0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2220()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2221()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test2222()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      ;
}
 @Test(timeout = 4000)
  public void test2223()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      ;
}
 @Test(timeout = 4000)
  public void test2224()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      ;
}
 @Test(timeout = 4000)
  public void test2225()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      ;
}
 @Test(timeout = 4000)
  public void test2226()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      assertEquals(linkedBlockingDeque0, integer2);
}
 @Test(timeout = 4000)
  public void test2227()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      ;
}
 @Test(timeout = 4000)
  public void test2228()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      ;
}
 @Test(timeout = 4000)
  public void test2229()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      ;
}
 @Test(timeout = 4000)
  public void test2230()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals(linkedBlockingDeque0, integer3);
}
 @Test(timeout = 4000)
  public void test2231()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      ;
}
 @Test(timeout = 4000)
  public void test2232()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      ;
}
 @Test(timeout = 4000)
  public void test2233()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      ;
}
 @Test(timeout = 4000)
  public void test2234()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      ;
}
 @Test(timeout = 4000)
  public void test2235()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      ;
}
 @Test(timeout = 4000)
  public void test2236()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2237()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2238()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2239()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2240()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2241()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test2242()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-460));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3069));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2035);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Object[] objectArray0 = linkedBlockingDeque0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test2243()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1);
      ;
}
 @Test(timeout = 4000)
  public void test2244()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1);
      ;
}
 @Test(timeout = 4000)
  public void test2245()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1);
      Integer integer0 = new Integer(2757);
      ;
}
 @Test(timeout = 4000)
  public void test2246()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(1);
      Integer integer0 = new Integer(2757);
      ;
}
 @Test(timeout = 4000)
  public void test2247()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test2248()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test2249()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test2250()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2251()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2252()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2253()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2254()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2255()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      linkedBlockingDeque1.addLast(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2256()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      linkedBlockingDeque1.addLast(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2257()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      linkedBlockingDeque1.addLast(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2258()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      linkedBlockingDeque1.addLast(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2259()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      linkedBlockingDeque1.addLast(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2260()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      linkedBlockingDeque1.addLast(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2261()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      linkedBlockingDeque1.addLast(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(true);
      ;
}
 @Test(timeout = 4000)
  public void test2262()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      boolean boolean0 = linkedBlockingDeque0.removeFirstOccurrence((Object) null);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      linkedBlockingDeque1.addLast(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(true);
      String string0 = linkedBlockingDeque2.peek();
      ;
}
 @Test(timeout = 4000)
  public void test2263()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test2264()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      ;
}
 @Test(timeout = 4000)
  public void test2265()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      Integer integer0 = new Integer((-1));
      ;
}
 @Test(timeout = 4000)
  public void test2266()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      Integer integer0 = new Integer((-1));
      ;
}
 @Test(timeout = 4000)
  public void test2267()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = linkedBlockingDeque0.offerFirst((Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2268()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = linkedBlockingDeque0.offerFirst((Object) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2269()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = linkedBlockingDeque0.offerFirst((Object) integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2270()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = linkedBlockingDeque0.offerFirst((Object) integer0);
      Object object0 = linkedBlockingDeque0.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2271()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = linkedBlockingDeque0.offerFirst((Object) integer0);
      Object object0 = linkedBlockingDeque0.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2272()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(true);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = linkedBlockingDeque0.offerFirst((Object) integer0);
      Object object0 = linkedBlockingDeque0.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2273()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      ;
}
 @Test(timeout = 4000)
  public void test2274()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      ;
}
 @Test(timeout = 4000)
  public void test2275()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      ;
}
 @Test(timeout = 4000)
  public void test2276()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      ;
}
 @Test(timeout = 4000)
  public void test2277()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2278()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2279()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2280()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2281()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2282()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2283()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test2284()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test2285()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test2286()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test2287()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test2288()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test2289()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test2290()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test2291()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test2292()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      assertEquals(1, locale0);
}
 @Test(timeout = 4000)
  public void test2293()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test2294()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test2295()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      ;
}
 @Test(timeout = 4000)
  public void test2296()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test2297()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test2298()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test2299()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      assertEquals(1, string0);
}
 @Test(timeout = 4000)
  public void test2300()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test2301()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test2302()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test2303()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test2304()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test2305()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test2306()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      ;
}
 @Test(timeout = 4000)
  public void test2307()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      assertEquals(1, locale1);
}
 @Test(timeout = 4000)
  public void test2308()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test2309()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      ;
}
 @Test(timeout = 4000)
  public void test2310()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1.getCountry());
}
 @Test(timeout = 4000)
  public void test2311()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1.getISO3Language());
}
 @Test(timeout = 4000)
  public void test2312()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1.getISO3Country());
}
 @Test(timeout = 4000)
  public void test2313()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1.getVariant());
}
 @Test(timeout = 4000)
  public void test2314()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1.getLanguage());
}
 @Test(timeout = 4000)
  public void test2315()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1.toString());
}
 @Test(timeout = 4000)
  public void test2316()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertEquals(1, string1);
}
 @Test(timeout = 4000)
  public void test2317()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test2318()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test2319()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test2320()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      ;
}
 @Test(timeout = 4000)
  public void test2321()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test2322()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test2323()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test2324()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test2325()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test2326()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test2327()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale1.getCountry());
}
 @Test(timeout = 4000)
  public void test2328()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale1.getISO3Language());
}
 @Test(timeout = 4000)
  public void test2329()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale1.getISO3Country());
}
 @Test(timeout = 4000)
  public void test2330()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale1.getVariant());
}
 @Test(timeout = 4000)
  public void test2331()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale1.getLanguage());
}
 @Test(timeout = 4000)
  public void test2332()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(locale1.toString());
}
 @Test(timeout = 4000)
  public void test2333()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string1);
}
 @Test(timeout = 4000)
  public void test2334()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(1, set0);
}
 @Test(timeout = 4000)
  public void test2335()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test2336()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test2337()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test2338()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test2339()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test2340()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test2341()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test2342()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test2343()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test2344()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test2345()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test2346()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2347()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2348()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2349()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2350()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2351()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2352()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2353()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2354()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2355()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2356()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test2357()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2358()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2359()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2360()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2361()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      ;
}
 @Test(timeout = 4000)
  public void test2362()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test2363()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test2364()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test2365()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test2366()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test2367()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test2368()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test2369()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test2370()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2371()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2372()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>();
      Iterator<String> iterator0 = linkedBlockingDeque3.iterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test2373()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(77, false);
      Integer integer0 = new Integer(77);
      boolean boolean0 = linkedBlockingDeque0.offerLast(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      int int0 = linkedBlockingDeque1.size();
      Locale locale0 = Locale.JAPANESE;
      String string0 = locale0.getDisplayLanguage();
      Locale locale1 = Locale.CANADA;
      String string1 = locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(set0);
      linkedBlockingDeque2.putLast(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>();
      Iterator<String> iterator0 = linkedBlockingDeque3.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2374()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      ;
}
 @Test(timeout = 4000)
  public void test2375()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      ;
}
 @Test(timeout = 4000)
  public void test2376()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      ;
}
 @Test(timeout = 4000)
  public void test2377()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      ;
}
 @Test(timeout = 4000)
  public void test2378()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2379()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2380()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2381()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2382()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2383()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2384()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2385()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      Object object0 = linkedBlockingDeque0.poll();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test2386()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      Object object0 = linkedBlockingDeque0.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2387()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      Object object0 = linkedBlockingDeque0.poll();
      assertEquals(0, object0);
}
 @Test(timeout = 4000)
  public void test2388()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test2389()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2390()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Iterator<String> iterator0 = linkedBlockingDeque1.iterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test2391()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Iterator<String> iterator0 = linkedBlockingDeque1.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2392()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Iterator<String> iterator0 = linkedBlockingDeque1.iterator();
      String string1 = linkedBlockingDeque1.pollLast();
      assertNotNull(string1);
}
 @Test(timeout = 4000)
  public void test2393()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Iterator<String> iterator0 = linkedBlockingDeque1.iterator();
      String string1 = linkedBlockingDeque1.pollLast();
      ;
}
 @Test(timeout = 4000)
  public void test2394()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Iterator<String> iterator0 = linkedBlockingDeque1.iterator();
      String string1 = linkedBlockingDeque1.pollLast();
      String string2 = linkedBlockingDeque1.peekFirst();
      assertNotNull(string2);
}
 @Test(timeout = 4000)
  public void test2395()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(574);
      Integer integer0 = new Integer(574);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = linkedBlockingDeque0.offer((Object) integer0, 0L, timeUnit0);
      String string0 = linkedBlockingDeque0.toString();
      Object object0 = linkedBlockingDeque0.poll();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      Iterator<String> iterator0 = linkedBlockingDeque1.iterator();
      String string1 = linkedBlockingDeque1.pollLast();
      String string2 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2396()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2397()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test2398()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2399()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2400()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      assertTrue(duration0);
}
 @Test(timeout = 4000)
  public void test2401()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      assertTrue(duration1);
}
 @Test(timeout = 4000)
  public void test2402()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      ;
}
 @Test(timeout = 4000)
  public void test2403()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      ;
}
 @Test(timeout = 4000)
  public void test2404()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test2405()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      assertTrue(duration2);
}
 @Test(timeout = 4000)
  public void test2406()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test2407()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test2408()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test2409()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test2410()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test2411()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test2412()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test2413()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2414()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2415()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2416()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2417()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2418()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2419()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2420()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test2421()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test2422()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      assertEquals(linkedBlockingDeque2, integer0);
}
 @Test(timeout = 4000)
  public void test2423()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      ;
}
 @Test(timeout = 4000)
  public void test2424()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test2425()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test2426()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test2427()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test2428()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test2429()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2430()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2431()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2432()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2433()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test2434()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test2435()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      assertNotNull(object1);
}
 @Test(timeout = 4000)
  public void test2436()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2437()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2438()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2439()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2440()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2441()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2442()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2443()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2444()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2445()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2446()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2447()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2448()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = linkedBlockingDeque1.offer((Object) linkedBlockingDeque0, 0L, timeUnit0);
      Duration duration0 = Duration.ofNanos(0L);
      Duration duration1 = Duration.ofMinutes(0L);
      long long0 = duration1.toDays();
      Duration duration2 = duration0.minus(duration1);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean1 = linkedBlockingDeque1.offerFirst((Object) duration0, duration0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque2 = new LinkedBlockingDeque<Integer>();
      Integer integer0 = new Integer((-2144));
      boolean boolean2 = linkedBlockingDeque1.removeLastOccurrence(linkedBlockingDeque2);
      boolean boolean3 = linkedBlockingDeque2.add(integer0);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.pollFirst(duration0);
      boolean boolean4 = linkedBlockingDeque1.contains(integer0);
      assertTrue(boolean4);
}
 @Test(timeout = 4000)
  public void test2449()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test2450()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test2451()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test2452()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2453()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedBlockingDeque0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2454()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test2455()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = 569;
      Integer integer0 = new Integer(569);
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test2456()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = 569;
      Integer integer0 = new Integer(569);
      ;
}
 @Test(timeout = 4000)
  public void test2457()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = 569;
      Integer integer0 = new Integer(569);
      ;
}
 @Test(timeout = 4000)
  public void test2458()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test2459()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Duration duration0 = Duration.ZERO;
      assertEquals(linkedBlockingDeque0, duration0);
}
 @Test(timeout = 4000)
  public void test2460()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Duration duration0 = Duration.ZERO;
      Integer integer0 = linkedBlockingDeque0.poll(duration0);
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test2461()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Duration duration0 = Duration.ZERO;
      Integer integer0 = linkedBlockingDeque0.poll(duration0);
      Integer integer1 = linkedBlockingDeque0.pollFirst();
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test2462()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test2463()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test2464()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test2465()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test2466()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test2467()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2468()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2469()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test2470()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2471()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test2472()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test2473()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test2474()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test2475()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2476()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2477()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2478()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test2479()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test2480()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2481()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2482()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2483()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test2484()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque0.removeLast();
      ;
}
 @Test(timeout = 4000)
  public void test2485()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque0.removeLast();
      ;
}
 @Test(timeout = 4000)
  public void test2486()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque0.removeLast();
      ;
}
 @Test(timeout = 4000)
  public void test2487()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque0.removeLast();
      ;
}
 @Test(timeout = 4000)
  public void test2488()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque0.removeLast();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test2489()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque0.removeLast();
      ;
}
 @Test(timeout = 4000)
  public void test2490()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque0.removeLast();
      String string0 = linkedBlockingDeque0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2491()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque0.removeLast();
      String string0 = linkedBlockingDeque0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2492()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque0.removeLast();
      String string0 = linkedBlockingDeque0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2493()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque0.removeLast();
      String string0 = linkedBlockingDeque0.toString();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test2494()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedList0);
      boolean boolean1 = linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object0 = linkedBlockingDeque0.removeLast();
      String string0 = linkedBlockingDeque0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2495()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test2496()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test2497()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test2498()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(set0);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test2499()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(set0);
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test2500()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(set0);
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test2501()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(set0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test2502()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test2503()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      ;
}
 @Test(timeout = 4000)
  public void test2504()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test2505()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2506()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2507()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2508()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2509()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test2510()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test2511()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test2512()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer0 = new Integer(0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0, (long) 0, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2513()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer0 = new Integer(0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0, (long) 0, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2514()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer0 = new Integer(0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0, (long) 0, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2515()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer0 = new Integer(0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0, (long) 0, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2516()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.size();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer0 = new Integer(0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = linkedBlockingDeque0.offerFirst(integer0, (long) 0, timeUnit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2517()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      ;
}
 @Test(timeout = 4000)
  public void test2518()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      ;
}
 @Test(timeout = 4000)
  public void test2519()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertEquals(linkedBlockingDeque0, linkedHashSet0);
}
 @Test(timeout = 4000)
  public void test2520()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test2521()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test2522()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test2523()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test2524()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test2525()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test2526()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test2527()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test2528()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      Duration duration0 = Duration.ofMillis(0L);
      ;
}
 @Test(timeout = 4000)
  public void test2529()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      Duration duration0 = Duration.ofMillis(0L);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2530()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      Duration duration0 = Duration.ofMillis(0L);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2531()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      Duration duration0 = Duration.ofMillis(0L);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2532()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      Duration duration0 = Duration.ofMillis(0L);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2533()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      Duration duration0 = Duration.ofMillis(0L);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test2534()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      Duration duration0 = Duration.ofMillis(0L);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test2535()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(1);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedHashSet0);
      Duration duration0 = Duration.ofMillis(0L);
      Object object0 = linkedBlockingDeque1.poll(duration0);
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test2536()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2537()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test2538()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2539()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2540()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2541()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test2542()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(1, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test2543()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test2544()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      assertEquals(1, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test2545()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test2546()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test2547()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super String>) list0);
      assertEquals(1, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test2548()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super String>) list0);
      ;
}
 @Test(timeout = 4000)
  public void test2549()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super String>) list0);
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test2550()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super String>) list0);
      ;
}
 @Test(timeout = 4000)
  public void test2551()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super String>) list0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedList0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test2552()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super String>) list0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test2553()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super String>) list0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedList0);
      int int1 = linkedBlockingDeque1.size();
      ;
}
 @Test(timeout = 4000)
  public void test2554()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super String>) list0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedList0);
      int int1 = linkedBlockingDeque1.size();
      assertEquals(1, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test2555()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super String>) list0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedList0);
      int int1 = linkedBlockingDeque1.size();
      assertEquals(1, int1);
}
 @Test(timeout = 4000)
  public void test2556()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0, locale_FilteringMode0);
      int int0 = linkedBlockingDeque0.drainTo((Collection<? super String>) list0);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedList0);
      int int1 = linkedBlockingDeque1.size();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      String string0 = linkedBlockingDeque0.pollLast((long) 0, timeUnit0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2557()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, false);
      ;
}
 @Test(timeout = 4000)
  public void test2558()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, false);
      ;
}
 @Test(timeout = 4000)
  public void test2559()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, false);
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2560()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, false);
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2561()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, false);
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2562()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, false);
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2563()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, false);
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2564()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, false);
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2565()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, false);
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer0 = linkedBlockingDeque0.pollFirst();
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test2566()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(3, false);
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = linkedBlockingDeque0.toArray(integerArray0);
      Integer integer0 = linkedBlockingDeque0.pollFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2567()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test2568()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test2569()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test2570()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test2571()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test2572()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test2573()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test2574()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      assertEquals(0, linkedHashSet0.size());
}
 @Test(timeout = 4000)
  public void test2575()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2576()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(true);
      ;
}
 @Test(timeout = 4000)
  public void test2577()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(true);
      int int0 = linkedBlockingDeque1.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2578()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(linkedHashSet0);
      boolean boolean0 = linkedBlockingDeque0.hasTakeWaiters();
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(true);
      int int0 = linkedBlockingDeque1.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2579()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      ;
}
 @Test(timeout = 4000)
  public void test2580()  throws Throwable  {
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(4242, true);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test2581()  throws Throwable  {
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(4242, true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test2582()  throws Throwable  {
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(4242, true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2583()  throws Throwable  {
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(4242, true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Iterator<Object> iterator0 = linkedBlockingDeque1.descendingIterator();
      assertNotNull(iterator0);
}
 @Test(timeout = 4000)
  public void test2584()  throws Throwable  {
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque0 = new LinkedBlockingDeque<ChronoLocalDate>(4242, true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Iterator<Object> iterator0 = linkedBlockingDeque1.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2585()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = null;
      try {
        linkedBlockingDeque0 = new LinkedBlockingDeque<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }
 @Test(timeout = 4000)
  public void test2586()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      ;
}
 @Test(timeout = 4000)
  public void test2587()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      Iterator<String> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2588()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = null;
      try {
        linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(0, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }
 @Test(timeout = 4000)
  public void test2589()  throws Throwable  {
      int int0 = (-1);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = null;
      try {
        linkedBlockingDeque0 = new LinkedBlockingDeque<String>((-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }
 @Test(timeout = 4000)
  public void test2590()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = null;
      try {
        linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>((-1877));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }
 @Test(timeout = 4000)
  public void test2591()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test2592()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      Object object0 = linkedBlockingDeque0.peekLast();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test2593()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      assertNotNull(linkedBlockingDeque0);
}
 @Test(timeout = 4000)
  public void test2594()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      ;
}
 @Test(timeout = 4000)
  public void test2595()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test2596()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test2597()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      ;
}
 @Test(timeout = 4000)
  public void test2598()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      assertEquals(linkedBlockingDeque0, integer0);
}
 @Test(timeout = 4000)
  public void test2599()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      ;
}
 @Test(timeout = 4000)
  public void test2600()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      ;
}
 @Test(timeout = 4000)
  public void test2601()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test2602()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test2603()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test2604()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test2605()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2606()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2607()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2608()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2609()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2610()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test2611()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2612()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2613()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2614()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2615()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2616()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      assertEquals(0, object0);
}
 @Test(timeout = 4000)
  public void test2617()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test2618()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test2619()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test2620()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test2621()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test2622()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test2623()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test2624()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test2625()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      ;
}
 @Test(timeout = 4000)
  public void test2626()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2627()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2628()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2629()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2630()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test2631()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2632()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2633()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2634()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2635()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2636()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2637()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      ;
}
 @Test(timeout = 4000)
  public void test2638()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      assertNotNull(object2);
}
 @Test(timeout = 4000)
  public void test2639()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2640()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2641()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2642()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2643()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2644()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      assertEquals(0, object2);
}
 @Test(timeout = 4000)
  public void test2645()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(Integer.MAX_VALUE, false);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(false);
      int int0 = (-650);
      Integer integer0 = new Integer((-650));
      boolean boolean0 = linkedBlockingDeque0.remove((Object) null);
      linkedBlockingDeque1.putLast(integer0);
      Object object0 = linkedBlockingDeque1.peekFirst();
      linkedBlockingDeque0.putLast(object0);
      Iterator<Object> iterator0 = linkedBlockingDeque0.iterator();
      Object object1 = linkedBlockingDeque1.getLast();
      Object object2 = linkedBlockingDeque0.peekFirst();
      Duration duration0 = Duration.ofMinutes(Integer.MAX_VALUE);
      assertNotNull(duration0);
}
 @Test(timeout = 4000)
  public void test2646()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test2647()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2648()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2649()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      assertEquals(0, integer0);
}
 @Test(timeout = 4000)
  public void test2650()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      ;
}
 @Test(timeout = 4000)
  public void test2651()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      ;
}
 @Test(timeout = 4000)
  public void test2652()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2653()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2654()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2655()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test2656()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2657()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2658()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2659()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2660()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2661()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertEquals(linkedBlockingDeque1, integer1);
}
 @Test(timeout = 4000)
  public void test2662()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test2663()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test2664()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test2665()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2666()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2667()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2668()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2669()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2670()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2671()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2672()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2673()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2674()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test2675()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2676()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2677()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2678()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2679()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2680()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2681()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2682()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2683()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      ;
}
 @Test(timeout = 4000)
  public void test2684()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      ;
}
 @Test(timeout = 4000)
  public void test2685()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test2686()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test2687()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2688()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2689()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2690()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2691()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2692()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2693()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2694()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2695()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2696()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test2697()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertTrue(integer2);
}
 @Test(timeout = 4000)
  public void test2698()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test2699()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test2700()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test2701()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test2702()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      assertEquals(linkedBlockingDeque1, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test2703()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2704()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2705()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2706()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2707()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2708()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2709()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2710()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2711()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2712()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2713()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2714()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2715()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2716()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2717()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2718()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2719()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2720()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      ;
}
 @Test(timeout = 4000)
  public void test2721()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      assertEquals(0, int1);
}
 @Test(timeout = 4000)
  public void test2722()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test2723()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2724()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2725()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2726()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2727()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2728()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2729()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2730()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2731()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2732()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2733()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2734()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2735()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2736()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2737()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test2738()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2739()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2740()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2741()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2742()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2743()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2744()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2745()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2746()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2747()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2748()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2749()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2750()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      ;
}
 @Test(timeout = 4000)
  public void test2751()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2752()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2753()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2754()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2755()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2756()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2757()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2758()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2759()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2760()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2761()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2762()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2763()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test2764()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      assertNotNull(integer3);
}
 @Test(timeout = 4000)
  public void test2765()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2766()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2767()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2768()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2769()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2770()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2771()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2772()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2773()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2774()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      ;
}
 @Test(timeout = 4000)
  public void test2775()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      assertNotNull(integer4);
}
 @Test(timeout = 4000)
  public void test2776()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2777()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2778()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2779()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2780()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2781()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2782()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2783()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2784()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2785()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2786()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2787()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2788()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2789()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      ;
}
 @Test(timeout = 4000)
  public void test2790()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2791()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2792()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2793()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2794()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2795()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2796()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2797()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2798()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2799()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2800()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2801()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2802()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2803()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2804()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2805()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2806()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2807()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2808()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      ;
}
 @Test(timeout = 4000)
  public void test2809()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      ;
}
 @Test(timeout = 4000)
  public void test2810()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      ;
}
 @Test(timeout = 4000)
  public void test2811()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      ;
}
 @Test(timeout = 4000)
  public void test2812()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      ;
}
 @Test(timeout = 4000)
  public void test2813()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      assertEquals(1, int3);
}
 @Test(timeout = 4000)
  public void test2814()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      ;
}
 @Test(timeout = 4000)
  public void test2815()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2816()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2817()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2818()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2819()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2820()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2821()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2822()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2823()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2824()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      int int0 = linkedBlockingDeque0.remainingCapacity();
      Integer integer0 = new Integer(2327);
      linkedBlockingDeque0.addFirst(integer0);
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque1.putLast(integer1);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1);
      boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%");
      linkedBlockingDeque2.interuptTakeWaiters();
      boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1);
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1);
      int int1 = linkedBlockingDeque3.remainingCapacity();
      Object object0 = linkedBlockingDeque3.pop();
      int int2 = linkedBlockingDeque3.getTakeQueueLength();
      boolean boolean3 = linkedBlockingDeque0.offerLast(integer0);
      Integer integer3 = linkedBlockingDeque0.peekLast();
      Integer integer4 = linkedBlockingDeque1.pop();
      Object object1 = linkedBlockingDeque3.poll();
      int int3 = linkedBlockingDeque2.size();
      linkedBlockingDeque2.addLast("pN!M43{CE%");
      Iterator<Object> iterator0 = linkedBlockingDeque3.descendingIterator();
      ;
}
 @Test(timeout = 4000)
  public void test2825()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      ;
}
 @Test(timeout = 4000)
  public void test2826()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque1);
}
 @Test(timeout = 4000)
  public void test2827()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test2828()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2829()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      ;
}
 @Test(timeout = 4000)
  public void test2830()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test2831()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test2832()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test2833()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      assertTrue(integer0);
}
 @Test(timeout = 4000)
  public void test2834()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test2835()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      assertTrue(stream0);
}
 @Test(timeout = 4000)
  public void test2836()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      ;
}
 @Test(timeout = 4000)
  public void test2837()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2838()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2839()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2840()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test2841()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test2842()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2843()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test2844()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test2845()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test2846()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      assertNotNull(duration0);
}
 @Test(timeout = 4000)
  public void test2847()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2848()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2849()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2850()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2851()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2852()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2853()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test2854()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      assertTrue(duration1);
}
 @Test(timeout = 4000)
  public void test2855()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2856()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2857()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2858()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque2);
}
 @Test(timeout = 4000)
  public void test2859()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      assertEquals(linkedBlockingDeque0, linkedBlockingDeque3);
}
 @Test(timeout = 4000)
  public void test2860()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      ;
}
 @Test(timeout = 4000)
  public void test2861()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test2862()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test2863()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test2864()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test2865()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test2866()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      ;
}
 @Test(timeout = 4000)
  public void test2867()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test2868()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test2869()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test2870()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test2871()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test2872()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test2873()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test2874()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test2875()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      ;
}
 @Test(timeout = 4000)
  public void test2876()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      assertTrue(boolean4);
}
 @Test(timeout = 4000)
  public void test2877()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2878()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2879()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2880()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2881()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2882()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2883()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      ;
}
 @Test(timeout = 4000)
  public void test2884()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      assertTrue(boolean5);
}
 @Test(timeout = 4000)
  public void test2885()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2886()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2887()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2888()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2889()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2890()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2891()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2892()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2893()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2894()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2895()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      assertTrue(boolean6);
}
 @Test(timeout = 4000)
  public void test2896()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      assertNotNull(object1);
}
 @Test(timeout = 4000)
  public void test2897()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2898()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2899()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2900()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      ;
}
 @Test(timeout = 4000)
  public void test2901()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2902()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2903()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test2904()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test2905()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test2906()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      ;
}
 @Test(timeout = 4000)
  public void test2907()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test2908()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test2909()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      ;
}
 @Test(timeout = 4000)
  public void test2910()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2911()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2912()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2913()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2914()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2915()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2916()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test2917()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test2918()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test2919()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test2920()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test2921()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test2922()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test2923()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      ;
}
 @Test(timeout = 4000)
  public void test2924()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      assertTrue(boolean7);
}
 @Test(timeout = 4000)
  public void test2925()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2926()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2927()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2928()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2929()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2930()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2931()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2932()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2933()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2934()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2935()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2936()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2937()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2938()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2939()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      ;
}
 @Test(timeout = 4000)
  public void test2940()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      String string1 = linkedBlockingDeque3.take();
      ;
}
 @Test(timeout = 4000)
  public void test2941()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      String string1 = linkedBlockingDeque3.take();
      ;
}
 @Test(timeout = 4000)
  public void test2942()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      String string1 = linkedBlockingDeque3.take();
      ;
}
 @Test(timeout = 4000)
  public void test2943()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      String string1 = linkedBlockingDeque3.take();
      ;
}
 @Test(timeout = 4000)
  public void test2944()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      String string1 = linkedBlockingDeque3.take();
      ;
}
 @Test(timeout = 4000)
  public void test2945()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      String string1 = linkedBlockingDeque3.take();
      ;
}
 @Test(timeout = 4000)
  public void test2946()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      String string1 = linkedBlockingDeque3.take();
      ;
}
 @Test(timeout = 4000)
  public void test2947()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      String string1 = linkedBlockingDeque3.take();
      ;
}
 @Test(timeout = 4000)
  public void test2948()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      String string1 = linkedBlockingDeque3.take();
      ;
}
 @Test(timeout = 4000)
  public void test2949()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0);
      boolean boolean1 = linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      Stream<Object> stream0 = linkedBlockingDeque1.stream();
      boolean boolean2 = linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0);
      Integer integer1 = new Integer((-2485));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0);
      Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1);
      boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1);
      boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0);
      linkedBlockingDeque1.putFirst(timeUnit0);
      Object object2 = linkedBlockingDeque1.removeFirst();
      Integer integer2 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer2);
      String string0 = linkedBlockingDeque2.toString();
      boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters();
      boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0);
      String string1 = linkedBlockingDeque3.take();
      ;
}
 @Test(timeout = 4000)
  public void test2950()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      ;
}
 @Test(timeout = 4000)
  public void test2951()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      assertNotNull(integer0);
}
 @Test(timeout = 4000)
  public void test2952()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      assertNotNull(integer1);
}
 @Test(timeout = 4000)
  public void test2953()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      ;
}
 @Test(timeout = 4000)
  public void test2954()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2955()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2956()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2957()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2958()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2959()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2960()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2961()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2962()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2963()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2964()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      ;
}
 @Test(timeout = 4000)
  public void test2965()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      ;
}
 @Test(timeout = 4000)
  public void test2966()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      ;
}
 @Test(timeout = 4000)
  public void test2967()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      ;
}
 @Test(timeout = 4000)
  public void test2968()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test2969()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      assertNotNull(integer2);
}
 @Test(timeout = 4000)
  public void test2970()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      ;
}
 @Test(timeout = 4000)
  public void test2971()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      ;
}
 @Test(timeout = 4000)
  public void test2972()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      ;
}
 @Test(timeout = 4000)
  public void test2973()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      boolean boolean1 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2974()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      boolean boolean1 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2975()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      boolean boolean1 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2976()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      boolean boolean1 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2977()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      boolean boolean1 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2978()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      boolean boolean1 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2979()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      boolean boolean1 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      ;
}
 @Test(timeout = 4000)
  public void test2980()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      Integer integer0 = linkedBlockingDeque0.peekLast();
      Integer integer1 = new Integer((-596));
      LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0);
      boolean boolean0 = linkedBlockingDeque0.addAll(linkedBlockingDeque1);
      int int0 = linkedBlockingDeque0.size();
      long long0 = 3160L;
      Integer integer2 = linkedBlockingDeque0.pollLast();
      boolean boolean1 = linkedBlockingDeque1.removeAll(linkedBlockingDeque0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test2981()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true);
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      linkedBlockingDeque0.removeIf(predicate0);
      linkedBlockingDeque1.contains((Object) null);
      Integer integer0 = new Integer((-2485));
      linkedBlockingDeque1.stream();
      linkedBlockingDeque0.offer(integer0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedBlockingDeque1.pollLast(1L, timeUnit0);
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Duration duration0 = chronoUnit0.getDuration();
      linkedBlockingDeque1.offerLast((Object) integer0, duration0);
      Duration.ofSeconds((-3932L), (-3932L));
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2);
      linkedBlockingDeque1.pollLast((long) (-514), timeUnit0);
      linkedBlockingDeque3.putLast("");
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3563L, timeUnit1);
      linkedBlockingDeque1.offer((Object) linkedBlockingDeque3, 1L, timeUnit0);
      linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0);
      linkedBlockingDeque1.pollLast(3563L, timeUnit0);
      linkedBlockingDeque1.removeFirst();
      linkedBlockingDeque2.clear();
      Integer integer1 = new Integer((-2485));
      linkedBlockingDeque0.addLast(integer1);
      linkedBlockingDeque2.peek();
      linkedBlockingDeque1.hasTakeWaiters();
      linkedBlockingDeque1.remove((Object) duration0);
      String string0 = linkedBlockingDeque3.pollLast();
      ;
}
 @Test(timeout = 4000)
  public void test2982()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(Integer.MAX_VALUE, false);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedBlockingDeque0.putFirst(integer0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      linkedBlockingDeque0.retainAll(list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.addAll(linkedBlockingDeque2);
      linkedBlockingDeque1.pollFirst();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>(915);
      // Undeclared exception!
      try { 
        MockLocalDate.ofYearDay(968, Integer.MAX_VALUE);
        fail("Expecting exception: DateTimeException");
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 2147483647
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test2983()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(false);
      Integer integer0 = new Integer(1271);
      linkedBlockingDeque0.add(integer0);
      linkedBlockingDeque0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add(integer0);
      Integer integer1 = new Integer((-2146965931));
      linkedHashSet0.add(integer1);
      linkedHashSet0.retainAll(linkedBlockingDeque0);
      linkedBlockingDeque0.addAll(linkedHashSet0);
      linkedBlockingDeque0.toArray();
      LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(4, true);
      linkedBlockingDeque1.getTakeQueueLength();
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.poll(0L, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test2984()  throws Throwable  {
      int int0 = 2;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(2);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      linkedBlockingDeque0.offer("'4y,DH|]Y?", (long) 2, timeUnit0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>(linkedBlockingDeque0);
      linkedBlockingDeque1.remove();
      linkedBlockingDeque1.hasTakeWaiters();
      linkedBlockingDeque0.drainTo((Collection<? super String>) linkedBlockingDeque1, 2);
      LinkedBlockingDeque<Object> linkedBlockingDeque2 = new LinkedBlockingDeque<Object>(linkedBlockingDeque0);
      linkedBlockingDeque2.peek();
      linkedBlockingDeque2.iterator();
      linkedBlockingDeque2.addLast(timeUnit0);
      linkedBlockingDeque2.getLast();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque3 = new LinkedBlockingDeque<ChronoLocalDate>();
      linkedBlockingDeque2.removeLastOccurrence("'4y,DH|]Y?");
      linkedBlockingDeque3.peekFirst();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      // Undeclared exception!
      try { 
        chronoUnit0.between((Temporal) null, (Temporal) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }
 @Test(timeout = 4000)
  public void test2985()  throws Throwable  {
      boolean boolean0 = false;
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>(false);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.drainTo((Collection<? super String>) linkedBlockingDeque0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-673));
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-774));
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[4] = integer3;
      linkedBlockingDeque1.toArray(integerArray0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedBlockingDeque1.poll((-1820L), timeUnit0);
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.addLast((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // e
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test2986()  throws Throwable  {
      int int0 = 1337;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedBlockingDeque1.push("");
      linkedBlockingDeque1.pollFirst((long) 1337, timeUnit0);
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque2 = null;
      try {
        linkedBlockingDeque2 = new LinkedBlockingDeque<ChronoLocalDate>((-1), false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }
 @Test(timeout = 4000)
  public void test2987()  throws Throwable  {
      int int0 = 1337;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedBlockingDeque1.pollFirst((long) 1337, timeUnit0);
      linkedBlockingDeque0.removeLastOccurrence((Object) null);
      // Undeclared exception!
      try { 
        linkedBlockingDeque0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }
 @Test(timeout = 4000)
  public void test2988()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(3);
      linkedBlockingDeque0.putLast(integer1);
      integerArray0[0] = integer0;
      linkedBlockingDeque0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2989()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(3);
      linkedBlockingDeque0.putLast(integer1);
      integerArray0[0] = integer0;
      linkedBlockingDeque0.toArray(integerArray0);
      linkedBlockingDeque0.pollFirst();
      ;
}
 @Test(timeout = 4000)
  public void test2990()  throws Throwable  {
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(3);
      linkedBlockingDeque0.putLast(integer1);
      integerArray0[0] = integer0;
      linkedBlockingDeque0.toArray(integerArray0);
      linkedBlockingDeque0.pollFirst();
      LinkedBlockingDeque<ChronoLocalDate> linkedBlockingDeque1 = new LinkedBlockingDeque<ChronoLocalDate>();
      linkedBlockingDeque1.removeFirstOccurrence("Uj");
      Integer integer2 = new Integer((-2147447738));
      linkedBlockingDeque1.contains(integer2);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(5, false);
      linkedBlockingDeque2.parallelStream();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      linkedBlockingDeque2.pollLast((long) 5, timeUnit0);
      boolean boolean0 = linkedBlockingDeque1.contains((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2991()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(false);
      linkedBlockingDeque0.addFirst("evdRh1)ced");
      Duration duration0 = Duration.ofMillis(0L);
      Duration duration1 = duration0.negated();
      linkedBlockingDeque0.pollLast(duration0);
      LinkedBlockingDeque<Locale.LanguageRange> linkedBlockingDeque1 = new LinkedBlockingDeque<Locale.LanguageRange>(false);
      linkedBlockingDeque1.removeLastOccurrence(duration1);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      linkedBlockingDeque0.offerFirst("evdRh1)ced", 3203L, timeUnit0);
      LinkedBlockingDeque<Locale> linkedBlockingDeque2 = new LinkedBlockingDeque<Locale>();
      linkedBlockingDeque2.remainingCapacity();
      // Undeclared exception!
      try { 
        linkedBlockingDeque1.element();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.LinkedBlockingDeque", e);
      }
  }
