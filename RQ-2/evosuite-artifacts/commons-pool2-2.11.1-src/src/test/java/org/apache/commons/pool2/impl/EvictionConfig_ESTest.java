/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 19:02:11 GMT 2022
 */

package org.apache.commons.pool2.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import org.apache.commons.pool2.impl.EvictionConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvictionConfig_ESTest extends EvictionConfig_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((Duration) null, (Duration) null, 0);
      int int0 = evictionConfig0.getMinIdle();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Duration duration0 = Duration.ofNanos(1L);
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 2437);
      long long0 = evictionConfig0.getIdleSoftEvictTime();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Duration duration0 = Duration.ofNanos(1L);
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 2437);
      long long0 = evictionConfig0.getIdleSoftEvictTime();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L, 709L);
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 748);
      long long0 = evictionConfig0.getIdleEvictTime();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(0L, 709L);
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 748);
      long long0 = evictionConfig0.getIdleEvictTime();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 895);
      // Undeclared exception!
      try { 
        evictionConfig0.getIdleEvictTime();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Duration duration0 = Duration.ofHours((-646L));
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 1);
      int int0 = evictionConfig0.getMinIdle();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      EvictionConfig evictionConfig0 = new EvictionConfig((Duration) null, duration0, 409);
      // Undeclared exception!
      try { 
        evictionConfig0.getIdleSoftEvictTime();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig(736, 518L, 736);
      evictionConfig0.getIdleSoftEvictDuration();
      assertEquals(0, evictionConfig0.getMinIdle());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      long long0 = evictionConfig0.getIdleEvictTime();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      long long0 = evictionConfig0.getIdleEvictTime();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      evictionConfig0.getIdleSoftEvictTimeDuration();
      assertEquals(0, evictionConfig0.getMinIdle());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      evictionConfig0.getIdleEvictTimeDuration();
      assertEquals(0, evictionConfig0.getMinIdle());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 895);
      Duration duration1 = evictionConfig0.getIdleEvictDuration();
      assertEquals(0, evictionConfig0.getMinIdle());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      EvictionConfig evictionConfig0 = new EvictionConfig(duration0, duration0, 895);
      Duration duration1 = evictionConfig0.getIdleEvictDuration();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      String string0 = evictionConfig0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      long long0 = evictionConfig0.getIdleSoftEvictTime();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      long long0 = evictionConfig0.getIdleSoftEvictTime();
      assertEquals(0, evictionConfig0.getMinIdle());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvictionConfig evictionConfig0 = new EvictionConfig((-125), (-125), (-125));
      int int0 = evictionConfig0.getMinIdle();
      ;
}
}
