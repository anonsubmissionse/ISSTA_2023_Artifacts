/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 10 19:05:27 GMT 2022
 */

package org.apache.commons.pool2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.util.NoSuchElementException;
import org.apache.commons.pool2.DestroyMode;
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.PooledObjectFactory;
import org.apache.commons.pool2.impl.AbandonedConfig;
import org.apache.commons.pool2.impl.DefaultEvictionPolicy;
import org.apache.commons.pool2.impl.DefaultPooledObject;
import org.apache.commons.pool2.impl.GenericObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.apache.commons.pool2.impl.PooledSoftReference;
import org.apache.commons.pool2.impl.SoftReferenceObjectPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectPool_ESTest extends ObjectPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 1122;
      Object object0 = new Object();
      DefaultPooledObject<Object> defaultPooledObject0 = new DefaultPooledObject<Object>(object0);
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(defaultPooledObject0).when(pooledObjectFactory0).makeObject();
      doReturn(false).when(pooledObjectFactory0).validateObject(nullable(org.apache.commons.pool2.PooledObject.class));
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      PooledObjectFactory<Integer> pooledObjectFactory2 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory2, genericObjectPoolConfig0);
      genericObjectPool0.getNumIdle();
      GenericObjectPool<Object> genericObjectPool1 = new GenericObjectPool<Object>(pooledObjectFactory1);
      try { 
        softReferenceObjectPool0.borrowObject();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Could not create a validated object, cause: org.evosuite.runtime.mock.java.lang.MockThrowable: ValidateObject failed
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      assertFalse(softReferenceObjectPool0.isClosed());
      
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1, genericObjectPoolConfig0, (AbandonedConfig) null);
      genericObjectPool0.clear();
      SoftReference<String> softReference0 = new SoftReference<String>((String) null, (ReferenceQueue<? super String>) null);
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>(softReference0);
      PooledObjectFactory<String> pooledObjectFactory2 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledSoftReference0).when(pooledObjectFactory2).makeObject();
      GenericObjectPoolConfig<String> genericObjectPoolConfig1 = new GenericObjectPoolConfig<String>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig2 = genericObjectPoolConfig1.clone();
      GenericObjectPool<String> genericObjectPool1 = new GenericObjectPool<String>(pooledObjectFactory2, genericObjectPoolConfig2);
      genericObjectPoolConfig2.setTestOnReturn(true);
      genericObjectPoolConfig2.setTestOnBorrow(true);
      genericObjectPool1.evict();
      genericObjectPool1.borrowObject();
      DestroyMode destroyMode0 = DestroyMode.ABANDONED;
      try { 
        genericObjectPool1.invalidateObject("org.apache.commons.pool2.impl.DefaultEvictionPolicy", destroyMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalidated object not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 1122;
      PooledObject<Object> pooledObject0 = (PooledObject<Object>) mock(PooledObject.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pooledObject0).getObject();
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledObject0, (PooledObject) null).when(pooledObjectFactory0).makeObject();
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1);
      try { 
        softReferenceObjectPool0.borrowObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      softReferenceObjectPool0.clear();
      softReferenceObjectPool0.getFactory();
      softReferenceObjectPool0.close();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.clone();
      genericObjectPoolConfig0.setJmxEnabled(false);
      try { 
        softReferenceObjectPool0.addObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Pool not open
         //
         verifyException("org.apache.commons.pool2.BaseObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1, genericObjectPoolConfig0, (AbandonedConfig) null);
      genericObjectPool0.clear();
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<String> softReference0 = new SoftReference<String>("o*jyQJ51/ k", referenceQueue0);
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>(softReference0);
      PooledObjectFactory<String> pooledObjectFactory2 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledSoftReference0).when(pooledObjectFactory2).makeObject();
      GenericObjectPoolConfig<String> genericObjectPoolConfig1 = new GenericObjectPoolConfig<String>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig2 = genericObjectPoolConfig1.clone();
      GenericObjectPool<String> genericObjectPool1 = new GenericObjectPool<String>(pooledObjectFactory2, genericObjectPoolConfig2);
      genericObjectPoolConfig2.setTestOnReturn(true);
      genericObjectPoolConfig2.setTestOnBorrow(true);
      genericObjectPool1.evict();
      genericObjectPool1.borrowObject();
      DestroyMode destroyMode0 = DestroyMode.ABANDONED;
      try { 
        genericObjectPool1.invalidateObject("org.apache.commons.pool2.impl.DefaultEvictionPolicy", destroyMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalidated object not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      DefaultEvictionPolicy<Object> defaultEvictionPolicy0 = new DefaultEvictionPolicy<Object>();
      genericObjectPoolConfig0.setEvictionPolicy(defaultEvictionPolicy0);
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1, genericObjectPoolConfig0, abandonedConfig0);
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<Integer> softReference0 = new SoftReference<Integer>((Integer) 3, referenceQueue0);
      PooledSoftReference<Integer> pooledSoftReference0 = new PooledSoftReference<Integer>(softReference0);
      PooledObjectFactory<Integer> pooledObjectFactory2 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledSoftReference0).when(pooledObjectFactory2).makeObject();
      doReturn(false).when(pooledObjectFactory2).validateObject(nullable(org.apache.commons.pool2.PooledObject.class));
      SoftReferenceObjectPool<Integer> softReferenceObjectPool1 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory2);
      softReferenceObjectPool1.getNumIdle();
      softReferenceObjectPool1.addObject();
      PooledObjectFactory<String> pooledObjectFactory3 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig<String> genericObjectPoolConfig1 = new GenericObjectPoolConfig<String>();
      GenericObjectPool<String> genericObjectPool1 = new GenericObjectPool<String>(pooledObjectFactory3, genericObjectPoolConfig1, abandonedConfig0);
      DestroyMode destroyMode0 = DestroyMode.NORMAL;
      genericObjectPool1.invalidateObject("+4x~,@b])rFg>", destroyMode0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(77);
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      SoftReference<Object> softReference0 = new SoftReference<Object>(integer0, referenceQueue0);
      PooledSoftReference<Object> pooledSoftReference0 = new PooledSoftReference<Object>(softReference0);
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledSoftReference0, (PooledObject) null).when(pooledObjectFactory0).makeObject();
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1);
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("Gs2`&rbYv/Js{SuOi");
      try { 
        genericObjectPool0.addObjects(1380);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      AbandonedConfig abandonedConfig1 = AbandonedConfig.copy(abandonedConfig0);
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory0, genericObjectPoolConfig0, abandonedConfig1);
      DestroyMode destroyMode0 = DestroyMode.ABANDONED;
      genericObjectPool0.invalidateObject("pool", destroyMode0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      GenericObjectPoolConfig<String> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory0, genericObjectPoolConfig1);
      genericObjectPoolConfig1.setTestOnBorrow(false);
      genericObjectPool0.getNumIdle();
      genericObjectPool0.close();
      PooledObjectFactory<Object> pooledObjectFactory1 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory1);
      PooledObjectFactory<Object> pooledObjectFactory2 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig2 = new GenericObjectPoolConfig<Object>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig3 = genericObjectPoolConfig2.clone();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      AbandonedConfig abandonedConfig1 = AbandonedConfig.copy(abandonedConfig0);
      GenericObjectPool<Object> genericObjectPool1 = new GenericObjectPool<Object>(pooledObjectFactory2, genericObjectPoolConfig3, abandonedConfig1);
      genericObjectPool1.invalidateObject((Object) genericObjectPoolConfig1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      SoftReferenceObjectPool<Object> softReferenceObjectPool1 = new SoftReferenceObjectPool<Object>(pooledObjectFactory1);
      Integer integer0 = new Integer(21);
      DestroyMode destroyMode0 = DestroyMode.ABANDONED;
      try { 
        softReferenceObjectPool1.invalidateObject((Object) integer0, destroyMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object to invalidate is not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      AbandonedConfig abandonedConfig1 = AbandonedConfig.copy(abandonedConfig0);
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory0, genericObjectPoolConfig0, abandonedConfig1);
      genericObjectPool0.returnObject("");
      GenericObjectPoolConfig<Object> genericObjectPoolConfig1 = new GenericObjectPoolConfig<Object>();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig2 = genericObjectPoolConfig1.clone();
      GenericObjectPool<Object> genericObjectPool1 = null;
      try {
        genericObjectPool1 = new GenericObjectPool<Object>((PooledObjectFactory<Object>) null, genericObjectPoolConfig2, abandonedConfig1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory may not be null
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>((PooledObjectFactory<Object>) null);
      softReferenceObjectPool0.close();
      softReferenceObjectPool0.close();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory0);
      DestroyMode destroyMode0 = DestroyMode.NORMAL;
      try { 
        genericObjectPool0.invalidateObject("", destroyMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalidated object not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setTestOnCreate(true);
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1, genericObjectPoolConfig0);
      genericObjectPool0.setNumTestsPerEvictionRun(2651);
      GenericObjectPool<Object> genericObjectPool1 = new GenericObjectPool<Object>(pooledObjectFactory1);
      try { 
        genericObjectPool1.borrowObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Integer> softReferenceObjectPool0 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory0);
      Integer integer0 = new Integer(0);
      try { 
        softReferenceObjectPool0.returnObject(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Returned object not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1);
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.setJmxNameBase("Gs2`&rbYv/Js{SuOi");
      try { 
        genericObjectPool0.addObjects(1380);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1);
      try { 
        genericObjectPool0.addObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      GenericObjectPool<Object> genericObjectPool0 = new GenericObjectPool<Object>(pooledObjectFactory1, genericObjectPoolConfig0, abandonedConfig0);
      genericObjectPool0.returnObject(pooledObjectFactory1);
      genericObjectPoolConfig0.setJmxEnabled(false);
      genericObjectPool0.getNumActive();
      genericObjectPool0.getNumActive();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.clear();
      softReferenceObjectPool0.clear();
      PooledObjectFactory<Object> pooledObjectFactory1 = null;
      SoftReferenceObjectPool<Object> softReferenceObjectPool1 = new SoftReferenceObjectPool<Object>((PooledObjectFactory<Object>) null);
      softReferenceObjectPool1.getFactory();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.clone();
      try { 
        softReferenceObjectPool1.addObjects(18);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot add objects without a factory.
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((PooledObject) null).when(pooledObjectFactory0).makeObject();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      GenericObjectPool<String> genericObjectPool0 = new GenericObjectPool<String>(pooledObjectFactory0, genericObjectPoolConfig0, abandonedConfig0);
      try { 
        genericObjectPool0.addObjects(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory0);
      genericObjectPool0.getNumIdle();
      genericObjectPool0.getNumIdle();
      PooledObjectFactory<Object> pooledObjectFactory1 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory1);
      softReferenceObjectPool0.addObjects(0);
      PooledObjectFactory<Object> pooledObjectFactory2 = softReferenceObjectPool0.getFactory();
      GenericObjectPool<Object> genericObjectPool1 = new GenericObjectPool<Object>(pooledObjectFactory2);
      genericObjectPool1.close();
      genericObjectPool1.getMinIdle();
      GenericObjectPoolConfig<String> genericObjectPoolConfig0 = new GenericObjectPoolConfig<String>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      GenericObjectPool<String> genericObjectPool2 = null;
      try {
        genericObjectPool2 = new GenericObjectPool<String>((PooledObjectFactory<String>) null, genericObjectPoolConfig0, abandonedConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory may not be null
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Integer>();
      GenericObjectPoolConfig<Integer> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory0, genericObjectPoolConfig1);
      genericObjectPoolConfig0.setJmxNamePrefix("*8]4h?OCU@3N");
      Integer integer0 = new Integer(2215);
      try { 
        genericObjectPool0.invalidateObject(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalidated object not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.GenericObjectPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PooledObjectFactory<Integer> pooledObjectFactory0 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPool<Integer> genericObjectPool0 = new GenericObjectPool<Integer>(pooledObjectFactory0);
      genericObjectPool0.addObjects((-2009));
      genericObjectPool0.getNumIdle();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      PooledObjectFactory<Integer> pooledObjectFactory1 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Integer> softReferenceObjectPool1 = new SoftReferenceObjectPool<Integer>(pooledObjectFactory1);
      softReferenceObjectPool1.getNumActive();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      AbandonedConfig abandonedConfig0 = new AbandonedConfig();
      AbandonedConfig.copy(abandonedConfig0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GenericObjectPoolConfig<Object> genericObjectPoolConfig0 = new GenericObjectPoolConfig<Object>();
      genericObjectPoolConfig0.toString();
      GenericObjectPoolConfig<Object> genericObjectPoolConfig1 = genericObjectPoolConfig0.clone();
      genericObjectPoolConfig1.setTestOnReturn(false);
      AbandonedConfig.copy((AbandonedConfig) null);
      AbandonedConfig.copy((AbandonedConfig) null);
      SoftReference<String> softReference0 = new SoftReference<String>("GenericObjectPoolConfig [lifo=true, fairness=false, maxWaitDuration=PT-0.001S, minEvictableIdleTime=PT30M, softMinEvictableIdleTime=PT-0.001S, numTestsPerEvictionRun=3, evictionPolicyClassName=org.apache.commons.pool2.impl.DefaultEvictionPolicy, testOnCreate=false, testOnBorrow=false, testOnReturn=false, testWhileIdle=false, timeBetweenEvictionRuns=PT-0.001S, blockWhenExhausted=true, jmxEnabled=true, jmxNamePrefix=pool, jmxNameBase=null, maxTotal=8, maxIdle=8, minIdle=0]");
      PooledSoftReference<String> pooledSoftReference0 = new PooledSoftReference<String>(softReference0);
      PooledObjectFactory<String> pooledObjectFactory0 = (PooledObjectFactory<String>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(pooledSoftReference0, pooledSoftReference0, pooledSoftReference0, pooledSoftReference0, pooledSoftReference0).when(pooledObjectFactory0).makeObject();
      doReturn(false, false, true, false, false).when(pooledObjectFactory0).validateObject(nullable(org.apache.commons.pool2.PooledObject.class));
      SoftReferenceObjectPool<String> softReferenceObjectPool0 = new SoftReferenceObjectPool<String>(pooledObjectFactory0);
      softReferenceObjectPool0.clear();
      softReferenceObjectPool0.addObjects(8);
      PooledObjectFactory<Integer> pooledObjectFactory1 = (PooledObjectFactory<Integer>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      GenericObjectPoolConfig<String> genericObjectPoolConfig2 = new GenericObjectPoolConfig<String>();
      assertFalse(genericObjectPoolConfig2.getFairness());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PooledObjectFactory<Object> pooledObjectFactory0 = (PooledObjectFactory<Object>) mock(PooledObjectFactory.class, new ViolatedAssumptionAnswer());
      SoftReferenceObjectPool<Object> softReferenceObjectPool0 = new SoftReferenceObjectPool<Object>(pooledObjectFactory0);
      PooledObjectFactory<Object> pooledObjectFactory1 = softReferenceObjectPool0.getFactory();
      SoftReferenceObjectPool<Object> softReferenceObjectPool1 = new SoftReferenceObjectPool<Object>(pooledObjectFactory1);
      Integer integer0 = new Integer(21);
      DestroyMode destroyMode0 = DestroyMode.NORMAL;
      try { 
        softReferenceObjectPool1.invalidateObject((Object) integer0, destroyMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object to invalidate is not currently part of this pool
         //
         verifyException("org.apache.commons.pool2.impl.SoftReferenceObjectPool", e);
      }
  }
}
