 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      assertTrue(pngImagingParameters0.isPredictorEnabled());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.setPredictorEnabled(true);
      boolean boolean0 = pngImagingParameters0.isPredictorEnabled();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      assertTrue(pngImagingParameters0.isForceIndexedColor());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.setForceIndexedColor(true);
      boolean boolean0 = pngImagingParameters0.isForceIndexedColor();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, 0.0);
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertNotNull(pngImagingParameters0.getBitDepth());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, 0.0);
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertTrue(pngImagingParameters0.isForceIndexedColor());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, 0.0);
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertTrue(pngImagingParameters0.isForceTrueColor());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, 0.0);
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((byte)8, (byte)8);
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertTrue(pngImagingParameters0.isForceTrueColor());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((byte)8, (byte)8);
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertNotNull(pngImagingParameters0.getBitDepth());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((byte)8, (byte)8);
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertTrue(pngImagingParameters0.isForceIndexedColor());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((byte)8, (byte)8);
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertTrue(pngImagingParameters0.isPredictorEnabled());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.UNDEFINED;
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertTrue(pngImagingParameters0.isForceIndexedColor());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.UNDEFINED;
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertNotNull(pngImagingParameters0.getBitDepth());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.UNDEFINED;
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertTrue(pngImagingParameters0.isForceTrueColor());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      PhysicalScale physicalScale0 = PhysicalScale.UNDEFINED;
      pngImagingParameters0.setPhysicalScale(physicalScale0);
      pngImagingParameters0.getPhysicalScale();
      assertTrue(pngImagingParameters0.isPredictorEnabled());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      assertNotNull(pngImagingParameters0.getBitDepth());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.setBitDepth((byte)0);
      byte byte0 = pngImagingParameters0.getBitDepth();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.setBitDepth((byte) (-103));
      byte byte0 = pngImagingParameters0.getBitDepth();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      // Undeclared exception!
      try { 
        pngImagingParameters0.setTextChunks((List<? extends PngText>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.getTextChunks();
      assertTrue(pngImagingParameters0.isPredictorEnabled());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.getTextChunks();
      assertNotNull(pngImagingParameters0.getBitDepth());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.getTextChunks();
      assertTrue(pngImagingParameters0.isForceTrueColor());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.getTextChunks();
      assertTrue(pngImagingParameters0.isForceIndexedColor());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      LinkedList<PngText.Text> linkedList0 = new LinkedList<PngText.Text>();
      pngImagingParameters0.setTextChunks(linkedList0);
      List<? extends PngText> list0 = pngImagingParameters0.getTextChunks();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      LinkedList<PngText.Text> linkedList0 = new LinkedList<PngText.Text>();
      pngImagingParameters0.setTextChunks(linkedList0);
      List<? extends PngText> list0 = pngImagingParameters0.getTextChunks();
      assertTrue(pngImagingParameters0.isForceIndexedColor());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      LinkedList<PngText.Text> linkedList0 = new LinkedList<PngText.Text>();
      pngImagingParameters0.setTextChunks(linkedList0);
      List<? extends PngText> list0 = pngImagingParameters0.getTextChunks();
      assertNotNull(pngImagingParameters0.getBitDepth());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      LinkedList<PngText.Text> linkedList0 = new LinkedList<PngText.Text>();
      pngImagingParameters0.setTextChunks(linkedList0);
      List<? extends PngText> list0 = pngImagingParameters0.getTextChunks();
      assertNotNull(list0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      LinkedList<PngText.Text> linkedList0 = new LinkedList<PngText.Text>();
      pngImagingParameters0.setTextChunks(linkedList0);
      List<? extends PngText> list0 = pngImagingParameters0.getTextChunks();
      assertTrue(pngImagingParameters0.isForceTrueColor());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isForceTrueColor();
      assertNotNull(pngImagingParameters0.getBitDepth());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isForceTrueColor();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isForceTrueColor();
      assertTrue(pngImagingParameters0.isPredictorEnabled());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isForceTrueColor();
      assertTrue(pngImagingParameters0.isForceIndexedColor());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isPredictorEnabled();
      assertTrue(pngImagingParameters0.isForceIndexedColor());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isPredictorEnabled();
      assertNotNull(pngImagingParameters0.getBitDepth());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isPredictorEnabled();
      assertTrue(pngImagingParameters0.isForceTrueColor());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isPredictorEnabled();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      assertTrue(pngImagingParameters0.isForceTrueColor());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.setForceTrueColor(true);
      boolean boolean0 = pngImagingParameters0.isForceTrueColor();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isForceIndexedColor();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isForceIndexedColor();
      assertNotNull(pngImagingParameters0.getBitDepth());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isForceIndexedColor();
      assertFalse(pngImagingParameters0.isPredictorEnabled());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      boolean boolean0 = pngImagingParameters0.isForceIndexedColor();
      assertTrue(pngImagingParameters0.isForceTrueColor());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.getPhysicalScale();
      assertTrue(pngImagingParameters0.isPredictorEnabled());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.getPhysicalScale();
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.getPhysicalScale();
      assertNotNull(pngImagingParameters0.getBitDepth());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      pngImagingParameters0.getPhysicalScale();
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      byte byte0 = pngImagingParameters0.getBitDepth();
      assertTrue(pngImagingParameters0.isPredictorEnabled());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      byte byte0 = pngImagingParameters0.getBitDepth();
      assertTrue(pngImagingParameters0.isForceTrueColor());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      byte byte0 = pngImagingParameters0.getBitDepth();
      assertNotNull(byte0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PngImagingParameters pngImagingParameters0 = new PngImagingParameters();
      byte byte0 = pngImagingParameters0.getBitDepth();
      assertTrue(pngImagingParameters0.isForceIndexedColor());
}
