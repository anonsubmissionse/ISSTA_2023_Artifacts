 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      Debug.debug((Throwable) mockIOException0, 3);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Debug.debug((Throwable) mockThrowable0, 0);
      assertNotNull(mockThrowable0.toString());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("#:dd?S");
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        Debug.debug((Throwable) mockThrowable0, (-1153));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.internal.Debug", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        Debug.debug((Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.internal.Debug", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        Debug.debug("_jsxh=M\"RaHI.", (Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Debug.debug("#Yw%V%b\"Ui_vG2");
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Debug.debug((Throwable) mockIOException0, 38);
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Debug.debug((Throwable) null);
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Debug.debug("i", (Object) mockGregorianCalendar0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 2, 2, 2, 2);
      Debug.debug("xU", (Object) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("M`;T/eW.", "M`;T/eW.");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      Debug.debug("M`;T/eW.", (Object) sequenceInputStream0);
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      Debug.debug("M`;T/eW.", (Object) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("M`;T/eW.", "M`;T/eW.");
      Debug.debug("M`;T/eW.", (Object) file0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Debug.debug("M`;T/eW.", (Object) null);
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Debug.debug();
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Debug.debug("_jsxh=M\"RaHI.", (Object) "_jsxh=M\"RaHI.");
  }
