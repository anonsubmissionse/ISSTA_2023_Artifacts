 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertNotNull(imageFormats0.getDefaultExtension());
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("|", 0, linkedList0, imageFormats0, "&L4", 0, "&L4", 0, 1132, 1132, 898, (-841.9F), 2, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(1, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 18, list0, (ImageFormat) null, "", 18, "", 0, (-2332), 1.0F, (-80), (-206.4F), 5, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("5p9;", (-2321), linkedList0, imageFormats0, "5p9;", (-2321), "5p9;", 3095, 3095, (-2321), 3095, (-2321), 3, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ;
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageFormats0.getDefaultExtension());
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PGM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("LZW", 10, (List<String>) null, imageFormats0, "LZW", 10, "'lD'", 10, 10, 10, (-1), (-1), (-1), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ;
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageFormats0.getDefaultExtension());
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_3;
      ImageInfo imageInfo0 = new ImageInfo("", 453, linkedList0, imageFormats0, "", 453, "", 453, 453, 453, 1778, 1778, 453, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertTrue(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ;
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.TGA;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("LPag {F9P5", (-2362), (List<String>) null, imageFormats0, "_LC)C@OpnJ$:re)", (-2362), "LPag {F9P5", (-2362), (-3179), (-1849.749F), 0, (-1849.749F), (-3202), false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("}ZjYX!AY;qP|txj6", 7, list0, (ImageFormat) null, "Format: ", 0, "}ZjYX!AY;qP|txj6", 0, 0, 7, 0, (-1340.974F), 22, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ;
}
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("vb1yd\"?NMHOs=qi", 9, list0, (ImageFormat) null, "u(MJ2", 587, "u(MJ2", 9, 2, 0.0F, 9, 0.0F, 2159, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ;
}
 @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ;
}
 @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertNotNull(imageFormats0.getDefaultExtension());
}
 @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("BL", 0, linkedList0, (ImageFormat) null, "BL", 0, "The list of prefixes must not be null", 0, 13, (-1585.86F), 0, 0, 0, false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ;
}
 @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("%}U", 2497, (List<String>) null, imageFormats0, (String) null, 2497, (String) null, 2497, (-1), 0.0F, 0, 2497, 2497, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ;
}
 @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertTrue(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 4, list0, imageFormats0, "pic", 4, "Wt`1f>A", 0, 0, 0.0F, 0, 0, 4, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ;
}
 @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("", 20, linkedList0, imageFormats0, "", (-345), "", (-345), 20, 20, 2751, 2751, 2751, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ;
}
 @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ;
}
 @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ;
}
 @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ;
}
 @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ;
}
 @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertTrue(linkedHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ;
}
 @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ;
}
 @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(imageFormats0.getDefaultExtension());
}
 @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(1, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo("@o~5Lc!C[}}gg!%", 383, linkedList0, (ImageFormat) null, "@o~5Lc!C[}}gg!%", 1, "org.apache.commons.io.filefilter.RegexFileFilter", 1, 1040, 1.0F, (-820), 1.0F, (-473), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ;
}
 @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ;
}
 @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test909()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test910()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test911()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test912()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test913()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test914()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test915()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test916()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test917()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test918()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test919()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test920()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test921()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test922()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test923()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test924()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test925()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertNotNull(imageFormats0.getDefaultExtension());
}
 @Test(timeout = 4000)
  public void test926()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test927()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test928()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test929()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test930()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test931()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test932()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test933()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test934()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test935()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test936()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test937()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test938()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test939()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test940()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test941()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.WBMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("", (-900), list0, imageFormats0, (String) null, (-900), "", 8, (-900), (-900), 121, (-576.0F), 121, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test942()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test943()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test944()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ;
}
 @Test(timeout = 4000)
  public void test945()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test946()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test947()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test948()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test949()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test950()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test951()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test952()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test953()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test954()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test955()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test956()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test957()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test958()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test959()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test960()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test961()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test962()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test963()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test964()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test965()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test966()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test967()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test968()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test969()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test970()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test971()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test972()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test973()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test974()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test975()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test976()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test977()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test978()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test979()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test980()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.NONE;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 2, linkedList0, imageFormats0, (String) null, 2, (String) null, (-214), 1, (-3740.656F), 1, 1.0F, (-214), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test981()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test982()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test983()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test984()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test985()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ;
}
 @Test(timeout = 4000)
  public void test986()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test987()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test988()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test989()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test990()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test991()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test992()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ;
}
 @Test(timeout = 4000)
  public void test993()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ;
}
 @Test(timeout = 4000)
  public void test994()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test995()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test996()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test997()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test998()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test999()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageFormats0.getDefaultExtension());
}
 @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(1, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.XBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3327, list0, imageFormats0, "", 3327, (String) null, 3327, (-332), 1916.28F, (-332), 3327, 3327, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ;
}
 @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ;
}
 @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageFormats0.getDefaultExtension());
}
 @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.GIF;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 11, linkedList0, imageFormats0, "{Os57/d^@", 11, (String) null, (-183), 15, 15, 1, 11, 1, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      ;
}
 @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      ;
}
 @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      ;
}
 @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      ;
}
 @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      ;
}
 @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      ;
}
 @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ;
}
 @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ;
}
 @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageFormats0.getDefaultExtension());
}
 @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("Width: ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      ImageInfo imageInfo0 = new ImageInfo("Width: ", 0, list0, imageFormats0, "Width: ", 0, "Width: ", 0, (-781), (-1.0F), (-4266), (-1.0F), 2524, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatDetails();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ;
}
 @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ;
}
 @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.RLE;
      ImageInfo imageInfo0 = new ImageInfo("(", (-1570), list0, (ImageFormat) null, "?dTsI'lDG>|t9QKg2", (-280), "(", (-1570), 385, 0.0F, 0, 0, 385, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ImageFormat imageFormat0 = imageInfo0.getFormat();
      assertNotNull(imageFormat0);
}
 @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      ;
}
 @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      ;
}
 @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ;
}
 @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ;
}
 @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ;
}
 @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      boolean boolean0 = linkedList0.add("!");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("!", (-4491), linkedList0, imageFormats0, "!", (-4491), "!", 3, (-4491), (-4491), 8, (-4491), 7, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      List<String> list0 = imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ;
}
 @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_1D;
      ImageInfo imageInfo0 = new ImageInfo("", 3975, linkedList0, imageFormats0, "", 3975, (String) null, 3975, 3975, 3975, 3975, 3975, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ;
}
 @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      ;
}
 @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ;
}
 @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ;
}
 @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(1, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      ImageInfo imageInfo0 = new ImageInfo("org.apache.commons.io.filefilter.DelegateFileFilter", (-767), list0, (ImageFormat) null, "org.apache.commons.io.filefilter.AbstractFileFilter", (-767), "org.apache.commons.io.filefilter.DelegateFileFilter", (-767), 4, 4, 2907, (-1.0F), (-767), false, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getColorType());
}
 @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      assertNotNull(imageInfo0.getCompressionAlgorithm());
}
 @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      ;
}
 @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      MockFile mockFile0 = new MockFile("Image Data: Error", "Image Data: Error");
      ;
}
 @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      MockFile mockFile0 = new MockFile("Image Data: Error", "Image Data: Error");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ;
}
 @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ;
}
 @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      assertNotNull(imageInfo_ColorType0.toString());
}
 @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      String string0 = imageInfo_ColorType0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      String string0 = imageInfo_ColorType0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      String string0 = imageInfo_ColorType0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.BMP;
      linkedList0.add("icns");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("RLE: Run-Length Encoding", 0, linkedList0, imageFormats0, "$VALUES", 0, "$VALUES", (-733), (-1337), (-733), (-2711), (-2760.491F), (-733), false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      MockFile mockFile0 = new MockFile("jz=TI%cfh6+Z*ZU)r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      imageInfo0.toString((PrintWriter) mockPrintWriter0, "\"`8HNkx@W1<Om/;,");
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.BMP;
      linkedList0.add("icns");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("RLE: Run-Length Encoding", 0, linkedList0, imageFormats0, "$VALUES", 0, "$VALUES", (-733), (-1337), (-733), (-2711), (-2760.491F), (-733), false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      MockFile mockFile0 = new MockFile("jz=TI%cfh6+Z*ZU)r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      imageInfo0.toString((PrintWriter) mockPrintWriter0, "\"`8HNkx@W1<Om/;,");
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.BMP;
      linkedList0.add("icns");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("RLE: Run-Length Encoding", 0, linkedList0, imageFormats0, "$VALUES", 0, "$VALUES", (-733), (-1337), (-733), (-2711), (-2760.491F), (-733), false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      MockFile mockFile0 = new MockFile("jz=TI%cfh6+Z*ZU)r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      imageInfo0.toString((PrintWriter) mockPrintWriter0, "\"`8HNkx@W1<Om/;,");
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.BMP;
      linkedList0.add("icns");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("RLE: Run-Length Encoding", 0, linkedList0, imageFormats0, "$VALUES", 0, "$VALUES", (-733), (-1337), (-733), (-2711), (-2760.491F), (-733), false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      MockFile mockFile0 = new MockFile("jz=TI%cfh6+Z*ZU)r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      imageInfo0.toString((PrintWriter) mockPrintWriter0, "\"`8HNkx@W1<Om/;,");
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.BMP;
      linkedList0.add("icns");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("RLE: Run-Length Encoding", 0, linkedList0, imageFormats0, "$VALUES", 0, "$VALUES", (-733), (-1337), (-733), (-2711), (-2760.491F), (-733), false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      MockFile mockFile0 = new MockFile("jz=TI%cfh6+Z*ZU)r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      imageInfo0.toString((PrintWriter) mockPrintWriter0, "\"`8HNkx@W1<Om/;,");
      ;
}
 @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.BMP;
      linkedList0.add("icns");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("RLE: Run-Length Encoding", 0, linkedList0, imageFormats0, "$VALUES", 0, "$VALUES", (-733), (-1337), (-733), (-2711), (-2760.491F), (-733), false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      MockFile mockFile0 = new MockFile("jz=TI%cfh6+Z*ZU)r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      imageInfo0.toString((PrintWriter) mockPrintWriter0, "\"`8HNkx@W1<Om/;,");
      ;
}
 @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.BMP;
      linkedList0.add("icns");
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo("RLE: Run-Length Encoding", 0, linkedList0, imageFormats0, "$VALUES", 0, "$VALUES", (-733), (-1337), (-733), (-2711), (-2760.491F), (-733), false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      MockFile mockFile0 = new MockFile("jz=TI%cfh6+Z*ZU)r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      imageInfo0.toString((PrintWriter) mockPrintWriter0, "\"`8HNkx@W1<Om/;,");
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      ;
}
 @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      ;
}
 @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      ;
}
 @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      ;
}
 @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      ;
}
 @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      ;
}
 @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.ICO;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("u::B", (-1567), linkedList0, imageFormats0, "u::B", (-1567), "u::B", (-1567), (-1567), (-1567), (-1567), (-1567), (-1567), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.usesPalette();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      ;
}
 @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      ;
}
 @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      ;
}
 @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      ;
}
 @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      ;
}
 @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isProgressive();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      ;
}
 @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      boolean boolean0 = imageInfo0.isTransparent();
      assertEquals(1, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      assertTrue(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.CCITT_GROUP_4;
      ImageInfo imageInfo0 = new ImageInfo("%RM^bGg u}U?)C<", 0, list0, imageFormats0, "%RM^bGg u}U?)C<", 0, "%RM^bGg u}U?)C<", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getHeight();
      ;
}
 @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertTrue(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      assertEquals(1, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getBitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      ;
}
 @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalHeightInch();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      ;
}
 @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.CMYK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      ImageInfo imageInfo0 = new ImageInfo("", 2823, linkedList0, imageFormats0, "", 2823, "", 2823, 2823, 2823, 2823, 2823, 2823, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormatDetails();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertTrue(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      ;
}
 @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0.0F, 0, true, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getWidth();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalHeightDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      ;
}
 @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      ;
}
 @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      ;
}
 @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      ;
}
 @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      ;
}
 @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      ;
}
 @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      ;
}
 @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getColorType();
      ;
}
 @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      ;
}
 @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      ;
}
 @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      ;
}
 @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getCompressionAlgorithm();
      ;
}
 @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertEquals(0, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      ;
}
 @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getFormat();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      ;
}
 @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      ;
}
 @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      ;
}
 @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      ImageInfo imageInfo0 = new ImageInfo((String) null, (-694), (List<String>) null, (ImageFormat) null, (String) null, (-445), (String) null, (-445), (-445), 3208.0F, (-445), 0.0F, (-445), true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.dump();
      ;
}
 @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      assertTrue(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PBM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.GRAYSCALE;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo((String) null, 0, linkedList0, imageFormats0, (String) null, 0, (String) null, 0, 0, 0, 0, 0, 0, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getMimeType();
      ;
}
 @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      imageInfo0.getComments();
      ;
}
 @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test1677()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1678()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test1679()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test1680()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test1681()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test1682()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test1683()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test1684()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test1685()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test1686()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getNumberOfImages();
      ;
}
 @Test(timeout = 4000)
  public void test1687()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1688()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(0, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1689()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1690()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1691()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(0, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1692()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1693()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1694()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1695()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1696()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      ;
}
 @Test(timeout = 4000)
  public void test1697()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.RGB;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.JPEG;
      ImageInfo imageInfo0 = new ImageInfo("ICO", 1149, linkedList0, (ImageFormat) null, "ICO", 1149, "ICO", 1149, 1149, 1149, (-2622), 1149, 1149, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      int int0 = imageInfo0.getPhysicalWidthDpi();
      assertTrue(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1698()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertFalse(imageInfo0.isTransparent());
}
 @Test(timeout = 4000)
  public void test1699()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(0, imageInfo0.getPhysicalWidthDpi());
}
 @Test(timeout = 4000)
  public void test1700()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1701()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test1702()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1703()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertFalse(imageInfo0.isProgressive());
}
 @Test(timeout = 4000)
  public void test1704()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(0, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1705()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1706()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1707()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test1708()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertNotNull(imageInfo0.getFormatName());
}
 @Test(timeout = 4000)
  public void test1709()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(0, imageInfo0.getPhysicalHeightDpi());
}
 @Test(timeout = 4000)
  public void test1710()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      ;
}
 @Test(timeout = 4000)
  public void test1711()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      float float0 = imageInfo0.getPhysicalWidthInch();
      assertEquals(1, imageInfo0.getWidth());
}
 @Test(timeout = 4000)
  public void test1712()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(1, imageInfo0.getHeight());
}
 @Test(timeout = 4000)
  public void test1713()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(1, imageInfo0.getNumberOfImages());
}
 @Test(timeout = 4000)
  public void test1714()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1715()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1716()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1717()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1718()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1719()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertFalse(imageInfo0.usesPalette());
}
 @Test(timeout = 4000)
  public void test1720()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1721()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertEquals(1, imageInfo0.getBitsPerPixel());
}
 @Test(timeout = 4000)
  public void test1722()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      ;
}
 @Test(timeout = 4000)
  public void test1723()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getMimeType());
}
 @Test(timeout = 4000)
  public void test1724()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(imageInfo0.getFormatDetails());
}
 @Test(timeout = 4000)
  public void test1725()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      ImageFormats imageFormats0 = ImageFormats.XPM;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.UNKNOWN;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.LZW;
      ImageInfo imageInfo0 = new ImageInfo("}Cz6Z2Q-HI", 0, list0, imageFormats0, "j/Hr2kKQ:{c$IOfiJ)B", 0, "j/Hr2kKQ:{c$IOfiJ)B", 0, 0, 0, 0, 0, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0);
      String string0 = imageInfo0.getFormatName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1726()  throws Throwable  {
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      String string0 = imageInfo_CompressionAlgorithm0.toString();
      ;
}
