 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceArray0);
      try { 
        rgbeInfo0.getWidth();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, (String) null);
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      // Undeclared exception!
      try { 
        rgbeInfo0.getWidth();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-777), (byte)63);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, (String) null);
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      // Undeclared exception!
      try { 
        rgbeInfo0.getWidth();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "[WFC<TqTTM");
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      // Undeclared exception!
      try { 
        rgbeInfo0.getPixelData();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)52);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "The filter must not be null");
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      // Undeclared exception!
      try { 
        rgbeInfo0.getPixelData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)31, (byte)31);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "Im+(<");
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      try { 
        rgbeInfo0.getMetadata();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, (InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(sequenceInputStream0, "V/gdj9<Fpn }rh");
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      // Undeclared exception!
      try { 
        rgbeInfo0.getMetadata();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-45), 63);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, "_L4>M");
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      // Undeclared exception!
      try { 
        rgbeInfo0.getMetadata();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream((InputStream) null, "");
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      try { 
        rgbeInfo0.getMetadata();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("org.apache.commons.io.file.Counters$LongPathCounters", byteArray0);
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceArray0);
      try { 
        rgbeInfo0.getHeight();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Unexpected EOF.
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(dataInputStream0, "[WFC<TqTTM");
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      // Undeclared exception!
      try { 
        rgbeInfo0.getHeight();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-40), 5);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(byteArrayInputStream0, ")YXXk");
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      // Undeclared exception!
      try { 
        rgbeInfo0.getHeight();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream((InputStream) null, "3Y[`]TpH6 1pagWo");
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      try { 
        rgbeInfo0.getHeight();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.DelegateFileFilter");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.io.filefilter.DelegateFileFilter");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.apache.commons.io.filefilter.AndFileFilter");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceFile0);
      try { 
        rgbeInfo0.close();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RgbeInfo rgbeInfo0 = null;
      try {
        rgbeInfo0 = new RgbeInfo((ByteSource) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.rgbe.RgbeInfo", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("u(tBBB%{-", "u(tBBB%{-");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      RgbeInfo rgbeInfo0 = null;
      try {
        rgbeInfo0 = new RgbeInfo(byteSourceFile0);
        fail("Expecting exception: FileNotFoundException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.DelegateFileFilter");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.io.filefilter.DelegateFileFilter");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.apache.commons.io.filefilter.AndFileFilter");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceFile0);
      try { 
        rgbeInfo0.getPixelData();
        fail("Expecting exception: Exception");
      } catch(Exception e) {
         //
         // Not a valid HDR: Incorrect Header
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.DelegateFileFilter");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.io.filefilter.DelegateFileFilter");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.apache.commons.io.filefilter.AndFileFilter");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceFile0);
      rgbeInfo0.close();
      try { 
        rgbeInfo0.getPixelData();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream((InputStream) null, "%0A9)cGZk");
      RgbeInfo rgbeInfo0 = new RgbeInfo(byteSourceInputStream0);
      try { 
        rgbeInfo0.getWidth();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }
