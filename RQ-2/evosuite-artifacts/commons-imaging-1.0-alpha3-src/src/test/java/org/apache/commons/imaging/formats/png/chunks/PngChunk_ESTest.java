/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 00:02:57 GMT 2022
 */

package org.apache.commons.imaging.formats.png.chunks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import org.apache.commons.imaging.formats.png.chunks.PngChunk;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PngChunk_ESTest extends PngChunk_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(485, 0, 0, byteArray0);
      pngChunk0.getDataStream();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(485, 0, 0, byteArray0);
      pngChunk0.getDataStream();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(485, 0, 0, byteArray0);
      pngChunk0.getDataStream();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(485, 0, 0, byteArray0);
      pngChunk0.getDataStream();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PngChunk pngChunk0 = new PngChunk(0, (-562), (-562), byteArray0);
      pngChunk0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PngChunk pngChunk0 = new PngChunk(0, (-562), (-562), byteArray0);
      pngChunk0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PngChunk pngChunk0 = new PngChunk(0, (-562), (-562), byteArray0);
      pngChunk0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PngChunk pngChunk0 = new PngChunk(0, (-562), (-562), byteArray0);
      pngChunk0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PngChunk pngChunk0 = new PngChunk(0, (-562), (-562), byteArray0);
      pngChunk0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PngChunk pngChunk0 = new PngChunk(0, (-562), (-562), byteArray0);
      pngChunk0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PngChunk pngChunk0 = null;
      try {
        pngChunk0 = new PngChunk((-2590), (-2590), (-2590), (byte[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.png.chunks.PngChunk", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(0, 0, 0, byteArray0);
      pngChunk0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(0, 0, 0, byteArray0);
      pngChunk0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(0, 0, 0, byteArray0);
      pngChunk0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(0, 0, 0, byteArray0);
      pngChunk0.getBytes();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PngChunk pngChunk0 = new PngChunk(24, 24, 2654, byteArray0);
      pngChunk0.getDataStream();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PngChunk pngChunk0 = new PngChunk(24, 24, 2654, byteArray0);
      pngChunk0.getDataStream();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PngChunk pngChunk0 = new PngChunk(24, 24, 2654, byteArray0);
      pngChunk0.getDataStream();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PngChunk pngChunk0 = new PngChunk(24, 24, 2654, byteArray0);
      pngChunk0.getDataStream();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PngChunk pngChunk0 = new PngChunk(24, 24, 2654, byteArray0);
      pngChunk0.getDataStream();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(1, 0, 0, byteArray0);
      boolean[] booleanArray0 = pngChunk0.getPropertyBits();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(1, 0, 0, byteArray0);
      boolean[] booleanArray0 = pngChunk0.getPropertyBits();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(1, 0, 0, byteArray0);
      boolean[] booleanArray0 = pngChunk0.getPropertyBits();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      PngChunk pngChunk0 = new PngChunk(1, 0, 0, byteArray0);
      boolean[] booleanArray0 = pngChunk0.getPropertyBits();
      ;
}
}
