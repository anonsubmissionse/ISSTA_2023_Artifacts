/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 00:11:17 GMT 2022
 */

package org.apache.commons.imaging.formats.png;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.ImageInfo;
import org.apache.commons.imaging.formats.png.PhysicalScale;
import org.apache.commons.imaging.formats.png.PngImageInfo;
import org.apache.commons.imaging.formats.png.PngText;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PngImageInfo_ESTest extends PngImageInfo_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageFormats imageFormats0 = ImageFormats.PCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.BW;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      LinkedList<PngText> linkedList1 = new LinkedList<PngText>();
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-3538), (-3464.749421342956));
      PngImageInfo pngImageInfo0 = new PngImageInfo("", (-3538), linkedList0, imageFormats0, "", (-3538), "", 1, (-3538), 1, 1, 1, 1, false, false, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0, linkedList1, physicalScale0);
      List<PngText> list0 = pngImageInfo0.getTextChunks();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      LinkedList<PngText> linkedList1 = new LinkedList<PngText>();
      PngText.Ztxt pngText_Ztxt0 = new PngText.Ztxt("org.apache.commons.io.file.CleaningPathVisitor", "#}|v@zJND-q");
      linkedList1.push(pngText_Ztxt0);
      PngImageInfo pngImageInfo0 = new PngImageInfo("X{", 0, list0, imageFormats0, "X{", 0, "X{", 0, 3205, 0, 0, 0, 0, false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0, linkedList1, (PhysicalScale) null);
      List<PngText> list1 = pngImageInfo0.getTextChunks();
      assertTrue(list1.isEmpty());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      ImageFormats imageFormats0 = ImageFormats.DCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCC;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.ADAPTIVE_RLE;
      LinkedList<PngText> linkedList1 = new LinkedList<PngText>();
      PngImageInfo pngImageInfo0 = new PngImageInfo("X{", 0, list0, imageFormats0, "X{", 0, "X{", 0, 3205, 0, 0, 0, 0, false, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0, linkedList1, (PhysicalScale) null);
      PhysicalScale physicalScale0 = pngImageInfo0.getPhysicalScale();
      assertNotNull(physicalScale0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      LinkedList<PngText> linkedList1 = new LinkedList<PngText>();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0, 767.78455F);
      PngImageInfo pngImageInfo0 = new PngImageInfo("", 0, linkedList0, (ImageFormat) null, "bQ", 0, "", 0, 0, 0.0F, 0, 767.78455F, 0, true, false, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0, linkedList1, physicalScale0);
      PhysicalScale physicalScale1 = pngImageInfo0.getPhysicalScale();
      assertTrue(physicalScale1.isInRadians());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PSD;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.OTHER;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      LinkedList<PngText> linkedList0 = new LinkedList<PngText>();
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0F, 0.0F);
      PngImageInfo pngImageInfo0 = new PngImageInfo("TG<", (-1526), (List<String>) null, imageFormats0, "TG<", (-1526), "", 491, 0, 0.0F, 0, 491, 0, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0, linkedList0, physicalScale0);
      PhysicalScale physicalScale1 = pngImageInfo0.getPhysicalScale();
      assertTrue(physicalScale1.isInRadians());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.BMP;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PSD;
      LinkedList<PngText> linkedList0 = new LinkedList<PngText>();
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(22, 0.0);
      PngImageInfo pngImageInfo0 = new PngImageInfo("_~F", 1320, (List<String>) null, imageFormats0, "$VALUES", 137, "jCN`Jc>$=ojRU", 1320, 137, 1320, 22, 137, 137, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0, linkedList0, physicalScale0);
      PhysicalScale physicalScale1 = pngImageInfo0.getPhysicalScale();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.JPEG;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCCK;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.UNKNOWN;
      LinkedList<PngText> linkedList0 = new LinkedList<PngText>();
      PhysicalScale physicalScale0 = PhysicalScale.UNDEFINED;
      PngImageInfo pngImageInfo0 = new PngImageInfo("h/wyD}qL.InAP}E|Zz&", 0, (List<String>) null, imageFormats0, "h/wyD}qL.InAP}E|Zz&", 0, "h/wyD}qL.InAP}E|Zz&", 0, 0, 0, 0, 0.0F, 0, false, true, false, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0, linkedList0, physicalScale0);
      PhysicalScale physicalScale1 = pngImageInfo0.getPhysicalScale();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ImageFormats imageFormats0 = ImageFormats.PCX;
      ImageInfo.ColorType imageInfo_ColorType0 = ImageInfo.ColorType.YCbCr;
      ImageInfo.CompressionAlgorithm imageInfo_CompressionAlgorithm0 = ImageInfo.CompressionAlgorithm.PNG_FILTER;
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0, 1346.81F);
      PngImageInfo pngImageInfo0 = new PngImageInfo("", 0, (List<String>) null, imageFormats0, "", 0, "", 2841, 2841, 779.1F, 2841, 1346.81F, 2841, true, true, true, imageInfo_ColorType0, imageInfo_CompressionAlgorithm0, (List<PngText>) null, physicalScale0);
      // Undeclared exception!
      try { 
        pngImageInfo0.getTextChunks();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
