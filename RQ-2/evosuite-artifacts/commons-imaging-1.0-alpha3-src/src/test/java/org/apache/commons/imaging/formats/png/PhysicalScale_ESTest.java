/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 00:03:32 GMT 2022
 */

package org.apache.commons.imaging.formats.png;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.imaging.formats.png.PhysicalScale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhysicalScale_ESTest extends PhysicalScale_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1353.1), 0.0);
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1353.1), 0.0);
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      assertTrue(physicalScale0.isInMeters());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1353.1), 0.0);
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(225.266218457049, 225.266218457049);
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      assertTrue(physicalScale0.isInMeters());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(225.266218457049, 225.266218457049);
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(225.266218457049, 225.266218457049);
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(1176.1814, 1176.1814);
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      assertTrue(physicalScale0.isInMeters());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(1176.1814, 1176.1814);
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(1176.1814, 1176.1814);
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, 0.0);
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      assertTrue(physicalScale0.isInRadians());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, 0.0);
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, 0.0);
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, (-2547.0));
      assertTrue(physicalScale0.isInRadians());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, (-2547.0));
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(0.0, (-2547.0));
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(1662.0, 1662.0);
      assertTrue(physicalScale0.isInRadians());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(1662.0, 1662.0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians(1662.0, 1662.0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(0.0, 0.0);
      assertTrue(physicalScale0.isInMeters());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters(0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInRadians();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInRadians();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInRadians();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInRadians();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInRadians();
      assertTrue(physicalScale0.isInMeters());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInRadians();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInRadians();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInMeters();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInMeters();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInMeters();
      assertTrue(physicalScale0.isInRadians());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInMeters();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInMeters();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInMeters();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromMeters((-1.0), (-1.0));
      boolean boolean0 = physicalScale0.isInMeters();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      assertTrue(physicalScale0.isInRadians());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      double double0 = physicalScale0.getVerticalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PhysicalScale physicalScale0 = PhysicalScale.createFromRadians((-1.0), (-1.0));
      double double0 = physicalScale0.getHorizontalUnitsPerPixel();
      assertTrue(physicalScale0.isInRadians());
}
}
