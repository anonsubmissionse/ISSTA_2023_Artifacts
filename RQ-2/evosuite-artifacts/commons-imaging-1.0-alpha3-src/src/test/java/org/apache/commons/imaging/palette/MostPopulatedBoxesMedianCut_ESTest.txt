 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1092));
      colorCount0.count = (-1092);
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount((-1421));
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, false);
      linkedList0.add(colorGroup0);
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, false);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      linkedList0.add((ColorGroup) null);
      // Undeclared exception!
      try { 
        mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.MostPopulatedBoxesMedianCut", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(700);
      colorCount0.count = 700;
      colorCount0.count = 2;
      linkedList1.add(colorCount0);
      linkedList1.offerFirst(colorCount0);
      ColorCount colorCount1 = new ColorCount(2);
      colorCount0.count = 1376;
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      colorCount0.count = 700;
      linkedList0.add(colorGroup0);
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, true);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(700);
      colorCount0.count = 700;
      colorCount0.count = 2;
      linkedList1.add(colorCount0);
      linkedList1.offerFirst(colorCount0);
      ColorCount colorCount1 = new ColorCount(2);
      colorCount0.count = 1376;
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      colorCount0.count = 700;
      linkedList0.add(colorGroup0);
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, true);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1384));
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(255);
      colorCount1.count = 255;
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, false);
      linkedList0.add(colorGroup0);
      linkedList1.poll();
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, true);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1582));
      colorCount0.count = (-1582);
      colorCount0.count = 249;
      linkedList1.add(colorCount0);
      linkedList1.offerFirst(colorCount0);
      ColorCount colorCount1 = new ColorCount(249);
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      colorCount0.count = 621;
      linkedList0.add(colorGroup0);
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, true);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1582));
      colorCount0.count = (-1582);
      colorCount0.count = 249;
      linkedList1.add(colorCount0);
      linkedList1.offerFirst(colorCount0);
      ColorCount colorCount1 = new ColorCount(249);
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      colorCount0.count = 621;
      linkedList0.add(colorGroup0);
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, true);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount(2721);
      colorCount0.count = 2721;
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(0);
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      colorCount0.count = 10;
      linkedList0.add(colorGroup0);
      // Undeclared exception!
      try { 
        mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1384));
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(255);
      colorCount1.count = 255;
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, false);
      linkedList0.add(colorGroup0);
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, false);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1384));
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(255);
      colorCount1.count = 255;
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, false);
      linkedList0.add(colorGroup0);
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, false);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1582));
      colorCount0.count = (-1582);
      colorCount0.count = 249;
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(249);
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      linkedList0.add(colorGroup0);
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, true);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1582));
      colorCount0.count = (-1582);
      colorCount0.count = 249;
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(249);
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      linkedList0.add(colorGroup0);
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, true);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1582));
      linkedList1.add(colorCount0);
      ColorCount colorCount1 = new ColorCount(249);
      linkedList1.add(colorCount1);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      linkedList0.add(colorGroup0);
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, true);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MostPopulatedBoxesMedianCut mostPopulatedBoxesMedianCut0 = new MostPopulatedBoxesMedianCut();
      LinkedList<ColorGroup> linkedList0 = new LinkedList<ColorGroup>();
      LinkedList<ColorCount> linkedList1 = new LinkedList<ColorCount>();
      ColorCount colorCount0 = new ColorCount((-1582));
      linkedList1.add(colorCount0);
      ColorGroup colorGroup0 = new ColorGroup(linkedList1, true);
      linkedList0.add(colorGroup0);
      boolean boolean0 = mostPopulatedBoxesMedianCut0.performNextMedianCut(linkedList0, true);
      ;
}
