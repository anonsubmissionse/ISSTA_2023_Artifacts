 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      fileFilterArray0[0] = (FileFilter) trueFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      boolean boolean0 = andFileFilter0.removeFileFilter(fileFilterArray0[0]);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      List<FileFilter> list0 = orFileFilter0.getFileFilters();
      AndFileFilter andFileFilter0 = new AndFileFilter(list0);
      List<FileFilter> list1 = andFileFilter0.getFileFilters();
      andFileFilter0.addFileFilter(orFileFilter0);
      orFileFilter0.setFileFilters(list1);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        andFileFilter0.accept(fileSelectInfo0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      SymbolicLinkFileFilter symbolicLinkFileFilter0 = (SymbolicLinkFileFilter)SymbolicLinkFileFilter.SYMBOLIC;
      andFileFilter0.addFileFilter(symbolicLinkFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        andFileFilter0.accept(fileSelectInfo0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.filter.SymbolicLinkFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[6];
      NotFileFilter notFileFilter0 = (NotFileFilter)CanWriteFileFilter.CANNOT_WRITE;
      fileFilterArray0[0] = (FileFilter) notFileFilter0;
      ArrayList<FileFilter> arrayList0 = new ArrayList<FileFilter>();
      OrFileFilter orFileFilter0 = new OrFileFilter(arrayList0);
      fileFilterArray0[1] = (FileFilter) orFileFilter0;
      CanExecuteFileFilter canExecuteFileFilter0 = (CanExecuteFileFilter)CanExecuteFileFilter.CAN_EXECUTE;
      fileFilterArray0[2] = (FileFilter) canExecuteFileFilter0;
      String[] stringArray0 = new String[8];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
      fileFilterArray0[3] = (FileFilter) prefixFileFilter0;
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      fileFilterArray0[4] = (FileFilter) trueFileFilter0;
      fileFilterArray0[5] = (FileFilter) notFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        andFileFilter0.accept(fileSelectInfo0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.filter.CanWriteFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      TrueFileFilter trueFileFilter0 = (TrueFileFilter)TrueFileFilter.TRUE;
      fileFilterArray0[0] = (FileFilter) trueFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      andFileFilter0.addFileFilter(fileFilterArray0[0]);
      String string0 = andFileFilter0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OrFileFilter orFileFilter0 = new OrFileFilter();
      Vector<FileFilter> vector0 = new Vector<FileFilter>();
      AndFileFilter andFileFilter0 = new AndFileFilter(vector0);
      andFileFilter0.addFileFilter(orFileFilter0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = andFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      fileFilterArray0[0] = (FileFilter) trueFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = andFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      AndFileFilter andFileFilter0 = null;
      try {
        andFileFilter0 = new AndFileFilter(fileFilterArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Null filters are not allowed
         //
         verifyException("org.apache.commons.vfs2.filter.AndFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AndFileFilter andFileFilter0 = null;
      try {
        andFileFilter0 = new AndFileFilter((FileFilter[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The filters must not be null or empty
         //
         verifyException("org.apache.commons.vfs2.filter.AndFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter((List<FileFilter>) null);
      boolean boolean0 = andFileFilter0.removeFileFilter(andFileFilter0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter((List<FileFilter>) null);
      // Undeclared exception!
      try { 
        andFileFilter0.setFileFilters((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AndFileFilter andFileFilter0 = new AndFileFilter();
      andFileFilter0.addFileFilter((FileFilter) null);
      String string0 = andFileFilter0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      TrueFileFilter trueFileFilter0 = new TrueFileFilter();
      fileFilterArray0[0] = (FileFilter) trueFileFilter0;
      AndFileFilter andFileFilter0 = new AndFileFilter(fileFilterArray0);
      List<FileFilter> list0 = andFileFilter0.getFileFilters();
      andFileFilter0.setFileFilters(list0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = andFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
}
