/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:53:09 GMT 2022
 */

package org.apache.commons.vfs2.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.URLStreamHandlerFactory;
import java.util.Collection;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.impl.Log4JLogger;
import org.apache.commons.vfs2.CacheStrategy;
import org.apache.commons.vfs2.Capability;
import org.apache.commons.vfs2.FileContentInfoFactory;
import org.apache.commons.vfs2.FileName;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystemConfigBuilder;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.FileType;
import org.apache.commons.vfs2.FilesCache;
import org.apache.commons.vfs2.NameScope;
import org.apache.commons.vfs2.VFS;
import org.apache.commons.vfs2.cache.LRUFilesCache;
import org.apache.commons.vfs2.cache.NullFilesCache;
import org.apache.commons.vfs2.cache.OnCallRefreshFileObject;
import org.apache.commons.vfs2.impl.DecoratedFileObject;
import org.apache.commons.vfs2.impl.DefaultFileReplicator;
import org.apache.commons.vfs2.impl.DefaultFileSystemManager;
import org.apache.commons.vfs2.impl.DefaultVfsComponentContext;
import org.apache.commons.vfs2.impl.FileContentInfoFilenameFactory;
import org.apache.commons.vfs2.impl.SynchronizedFileObject;
import org.apache.commons.vfs2.impl.VirtualFileName;
import org.apache.commons.vfs2.impl.VirtualFileSystem;
import org.apache.commons.vfs2.operations.FileOperationProvider;
import org.apache.commons.vfs2.provider.DelegateFileObject;
import org.apache.commons.vfs2.provider.FileProvider;
import org.apache.commons.vfs2.provider.FileReplicator;
import org.apache.commons.vfs2.provider.GenericURLFileName;
import org.apache.commons.vfs2.provider.LayeredFileName;
import org.apache.commons.vfs2.provider.TemporaryFileStore;
import org.apache.commons.vfs2.provider.bzip2.Bzip2FileProvider;
import org.apache.commons.vfs2.provider.ftp.FtpClient;
import org.apache.commons.vfs2.provider.ftp.FtpFileProvider;
import org.apache.commons.vfs2.provider.ftp.FtpFileSystem;
import org.apache.commons.vfs2.provider.ftps.FtpsFileProvider;
import org.apache.commons.vfs2.provider.ftps.FtpsFileSystem;
import org.apache.commons.vfs2.provider.gzip.GzipFileProvider;
import org.apache.commons.vfs2.provider.hdfs.HdfsFileProvider;
import org.apache.commons.vfs2.provider.http4s.Http4sFileProvider;
import org.apache.commons.vfs2.provider.http5.Http5FileProvider;
import org.apache.commons.vfs2.provider.https.HttpsFileProvider;
import org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider;
import org.apache.commons.vfs2.provider.local.LocalFileSystem;
import org.apache.commons.vfs2.provider.tar.TarFileProvider;
import org.apache.commons.vfs2.provider.tar.TarFileSystem;
import org.apache.commons.vfs2.provider.tar.Tbz2FileProvider;
import org.apache.commons.vfs2.provider.temp.TemporaryFileProvider;
import org.apache.commons.vfs2.provider.zip.ZipFileProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultFileSystemManager_ESTest extends DefaultFileSystemManager_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addVirtualFileSystemScheme("/aC:6EPo");
      GzipFileProvider gzipFileProvider0 = new GzipFileProvider();
      defaultFileSystemManager0.setDefaultProvider(gzipFileProvider0);
      try { 
        defaultFileSystemManager0.resolveURI("/aC:6EPo");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not find file with URI \"6EPo\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) null, ":\"eRWta|?3mwO9c");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not find file with URI \":\"eRWta|?3mwO9c\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      MockFile mockFile0 = new MockFile("9J.R!>bl4BPdSspq");
      URL uRL0 = mockFile0.toURL();
      try { 
        defaultFileSystemManager0.resolveFile(uRL0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Unknown message with code \"Illegal character in path at index 111: file:/home/ISSTA_USER/Documents/toga-evaluation/toga-eval-issta-2023/artifacts/commons-vfs-2.9.0/commons-vfs2/9J.R!>bl4BPdSspq\".
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      stringArray0[5] = ":\"eRWta|?3mwO9c";
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.createFileSystem(":\"eRWta|?3mwO9c", (FileObject) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("l", "l", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(virtualFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(virtualFileName0);
      defaultFileSystemManager0.setBaseFile(fileObject0);
      FileName fileName0 = defaultFileSystemManager0.resolveURI("l");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem("org.apache.hadoop.security.alias.CredentialProvider$CredentialEntry");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileObject fileObject1 = defaultFileSystemManager0.resolveFile(fileObject0, "il'etcA<!n,4", fileSystemOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[1];
      Tbz2FileProvider tbz2FileProvider0 = new Tbz2FileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) tbz2FileProvider0);
      String[] stringArray1 = defaultFileSystemManager0.getSchemes();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator((File) null);
      defaultFileSystemManager0.setReplicator(defaultFileReplicator0);
      FileReplicator fileReplicator0 = defaultFileSystemManager0.getReplicator();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FtpFileProvider ftpFileProvider0 = new FtpFileProvider();
      defaultFileSystemManager0.addProvider("M%}i4d].J&.)", (FileProvider) ftpFileProvider0);
      Collection<Capability> collection0 = defaultFileSystemManager0.getProviderCapabilities("M%}i4d].J&.)");
      assertNotNull(collection0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.setLogger((Log) null);
      Log log0 = defaultFileSystemManager0.getLogger();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Log log0 = defaultFileSystemManager0.getLogger();
      assertNotNull(log0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FilesCache filesCache0 = defaultFileSystemManager0.getFilesCache();
      assertNotNull(filesCache0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      TarFileProvider tarFileProvider0 = new TarFileProvider();
      defaultFileSystemManager0.addProvider("^~-o`HcrON>Ce`Z", (FileProvider) tarFileProvider0);
      FileSystemConfigBuilder fileSystemConfigBuilder0 = defaultFileSystemManager0.getFileSystemConfigBuilder("^~-o`HcrON>Ce`Z");
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FtpsFileProvider ftpsFileProvider0 = new FtpsFileProvider();
      defaultFileSystemManager0.addProvider("^~-o`HcrON>Ce`Z", (FileProvider) ftpsFileProvider0);
      FileSystemConfigBuilder fileSystemConfigBuilder0 = defaultFileSystemManager0.getFileSystemConfigBuilder("^~-o`HcrON>Ce`Z");
      assertNotNull(fileSystemConfigBuilder0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Class<DecoratedFileObject> class0 = DecoratedFileObject.class;
      defaultFileSystemManager0.setFileObjectDecorator(class0);
      Constructor<?> constructor0 = defaultFileSystemManager0.getFileObjectDecoratorConst();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileContentInfoFactory fileContentInfoFactory0 = defaultFileSystemManager0.getFileContentInfoFactory();
      assertNotNull(fileContentInfoFactory0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      CacheStrategy cacheStrategy0 = defaultFileSystemManager0.getCacheStrategy();
      assertNotNull(cacheStrategy0.toString());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("S", "vfs.provider/invalid-descendent-name.error", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(virtualFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(virtualFileName0);
      defaultFileSystemManager0.setBaseFile(fileObject0);
      FileObject fileObject1 = defaultFileSystemManager0.getBaseFile();
      assertFalse(fileObject1.isContentOpen());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.toFileObject((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.setFileObjectDecorator((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.setBaseFile((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, "", (-3309), (-3309), (String) null, (String) null, (String) null, fileType0, "uu]=BD");
      VFS.setUriStyle(true);
      NameScope nameScope0 = NameScope.DESCENDENT;
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveName((FileName) genericURLFileName0, "uu]=BD", nameScope0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, "", (-3299), (-3299), (String) null, (String) null, (String) null, fileType0, "uu]=BD");
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveName((FileName) genericURLFileName0, "X<i", (NameScope) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileName", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FOLDER;
      LayeredFileName layeredFileName0 = new LayeredFileName("vfs.impl/no-local-file-provider.error", (FileName) null, "vfs.impl/no-local-file-provider.error", fileType0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveName((FileName) layeredFileName0, "user.name");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.LayeredFileName", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("org.apache.commons.net.ftp.FTPSClient", (String) null, 1757, 1757, "q]3y*>7z??zAn91", (String) null, "q]3y*>7z??zAn91", fileType0, (String) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      virtualFileSystem0.setContext(defaultVfsComponentContext0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile(fileObject0, "q]3y*>7z??zAn91", fileSystemOptions0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // No files-cache implementation set.
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) synchronizedFileObject0, "", fileSystemOptions0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) onCallRefreshFileObject0, "vfs.impl/find-rel-file.error");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("tbz2", "", fileType0);
      LayeredFileName layeredFileName0 = new LayeredFileName("vfs.operation/operation-provider-already-added.error", virtualFileName0, "_0).<;j", fileType0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, "", 5, 5, (String) null, "oI>IO(6/fi", "tbz2", fileType0, "oI>IO(6/fi");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpsFileSystem> delegateFileObject0 = new DelegateFileObject<FtpsFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject(delegateFileObject0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) synchronizedFileObject0, "FxbB<U@$bM");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((URL) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("S", "vfs.provider/invalid-descendent-name.error", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(virtualFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(virtualFileName0);
      defaultFileSystemManager0.setBaseFile(fileObject0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile("S", fileSystemOptions0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((String) null, fileSystemOptions0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((File) null, "zQ3_z B");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.local.DefaultLocalFileProvider", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem("il'etcA<!n,4");
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject(fileObject0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "il'etcA<!n,4";
      HdfsFileProvider hdfsFileProvider0 = new HdfsFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) hdfsFileProvider0);
      try { 
        defaultFileSystemManager0.createVirtualFileSystem((FileObject) onCallRefreshFileObject0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Expecting // to follow the scheme in URI \"il'etcA<!n,4//\".
         //
         verifyException("org.apache.commons.vfs2.provider.HostFileNameParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.createVirtualFileSystem((FileObject) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.createVirtualFileSystem("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem("org.apache.hadoop.security.alias.CredentialProvider$CredentialEntry");
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject(fileObject0);
      try { 
        defaultFileSystemManager0.createFileSystem((FileObject) onCallRefreshFileObject0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not find a file provider that can handle file \"org.apache.commons.vfs2.provider.DelegateFileObject@0000000011\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.createFileSystem((FileObject) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.FileTypeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.createFileSystem("x*iW8(b{]", (FileObject) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // No file provider is registered with URI scheme \"x*iW8(b{]\" to handle file \"null\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "Gn", 0, 0, "Gn", "I4Y%", "", fileType0, (String) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, (FtpClient) null, fileSystemOptions0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.closeFileSystem(ftpFileSystem0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.setLogger((Log) null);
      defaultFileSystemManager0.init();
      defaultFileSystemManager0.init();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.close();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      defaultFileSystemManager0.init();
      Log4JLogger log4JLogger0 = new Log4JLogger();
      defaultFileSystemManager0.setLogger(log4JLogger0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.close();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.CategoryKey", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.canCreateFileSystem((FileObject) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.FileTypeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, 57, (-1665), ":sbT?r87I2CJl`_P", ":sbT?r87I2CJl`_P", ":sbT?r87I2CJl`_P", fileType0, "8wxuUX#YsK3mv@~j");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject(fileObject0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.canCreateFileSystem(onCallRefreshFileObject0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.addVirtualFileSystemScheme((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      ZipFileProvider zipFileProvider0 = new ZipFileProvider();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.addProvider((String[]) null, (FileProvider) zipFileProvider0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.addOperationProvider((String[]) null, fileOperationProvider0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      try { 
        defaultFileSystemManager0.resolveURI(":\"eRWta|?3mwO9c");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not find file with URI \":\"eRWta|?3mwO9c\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Http4sFileProvider http4sFileProvider0 = new Http4sFileProvider();
      defaultFileSystemManager0.setDefaultProvider(http4sFileProvider0);
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "g!h@D/", (-316), 1567, "g!h@D/", "g!h@D/", "ear", fileType0, "^ibI.z<G|e");
      LayeredFileName layeredFileName0 = new LayeredFileName("g!h@D/", genericURLFileName0, "g!h@D/", fileType0);
      NameScope nameScope0 = NameScope.FILE_SYSTEM;
      try { 
        defaultFileSystemManager0.resolveName((FileName) layeredFileName0, "^ibI.z<G|e", nameScope0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Expecting // to follow the scheme in URI \"g!h@D/:://g!h%40D%2f:g!h%40D%2f@g!h@D/ear?^ibI.z<G|e!/g!h@D/^ibI.z<G|e\".
         //
         verifyException("org.apache.commons.vfs2.provider.HostFileNameParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, (-17), (-17), "-.DA@N'=rU 'vI", ",lP_|9YP7'2g", "P>'ZUWMX}#[r\"*J", fileType0, ",lP_|9YP7'2g");
      NameScope nameScope0 = NameScope.DESCENDENT;
      try { 
        defaultFileSystemManager0.resolveName((FileName) genericURLFileName0, "/YR*\"kiW&3O;Oc", nameScope0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Invalid descendent file name \"/YR*\"kiW&3O;Oc\".
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) null, ":\"eRWta|?3mwO9c", fileSystemOptions0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not find file with URI \":\"eRWta|?3mwO9c\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((FileObject) null, (String) null, fileSystemOptions0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("org.apache.commons.net.ftp.FTPSClient", (String) null, 1757, 1757, "q]3y*>7z??zAn91", (String) null, "q]3y*>7z??zAn91", fileType0, (String) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile(fileObject0, "q]3y*>7z??zAn91", fileSystemOptions0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Bzip2FileProvider bzip2FileProvider0 = new Bzip2FileProvider();
      defaultFileSystemManager0.addProvider((String) null, (FileProvider) bzip2FileProvider0);
      boolean boolean0 = defaultFileSystemManager0.hasProvider((String) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[8];
      stringArray0[2] = "AT";
      MockFile mockFile0 = new MockFile("", "");
      FtpFileProvider ftpFileProvider0 = new FtpFileProvider();
      defaultFileSystemManager0.addProvider("AT", (FileProvider) ftpFileProvider0);
      TemporaryFileProvider temporaryFileProvider0 = new TemporaryFileProvider(mockFile0);
      try { 
        defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) temporaryFileProvider0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Multiple providers registered for URL scheme \"AT\".
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("!", "Hv7lmO>nu}v<", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(virtualFileName0, fileSystemOptions0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0._closeFileSystem(virtualFileSystem0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "-yi%", 148, 148, "", "-yi%", "vfs.impl/no-replicator.error", fileType0, "vfs.impl/no-replicator.error");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      defaultFileSystemManager0._closeFileSystem(ftpFileSystem0);
      assertNotNull(ftpFileSystem0.getRootURI());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Http5FileProvider http5FileProvider0 = new Http5FileProvider();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4GqT_,";
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) http5FileProvider0);
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("4GqT_,", "4GqT_,", 215, 215, "4GqT_,", "4GqT_,", "4GqT_,", fileType0, "4GqT_,");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      defaultFileSystemManager0._closeFileSystem(virtualFileSystem0);
      assertTrue(virtualFileSystem0.isReleaseable());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FilesCache filesCache0 = defaultFileSystemManager0.getFilesCache();
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Constructor<?> constructor0 = defaultFileSystemManager0.getFileObjectDecoratorConst();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileObject fileObject0 = defaultFileSystemManager0.getBaseFile();
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileContentInfoFactory fileContentInfoFactory0 = defaultFileSystemManager0.getFileContentInfoFactory();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = defaultFileSystemManager0.getSchemes();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      defaultFileSystemManager0.setTemporaryFileStore(defaultFileReplicator0);
      TemporaryFileStore temporaryFileStore0 = defaultFileSystemManager0.getTemporaryFileStore();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.getCacheStrategy();
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addMimeTypeMap("vfs.provider/get-attribute-not-supported.error", "vfs.provider/get-attribute-not-supported.error");
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      LRUFilesCache lRUFilesCache0 = new LRUFilesCache();
      try { 
        defaultFileSystemManager0.setFilesCache(lRUFilesCache0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Manager already inited, cant change the configuration now.
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      NullFilesCache nullFilesCache0 = new NullFilesCache();
      defaultFileSystemManager0.setFilesCache(nullFilesCache0);
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Class<TarFileSystem> class0 = TarFileSystem.class;
      try { 
        defaultFileSystemManager0.setFileObjectDecorator(class0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // \"org.apache.commons.vfs2.provider.tar.TarFileSystem\" is not a valid decorator. It has to extend \"DecoratedFileObject\" and must provide a single argument constructor which takes a \"FileObject\"
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      Class<SynchronizedFileObject> class0 = SynchronizedFileObject.class;
      try { 
        defaultFileSystemManager0.setFileObjectDecorator(class0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Manager already inited, cant change the configuration now.
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Class<DecoratedFileObject> class0 = DecoratedFileObject.class;
      defaultFileSystemManager0.setFileObjectDecorator(class0);
      Class<?> class1 = defaultFileSystemManager0.getFileObjectDecorator();
      assertEquals(0, class1.getModifiers());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileContentInfoFilenameFactory fileContentInfoFilenameFactory0 = new FileContentInfoFilenameFactory();
      try { 
        defaultFileSystemManager0.setFileContentInfoFactory(fileContentInfoFilenameFactory0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Manager already inited, cant change the configuration now.
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileContentInfoFilenameFactory fileContentInfoFilenameFactory0 = new FileContentInfoFilenameFactory();
      defaultFileSystemManager0.setFileContentInfoFactory(fileContentInfoFilenameFactory0);
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      CacheStrategy cacheStrategy0 = CacheStrategy.ON_CALL;
      try { 
        defaultFileSystemManager0.setCacheStrategy(cacheStrategy0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Manager already inited, cant change the configuration now.
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      CacheStrategy cacheStrategy0 = CacheStrategy.MANUAL;
      defaultFileSystemManager0.setCacheStrategy(cacheStrategy0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, (-3309), (-3309), (String) null, (String) null, (String) null, fileType0, "uu]=BD");
      TarFileProvider tarFileProvider0 = new TarFileProvider();
      defaultFileSystemManager0.addProvider((String) null, (FileProvider) tarFileProvider0);
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider("uu]=BD", (FileProvider) defaultLocalFileProvider0);
      NameScope nameScope0 = NameScope.CHILD;
      FileName fileName0 = defaultFileSystemManager0.resolveName((FileName) genericURLFileName0, "uu]=BD", nameScope0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[5];
      stringArray0[3] = "ZpEPz";
      Bzip2FileProvider bzip2FileProvider0 = new Bzip2FileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) bzip2FileProvider0);
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("ZpEPz", "ZpEPz", 5171, 5171, "ZpEPz", "ZpEPz", "ZpEPz", fileType0, stringArray0[0]);
      LayeredFileName layeredFileName0 = new LayeredFileName(stringArray0[2], genericURLFileName0, "ZpEPz", fileType0);
      try { 
        defaultFileSystemManager0.resolveName((FileName) layeredFileName0, "ZpEPz");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not find file with URI \"//ZpEPz:ZpEPz@ZpEPzZpEPz\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveURI((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, "", (-3309), (-3309), (String) null, (String) null, (String) null, fileType0, "uu]=BD");
      NameScope nameScope0 = NameScope.DESCENDENT;
      GenericURLFileName genericURLFileName1 = (GenericURLFileName)defaultFileSystemManager0.resolveName((FileName) genericURLFileName0, "X<i", nameScope0);
      assertEquals(0, genericURLFileName1.getDefaultPort());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addVirtualFileSystemScheme("/aC:6EPo");
      FileType fileType0 = FileType.IMAGINARY;
      VirtualFileName virtualFileName0 = new VirtualFileName("/aC:6EPo", "/aC:6EPo", fileType0);
      NameScope nameScope0 = NameScope.FILE_SYSTEM;
      FileName fileName0 = defaultFileSystemManager0.resolveName((FileName) virtualFileName0, "/aC:6EPo", nameScope0);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("F3", "F3", fileType0);
      NameScope nameScope0 = NameScope.DESCENDENT;
      try { 
        defaultFileSystemManager0.resolveName((FileName) virtualFileName0, "", nameScope0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Invalid descendent file name \"\".
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("F3", "F3", fileType0);
      VFS.setUriStyle(true);
      NameScope nameScope0 = NameScope.DESCENDENT_OR_SELF;
      FileName fileName0 = defaultFileSystemManager0.resolveName((FileName) virtualFileName0, "F3", nameScope0);
      FileName fileName1 = defaultFileSystemManager0.resolveName(fileName0, "F3");
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("F3", " _h=$jO!b", fileType0);
      VFS.setUriStyle(true);
      NameScope nameScope0 = NameScope.CHILD;
      FileName fileName0 = defaultFileSystemManager0.resolveName((FileName) virtualFileName0, "-", nameScope0);
      FileName fileName1 = defaultFileSystemManager0.resolveName(fileName0, "Disconnecting from ", nameScope0);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "v";
      Bzip2FileProvider bzip2FileProvider0 = new Bzip2FileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) bzip2FileProvider0);
      URI uRI0 = MockURI.URI("v", "v", stringArray0[1], stringArray0[1], stringArray0[4]);
      try { 
        defaultFileSystemManager0.resolveFile(uRI0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not find file with URI \"//v\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("org.apache.commons.net.ftp.FTPSClient", "org.apache.commons.net.ftp.FTPSClient", 1757, 1757, "org.apache.commons.net.ftp.FTPSClient", "org.apache.commons.net.ftp.FTPSClient", "org.apache.commons.net.ftp.FTPSClient", fileType0, "org.apache.commons.net.ftp.FTPSClient");
      VFS.setUriStyle(true);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile(fileObject0, "org.apache.commons.net.ftp.FTPSClient", fileSystemOptions0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("or.apache.comons.et.ftp.FTPSClient", "or.apache.comons.et.ftp.FTPSClient", 1757, 1757, "or.apache.comons.et.ftp.FTPSClient", "or.apache.comons.et.ftp.FTPSClient", "or.apache.comons.et.ftp.FTPSClient", fileType0, "or.apache.comons.et.ftp.FTPSClient");
      VFS.setUriStyle(true);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile(fileObject0, "or.apache.comons.et.ftp.FTPSClient", fileSystemOptions0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem("jxVj,;|%GS^dW2,");
      FileObject fileObject1 = defaultFileSystemManager0.resolveFile(fileObject0, "+~1=X?lbmei~5GTV");
      assertTrue(fileObject1.isAttached());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[9];
      stringArray0[5] = "v";
      Bzip2FileProvider bzip2FileProvider0 = new Bzip2FileProvider();
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) bzip2FileProvider0);
      defaultFileSystemManager0.removeProvider("v");
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Http5FileProvider http5FileProvider0 = new Http5FileProvider();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4GqT_,";
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) http5FileProvider0);
      defaultFileSystemManager0.removeProvider("4GqT_,");
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.removeProvider("qy%b7|N?>");
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      boolean boolean0 = defaultFileSystemManager0.hasProvider("");
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "sftp";
      stringArray0[2] = "!1$N[RC/Wt";
      stringArray0[3] = "http4s";
      stringArray0[4] = "g7|RA)Qi?]-)";
      stringArray0[5] = "N.3[D'";
      stringArray0[6] = "ZpE\"P2";
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      defaultFileSystemManager0.addOperationProvider(stringArray0, fileOperationProvider0);
      FileOperationProvider[] fileOperationProviderArray0 = defaultFileSystemManager0.getOperationProviders("g7|RA)Qi?]-)");
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileOperationProvider[] fileOperationProviderArray0 = defaultFileSystemManager0.getOperationProviders("");
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addProvider("org.apache.commons.vfs2.impl.DefaultFileSystemManager", (FileProvider) null);
      defaultFileSystemManager0.init();
      defaultFileSystemManager0.freeUnusedResources();
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.freeUnusedResources();
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "sftp";
      stringArray0[2] = "!1$N[RC/Wt";
      stringArray0[3] = "http4s";
      stringArray0[4] = "g7|RA)Qi?]-)";
      stringArray0[5] = "N.3[D'";
      defaultFileSystemManager0.init();
      stringArray0[6] = "ZpE\"P2";
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      defaultFileSystemManager0.addOperationProvider(stringArray0, fileOperationProvider0);
      defaultFileSystemManager0.close();
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.close();
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addVirtualFileSystemScheme("/aC:6EPo");
      try { 
        defaultFileSystemManager0.resolveFile("/aC:6EPo");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Unknown scheme \"/aC\" in URI \"/aC:6EPo\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[7];
      DefaultLocalFileProvider defaultLocalFileProvider0 = new DefaultLocalFileProvider();
      defaultFileSystemManager0.addProvider("cAO8Pk9ep?!6eA?v", (FileProvider) defaultLocalFileProvider0);
      defaultFileSystemManager0.addProvider(stringArray0, (FileProvider) defaultLocalFileProvider0);
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Http4sFileProvider http4sFileProvider0 = new Http4sFileProvider();
      defaultFileSystemManager0.addProvider("", (FileProvider) http4sFileProvider0);
      try { 
        defaultFileSystemManager0.addProvider("", (FileProvider) http4sFileProvider0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Multiple providers registered for URL scheme \"\".
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = new String[8];
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      try { 
        defaultFileSystemManager0.addOperationProvider(stringArray0, fileOperationProvider0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Operation provider already added to scheme \"null\"
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("Unable to parse configuration fs.permissions.umask-mode with value ", "Unable to parse configuration fs.permissions.umask-mode with value ", (-1), (-1), "Unable to parse configuration fs.permissions.umask-mode with value ", "Unable to parse configuration fs.permissions.umask-mode with value ", "Unable to parse configuration fs.permissions.umask-mode with value ", fileType0, "Unable to parse configuration fs.permissions.umask-mode with value ");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      LocalFileSystem localFileSystem0 = new LocalFileSystem(genericURLFileName0, "Unable to parse configuration fs.permissions.umask-mode with value ", fileSystemOptions0);
      defaultFileSystemManager0.closeFileSystem(localFileSystem0);
      assertTrue(localFileSystem0.isReleaseable());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Bzip2FileProvider bzip2FileProvider0 = new Bzip2FileProvider();
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addProvider(stringArray0[0], (FileProvider) bzip2FileProvider0);
      DefaultFileSystemManager.VfsStreamHandlerFactory defaultFileSystemManager_VfsStreamHandlerFactory0 = defaultFileSystemManager0.new VfsStreamHandlerFactory();
      URLStreamHandler uRLStreamHandler0 = defaultFileSystemManager_VfsStreamHandlerFactory0.createURLStreamHandler(stringArray0[0]);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultFileSystemManager.VfsStreamHandlerFactory defaultFileSystemManager_VfsStreamHandlerFactory0 = defaultFileSystemManager0.new VfsStreamHandlerFactory();
      URLStreamHandler uRLStreamHandler0 = defaultFileSystemManager_VfsStreamHandlerFactory0.createURLStreamHandler("ram");
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem("ram");
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject(fileObject0);
      boolean boolean0 = defaultFileSystemManager0.canCreateFileSystem(onCallRefreshFileObject0);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.toFileObject((File) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.getFileSystemConfigBuilder("^~-o`HcrON>Ce`Z");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Unknown scheme \"^~-o`HcrON>Ce`Z\" in URI \"{1}\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      FileObject fileObject0 = defaultFileSystemManager0.createVirtualFileSystem("il'etcA<!n,4");
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject(fileObject0);
      FileObject fileObject1 = defaultFileSystemManager0.createVirtualFileSystem((FileObject) onCallRefreshFileObject0);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      defaultFileSystemManager0.addOperationProvider("ram", fileOperationProvider0);
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Class<?> class0 = defaultFileSystemManager0.getFileObjectDecorator();
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.setBaseFile((File) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FtpsFileProvider ftpsFileProvider0 = new FtpsFileProvider();
      defaultFileSystemManager0.addProvider("org.apache.commons.vfs2.impl.DefaultFileSystemManager", (FileProvider) ftpsFileProvider0);
      defaultFileSystemManager0.init();
      defaultFileSystemManager0.freeUnusedResources();
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.getTemporaryFileStore();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // No temporary file store configured.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpsFileProvider httpsFileProvider0 = new HttpsFileProvider();
      try { 
        httpsFileProvider0.parseUri((FileName) null, "org.apache.log4j.DailyRollingFileAppender");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Expecting // to follow the scheme in URI \"org.apache.log4j.DailyRollingFileAppender\".
         //
         verifyException("org.apache.commons.vfs2.provider.HostFileNameParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      try { 
        defaultFileSystemManager0.resolveFile("S", fileSystemOptions0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not find file with URI \"S\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.getProviderCapabilities("Hv7lmO>nu}v<");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Unknown scheme \"Hv7lmO>nu}v<\" in URI \"{1}\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("S", "vfs.provider/invalid-descendent-name.error", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(virtualFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(virtualFileName0);
      defaultFileSystemManager0.setBaseFile(fileObject0);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile("http3");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      URLStreamHandlerFactory uRLStreamHandlerFactory0 = defaultFileSystemManager0.getURLStreamHandlerFactory();
      assertNotNull(uRLStreamHandlerFactory0);
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.getReplicator();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // No file replicator configured.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.createFileSystem((FileObject) synchronizedFileObject0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((URI) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.resolveFile((File) null, "zQ3_z B");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.addExtensionMap("rpYS8;3}(LR(Xpi&b", "hardlink@openssh.com is not supported");
      assertNotNull(defaultFileSystemManager0.getCacheStrategy());
}
}
