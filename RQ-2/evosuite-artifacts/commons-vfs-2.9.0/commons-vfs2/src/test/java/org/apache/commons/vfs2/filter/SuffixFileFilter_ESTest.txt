 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter(iOCase0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The array of suffixes must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.SuffixFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter(iOCase0, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The list of suffixes must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.SuffixFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stringArray0);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(stack0);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[3];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, stringArray0);
      String string0 = suffixFileFilter0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<C3p!KGv-H;4k";
      stringArray0[1] = "<C3p!KGv-H;4k";
      stringArray0[2] = ")";
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(")").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = suffixFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<C3p!KGv-H;4k";
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(")").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      // Undeclared exception!
      try { 
        suffixFileFilter0.accept(fileSelectInfo0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.filter.IOCase", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[14];
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter((IOCase) null, stringArray0);
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter((IOCase) null, linkedList0);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SuffixFileFilter suffixFileFilter0 = new SuffixFileFilter(iOCase0, linkedList0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = suffixFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The array of suffixes must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.SuffixFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SuffixFileFilter suffixFileFilter0 = null;
      try {
        suffixFileFilter0 = new SuffixFileFilter((List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The list of suffixes must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.SuffixFileFilter", e);
      }
  }
