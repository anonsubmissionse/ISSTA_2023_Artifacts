/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 05:17:44 GMT 2022
 */

package org.apache.commons.vfs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandlerFactory;
import org.apache.commons.logging.impl.Log4JLogger;
import org.apache.commons.vfs2.FileContentInfoFactory;
import org.apache.commons.vfs2.FileName;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystem;
import org.apache.commons.vfs2.FileSystemConfigBuilder;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.FileType;
import org.apache.commons.vfs2.FilesCache;
import org.apache.commons.vfs2.NameScope;
import org.apache.commons.vfs2.impl.DecoratedFileObject;
import org.apache.commons.vfs2.impl.DefaultFileSystemManager;
import org.apache.commons.vfs2.impl.StandardFileSystemManager;
import org.apache.commons.vfs2.impl.VirtualFileName;
import org.apache.commons.vfs2.operations.FileOperationProvider;
import org.apache.commons.vfs2.provider.AbstractFileObject;
import org.apache.commons.vfs2.provider.DelegateFileObject;
import org.apache.commons.vfs2.provider.FileProvider;
import org.apache.commons.vfs2.provider.GenericURLFileName;
import org.apache.commons.vfs2.provider.LayeredFileName;
import org.apache.commons.vfs2.provider.bzip2.Bzip2FileProvider;
import org.apache.commons.vfs2.provider.http5s.Http5sFileProvider;
import org.apache.commons.vfs2.provider.jar.JarFileProvider;
import org.apache.commons.vfs2.provider.local.LocalFile;
import org.apache.log4j.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileSystemManager_ESTest extends FileSystemManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      Class<String> class0 = String.class;
      Logger logger0 = Logger.getLogger(class0);
      Log4JLogger log4JLogger0 = new Log4JLogger(logger0);
      standardFileSystemManager0.setLogger(log4JLogger0);
      assertNull(standardFileSystemManager0.getCacheStrategy());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      standardFileSystemManager0.close();
      assertNull(standardFileSystemManager0.getCacheStrategy());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      defaultFileSystemManager0.addOperationProvider("6`", fileOperationProvider0);
      assertNull(defaultFileSystemManager0.getCacheStrategy());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FILE;
      VirtualFileName virtualFileName0 = new VirtualFileName("zjb9xs9SuO", "", fileType0);
      LayeredFileName layeredFileName0 = new LayeredFileName("", virtualFileName0, "", fileType0);
      NameScope nameScope0 = NameScope.CHILD;
      FileName fileName0 = defaultFileSystemManager0.resolveName((FileName) layeredFileName0, ")< ", nameScope0);
      assertFalse(fileName0.equals((Object)layeredFileName0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      VirtualFileName virtualFileName0 = new VirtualFileName("e", "e", fileType0);
      FileName fileName0 = standardFileSystemManager0.resolveName((FileName) virtualFileName0, "e");
      assertFalse(fileName0.equals((Object)virtualFileName0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      standardFileSystemManager0.init();
      File file0 = MockFile.createTempFile("]^q%&G]EB8a-.W}hm", "]^q%&G]EB8a-.W}hm");
      LocalFile localFile0 = (LocalFile)standardFileSystemManager0.resolveFile(file0, "zlib");
      assertEquals(8192, AbstractFileObject.DEFAULT_BUFFER_SIZE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      boolean boolean0 = standardFileSystemManager0.hasProvider((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      URLStreamHandlerFactory uRLStreamHandlerFactory0 = standardFileSystemManager0.getURLStreamHandlerFactory();
      assertNotNull(uRLStreamHandlerFactory0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Bzip2FileProvider bzip2FileProvider0 = new Bzip2FileProvider();
      defaultFileSystemManager0.addProvider((String) null, (FileProvider) bzip2FileProvider0);
      String[] stringArray0 = defaultFileSystemManager0.getSchemes();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      String[] stringArray0 = defaultFileSystemManager0.getSchemes();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileOperationProvider[] fileOperationProviderArray0 = defaultFileSystemManager0.getOperationProviders("");
      assertNull(fileOperationProviderArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      FilesCache filesCache0 = standardFileSystemManager0.getFilesCache();
      assertNull(filesCache0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      JarFileProvider jarFileProvider0 = new JarFileProvider();
      defaultFileSystemManager0.addProvider("", (FileProvider) jarFileProvider0);
      FileSystemConfigBuilder fileSystemConfigBuilder0 = defaultFileSystemManager0.getFileSystemConfigBuilder("");
      assertNotNull(fileSystemConfigBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      Constructor<?> constructor0 = defaultFileSystemManager0.getFileObjectDecoratorConst();
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      Class<?> class0 = standardFileSystemManager0.getFileObjectDecorator();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileContentInfoFactory fileContentInfoFactory0 = defaultFileSystemManager0.getFileContentInfoFactory();
      assertNull(fileContentInfoFactory0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.getCacheStrategy();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileObject fileObject0 = defaultFileSystemManager0.getBaseFile();
      assertNull(fileObject0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      defaultFileSystemManager0.init();
      DelegateFileObject delegateFileObject0 = (DelegateFileObject)defaultFileSystemManager0.createVirtualFileSystem("");
      assertEquals(8192, AbstractFileObject.DEFAULT_BUFFER_SIZE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      MockFile mockFile0 = new MockFile("|xv}VV*Y");
      try { 
        defaultFileSystemManager0.toFileObject(mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      try { 
        standardFileSystemManager0.resolveURI("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find file with URI \"\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, "jnjJeY1CBa96i", (-1089), 0, "", "../", "../", fileType0, "");
      NameScope nameScope0 = NameScope.DESCENDENT;
      try { 
        standardFileSystemManager0.resolveName((FileName) genericURLFileName0, ">needFillInterest s={}/{} uf={} ei={} di={} {}", nameScope0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid relative file name.
         //
         verifyException("org.apache.commons.vfs2.provider.UriParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      FileType fileType0 = FileType.FOLDER;
      Http5sFileProvider http5sFileProvider0 = new Http5sFileProvider();
      defaultFileSystemManager0.addProvider(";2>", (FileProvider) http5sFileProvider0);
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(";2>", ";2>", 1073741824, 65, "", "", "", fileType0, "");
      try { 
        defaultFileSystemManager0.resolveName((FileName) genericURLFileName0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Hostname missing from URI \";2>://;2>:1073741824//\".
         //
         verifyException("org.apache.commons.vfs2.provider.HostFileNameParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      try { 
        standardFileSystemManager0.resolveFile((FileObject) null, "org.apache.commons.vfs2.filter.SizeRangeFileFilter");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find file with URI \"org.apache.commons.vfs2.filter.SizeRangeFileFilter\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      // Undeclared exception!
      try { 
        standardFileSystemManager0.resolveFile((FileObject) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      URL uRL0 = MockURL.getFtpExample();
      try { 
        standardFileSystemManager0.resolveFile(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find file with URI \"ftp://ftp.someFakeButWellFormedURL.org/fooExample\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.resolveFile((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      URI uRI0 = MockURI.aFTPURI;
      try { 
        standardFileSystemManager0.resolveFile(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find file with URI \"ftp://foo.bar\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      // Undeclared exception!
      try { 
        standardFileSystemManager0.resolveFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      try { 
        standardFileSystemManager0.resolveFile("", fileSystemOptions0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find file with URI \"\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      // Undeclared exception!
      try { 
        standardFileSystemManager0.resolveFile((String) null, fileSystemOptions0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.resolveFile("org.apache.commons.vfs2.provider.AbstractVfsComponent");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find file with URI \"org.apache.commons.vfs2.provider.AbstractVfsComponent\" because it is a relative path, and no base URI was provided.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      // Undeclared exception!
      try { 
        standardFileSystemManager0.resolveFile((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      MockFile mockFile0 = new MockFile("");
      try { 
        defaultFileSystemManager0.resolveFile((File) mockFile0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find a file provider which can handle local files.
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      try { 
        defaultFileSystemManager0.getProviderCapabilities("L:wk7OGpLDk~");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unknown scheme \"L:wk7OGpLDk~\" in URI \"{1}\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      try { 
        standardFileSystemManager0.getFileSystemConfigBuilder("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unknown scheme \"\" in URI \"{1}\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      // Undeclared exception!
      try { 
        standardFileSystemManager0.createVirtualFileSystem((FileObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      // Undeclared exception!
      try { 
        standardFileSystemManager0.createVirtualFileSystem("4_KOu,)|Ce%f'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      // Undeclared exception!
      try { 
        standardFileSystemManager0.createFileSystem((FileObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.FileTypeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      try { 
        standardFileSystemManager0.createFileSystem("", (FileObject) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No file provider is registered with URI scheme \"\" to handle file \"null\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.createFileSystem("U6ON(>", (FileObject) decoratedFileObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      // Undeclared exception!
      try { 
        standardFileSystemManager0.closeFileSystem((FileSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      // Undeclared exception!
      try { 
        defaultFileSystemManager0.canCreateFileSystem((FileObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.FileTypeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      String[] stringArray0 = new String[4];
      FileOperationProvider fileOperationProvider0 = mock(FileOperationProvider.class, new ViolatedAssumptionAnswer());
      try { 
        standardFileSystemManager0.addOperationProvider(stringArray0, fileOperationProvider0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Operation provider already added to scheme \"null\"
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileSystemManager", e);
      }
  }
}
