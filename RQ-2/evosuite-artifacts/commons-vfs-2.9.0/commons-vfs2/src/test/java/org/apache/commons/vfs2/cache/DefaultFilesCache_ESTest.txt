 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("[1$*xaYBRpzeI", "", 0, 0, (String) null, "l/QZ", "l/QZ", fileType0, "uF");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(genericURLFileName0, fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(virtualFileSystem0);
      // Undeclared exception!
      try { 
        defaultFilesCache0.removeFile(virtualFileSystem0, (FileName) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.putFileIfAbsent((FileObject) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.cache.DefaultFilesCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.getOrCreateFilesystemCache((FileSystem) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.getFile((FileSystem) null, (FileName) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.clear((FileSystem) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", 5, 5, "", "", "", fileType0, "");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(ftpFileSystem0);
      defaultFilesCache0.removeFile(ftpFileSystem0, genericURLFileName0);
      assertNotNull(genericURLFileName0.getHostName());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", 5, 5, "", "", "", fileType0, "");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      defaultFilesCache0.removeFile(ftpFileSystem0, genericURLFileName0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FILE_OR_FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("++ f)%~K{Q7-`6", "++ f)%~K{Q7-`6", 3783, 3783, "++ f)%~K{Q7-`6", "++ f)%~K{Q7-`6", "++ f)%~K{Q7-`6", fileType0, "++ f)%~K{Q7-`6");
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      LocalFileSystem localFileSystem0 = new LocalFileSystem(genericURLFileName0, "++ f)%~K{Q7-`6", fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(localFileSystem0);
      defaultFilesCache0.clear(localFileSystem0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("|]", "|]", (-7), (-7), "|]", "|]", "|]", fileType0, "|]");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      defaultFilesCache0.clear(ftpFileSystem0);
      assertNotNull(ftpFileSystem0.getRootURI());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("|]", "|]", (-7), (-7), "|]", "|]", "|]", fileType0, "|]");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileObject fileObject0 = defaultFilesCache0.getFile(ftpFileSystem0, genericURLFileName0);
      assertNotNull(fileObject0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      FileType fileType0 = FileType.FILE;
      VirtualFileName virtualFileName0 = new VirtualFileName("zB@%}Mk", "zB@%}Mk", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      LocalFileSystem localFileSystem0 = new LocalFileSystem(virtualFileName0, "zB@%}Mk", fileSystemOptions0);
      defaultFilesCache0.getOrCreateFilesystemCache(localFileSystem0);
      FileObject fileObject0 = defaultFilesCache0.getFile(localFileSystem0, virtualFileName0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      defaultFilesCache0.close();
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultFilesCache defaultFilesCache0 = new DefaultFilesCache();
      // Undeclared exception!
      try { 
        defaultFilesCache0.putFile((FileObject) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.cache.DefaultFilesCache", e);
      }
  }
