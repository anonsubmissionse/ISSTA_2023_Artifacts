/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 04:17:35 GMT 2022
 */

package org.apache.commons.vfs2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.lang.reflect.Array;
import org.apache.commons.vfs2.FileSystemManager;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.impl.DefaultFileSystemManager;
import org.apache.commons.vfs2.impl.StandardFileSystemManager;
import org.apache.commons.vfs2.provider.FileProvider;
import org.apache.commons.vfs2.provider.res.ResourceFileProvider;
import org.apache.commons.vfs2.util.DelegatingFileSystemOptionsBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DelegatingFileSystemOptionsBuilder_ESTest extends DelegatingFileSystemOptionsBuilder_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<FileSystemOptions> class0 = FileSystemOptions.class;
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClass(fileSystemOptions0, "p+/QP4O[WAcsD'?*%X", "4u&ZDGKp:", class0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Unknown scheme \"p+/QP4O[WAcsD'?*%X\" in URI \"{1}\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder((FileSystemManager) null);
      FileSystemManager fileSystemManager0 = delegatingFileSystemOptionsBuilder0.getManager();
      assertNotNull(fileSystemManager0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemManager fileSystemManager0 = delegatingFileSystemOptionsBuilder0.getManager();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder((FileSystemManager) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigStrings(fileSystemOptions0, "#%4ZO4Jmkk", "#%4ZO4Jmkk", stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.util.DelegatingFileSystemOptionsBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder((FileSystemManager) null);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      // Undeclared exception!
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigString(fileSystemOptions0, " doesn't support removeAcl", " doesn't support removeAcl", "org.apache.commons.io.filefilter.PathEqualsFileFilter");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.util.DelegatingFileSystemOptionsBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(standardFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 3);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClasses(fileSystemOptions0, "N,lMj##X>_%t^,", "r/'_", classArray0);
        fail("Expecting exception: InstantiationException");
      } catch(InstantiationException e) {
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(standardFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<Void>[] classArray0 = (Class<Void>[]) Array.newInstance(Class.class, 5);
      Class<Void> class0 = Void.class;
      classArray0[0] = class0;
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClasses(fileSystemOptions0, "Or6y*", (String) null, classArray0);
        fail("Expecting exception: IllegalAccessException");
      } catch(IllegalAccessException e) {
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 9);
      Class<Double> class0 = Double.class;
      classArray0[1] = class0;
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClass(fileSystemOptions0, "", "#a", classArray0[1]);
        fail("Expecting exception: InstantiationException");
      } catch(InstantiationException e) {
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder((FileSystemManager) null);
      Class<Void> class0 = Void.class;
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClass(fileSystemOptions0, " class loader.", "NJ#|M<?&yU*1] sD\".", class0);
        fail("Expecting exception: IllegalAccessException");
      } catch(IllegalAccessException e) {
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<DelegatingFileSystemOptionsBuilder>[] classArray0 = (Class<DelegatingFileSystemOptionsBuilder>[]) Array.newInstance(Class.class, 0);
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClasses(fileSystemOptions0, "W|ZpQg", "W|ZpQg", classArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Unknown scheme \"W|ZpQg\" in URI \"{1}\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      // Undeclared exception!
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClasses(fileSystemOptions0, "TI\"kP)x =x", "TI\"kP)x =x", classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.util.DelegatingFileSystemOptionsBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      ResourceFileProvider resourceFileProvider0 = new ResourceFileProvider();
      standardFileSystemManager0.addProvider("\"QKMm", (FileProvider) resourceFileProvider0);
      Class<String> class0 = String.class;
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(standardFileSystemManager0);
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClass((FileSystemOptions) null, "\"QKMm", "\"QKMm", class0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // The configuration builder for scheme \"\"QKMm\" has no option \"\"QKMm\".
         //
         verifyException("org.apache.commons.vfs2.util.DelegatingFileSystemOptionsBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardFileSystemManager standardFileSystemManager0 = new StandardFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(standardFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      Class<FileSystemOptions> class0 = FileSystemOptions.class;
      // Undeclared exception!
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigClass(fileSystemOptions0, (String) null, (String) null, class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigString(fileSystemOptions0, "W=6hXBdI2GXF${d^2g", "", "");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Unknown scheme \"W=6hXBdI2GXF${d^2g\" in URI \"{1}\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DelegatingFileSystemOptionsBuilder delegatingFileSystemOptionsBuilder0 = new DelegatingFileSystemOptionsBuilder(defaultFileSystemManager0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      String[] stringArray0 = new String[9];
      try { 
        delegatingFileSystemOptionsBuilder0.setConfigStrings(fileSystemOptions0, "U'4\"32dwl", "U'4\"32dwl", stringArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Unknown scheme \"U'4\"32dwl\" in URI \"{1}\".
         //
         verifyException("org.apache.commons.vfs2.FileSystemException", e);
      }
  }
}
