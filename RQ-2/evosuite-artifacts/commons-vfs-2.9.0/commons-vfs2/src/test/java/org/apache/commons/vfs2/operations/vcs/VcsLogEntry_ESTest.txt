 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("/gF,l?B9&S:sQ", 0L, "", (Calendar) null, "/gF,l?B9&S:sQ");
      vcsLogEntry0.getRevision();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("/gF,l?B9&S:sQ", 0L, "", (Calendar) null, "/gF,l?B9&S:sQ");
      vcsLogEntry0.getRevision();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("/gF,l?B9&S:sQ", 0L, "", (Calendar) null, "/gF,l?B9&S:sQ");
      vcsLogEntry0.getRevision();
      assertNotNull(vcsLogEntry0.getMessage());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("org.apache.log4j.RollingCalendar", (-1523L), "zqJDT]%KGWf1S", (Calendar) null, "zqJDT]%KGWf1S");
      long long0 = vcsLogEntry0.getRevision();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("org.apache.log4j.RollingCalendar", (-1523L), "zqJDT]%KGWf1S", (Calendar) null, "zqJDT]%KGWf1S");
      long long0 = vcsLogEntry0.getRevision();
      assertNotNull(vcsLogEntry0.getPath());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("org.apache.log4j.RollingCalendar", (-1523L), "zqJDT]%KGWf1S", (Calendar) null, "zqJDT]%KGWf1S");
      long long0 = vcsLogEntry0.getRevision();
      assertNotNull(vcsLogEntry0.getMessage());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("org.apache.log4j.RollingCalendar", (-1523L), "zqJDT]%KGWf1S", (Calendar) null, "zqJDT]%KGWf1S");
      long long0 = vcsLogEntry0.getRevision();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry((String) null, 0L, (String) null, (Calendar) null, (String) null);
      String string0 = vcsLogEntry0.getPath();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("", 1L, "", (Calendar) null, "");
      vcsLogEntry0.getPath();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry((String) null, 0L, (String) null, (Calendar) null, (String) null);
      String string0 = vcsLogEntry0.getMessage();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("/gF,l?B9&S:sQ", 0L, "", (Calendar) null, "/gF,l?B9&S:sQ");
      String string0 = vcsLogEntry0.getMessage();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("/gF,l?B9&S:sQ", 0L, "", (Calendar) null, "/gF,l?B9&S:sQ");
      String string0 = vcsLogEntry0.getMessage();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("/gF,l?B9&S:sQ", 0L, "", (Calendar) null, "/gF,l?B9&S:sQ");
      String string0 = vcsLogEntry0.getMessage();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("org.apache.log4j.RollingCalendar", (-1523L), "zqJDT]%KGWf1S", (Calendar) null, "zqJDT]%KGWf1S");
      vcsLogEntry0.getDate();
      assertEquals(0, vcsLogEntry0.getRevision());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("org.apache.log4j.RollingCalendar", (-1523L), "zqJDT]%KGWf1S", (Calendar) null, "zqJDT]%KGWf1S");
      vcsLogEntry0.getDate();
      assertNotNull(vcsLogEntry0.getAuthor());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("org.apache.log4j.RollingCalendar", (-1523L), "zqJDT]%KGWf1S", (Calendar) null, "zqJDT]%KGWf1S");
      vcsLogEntry0.getDate();
      assertNotNull(vcsLogEntry0.getMessage());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("org.apache.log4j.RollingCalendar", (-1523L), "zqJDT]%KGWf1S", (Calendar) null, "zqJDT]%KGWf1S");
      vcsLogEntry0.getDate();
      assertNotNull(vcsLogEntry0.getPath());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry((String) null, 0L, (String) null, (Calendar) null, (String) null);
      String string0 = vcsLogEntry0.getAuthor();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("", 1L, "", (Calendar) null, "");
      vcsLogEntry0.getAuthor();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("Unknown periodicity type.", 42L, "Unknown periodicity type.", calendar0, "Unknown periodicity type.");
      vcsLogEntry0.getAuthor();
      assertEquals(0, vcsLogEntry0.getRevision());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("Unknown periodicity type.", 42L, "Unknown periodicity type.", calendar0, "Unknown periodicity type.");
      long long0 = vcsLogEntry0.getRevision();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("Unknown periodicity type.", 42L, "Unknown periodicity type.", calendar0, "Unknown periodicity type.");
      vcsLogEntry0.getPath();
      assertEquals(1, vcsLogEntry0.getRevision());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Calendar calendar0 = mock(Calendar.class, new ViolatedAssumptionAnswer());
      VcsLogEntry vcsLogEntry0 = new VcsLogEntry("Unknown periodicity type.", 42L, "Unknown periodicity type.", calendar0, "Unknown periodicity type.");
      vcsLogEntry0.getMessage();
      assertEquals(1, vcsLogEntry0.getRevision());
}
