/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 04:35:25 GMT 2022
 */

package org.apache.commons.vfs2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.vfs2.util.PosixPermissions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PosixPermissions_ESTest extends PosixPermissions_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, false);
      Integer integer0 = posixPermissions0.makeWritable(true, false);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1528), false, false);
      Integer integer0 = posixPermissions0.makeReadable(true, false);
      assertTrue(posixPermissions0.isExecutable());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1528), false, false);
      Integer integer0 = posixPermissions0.makeReadable(true, false);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1723), true, true);
      int int0 = posixPermissions0.makeExecutable(true, false);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1723), true, true);
      int int0 = posixPermissions0.makeExecutable(true, false);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-1723), true, true);
      int int0 = posixPermissions0.makeExecutable(true, false);
      assertEquals(0, posixPermissions0.getPermissions());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, false);
      Integer integer0 = posixPermissions0.makeWritable(false, false);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-578), true, true);
      Integer integer0 = posixPermissions0.makeWritable(true, true);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-578), true, true);
      Integer integer0 = posixPermissions0.makeWritable(true, true);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(4, false, true);
      Integer integer0 = posixPermissions0.makeReadable(false, true);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(4, false, true);
      Integer integer0 = posixPermissions0.makeReadable(false, true);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, false);
      Integer integer0 = posixPermissions0.makeReadable(false, false);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, true);
      int int0 = posixPermissions0.makeExecutable(false, true);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(0, false, true);
      int int0 = posixPermissions0.getPermissions();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(3, true, true);
      int int0 = posixPermissions0.getPermissions();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PosixPermissions.Type posixPermissions_Type0 = PosixPermissions.Type.GroupReadable;
      int int0 = posixPermissions_Type0.getMask();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      Integer integer0 = posixPermissions0.makeWritable(false, false);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      Integer integer0 = posixPermissions0.makeWritable(false, false);
      assertTrue(posixPermissions0.isReadable());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      Integer integer0 = posixPermissions0.makeReadable(false, false);
      assertTrue(posixPermissions0.isExecutable());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      Integer integer0 = posixPermissions0.makeReadable(false, false);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isWritable();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isWritable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isWritable();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isWritable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isWritable();
      assertTrue(posixPermissions0.isExecutable());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isWritable();
      assertFalse(posixPermissions0.isReadable());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isWritable();
      assertFalse(posixPermissions0.isExecutable());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isWritable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isReadable();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isReadable();
      assertEquals(0, posixPermissions0.getPermissions());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isReadable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isReadable();
      assertFalse(posixPermissions0.isExecutable());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isReadable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isExecutable();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isExecutable();
      assertTrue(posixPermissions0.isWritable());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, false, true);
      boolean boolean0 = posixPermissions0.isExecutable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      boolean boolean0 = posixPermissions0.isExecutable();
      assertTrue(posixPermissions0.isReadable());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      boolean boolean0 = posixPermissions0.isExecutable();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(32, true, true);
      boolean boolean0 = posixPermissions0.isExecutable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isExecutable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      boolean boolean0 = posixPermissions0.isExecutable();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isReadable();
      assertFalse(posixPermissions0.isExecutable());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isReadable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isReadable();
      assertTrue(posixPermissions0.isWritable());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      boolean boolean0 = posixPermissions0.isReadable();
      assertEquals(0, posixPermissions0.getPermissions());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      int int0 = posixPermissions0.makeExecutable(true, true);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions(128, true, true);
      int int0 = posixPermissions0.makeExecutable(true, true);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      int int0 = posixPermissions0.getPermissions();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PosixPermissions posixPermissions0 = new PosixPermissions((-57), false, false);
      int int0 = posixPermissions0.getPermissions();
      assertTrue(posixPermissions0.isWritable());
}
}
