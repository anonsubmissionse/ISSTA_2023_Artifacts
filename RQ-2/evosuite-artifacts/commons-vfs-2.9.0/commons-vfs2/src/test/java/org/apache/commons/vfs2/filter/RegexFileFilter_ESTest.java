/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 04:55:14 GMT 2022
 */

package org.apache.commons.vfs2.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.vfs2.FileName;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSelectInfo;
import org.apache.commons.vfs2.filter.IOCase;
import org.apache.commons.vfs2.filter.RegexFileFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegexFileFilter_ESTest extends RegexFileFilter_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("org.apache.commons.vfs2.FileOject");
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.vfs2.FileOject").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = regexFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("ncpg8`6(eJ").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("");
      boolean boolean0 = regexFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter("y[bJ=", 0);
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 5
         // y[bJ=
         //      ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter("NLUD)lu]KT?L");
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // NLUD)lu]KT?L
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("6YU,=QGX%R5D", iOCase0);
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("tN9L%GNy2?mgWf", (IOCase) null);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((String) null, iOCase0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Pattern is missing
         //
         verifyException("org.apache.commons.vfs2.filter.RegexFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("Pattern is missing", iOCase0);
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((String) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Pattern is missing
         //
         verifyException("org.apache.commons.vfs2.filter.RegexFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = new RegexFileFilter("", 34);
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Pattern is missing
         //
         verifyException("org.apache.commons.vfs2.filter.RegexFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegexFileFilter regexFileFilter0 = null;
      try {
        regexFileFilter0 = new RegexFileFilter((Pattern) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Pattern is missing
         //
         verifyException("org.apache.commons.vfs2.filter.RegexFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      Pattern pattern0 = Pattern.compile("];81SaO-", (-1143));
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      // Undeclared exception!
      try { 
        regexFileFilter0.accept(fileSelectInfo0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.filter.RegexFileFilter", e);
      }
  }
}
