 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      LocalFileSystem localFileSystem0 = new LocalFileSystem((FileName) null, "w2Mn6I%}q.Zg9cA", fileSystemOptions0);
      FileType fileType0 = FileType.IMAGINARY;
      LayeredFileName layeredFileName0 = new LayeredFileName("", (FileName) null, "7el0$vc_N[2Tj{a", fileType0);
      // Undeclared exception!
      try { 
        softRefFilesCache0.removeFile(localFileSystem0, layeredFileName0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.LayeredFileName", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      GzipFileSystem gzipFileSystem0 = mock(GzipFileSystem.class, new ViolatedAssumptionAnswer());
      FileType fileType0 = FileType.IMAGINARY;
      LayeredFileName layeredFileName0 = new LayeredFileName("&7", (FileName) null, "&7", fileType0);
      // Undeclared exception!
      try { 
        softRefFilesCache0.getFile(gzipFileSystem0, layeredFileName0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.LayeredFileName", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      String string0 = softRefFilesCache0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("b", "b", 77, 77, "b", "b", "b", fileType0, "b");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      softRefFilesCache0.removeFile(ftpsFileSystem0, genericURLFileName0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      // Undeclared exception!
      try { 
        softRefFilesCache0.putFileIfAbsent((FileObject) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.cache.SoftRefFilesCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      // Undeclared exception!
      try { 
        softRefFilesCache0.putFile((FileObject) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.cache.SoftRefFilesCache", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem((AbstractFileName) null, fileSystemOptions0);
      softRefFilesCache0.getFile(virtualFileSystem0, (FileName) null);
      String string0 = softRefFilesCache0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("b", "b", 77, 77, "b", "b", "b", fileType0, "b");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem((AbstractFileName) null, fileSystemOptions0);
      softRefFilesCache0.getOrCreateFilesystemCache(ftpsFileSystem0);
      softRefFilesCache0.clear(virtualFileSystem0);
      assertTrue(virtualFileSystem0.isOpen());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      softRefFilesCache0.close();
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SoftRefFilesCache softRefFilesCache0 = new SoftRefFilesCache();
      Reference<FileObject> reference0 = softRefFilesCache0.createReference((FileObject) null, (ReferenceQueue<FileObject>) null);
      assertTrue(reference0.isEnqueued());
}
