/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 05:04:24 GMT 2022
 */

package org.apache.commons.vfs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.Collection;
import org.apache.commons.vfs2.FileExtensionSelector;
import org.apache.commons.vfs2.FileName;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSelectInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileExtensionSelector_ESTest extends FileExtensionSelector_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector(stringArray0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      try { 
        fileExtensionSelector0.includeFile(fileSelectInfo0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.FileExtensionSelector", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector(stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(fileName0).getExtension();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0, (FileObject) null).when(fileSelectInfo0).getFile();
      try { 
        fileExtensionSelector0.includeFile(fileSelectInfo0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.FileExtensionSelector", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector(stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(fileName0).getExtension();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = fileExtensionSelector0.includeFile(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector((String[]) null);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector(arrayDeque0);
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector((Collection<String>) null);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fileExtensionSelector0.includeFile(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileExtensionSelector fileExtensionSelector0 = new FileExtensionSelector(stringArray0);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fileExtensionSelector0.traverseDescendents(fileSelectInfo0);
      assertTrue(boolean0);
}
}
