/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 05:22:47 GMT 2022
 */

package org.apache.commons.vfs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.vfs2.FileName;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSelectInfo;
import org.apache.commons.vfs2.PatternFileSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PatternFileSelector_ESTest extends PatternFileSelector_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("");
      String string0 = patternFileSelector0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("org.apache.commons.vfs2.PatternFileSelector");
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.vfs2.PatternFileSelector").when(fileName0).getPath();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = patternFileSelector0.includeFile(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("org.apache.commons.vfs2.PatternFileSelector");
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("x@M*g").when(fileName0).getPath();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = patternFileSelector0.includeFile(fileSelectInfo0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = null;
      try {
        patternFileSelector0 = new PatternFileSelector("k,]6r_[\"UX*JhcW{_", 1);
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // k,]6r_[\"UX*JhcW{_
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = null;
      try {
        patternFileSelector0 = new PatternFileSelector((String) null, 2060);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = null;
      try {
        patternFileSelector0 = new PatternFileSelector((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector((Pattern) null);
      // Undeclared exception!
      try { 
        patternFileSelector0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.PatternFileSelector", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("z$", 21);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = patternFileSelector0.traverseDescendents(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("");
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(fileSelectInfo0).getFile();
      try { 
        patternFileSelector0.includeFile(fileSelectInfo0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.PatternFileSelector", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PatternFileSelector patternFileSelector0 = new PatternFileSelector("z$", 21);
      String string0 = patternFileSelector0.toString();
      ;
}
}
