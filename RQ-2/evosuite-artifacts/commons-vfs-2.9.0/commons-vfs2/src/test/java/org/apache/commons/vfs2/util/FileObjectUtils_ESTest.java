/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:51:17 GMT 2022
 */

package org.apache.commons.vfs2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Properties;
import java.util.ResourceBundle;
import org.apache.commons.vfs2.FileContentInfoFactory;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystemManager;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.FileType;
import org.apache.commons.vfs2.cache.OnCallRefreshFileObject;
import org.apache.commons.vfs2.impl.DecoratedFileObject;
import org.apache.commons.vfs2.impl.SynchronizedFileObject;
import org.apache.commons.vfs2.provider.AbstractFileName;
import org.apache.commons.vfs2.provider.AbstractFileObject;
import org.apache.commons.vfs2.provider.DelegateFileObject;
import org.apache.commons.vfs2.provider.GenericURLFileName;
import org.apache.commons.vfs2.provider.LayeredFileName;
import org.apache.commons.vfs2.provider.VfsComponentContext;
import org.apache.commons.vfs2.provider.ftp.FtpClient;
import org.apache.commons.vfs2.provider.ftp.FtpFileSystem;
import org.apache.commons.vfs2.provider.ftps.FtpsFileSystem;
import org.apache.commons.vfs2.util.FileObjectUtils;
import org.apache.hadoop.conf.Configuration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileObjectUtils_ESTest extends FileObjectUtils_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Properties properties0 = new Properties();
      properties0.put(class0, "");
      Properties properties1 = FileObjectUtils.readProperties((FileObject) null, properties0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Properties properties0 = FileObjectUtils.readProperties((FileObject) null);
      Properties properties1 = FileObjectUtils.readProperties((FileObject) null, properties0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("}X2~yt", "|N}iwj", 154, 1974, "|N}iwj", "org.apache.commons.vfs2.util.FileObjectUtils", "#%lx1ok<l. &'", fileType0, "<titl>");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpFileSystem0, (FileObject) null);
      FileObjectUtils.exists(delegateFileObject0);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = ">";
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(">", ">", (-12), (-12), ">", ">", ">", fileType0, ">");
      LayeredFileName layeredFileName0 = new LayeredFileName(">", genericURLFileName0, ">", fileType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0, (FileSystemManager) null).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject(delegateFileObject0);
      // Undeclared exception!
      try { 
        FileObjectUtils.writeContent((FileObject) abstractFileObject0, (FileObject) synchronizedFileObject0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.writeContent((FileObject) onCallRefreshFileObject0, (FileObject) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/K9)K44", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        FileObjectUtils.writeContent((FileObject) null, (OutputStream) mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.util.FileObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        FileObjectUtils.writeContent((FileObject) synchronizedFileObject0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(">", ">", (-1), (-1), ">", ">", ">", fileType0, ">");
      LayeredFileName layeredFileName0 = new LayeredFileName(">", genericURLFileName0, ">", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn((FileSystemManager) null).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        FileObjectUtils.readProperties((FileObject) abstractFileObject0, properties0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, 0, 1636, (String) null, "null", "lPhSK;d(.0f", fileType0, "SW^@>!:~>HsP56b%[");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>((AbstractFileName) null, ftpsFileSystem0, (FileObject) null);
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject(delegateFileObject0);
      Configuration configuration0 = new Configuration();
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      Properties properties0 = configuration0.getAllPropertiesByTags(list0);
      // Undeclared exception!
      try { 
        FileObjectUtils.readProperties((FileObject) decoratedFileObject0, properties0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(">", ">", (-1), (-1), ">", ">", ">", fileType0, ">");
      LayeredFileName layeredFileName0 = new LayeredFileName(">", genericURLFileName0, ">", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject(delegateFileObject0);
      try { 
        FileObjectUtils.readProperties((FileObject) decoratedFileObject0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not read file \">:>://>:>@>>?>!>\".
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.readProperties((FileObject) synchronizedFileObject0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileObjectUtils.isInstanceOf((FileObject) null, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.util.FileObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsString((FileObject) null, charset0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.util.FileObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, 0, 1636, (String) null, "null", "lPhSK;d(.0f", fileType0, "SW^@>!:~>HsP56b%[");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>((AbstractFileName) null, ftpsFileSystem0, (FileObject) null);
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject(delegateFileObject0);
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject(decoratedFileObject0);
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsString((FileObject) synchronizedFileObject0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsString((FileObject) null, "No current tar entry");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.util.FileObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", (-1), (-1), "", "", "9=9.M2", fileType0, "");
      LayeredFileName layeredFileName0 = new LayeredFileName("", genericURLFileName0, "", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsString((FileObject) abstractFileObject0, "9=9.M2");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsByteArray((FileObject) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.util.FileObjectUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.getContentAsByteArray(synchronizedFileObject0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.exists(onCallRefreshFileObject0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      Configuration configuration0 = new Configuration();
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      Properties properties0 = configuration0.getAllPropertiesByTags(list0);
      // Undeclared exception!
      try { 
        FileObjectUtils.readProperties((FileObject) onCallRefreshFileObject0, properties0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(">", ">", 27, 27, ">", ">", ">", fileType0, ">");
      LayeredFileName layeredFileName0 = new LayeredFileName(">", genericURLFileName0, ">", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(">");
      try { 
        FileObjectUtils.writeContent((FileObject) abstractFileObject0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not read file \">:>://>:>@>>?>!>\".
         //
         verifyException("org.apache.commons.vfs2.provider.AbstractFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Properties properties0 = FileObjectUtils.readProperties((FileObject) null, (Properties) null);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      Class<FtpFileSystem> class0 = FtpFileSystem.class;
      boolean boolean0 = FileObjectUtils.isInstanceOf(onCallRefreshFileObject0, class0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileType fileType0 = FileType.FOLDER;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName((String) null, (String) null, 0, 1636, (String) null, "null", "lPhSK;d(.0f", fileType0, "SW^@>!:~>HsP56b%[");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>((AbstractFileName) null, ftpsFileSystem0, (FileObject) null);
      DecoratedFileObject decoratedFileObject0 = new DecoratedFileObject(delegateFileObject0);
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject(decoratedFileObject0);
      Class<Object> class0 = Object.class;
      boolean boolean0 = FileObjectUtils.isInstanceOf(synchronizedFileObject0, class0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(">", ">", (-1), (-1), ">", ">", ">", fileType0, ">");
      LayeredFileName layeredFileName0 = new LayeredFileName(">", genericURLFileName0, ">", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      try { 
        FileObjectUtils.getContentAsString((FileObject) abstractFileObject0, ">");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not determine the size of \">:>://>:>@>>?>!>\" because it is not a file.
         //
         verifyException("org.apache.commons.vfs2.provider.DefaultFileContent", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName(">", ">", 16, 16, ">", ">", ">", fileType0, ">");
      LayeredFileName layeredFileName0 = new LayeredFileName(">", genericURLFileName0, ">", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(delegateFileObject0);
      try { 
        FileObjectUtils.getContentAsString((FileObject) abstractFileObject0, (Charset) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not determine the size of \">:>://>:>@>>?>!>\" because it is not a file.
         //
         verifyException("org.apache.commons.vfs2.provider.DefaultFileContent", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("x", "x", (-1), (-1), "x", "x", "x", fileType0, "x");
      LayeredFileName layeredFileName0 = new LayeredFileName("x", genericURLFileName0, "x", fileType0);
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpsFileSystem ftpsFileSystem0 = new FtpsFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      FileContentInfoFactory fileContentInfoFactory0 = mock(FileContentInfoFactory.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileContentInfoFactory0).when(fileSystemManager0).getFileContentInfoFactory();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemManager0).when(vfsComponentContext0).getFileSystemManager();
      ftpsFileSystem0.setContext(vfsComponentContext0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(layeredFileName0, ftpsFileSystem0, (FileObject) null);
      try { 
        FileObjectUtils.getContentAsByteArray(delegateFileObject0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not determine the size of \"x:x://x:***@xx?x!x\" because it is not a file.
         //
         verifyException("org.apache.commons.vfs2.provider.DefaultFileContent", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      AbstractFileObject abstractFileObject0 = FileObjectUtils.getAbstractFileObject(synchronizedFileObject0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileType fileType0 = FileType.IMAGINARY;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("", "", 114, 114, "", "", "", fileType0, "");
      FtpClient ftpClient0 = mock(FtpClient.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      FtpFileSystem ftpFileSystem0 = new FtpFileSystem(genericURLFileName0, ftpClient0, fileSystemOptions0);
      DelegateFileObject<FtpFileSystem> delegateFileObject0 = new DelegateFileObject<FtpFileSystem>(genericURLFileName0, ftpFileSystem0, (FileObject) null);
      delegateFileObject0.attachChild(genericURLFileName0, fileType0);
      boolean boolean0 = FileObjectUtils.exists(delegateFileObject0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SynchronizedFileObject synchronizedFileObject0 = new SynchronizedFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.exists(synchronizedFileObject0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = FileObjectUtils.exists((FileObject) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OnCallRefreshFileObject onCallRefreshFileObject0 = new OnCallRefreshFileObject((FileObject) null);
      // Undeclared exception!
      try { 
        FileObjectUtils.readProperties((FileObject) onCallRefreshFileObject0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DecoratedFileObject", e);
      }
  }
}
