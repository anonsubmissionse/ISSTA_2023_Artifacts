 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector((-2333), (-953));
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileDepthSelector0.traverseDescendents(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector(2, 736);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileDepthSelector0.includeFile(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector(2, 736);
      try { 
        fileDepthSelector0.traverseDescendents((FileSelectInfo) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.FileDepthSelector", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector();
      try { 
        fileDepthSelector0.includeFile((FileSelectInfo) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.FileDepthSelector", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector(2, 736);
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileDepthSelector0.traverseDescendents(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileDepthSelector0.traverseDescendents(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector(764);
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileDepthSelector fileDepthSelector0 = new FileDepthSelector();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fileSelectInfo0).getDepth();
      boolean boolean0 = fileDepthSelector0.includeFile(fileSelectInfo0);
      assertTrue(boolean0);
}
