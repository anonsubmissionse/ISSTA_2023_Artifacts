/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 03:30:44 GMT 2022
 */

package org.apache.commons.vfs2.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.apache.commons.vfs2.FileName;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSelectInfo;
import org.apache.commons.vfs2.filter.IOCase;
import org.apache.commons.vfs2.filter.WildcardFileFilter;
import org.eclipse.jetty.util.AttributesMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WildcardFileFilter_ESTest extends WildcardFileFilter_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch("G_!.kT8C??dNzU6", "G_!.kT8C??dNzU6", iOCase0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = WildcardFileFilter.splitOnTokens(" F**ROqP/aAE,5[TjKu");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        WildcardFileFilter.splitOnTokens((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.filter.WildcardFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      AttributesMap attributesMap0 = new AttributesMap();
      Set<String> set0 = attributesMap0.getAttributeNameSet();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(iOCase0, list0);
      // Undeclared exception!
      try { 
        wildcardFileFilter0.accept((FileSelectInfo) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.filter.WildcardFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[4];
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter((IOCase) null, stringArray0);
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = null;
      try {
        wildcardFileFilter0 = new WildcardFileFilter(iOCase0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The wildcard array must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.WildcardFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter((IOCase) null, arrayList0);
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = null;
      try {
        wildcardFileFilter0 = new WildcardFileFilter(iOCase0, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The wildcard list must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.WildcardFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch("", "l>^", iOCase0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = WildcardFileFilter.wildcardMatch("rj:XjIa~\"4mk", "*EU+T-x", iOCase0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch("glob:", "*", iOCase0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOCase iOCase0 = IOCase.SYSTEM;
      boolean boolean0 = WildcardFileFilter.wildcardMatch("\"yl$|^(].Nb[&c=C?", "\"yl$|^(].Nb[&c=C?", iOCase0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = WildcardFileFilter.wildcardMatch("", "", (IOCase) null);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch("OyMr=?", (String) null, iOCase0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch((String) null, "7r0Zl:)!J/S3DW=.fdNI", iOCase0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch((String) null, (String) null, iOCase0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch("org.apache.commons.vfs2.filter.WildcardFileFilter@1(**RqP/AEZ51[jKu,**RqP/AEZ51[jKu)", "**RqP/AEZ51[jKu", iOCase0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      boolean boolean0 = WildcardFileFilter.wildcardMatch("", "?", iOCase0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = WildcardFileFilter.splitOnTokens("");
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = wildcardFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = WildcardFileFilter.splitOnTokens("");
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.hadoop.thirdparty.com.google.common.cache.CacheLoader").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = wildcardFileFilter0.accept(fileSelectInfo0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = WildcardFileFilter.splitOnTokens("");
      IOCase iOCase0 = IOCase.INSENSITIVE;
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(iOCase0, stringArray0);
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.hadoop.thirdparty.com.google.common.cache.CacheLoader").when(fileName0).getBaseName();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileName0).when(fileObject0).getName();
      FileSelectInfo fileSelectInfo0 = mock(FileSelectInfo.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSelectInfo0).getFile();
      boolean boolean0 = wildcardFileFilter0.accept(fileSelectInfo0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WildcardFileFilter wildcardFileFilter0 = null;
      try {
        wildcardFileFilter0 = new WildcardFileFilter((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The wildcard array must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.WildcardFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WildcardFileFilter wildcardFileFilter0 = null;
      try {
        wildcardFileFilter0 = new WildcardFileFilter((List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The wildcard list must not be null
         //
         verifyException("org.apache.commons.vfs2.filter.WildcardFileFilter", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = WildcardFileFilter.splitOnTokens(")*");
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stringArray0);
      wildcardFileFilter0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      WildcardFileFilter wildcardFileFilter0 = new WildcardFileFilter(stack0);
  }
}
