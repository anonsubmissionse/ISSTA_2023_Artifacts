/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 05:01:38 GMT 2022
 */

package org.apache.commons.vfs2.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import org.apache.commons.logging.impl.Jdk13LumberjackLogger;
import org.apache.commons.logging.impl.Log4JLogger;
import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.FileType;
import org.apache.commons.vfs2.FileTypeSelector;
import org.apache.commons.vfs2.impl.DefaultFileReplicator;
import org.apache.commons.vfs2.impl.DefaultFileSystemManager;
import org.apache.commons.vfs2.impl.DefaultVfsComponentContext;
import org.apache.commons.vfs2.impl.PrivilegedFileReplicator;
import org.apache.commons.vfs2.impl.VirtualFileSystem;
import org.apache.commons.vfs2.provider.FileReplicator;
import org.apache.commons.vfs2.provider.GenericURLFileName;
import org.apache.commons.vfs2.provider.LayeredFileName;
import org.apache.commons.vfs2.provider.res.ResourceFileProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrivilegedFileReplicator_ESTest extends PrivilegedFileReplicator_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      File file0 = MockFile.createTempFile("{]9Q>`=", "{]9Q>`=");
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator(file0);
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      defaultFileReplicator0.allocateFile("{]9Q>`=");
      // Undeclared exception!
      try { 
        privilegedFileReplicator0.close();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileReplicator", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      ResourceFileProvider resourceFileProvider0 = new ResourceFileProvider();
      defaultFileReplicator0.addFile(resourceFileProvider0);
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      // Undeclared exception!
      try { 
        privilegedFileReplicator0.close();
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.vfs2.provider.res.ResourceFileProvider cannot be cast to java.io.File
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileReplicator", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator((FileReplicator) null);
      privilegedFileReplicator0.close();
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator((FileReplicator) null);
      privilegedFileReplicator0.init();
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      privilegedFileReplicator0.setContext(defaultVfsComponentContext0);
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("com.!ogle.comm8n.hash.Hashing$ChecksumType", "com.!ogle.comm8n.hash.Hashing$ChecksumType", 0, 0, "com.!ogle.comm8n.hash.Hashing$ChecksumType", "com.!ogle.comm8n.hash.Hashing$ChecksumType", "com.!ogle.comm8n.hash.Hashing$ChecksumType", fileType0, "com.!ogle.comm8n.hash.Hashing$ChecksumType");
      LayeredFileName layeredFileName0 = new LayeredFileName("com.!ogle.comm8n.hash.Hashing$ChecksumType", genericURLFileName0, "com.!ogle.comm8n.hash.Hashing$ChecksumType", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(layeredFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      FileTypeSelector fileTypeSelector0 = new FileTypeSelector(fileType0);
      try { 
        privilegedFileReplicator0.replicateFile(fileObject0, fileTypeSelector0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Could not replicate \"com.!ogle.comm8n.hash.Hashing$ChecksumType://com.!ogle.comm8n.hash.Hashing$ChecksumType:***@com.!ogle.comm8n.hash.Hashing$ChecksumTypecom.!ogle.comm8n.hash.Hashing$ChecksumType?com.!ogle.comm8n.hash.Hashing$ChecksumType\".
         //
         verifyException("org.apache.commons.vfs2.impl.PrivilegedFileReplicator", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator((FileReplicator) null);
      DefaultFileSystemManager defaultFileSystemManager0 = new DefaultFileSystemManager();
      DefaultVfsComponentContext defaultVfsComponentContext0 = new DefaultVfsComponentContext(defaultFileSystemManager0);
      privilegedFileReplicator0.setContext(defaultVfsComponentContext0);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      Log4JLogger log4JLogger0 = new Log4JLogger();
      privilegedFileReplicator0.setLogger(log4JLogger0);
      // Undeclared exception!
      try { 
        privilegedFileReplicator0.init();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.log4j.CategoryKey", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator((FileReplicator) null);
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("T-.R^4{M9");
      privilegedFileReplicator0.setLogger(jdk13LumberjackLogger0);
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      privilegedFileReplicator0.close();
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      privilegedFileReplicator0.init();
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultFileReplicator defaultFileReplicator0 = new DefaultFileReplicator();
      PrivilegedFileReplicator privilegedFileReplicator0 = new PrivilegedFileReplicator(defaultFileReplicator0);
      FileType fileType0 = FileType.FILE;
      GenericURLFileName genericURLFileName0 = new GenericURLFileName("com.!ogle.comm8n.hash.Hashing$ChecksumType", "com.!ogle.comm8n.hash.Hashing$ChecksumType", 0, 0, "com.!ogle.comm8n.hash.Hashing$ChecksumType", "com.!ogle.comm8n.hash.Hashing$ChecksumType", "com.!ogle.comm8n.hash.Hashing$ChecksumType", fileType0, "com.!ogle.comm8n.hash.Hashing$ChecksumType");
      LayeredFileName layeredFileName0 = new LayeredFileName("com.!ogle.comm8n.hash.Hashing$ChecksumType", genericURLFileName0, "com.!ogle.comm8n.hash.Hashing$ChecksumType", fileType0);
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(layeredFileName0, fileSystemOptions0);
      FileObject fileObject0 = virtualFileSystem0.createFile(genericURLFileName0);
      FileTypeSelector fileTypeSelector0 = new FileTypeSelector(fileType0);
      // Undeclared exception!
      try { 
        privilegedFileReplicator0.replicateFile(fileObject0, fileTypeSelector0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.impl.DefaultFileReplicator", e);
      }
  }
}
