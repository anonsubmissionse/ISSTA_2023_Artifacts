/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 05:08:03 GMT 2022
 */

package org.apache.commons.vfs2.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.vfs2.FileName;
import org.apache.commons.vfs2.FileSystem;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.cache.FileSystemAndNameKey;
import org.apache.commons.vfs2.impl.VirtualFileSystem;
import org.apache.commons.vfs2.provider.AbstractFileName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileSystemAndNameKey_ESTest extends FileSystemAndNameKey_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(abstractFileName0).compareTo(any(org.apache.commons.vfs2.FileName.class));
      doReturn((String) null).when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileName fileName0 = virtualFileSystem0.getRootName();
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey((FileSystem) null, fileName0);
      FileSystemAndNameKey fileSystemAndNameKey1 = new FileSystemAndNameKey((FileSystem) null, fileName0);
      int int0 = fileSystemAndNameKey0.compareTo(fileSystemAndNameKey1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileName fileName0 = virtualFileSystem0.getRootName();
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey((FileSystem) null, fileName0);
      FileSystem fileSystem0 = fileSystemAndNameKey0.getFileSystem();
      assertNotNull(fileSystem0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(abstractFileName0).getURI();
      doReturn((String) null).when(abstractFileName0).toString();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileName fileName0 = virtualFileSystem0.getRootName();
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey((FileSystem) null, fileName0);
      FileName fileName1 = fileSystemAndNameKey0.getFileName();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey(virtualFileSystem0, (FileName) null);
      AbstractFileName abstractFileName1 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(abstractFileName1).getURI();
      VirtualFileSystem virtualFileSystem1 = new VirtualFileSystem(abstractFileName1, (FileSystemOptions) null);
      FileName fileName0 = virtualFileSystem0.getRootName();
      FileSystemAndNameKey fileSystemAndNameKey1 = new FileSystemAndNameKey(virtualFileSystem1, fileName0);
      int int0 = fileSystemAndNameKey1.compareTo(fileSystemAndNameKey0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey(virtualFileSystem0, (FileName) null);
      AbstractFileName abstractFileName1 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(abstractFileName1).getURI();
      VirtualFileSystem virtualFileSystem1 = new VirtualFileSystem(abstractFileName1, (FileSystemOptions) null);
      FileName fileName0 = virtualFileSystem0.getRootName();
      FileSystemAndNameKey fileSystemAndNameKey1 = new FileSystemAndNameKey(virtualFileSystem1, fileName0);
      int int0 = fileSystemAndNameKey0.compareTo(fileSystemAndNameKey1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey(virtualFileSystem0, (FileName) null);
      // Undeclared exception!
      try { 
        fileSystemAndNameKey0.compareTo(fileSystemAndNameKey0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.vfs2.cache.FileSystemAndNameKey", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey(virtualFileSystem0, (FileName) null);
      FileName fileName0 = fileSystemAndNameKey0.getFileName();
      assertNotNull(fileName0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AbstractFileName abstractFileName0 = mock(AbstractFileName.class, new ViolatedAssumptionAnswer());
      doReturn("").when(abstractFileName0).getURI();
      VirtualFileSystem virtualFileSystem0 = new VirtualFileSystem(abstractFileName0, (FileSystemOptions) null);
      FileSystemAndNameKey fileSystemAndNameKey0 = new FileSystemAndNameKey(virtualFileSystem0, (FileName) null);
      VirtualFileSystem virtualFileSystem1 = (VirtualFileSystem)fileSystemAndNameKey0.getFileSystem();
      ;
}
}
