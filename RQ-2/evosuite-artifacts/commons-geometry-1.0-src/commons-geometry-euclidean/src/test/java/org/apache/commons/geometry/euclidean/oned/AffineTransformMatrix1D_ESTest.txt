 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.multiply(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.multiply(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.multiply(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(998.72019);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(998.72019);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D0.multiply(affineTransformMatrix1D1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(998.72019);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(998.72019);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D0.multiply(affineTransformMatrix1D1);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.from(affineTransformMatrix1D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Transform function is invalid: matrix determinant is NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.of(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 0 != 2
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-2677.550286));
      affineTransformMatrix1D0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4440.4);
      doubleArray0[1] = 89.5413016549757;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.of(doubleArray0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4440.4);
      doubleArray0[1] = 89.5413016549757;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.of(doubleArray0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.normalTransform();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.normalTransform();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(1.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.normalTransform();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.multiply(affineTransformMatrix1D0);
      AffineTransformMatrix1D affineTransformMatrix1D3 = affineTransformMatrix1D2.scale((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.multiply(affineTransformMatrix1D0);
      AffineTransformMatrix1D affineTransformMatrix1D3 = affineTransformMatrix1D2.scale((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.multiply(affineTransformMatrix1D0);
      AffineTransformMatrix1D affineTransformMatrix1D3 = affineTransformMatrix1D2.scale((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.premultiply(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.premultiply(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.premultiply(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.premultiply(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.multiply(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.multiply(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-3735.5257488578));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-3735.5257488578));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.linear();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.linear();
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D2 = affineTransformMatrix1D1.linear();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(541.866053703588);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linear();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(541.866053703588);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linear();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.from(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.from(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(0.0);
      double double0 = affineTransformMatrix1D1.determinant();
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      double double0 = affineTransformMatrix1D0.determinant();
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      double double0 = affineTransformMatrix1D0.applyX(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      double double0 = affineTransformMatrix1D0.applyX(1.0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      double double0 = affineTransformMatrix1D0.applyVectorX(1417.8261);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-882.636370970737));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      double double0 = affineTransformMatrix1D0.applyVectorX(570.561943822);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      Vector1D vector1D0 = Vector1D.of(0.0);
      Vector1D vector1D1 = affineTransformMatrix1D0.applyVector(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(118.762);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = affineTransformMatrix1D0.applyVector(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      Vector1D vector1D0 = Vector1D.NaN;
      affineTransformMatrix1D0.applyVector(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      Vector1D.Unit vector1D_Unit1 = affineTransformMatrix1D0.applyDirection((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      Vector1D.Unit vector1D_Unit1 = affineTransformMatrix1D0.applyDirection((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      Vector1D vector1D1 = affineTransformMatrix1D0.apply(vector1D0);
      assertFalse(vector1D1.isNaN());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Vector1D vector1D0 = Vector1D.of(0.0);
      Vector1D vector1D1 = affineTransformMatrix1D0.apply(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = affineTransformMatrix1D0.apply(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-1044.2));
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.translate((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.scale((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-910.337848047));
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.premultiply((AffineTransformMatrix1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.of((double[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.multiply((AffineTransformMatrix1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.inverse();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Matrix is not invertible; matrix determinant is 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Matrices", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.from((UnaryOperator<Vector1D>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.createTranslation((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.createScale((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1.0);
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.applyDirection((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.applyDirection(vector1D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-922.2979108));
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.apply((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.of(doubleArray0);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(998.72019);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(998.72019);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(998.72019);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale(998.72019);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-3735.5257488578));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linear();
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-3735.5257488578));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linear();
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((-2677.550286));
      double double0 = affineTransformMatrix1D0.applyX((-2677.550286));
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      double double0 = affineTransformMatrix1D0.applyVectorX(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      double double0 = affineTransformMatrix1D0.applyVectorX(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      double double0 = affineTransformMatrix1D0.determinant();
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((-2715.17871124839));
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((-2715.17871124839));
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((-2715.17871124839));
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        AffineTransformMatrix1D.of(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Dimension mismatch: 3 != 2
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.inverse();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.identity();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.identity();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.identity();
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      boolean boolean0 = affineTransformMatrix1D0.equals(vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      boolean boolean0 = affineTransformMatrix1D0.equals(vector1D_Unit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.createTranslation(1264.199029514);
      boolean boolean0 = affineTransformMatrix1D0.equals(affineTransformMatrix1D1);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      Vector1D.Unit vector1D_Unit1 = affineTransformMatrix1D0.applyDirection((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      Vector1D.Unit vector1D_Unit1 = affineTransformMatrix1D0.applyDirection((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      double[] doubleArray0 = affineTransformMatrix1D0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.premultiply(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.premultiply(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.scale((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.linearTranspose();
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.from(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      AffineTransformMatrix1D affineTransformMatrix1D1 = AffineTransformMatrix1D.from(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      String string0 = affineTransformMatrix1D0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1111.774135);
      // Undeclared exception!
      try { 
        affineTransformMatrix1D0.applyVector((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-4328.660026558));
      AffineTransformMatrix1D affineTransformMatrix1D1 = affineTransformMatrix1D0.translate((Vector1D) vector1D_Unit0);
      ;
}
