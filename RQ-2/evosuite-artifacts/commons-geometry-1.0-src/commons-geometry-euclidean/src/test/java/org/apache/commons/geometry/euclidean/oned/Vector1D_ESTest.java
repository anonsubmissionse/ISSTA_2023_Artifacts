/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:22:27 GMT 2022
 */

package org.apache.commons.geometry.euclidean.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.UnaryOperator;
import org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D;
import org.apache.commons.geometry.euclidean.oned.Vector1D;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vector1D_ESTest extends Vector1D_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        Vector1D.Unit.from(vector1D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      boolean boolean0 = vector1D0.equals(vector1D_Unit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.negate();
      double double0 = vector1D0.angle((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.negate();
      double double0 = vector1D0.angle((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.NaN.subtract(0.6, (Vector1D) vector1D_Unit0);
      double double0 = vector1D0.dot(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D.Unit vector1D_Unit1 = vector1D_Unit0.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      double double0 = vector1D_Unit0.norm();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      double double0 = vector1D_Unit0.norm();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      double double0 = vector1D_Unit0.norm();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D[] vector1DArray0 = new Vector1D[9];
      vector1DArray0[0] = (Vector1D) vector1D_Unit0;
      vector1DArray0[1] = (Vector1D) vector1D_Unit0;
      vector1DArray0[2] = (Vector1D) vector1D_Unit0;
      vector1DArray0[3] = (Vector1D) vector1D_Unit0;
      vector1DArray0[4] = (Vector1D) vector1D_Unit0;
      vector1DArray0[5] = (Vector1D) vector1D_Unit0;
      vector1DArray0[6] = (Vector1D) vector1D_Unit0;
      vector1DArray0[7] = vector1DArray0[5];
      vector1DArray0[8] = (Vector1D) vector1D_Unit0;
      Vector1D.Sum vector1D_Sum0 = Vector1D.Sum.of((Vector1D) vector1D_Unit0, vector1DArray0);
      Vector1D.Sum vector1D_Sum1 = vector1D_Sum0.add((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.withNorm(Double.NaN);
      assertTrue(vector1D0.isNaN());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.withNorm(Double.NEGATIVE_INFINITY);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Vector1D vector1D1 = vector1D_Unit0.withNorm(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Vector1D vector1D1 = vector1D_Unit0.withNorm(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.POSITIVE_INFINITY.vectorTo((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.vectorTo((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.NaN.vectorTo(vector1D0);
      assertTrue(vector1D1.isNaN());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1424.0));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      vector1D_Unit0.NaN.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(vector1D0);
      Vector1D vector1D1 = vector1D0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1003.4713486276197));
      UnaryOperator<Vector1D> unaryOperator0 = UnaryOperator.identity();
      Vector1D vector1D0 = vector1D_Unit0.transform(unaryOperator0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.NEGATIVE_INFINITY.subtract((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.subtract((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.ZERO.subtract(0.0, (Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.parse("(-Infinity)");
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.parse("(-0.0)");
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.parse("(NaN)");
      assertEquals(0, vector1D0.getDimension());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(Double.NaN);
      assertEquals(1, vector1D0.getDimension());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(Double.NEGATIVE_INFINITY);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(21.65459095187051);
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D.Unit vector1D_Unit1 = vector1D_Unit0.normalize();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      double double0 = vector1D0.normSq();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.ZERO.norm();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D vector1D1 = vector1D0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.NEGATIVE_INFINITY.multiply(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D vector1D1 = vector1D0.ZERO.multiply((-1003.4713486276197));
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.NEGATIVE_INFINITY.multiply(2846.4740752);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1088.75));
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D vector1D1 = vector1D_Unit0.POSITIVE_INFINITY.lerp(vector1D0, 874.2909482201);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1088.75));
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D vector1D1 = vector1D_Unit0.POSITIVE_INFINITY.lerp(vector1D0, 874.2909482201);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Vector1D vector1D1 = vector1D0.ZERO.lerp((Vector1D) vector1D_Unit0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Vector1D vector1D1 = vector1D0.ZERO.lerp((Vector1D) vector1D_Unit0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Vector1D vector1D1 = vector1D0.lerp(vector1D0, Double.NaN);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.NaN.add(Double.NEGATIVE_INFINITY, (Vector1D) vector1D_Unit0);
      boolean boolean0 = vector1D0.isNaN();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = vector1D0.ZERO.isFinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      double double0 = vector1D0.getX();
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      double double0 = vector1D_Unit0.getX();
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector1D_Unit0.eq((Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector1D_Unit0.eq((Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(21.65459095187051);
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D vector1D1 = vector1D0.getZero();
      double double0 = vector1D1.dot((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of(21.65459095187051);
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalizeOrNull();
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit1.dot((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.NEGATIVE_INFINITY.distanceSq(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D.Unit vector1D_Unit1 = vector1D0.directionTo((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Unit vector1D_Unit1 = vector1D0.directionTo((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.NaN.add(vector1D0);
      assertTrue(vector1D1.isInfinite());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      Vector1D vector1D0 = vector1D_Unit0.ZERO.transform(affineTransformMatrix1D0);
      Vector1D vector1D1 = vector1D_Unit0.ZERO.add(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(0.0);
      Vector1D vector1D0 = vector1D_Unit0.ZERO.transform(affineTransformMatrix1D0);
      Vector1D vector1D1 = vector1D_Unit0.ZERO.add(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D1 = vector1D_Unit0.NEGATIVE_INFINITY.add(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.NEGATIVE_INFINITY.add(0.0, vector1D0);
      assertTrue(vector1D1.isNaN());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.add(1286.95974294396, (Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1.0));
      Vector1D vector1D0 = vector1D_Unit0.add((-1.0), (Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1.0));
      Vector1D vector1D0 = vector1D_Unit0.add((-1.0), (Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector1D0.withNorm((-0.9999999999));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.subtract((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.subtract(4750.026206086907, (Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector1D.parse("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"\" at index 0: expected \"(\" but found \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector1D0.normalize();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from(508.7469742);
      // Undeclared exception!
      try { 
        vector1D_Unit0.NEGATIVE_INFINITY.lerp((Vector1D) null, 508.7469742);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.eq((Vector1D) vector1D_Unit0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.dot((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector1D0.NEGATIVE_INFINITY.distanceSq((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.distance((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      // Undeclared exception!
      try { 
        vector1D0.directionTo((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1003.47134862762));
      // Undeclared exception!
      try { 
        vector1D_Unit0.angle((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      // Undeclared exception!
      try { 
        vector1D0.angle(vector1D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      // Undeclared exception!
      try { 
        vector1D0.ZERO.add((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.add(0.0, (Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Sum vector1D_Sum0 = new Vector1D.Sum(vector1D_Unit0);
      Vector1D vector1D0 = vector1D_Sum0.get();
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1088.75));
      vector1D0.isNaN();
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.multiply((-64.28071));
      double double0 = vector1D1.distance(vector1D0);
      assertTrue(vector1D1.isInfinite());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = vector1D0.multiply((-64.28071));
      double double0 = vector1D1.distance(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D1 = vector1D0.subtract((Vector1D) vector1D_Unit0);
      assertEquals(0, vector1D1.getDimension());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Vector1D.Sum vector1D_Sum0 = Vector1D.Sum.create();
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      double double0 = vector1D0.norm();
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector1D_Unit0.eq((Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1193.5595279131));
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(vector1D0);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector1D_Unit0.eq((Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.getX();
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D.Unit vector1D_Unit0 = vector1D0.POSITIVE_INFINITY.normalizeOrNull();
      Vector1D vector1D1 = vector1D_Unit0.ZERO.subtract((-347.916396299), vector1D0);
      // Undeclared exception!
      try { 
        vector1D1.vectorTo((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1.0));
      Vector1D.Sum vector1D_Sum0 = new Vector1D.Sum(vector1D_Unit0);
      vector1D_Sum0.addScaled(0.0, (Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.from((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.negate();
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = Vector1D.parse("(-1.0)");
      boolean boolean0 = vector1D_Unit0.equals(vector1D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.NaN.subtract(0.6, (Vector1D) vector1D_Unit0);
      boolean boolean0 = vector1D_Unit0.equals(vector1D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-0.999999999999998));
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalize();
      Object object0 = new Object();
      boolean boolean0 = vector1D_Unit0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-0.999999999999998));
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalize();
      Object object0 = new Object();
      boolean boolean0 = vector1D_Unit0.equals(object0);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      boolean boolean0 = vector1D_Unit0.equals(vector1D_Unit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      vector1D0.NaN.hashCode();
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-1003.47134862762));
      vector1D_Unit0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.from(0.6);
      double double0 = vector1D_Unit1.angle((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.from(0.6);
      double double0 = vector1D_Unit1.angle((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      boolean boolean0 = vector1D0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      boolean boolean0 = vector1D_Unit0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = vector1D0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      // Undeclared exception!
      try { 
        vector1D_Unit0.POSITIVE_INFINITY.transform((UnaryOperator<Vector1D>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.MINUS;
      boolean boolean0 = vector1D_Unit0.equals(vector1D_Unit1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D.Unit vector1D_Unit1 = Vector1D.Unit.MINUS;
      boolean boolean0 = vector1D_Unit0.equals(vector1D_Unit1);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      String string0 = vector1D_Unit0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.distanceSq((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.NaN.subtract(0.6, (Vector1D) vector1D_Unit0);
      Vector1D vector1D1 = vector1D0.negate();
      assertTrue(vector1D1.isNaN());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      boolean boolean0 = vector1D_Unit0.POSITIVE_INFINITY.isFinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Vector1D.Unit.from(vector1D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      double double0 = vector1D_Unit0.dot((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.distance((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-0.999999999999998));
      Vector1D.Unit vector1D_Unit0 = vector1D0.normalize();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector1D_Unit0.POSITIVE_INFINITY.isZero(precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector1D0.directionTo(vector1D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector1D.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      int int0 = vector1D_Unit0.getDimension();
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.subtract(0.989, (Vector1D) vector1D_Unit0);
      Vector1D vector1D1 = vector1D0.withNorm(0.989);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.subtract(0.989, (Vector1D) vector1D_Unit0);
      Vector1D vector1D1 = vector1D0.withNorm(0.989);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.add(4791.6, (Vector1D) vector1D_Unit0);
      Vector1D vector1D1 = vector1D0.withNorm(4791.6);
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = vector1D_Unit0.add(4791.6, (Vector1D) vector1D_Unit0);
      Vector1D vector1D1 = vector1D0.withNorm(4791.6);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.normSq();
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D vector1D0 = vector1D_Unit0.withNorm(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.angle((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      double double0 = vector1D_Unit0.angle((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Unit vector1D_Unit1 = vector1D_Unit0.normalizeOrNull();
      assertTrue(vector1D_Unit1.isInfinite());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D.Sum vector1D_Sum0 = Vector1D.Sum.of((Vector1D) vector1D_Unit0);
      assertNotNull(vector1D_Sum0);
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Vector1D[] vector1DArray0 = new Vector1D[9];
      // Undeclared exception!
      try { 
        Vector1D.Sum.of((Vector1D) vector1D_Unit0, vector1DArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Vector1D", e);
      }
  }
}
