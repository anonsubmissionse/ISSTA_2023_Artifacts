/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:16:56 GMT 2022
 */

package org.apache.commons.geometry.euclidean.threed.line;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D;
import org.apache.commons.geometry.euclidean.oned.Interval;
import org.apache.commons.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.geometry.euclidean.oned.Vector1D;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.line.Line3D;
import org.apache.commons.geometry.euclidean.threed.line.LineConvexSubset3D;
import org.apache.commons.geometry.euclidean.threed.line.Lines3D;
import org.apache.commons.geometry.euclidean.threed.line.Ray3D;
import org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D;
import org.apache.commons.geometry.euclidean.threed.line.Segment3D;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisAngleSequence;
import org.apache.commons.geometry.euclidean.threed.rotation.AxisSequence;
import org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Lines3D_ESTest extends Lines3D_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Interval interval0 = Interval.full();
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval((Line3D) null, interval0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval((Line3D) null, 0.0, 171.7);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval((Line3D) null, 0.0, 171.7);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval((Line3D) null, (-4.3285119272), (-3276.21703142563));
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, 1740.5563435, (-961.69885073));
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1507.8806429, 3536.885909742515, 3536.885909742515);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = Lines3D.segmentFromPoints(line3D0, vector3D0, vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1507.8806429, 3536.885909742515, 3536.885909742515);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      Segment3D segment3D0 = Lines3D.segmentFromPoints(line3D0, vector3D0, vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit1, vector3D_Unit1, precision_DoubleEquivalence1);
      Vector3D[] vector3DArray0 = new Vector3D[4];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit1;
      Vector3D vector3D0 = Vector3D.centroid((Vector3D) vector3D_Unit0, vector3DArray0);
      Segment3D segment3D0 = Lines3D.segmentFromPoints(line3D0, vector3DArray0[0], vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 3.273390607896142E150);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point((-612.2907178068466), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Segment3D segment3D0 = Lines3D.segmentFromPoints(vector3D0, (Vector3D) vector3D_Unit0, precision_DoubleEquivalence1);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 3.273390607896142E150);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point((-612.2907178068466), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Segment3D segment3D0 = Lines3D.segmentFromPoints(vector3D0, (Vector3D) vector3D_Unit0, precision_DoubleEquivalence1);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Vector3D vector3D0 = Vector3D.ZERO;
      Segment3D segment3D0 = Lines3D.segmentFromPoints((Vector3D) vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Vector3D vector3D0 = Vector3D.ZERO;
      Segment3D segment3D0 = Lines3D.segmentFromPoints((Vector3D) vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
      Vector3D vector3D1 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint0 = interval1.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Segment3D segment3D0 = Lines3D.segmentFromPoints(vector3D1, vector3D0, precision_DoubleEquivalence1);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
      Vector3D vector3D1 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint0 = interval1.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Segment3D segment3D0 = Lines3D.segmentFromPoints(vector3D1, vector3D0, precision_DoubleEquivalence1);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Segment3D segment3D0 = Lines3D.segmentFromLocations((Line3D) null, 1.0, 1.0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, (-3118.1948), (-3118.1948));
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, 0.0, 4.149515568880993E180);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, 0.0, 4.149515568880993E180);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPointAndDirection(vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence1);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPointAndDirection(vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence1);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPoint(line3D0, vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(131.98, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Line3D line3D1 = line3D0.reverse();
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPoint(line3D1, vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromLocation((Line3D) null, 1902.159537);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-357.967815), (-357.967815), 918.666524907);
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromLocation(line3D0, (-357.967815));
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Ray3D ray3D0 = Lines3D.rayFromPointAndDirection(vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence1);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Ray3D ray3D0 = Lines3D.rayFromPointAndDirection(vector3D_Unit1, vector3D_Unit0, precision_DoubleEquivalence1);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(731.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Ray3D ray3D0 = Lines3D.rayFromPoint(line3D0, vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.directionTo((Vector3D) vector3D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPoints(vector3D_Unit2, vector3D_Unit0, precision_DoubleEquivalence1);
      Ray3D ray3D0 = Lines3D.rayFromPoint(line3D0, vector3D_Unit2);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3718.6420264, 3718.6420264, (-1100.957300881493));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(3718.6420264, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D0, vector3D0, precision_DoubleEquivalence1);
      Ray3D ray3D0 = Lines3D.rayFromPoint(line3D0, vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Ray3D ray3D0 = Lines3D.rayFromLocation((Line3D) null, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Ray3D ray3D0 = Lines3D.rayFromLocation((Line3D) null, (-206.1891240516778));
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.directionTo((Vector3D) vector3D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPoints(vector3D_Unit2, vector3D_Unit0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.subsetFromInterval(line3D0, (Vector1D) null, (Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.subsetFromInterval((Line3D) null, (Interval) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      // Undeclared exception!
      try { 
        Lines3D.segmentFromPoints((Line3D) null, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZX;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(2367.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      // Undeclared exception!
      try { 
        Lines3D.segmentFromPoints(vector3D0, vector3D0, precision_DoubleEquivalence1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      // Undeclared exception!
      try { 
        Lines3D.reverseRayFromPointAndDirection(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Vector3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      // Undeclared exception!
      try { 
        Lines3D.reverseRayFromPointAndDirection(vector3D0, vector3D0, precision_DoubleEquivalence1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.reverseRayFromPoint((Line3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence1);
      Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Lines3D.reverseRayFromPoint(line3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid reverse ray end location: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      // Undeclared exception!
      try { 
        Lines3D.rayFromPointAndDirection(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Vector3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D0 = vector3D_Unit0.vectorTo((Vector3D) vector3D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      // Undeclared exception!
      try { 
        Lines3D.rayFromPointAndDirection(vector3D_Unit0, vector3D0, precision_DoubleEquivalence1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.rayFromPoint((Line3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      // Undeclared exception!
      try { 
        Lines3D.fromPoints(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Vector3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3718.6420264, 3718.6420264, (-1100.957300881493));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(3718.6420264, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      // Undeclared exception!
      try { 
        Lines3D.fromPoints(vector3D0, vector3D0, precision_DoubleEquivalence1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      // Undeclared exception!
      try { 
        Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Vector3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPoints(vector3D_Unit0, vector3D_Unit1, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.subsetFromInterval(line3D0, Double.NaN, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line convex subset interval: NaN, NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.subsetFromInterval((Line3D) null, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line convex subset interval: -Infinity, -Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval(line3D0, Double.POSITIVE_INFINITY, (-3118.1948));
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval((Line3D) null, (-2339.83715469), Double.NEGATIVE_INFINITY);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, 0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromLocations(line3D0, 0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.segmentFromLocations((Line3D) null, Double.POSITIVE_INFINITY, (-3276.21703142563));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: Infinity, -3276.21703142563
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromLocation(line3D0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-3118.1948), (-3118.1948), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Ray3D ray3D0 = Lines3D.rayFromLocation(line3D0, 1616.527931327);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Lines3D.rayFromLocation((Line3D) null, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid ray start location: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = Vector1D.NEGATIVE_INFINITY;
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval(line3D0, vector1D0, vector1D1);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        Lines3D.subsetFromInterval(line3D0, vector1D0, vector1D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line convex subset interval: Infinity, Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1.0, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((Vector1D) vector1D_Unit0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval(line3D0, interval1);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of(0.0, 317.4181, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.segmentFromLocations(line3D0, 317.4181, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: 317.4181, Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D0 = Vector3D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.segmentFromPoints(line3D0, vector3D0, (Vector3D) vector3D_Unit0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid line segment locations: NaN, 1.0
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(946.094658801872, 946.094658801872, 0.6);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(946.094658801872, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.reverseRayFromLocation(line3D0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid reverse ray end location: -Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D0 = Vector3D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      // Undeclared exception!
      try { 
        Lines3D.rayFromPoint(line3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid ray start location: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = Vector3D.of((-2558.200419908472), (-2558.200419908472), (-2558.200419908472));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of((-2558.200419908472), (-2558.200419908472), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Lines3D.fromPoints(vector3D0, vector3D_Unit0, precision_DoubleEquivalence0);
      Lines3D.segmentFromPoints(vector3D0, (Vector3D) vector3D_Unit0, precision_DoubleEquivalence1);
      Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D0, precision_DoubleEquivalence1);
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.span((Line3D) null);
      assertFalse(lineConvexSubset3D0.isInfinite());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      Vector3D.Unit vector3D_Unit0 = vector3D0.normalizeOrNull();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Ray3D ray3D0 = Lines3D.rayFromPointAndDirection(vector3D0, vector3D_Unit0, precision_DoubleEquivalence1);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(1.0, 1.0, 1.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(1.0, precision_DoubleEquivalence0);
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
      LineConvexSubset3D lineConvexSubset3D0 = Lines3D.subsetFromInterval(line3D0, interval0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromPoints(line3D0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.point(1740.5563435, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      Segment3D segment3D0 = Lines3D.segmentFromPoints(line3D0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of(1.5707963267948966, (-1586.117102753593), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      Line3D line3D0 = Lines3D.fromPointAndDirection(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence1);
      ReverseRay3D reverseRay3D0 = Lines3D.reverseRayFromPoint(line3D0, vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 317.4181, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = orientedPoint0.getPrecision();
      // Undeclared exception!
      try { 
        Lines3D.segmentFromPoints((Vector3D) vector3D_Unit0, (Vector3D) null, precision_DoubleEquivalence1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Vector3D", e);
      }
  }
}
