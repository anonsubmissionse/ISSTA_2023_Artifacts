 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.141592653589793, 0.0, 0.0);
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Z;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D_Unit0, vector3D_Unit1, vector3D_Unit1, vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(0.0, 3512.141, (-836.565986374039));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D0, vector3D0, vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(725.2653110863354, 725.2653110863354, 725.2653110863354, 725.2653110863354);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.identity();
      QuaternionRotation quaternionRotation2 = quaternionRotation0.multiply(quaternionRotation1);
      Vector3D vector3D0 = Vector3D.of((-2317.7763229164), (-2317.7763229164), (-2317.7763229164));
      Vector3D vector3D1 = quaternionRotation2.getAxis();
      QuaternionRotation quaternionRotation3 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D1, vector3D1);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(725.2653110863354, 725.2653110863354, 725.2653110863354, 725.2653110863354);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.identity();
      QuaternionRotation quaternionRotation2 = quaternionRotation0.multiply(quaternionRotation1);
      Vector3D vector3D0 = Vector3D.of((-2317.7763229164), (-2317.7763229164), (-2317.7763229164));
      Vector3D vector3D1 = quaternionRotation2.getAxis();
      QuaternionRotation quaternionRotation3 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D1, vector3D1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of((-369.1892755180724), 2206.88023156283, (-369.1892755180724));
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 0.5;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      quaternionRotation0.toMatrix();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      quaternionRotation0.toMatrix();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.I;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = quaternionRotation0.toMatrix();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      doubleArray0[2] = 0.5;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      doubleArray0[2] = 0.5;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      doubleArray0[2] = 0.5;
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence1 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence1);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence1 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence1);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence1 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence1);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1467.09091, 1467.09091, 4185.65842281, 1467.09091);
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1467.09091, 1467.09091, 4185.65842281, 1467.09091);
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1467.09091, 1467.09091, 4185.65842281, 1467.09091);
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Vector3D vector3D1 = Vector3D.of((-369.1892755180724), 2206.88023156283, (-369.1892755180724));
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D1);
      QuaternionRotation quaternionRotation2 = quaternionRotation0.premultiply(quaternionRotation1);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Vector3D vector3D1 = Vector3D.of((-369.1892755180724), 2206.88023156283, (-369.1892755180724));
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D1);
      QuaternionRotation quaternionRotation2 = quaternionRotation0.premultiply(quaternionRotation1);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(2.0, 0.0, 0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 0.0, 2691.66937118266, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      QuaternionRotation quaternionRotation1 = quaternionRotation0.multiply(quaternionRotation0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      QuaternionRotation quaternionRotation1 = quaternionRotation0.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.16643938139925;
      Quaternion quaternion0 = Quaternion.of(doubleArray0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      Quaternion quaternion1 = quaternionRotation0.getQuaternion();
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-2775.549637011024));
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-2775.549637011024));
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      doubleArray0[2] = (-4141.42206190945);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D0, vector3D0);
      Vector3D vector3D2 = quaternionRotation0.getAxis();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      doubleArray0[2] = (-4141.42206190945);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D0, vector3D0);
      Vector3D vector3D2 = quaternionRotation0.getAxis();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      doubleArray0[2] = (-4141.42206190945);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D0, vector3D1, vector3D0, vector3D0);
      Vector3D vector3D2 = quaternionRotation0.getAxis();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      double double0 = quaternionRotation0.getAngle();
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngle(vector3D0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = quaternionRotation0.applyVector(vector3D0);
      assertFalse(vector3D1.isNaN());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, 0.0, 29.555595878839796, (-596.373114590533));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation1.getAxis();
      Vector3D vector3D1 = quaternionRotation1.applyVector(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, 0.0, 29.555595878839796, (-596.373114590533));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation1.getAxis();
      Vector3D vector3D1 = quaternionRotation1.applyVector(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, 0.0, 29.555595878839796, (-596.373114590533));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation1.getAxis();
      Vector3D vector3D1 = quaternionRotation1.applyVector(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.of(0.0, 0.0, 29.555595878839796, (-596.373114590533));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation1.getAxis();
      Vector3D vector3D1 = quaternionRotation1.applyVector(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.0, 0.0, (-1628.0836292115343), (-1628.0836292115343));
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(276.9, 0.0, 0.0);
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.0, 0.0, (-1628.0836292115343), (-1628.0836292115343));
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(276.9, 0.0, 0.0);
      Vector3D vector3D0 = quaternionRotation0.applyVector((Vector3D) vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = Vector3D.of(1.5707963267948966, 224.705666389, 1242.28407);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 2282.555197);
      Vector3D vector3D1 = quaternionRotation0.apply(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = Vector3D.of(1.5707963267948966, 224.705666389, 1242.28407);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, 2282.555197);
      Vector3D vector3D1 = quaternionRotation0.apply(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 296.552751143022, 296.552751143022, 2070.628);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = Vector3D.NaN;
      quaternionRotation0.apply(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.toRelativeAxisAngleSequence((AxisSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Axis sequence cannot be null
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.toAbsoluteAxisAngleSequence((AxisSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Axis sequence cannot be null
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 0.0, 0.0, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      // Undeclared exception!
      try { 
        quaternionRotation0.slerp((QuaternionRotation) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.premultiply((QuaternionRotation) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.of((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      // Undeclared exception!
      try { 
        QuaternionRotation.of(quaternion0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.of(0.0, 0.0, 0.0, 0.0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of((-5352.828376870025), (-5352.828376870025), (-5352.828376870025), 0.0);
      // Undeclared exception!
      try { 
        quaternionRotation0.multiply((QuaternionRotation) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngleSequence((AxisAngleSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-703.0));
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angle: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngle((Vector3D) null, (-2349.5174465036866));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      // Undeclared exception!
      try { 
        QuaternionRotation.createVectorRotation((Vector3D) null, vector3D_Unit0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(6.696928794914171E299, (-2066.357763116722), 6135.232718164232);
      // Undeclared exception!
      try { 
        QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        QuaternionRotation.createBasisRotation((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      // Undeclared exception!
      try { 
        quaternionRotation0.applyVector((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(79.268, (-597.9171676360878), (-1.0), (-375.76059));
      // Undeclared exception!
      try { 
        quaternionRotation0.apply((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      Vector3D vector3D1 = quaternionRotation0.apply(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-983.8942155006455);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D.Unit vector3D_Unit0 = affineTransformMatrix3D0.applyDirection(vector3D0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngle(vector3D_Unit0, (-1679.07558962));
      Vector3D vector3D1 = quaternionRotation0.apply(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.RELATIVE;
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ONE;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      QuaternionRotation quaternionRotation1 = quaternionRotation0.multiply(quaternionRotation0);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Quaternion quaternion0 = quaternionRotation0.getQuaternion();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.of(quaternion0);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createAbsolute(axisSequence0, 3052.1709124358235, 3052.1709124358235, 2.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      QuaternionRotation quaternionRotation1 = quaternionRotation0.inverse();
      Quaternion quaternion0 = quaternionRotation1.getQuaternion();
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      vector3DArray0[5] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      Vector3D vector3D2 = vector3D1.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D2, vector3D0, vector3D0, vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D vector3D1 = vector3D0.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D1, vector3D0, vector3D0, vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.9999999999);
      doubleArray0[1] = (-0.999999999999998);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D vector3D1 = Vector3D.of((-0.999999999999998), 0.99, (-0.999999999999998));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D1, vector3D1, vector3D0, vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(0.25, 0.0, (-1317.84), 0.25);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      // Undeclared exception!
      try { 
        QuaternionRotation.fromAxisAngle(vector3D0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid angle: NaN
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D_Unit1);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit0, vector3D_Unit1);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit1);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D_Unit0);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation1.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit1);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D_Unit0);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation1.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit1);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D_Unit0);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation1.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit1);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D_Unit0);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation1.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D0 = quaternionRotation0.apply((Vector3D) vector3D_Unit1);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D_Unit0);
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation1.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Y;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createVectorRotation(vector3D_Unit1, vector3D_Unit2);
      AxisSequence axisSequence0 = AxisSequence.ZXY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1495.9182619552287, 1495.9182619552287, 1495.9182619552287, 1495.9182619552287);
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1495.9182619552287, 1495.9182619552287, 1495.9182619552287, 1495.9182619552287);
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(1495.9182619552287, 1495.9182619552287, 1495.9182619552287, 1495.9182619552287);
      AxisSequence axisSequence0 = AxisSequence.YZX;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      assertNotNull(vector3D0);
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      QuaternionRotation quaternionRotation1 = QuaternionRotation.createVectorRotation(vector3D0, vector3D0);
      boolean boolean0 = quaternionRotation0.equals(quaternionRotation1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      boolean boolean0 = quaternionRotation0.equals(quaternionRotation0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      boolean boolean0 = quaternionRotation0.equals("[1.0 0.0 0.0 0.0]");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      // Undeclared exception!
      try { 
        quaternionRotation0.toAxisAngleSequence(axisReferenceFrame0, (AxisSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Axis sequence cannot be null
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.XZX;
      // Undeclared exception!
      try { 
        quaternionRotation0.toAxisAngleSequence((AxisReferenceFrame) null, axisSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Axis reference frame cannot be null
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.rotation.QuaternionRotation", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      quaternionRotation0.hashCode();
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      // Undeclared exception!
      try { 
        QuaternionRotation.createBasisRotation(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      QuaternionRotation quaternionRotation1 = quaternionRotation0.premultiply(quaternionRotation0);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toRelativeAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 3038.2640057273097, 3038.2640057273097, 3038.2640057273097);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      quaternionRotation0.slerp(quaternionRotation0);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      boolean boolean0 = quaternionRotation0.preservesOrientation();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      String string0 = quaternionRotation0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 3038.2640057273097, 3038.2640057273097, 3038.2640057273097);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence1);
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 3038.2640057273097, 3038.2640057273097, 3038.2640057273097);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AxisAngleSequence axisAngleSequence1 = quaternionRotation0.toAbsoluteAxisAngleSequence(axisSequence0);
      QuaternionRotation quaternionRotation1 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence1);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      double double0 = quaternionRotation0.getAngle();
      ;
}
