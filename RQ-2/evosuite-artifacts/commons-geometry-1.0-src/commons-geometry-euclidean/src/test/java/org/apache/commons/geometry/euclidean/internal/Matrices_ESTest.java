/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:27:26 GMT 2022
 */

package org.apache.commons.geometry.euclidean.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.internal.Matrices;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrices_ESTest extends Matrices_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = Matrices.determinant((-537.5269368), 0.0, (-537.5269368), (-537.5269368), 0.0, 786.54969, 1773.5148104, 0.0, (-537.5269368));
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = Matrices.determinant((-1658.3351656), 0.0, (-1658.3351656), 0.0, (-1658.3351656), 0.0, (-1658.3351656), 0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = Matrices.determinant((-3412.435), (-3412.435), (-3412.435), (-3412.435), (-3412.435), (-3412.435), (-1.0), (-3412.435), (-3412.435));
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = Matrices.determinant(2112.389291284, (-251.379666), 0.0, 2112.389291284, (-1341.17), 2112.389291284, 2112.389291284, 2112.389291284, 2112.389291284);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = Matrices.determinant(0.0, (-36.0793765427), 2583.4297779836334, (-1307.5287803416));
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = Matrices.determinant((-4118.324597660367), (-4118.324597660367), (-4118.324597660367), 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = Matrices.checkElementForInverse(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = Matrices.checkElementForInverse((-36.0793765427));
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double double0 = Matrices.checkDeterminantForInverse((-993.051637824));
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      double double0 = Matrices.checkElementForInverse(2107.5753453928933);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = Matrices.checkDeterminantForInverse(2107.5753453928933);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Matrices.determinant(0.0, 2107.5753453928933, 0.0, 0.0, 2107.5753453928933, 2107.5753453928933, 2107.5753453928933, 2107.5753453928933, 2107.5753453928933);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = Matrices.determinant(2107.5753453928933, 2107.5753453928933, 2107.5753453928933, 2107.5753453928933);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.checkDeterminantForInverse(0.0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Matrix is not invertible; matrix determinant is 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Matrices", e);
      }
  }
}
