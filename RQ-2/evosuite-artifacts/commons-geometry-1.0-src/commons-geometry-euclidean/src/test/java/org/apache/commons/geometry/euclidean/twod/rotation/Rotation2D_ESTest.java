/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:26:05 GMT 2022
 */

package org.apache.commons.geometry.euclidean.twod.rotation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.twod.AffineTransformMatrix2D;
import org.apache.commons.geometry.euclidean.twod.Vector2D;
import org.apache.commons.geometry.euclidean.twod.rotation.Rotation2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rotation2D_ESTest extends Rotation2D_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Rotation2D rotation2D1 = Rotation2D.of((-911.396825582));
      boolean boolean0 = rotation2D0.equals(rotation2D1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Rotation2D rotation2D1 = Rotation2D.of((-911.396825582));
      boolean boolean0 = rotation2D0.equals(rotation2D1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Rotation2D rotation2D1 = Rotation2D.of((-911.396825582));
      boolean boolean0 = rotation2D0.equals(rotation2D1);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-2551.721));
      Rotation2D rotation2D1 = rotation2D0.inverse();
      Rotation2D rotation2D2 = rotation2D1.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-2551.721));
      Rotation2D rotation2D1 = rotation2D0.inverse();
      Rotation2D rotation2D2 = rotation2D1.inverse();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-2551.721));
      Rotation2D rotation2D1 = rotation2D0.inverse();
      double double0 = rotation2D1.getAngle();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-2551.721));
      Rotation2D rotation2D1 = rotation2D0.inverse();
      double double0 = rotation2D1.getAngle();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-1998.55));
      double double0 = rotation2D0.getAngle();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(128.8);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Rotation2D rotation2D1 = Rotation2D.createVectorRotation(vector2D0, vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(128.8);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Rotation2D rotation2D1 = Rotation2D.createVectorRotation(vector2D0, vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(128.8);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      Rotation2D rotation2D1 = Rotation2D.createVectorRotation(vector2D0, vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_Y;
      AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((-2052.262350997466));
      Vector2D.Unit vector2D_Unit1 = affineTransformMatrix2D0.applyDirection((Vector2D) vector2D_Unit0);
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit1);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = rotation2D0.applyVector(vector2D0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-3456.44949864735));
      Vector2D vector2D0 = Vector2D.NaN;
      rotation2D0.applyVector(vector2D0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.applyVector((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-2551.721));
      Vector2D vector2D0 = Vector2D.NaN;
      rotation2D0.apply(vector2D0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = rotation2D0.apply(vector2D0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Rotation2D.createVectorRotation((Vector2D) null, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Rotation2D.createVectorRotation(vector2D0, vector2D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of((-310.2187357385034));
      // Undeclared exception!
      try { 
        rotation2D0.apply((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.rotation.Rotation2D", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.5);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.5);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.5);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector2D vector2D0 = rotation2D0.apply((Vector2D) vector2D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      Rotation2D rotation2D1 = Rotation2D.identity();
      boolean boolean0 = rotation2D1.equals(rotation2D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      Object object0 = new Object();
      boolean boolean0 = rotation2D0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      boolean boolean0 = rotation2D0.equals(rotation2D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      boolean boolean0 = rotation2D0.equals(rotation2D0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      rotation2D0.toMatrix();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      String string0 = rotation2D0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      double double0 = rotation2D0.getAngle();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.identity();
      boolean boolean0 = rotation2D0.preservesOrientation();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Rotation2D rotation2D1 = rotation2D0.inverse();
      boolean boolean0 = rotation2D1.equals(rotation2D0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Rotation2D rotation2D1 = rotation2D0.inverse();
      boolean boolean0 = rotation2D1.equals(rotation2D0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      Rotation2D rotation2D1 = rotation2D0.inverse();
      boolean boolean0 = rotation2D1.equals(rotation2D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Rotation2D rotation2D0 = Rotation2D.createVectorRotation(vector2D_Unit0, vector2D_Unit0);
      rotation2D0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Rotation2D rotation2D0 = Rotation2D.of(0.0);
      // Undeclared exception!
      try { 
        rotation2D0.applyVector((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.rotation.Rotation2D", e);
      }
  }
}
