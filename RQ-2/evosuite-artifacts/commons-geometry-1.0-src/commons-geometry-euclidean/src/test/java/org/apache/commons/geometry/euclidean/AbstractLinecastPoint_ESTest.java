/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:24:54 GMT 2022
 */

package org.apache.commons.geometry.euclidean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.geometry.euclidean.oned.Vector1D;
import org.apache.commons.geometry.euclidean.twod.Line;
import org.apache.commons.geometry.euclidean.twod.LinecastPoint2D;
import org.apache.commons.geometry.euclidean.twod.Vector2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractLinecastPoint_ESTest extends AbstractLinecastPoint_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2.9), (-2.9));
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-2.9));
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      double double0 = linecastPoint2D0.getAbscissa();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line0);
      double double0 = linecastPoint2D0.getAbscissa();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line0);
      Vector2D vector2D0 = linecastPoint2D0.getPoint();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_Y;
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn((String) null).when(line0).toString();
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D_Unit0, vector2D_Unit0, line0);
      Line line1 = linecastPoint2D0.getLine();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2.9), 3416.096);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-2.9));
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      Vector2D.Unit vector2D_Unit0 = linecastPoint2D0.getNormal();
      assertEquals(0, vector2D_Unit0.getDimension());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(12.746990173484287, 12.746990173484287);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      Line line1 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line1).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D1 = new LinecastPoint2D(vector2D0, vector2D0, line1);
      boolean boolean0 = linecastPoint2D1.equals(linecastPoint2D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(26.720774464321998, 26.720774464321998);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      boolean boolean0 = linecastPoint2D0.equals(vector2D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(26.720774464321998, 26.720774464321998);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      boolean boolean0 = linecastPoint2D0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of((-2.9), (-2.9));
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-2.9));
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      boolean boolean0 = linecastPoint2D0.equals(linecastPoint2D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(26.720774464321998, 26.720774464321998);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      Line line1 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line1).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D1 = new LinecastPoint2D((Vector2D) null, vector2D0, line1);
      boolean boolean0 = linecastPoint2D1.equals(linecastPoint2D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(26.720774464321998, 26.720774464321998);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      linecastPoint2D0.hashCode();
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.of(12.746990173484287, 12.746990173484287);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Line line0 = mock(Line.class, new ViolatedAssumptionAnswer());
      doReturn(vector1D_Unit0).when(line0).toSubspace(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class));
      doReturn((String) null, (String) null).when(line0).toString();
      LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D0, line0);
      String string0 = linecastPoint2D0.toString();
      ;
}
}
