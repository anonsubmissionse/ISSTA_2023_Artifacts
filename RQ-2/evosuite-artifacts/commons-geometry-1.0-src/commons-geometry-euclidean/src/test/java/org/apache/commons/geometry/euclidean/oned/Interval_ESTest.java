/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:20:32 GMT 2022
 */

package org.apache.commons.geometry.euclidean.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.UnaryOperator;
import org.apache.commons.geometry.core.RegionLocation;
import org.apache.commons.geometry.core.Transform;
import org.apache.commons.geometry.core.partitioning.Hyperplane;
import org.apache.commons.geometry.core.partitioning.Split;
import org.apache.commons.geometry.core.partitioning.SplitLocation;
import org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D;
import org.apache.commons.geometry.euclidean.oned.Interval;
import org.apache.commons.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.geometry.euclidean.oned.Vector1D;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      UnaryOperator<Vector1D> unaryOperator0 = UnaryOperator.identity();
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.from(unaryOperator0);
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      // Undeclared exception!
      try { 
        Interval.of(orientedPoint1, orientedPoint0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval: hyperplanes have same orientation: OrientedPoint[point= (0.0), direction= (-1.0)], OrientedPoint[point= (0.0), direction= (-1.0)]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Interval interval0 = Interval.full();
      Interval interval1 = interval0.transform((Transform<Vector1D>) null);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint2 = orientedPoint1.reverse();
      Interval interval0 = Interval.of(orientedPoint2, orientedPoint0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0, 0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation((Vector1D) vector1D_Unit0);
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      OrientedPoint orientedPoint2 = orientedPoint1.reverse();
      Interval interval0 = Interval.of(orientedPoint2, orientedPoint0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1603.3, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1603.3);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1603.3, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1603.3);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.min(1603.3, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1603.3);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max((-2759.48456), precision_DoubleEquivalence0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      assertTrue(interval0.isInfinite());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max((-2759.48456), precision_DoubleEquivalence0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max((-2759.48456), precision_DoubleEquivalence0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max((-2759.48456), precision_DoubleEquivalence0);
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      Interval interval1 = Interval.of(orientedPoint1, orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      Interval interval1 = Interval.of(orientedPoint1, orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      Interval interval1 = Interval.of(orientedPoint1, orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(Double.POSITIVE_INFINITY, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Interval interval0 = Interval.point(370.95824183326, (Precision.DoubleEquivalence) null);
      double double0 = interval0.getSize();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale((-1.0));
      OrientedPoint orientedPoint1 = orientedPoint0.transform(affineTransformMatrix1D0);
      Interval interval0 = Interval.of(orientedPoint1, orientedPoint0);
      double double0 = interval0.getSize();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Interval interval0 = Interval.full();
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1166.7329232, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1166.7329232, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1166.7329232, 0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(1386.307566, precision_DoubleEquivalence0);
      double double0 = interval0.getMin();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(1386.307566, precision_DoubleEquivalence0);
      double double0 = interval0.getMin();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Interval interval0 = Interval.full();
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      assertNotNull(orientedPoint0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      assertTrue(orientedPoint0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-1177.029681), precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
      assertTrue(interval0.isInfinite());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-1177.029681), precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      Vector1D vector1D1 = interval0.project(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      Vector1D vector1D1 = interval0.project(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((-2802.579228931), (-1069.845395603), precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 277.60882242, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.transform((Transform<Vector1D>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Interval interval0 = Interval.max(1326.2228774699652, (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        interval0.split((Hyperplane<Vector1D>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.project((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.point(Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [-\u221E, -\u221E]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.of((Vector1D) null, (Vector1D) null, precision_DoubleEquivalence0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        Interval.of(vector1D0, vector1D0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [\u221E, \u221E]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Interval interval0 = Interval.point(2.409919865102884E-181, (Precision.DoubleEquivalence) null);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      OrientedPoint orientedPoint1 = interval0.getMinBoundary();
      // Undeclared exception!
      try { 
        Interval.of(orientedPoint0, orientedPoint1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.of(Double.NaN, Double.NaN, precision_DoubleEquivalence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [\uFFFD, \uFFFD]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Interval interval0 = Interval.max((-2556.783116914), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        interval0.contains((-1.0));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-461.7278720759529), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.classify((Vector1D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Interval interval0 = Interval.min((-2556.783116914), (Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        interval0.classify((-1294.4));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoint", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-1568.5505671361), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of((OrientedPoint) null, orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-1568.5505671361), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of((OrientedPoint) null, orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-1568.5505671361), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of((OrientedPoint) null, orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Interval interval0 = Interval.of(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, (Precision.DoubleEquivalence) null);
      assertTrue(interval0.isEmpty());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      assertTrue(interval0.isInfinite());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, Double.NEGATIVE_INFINITY, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(116.43503181).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.min(116.43503181, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(116.43503181);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(116.43503181).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.min(116.43503181, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(116.43503181);
      assertNotNull(regionLocation0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(116.43503181).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.min(116.43503181, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(116.43503181);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
      assertNotNull(regionLocation0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.point((-2540.88), precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify((-2540.88));
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.point((-2540.88), precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify((-2540.88));
      assertNotNull(regionLocation0);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-1139.094493753), precision_DoubleEquivalence0);
      interval0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point(0.0, precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min((-390.863487546476), precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min((-390.863487546476), precision_DoubleEquivalence0);
      double double0 = interval0.getMax();
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Interval interval0 = Interval.full();
      double double0 = interval0.getMin();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1431.0878063748687, precision_DoubleEquivalence0);
      double double0 = interval0.getMin();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1431.0878063748687, precision_DoubleEquivalence0);
      double double0 = interval0.getMin();
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1277.5065134));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of(orientedPoint0, (OrientedPoint) null);
      RegionLocation regionLocation0 = interval0.classify(vector1D0);
      assertNotNull(regionLocation0);
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1277.5065134));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of(orientedPoint0, (OrientedPoint) null);
      RegionLocation regionLocation0 = interval0.classify(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Interval.min(Double.POSITIVE_INFINITY, precision_DoubleEquivalence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [\u221E, \u221E]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.max(Double.NaN, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval values: [-\u221E, \uFFFD]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint1 = orientedPoint0.reverse();
      // Undeclared exception!
      try { 
        Interval.of(orientedPoint1, orientedPoint0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval: hyperplanes do not form interval: OrientedPoint[point= (NaN), direction= (1.0)], OrientedPoint[point= (NaN), direction= (-1.0)]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createTranslation(0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      doReturn((-189.53204134020137), 1.9563291713325808).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.point((-189.53204134020137), precision_DoubleEquivalence0);
      // Undeclared exception!
      try { 
        interval0.transform(affineTransformMatrix1D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid interval: hyperplanes do not form interval: OrientedPoint[point= (-189.53204134020137), direction= (-1.0)], OrientedPoint[point= (-189.53204134020137), direction= (1.0)]
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.Interval", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of((OrientedPoint) null, orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of((OrientedPoint) null, orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of(orientedPoint0, (OrientedPoint) null);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of(orientedPoint0, (OrientedPoint) null);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.of(orientedPoint0, (OrientedPoint) null);
      assertTrue(interval1.isInfinite());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      Vector1D vector1D1 = Vector1D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D1, vector1D0, precision_DoubleEquivalence0);
      assertTrue(interval0.hasMinBoundary());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-1576.4973813883212), (-1576.4973813883212), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-1576.4973813883212), (-1576.4973813883212), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((-1576.4973813883212), (-1576.4973813883212), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMinBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.full();
      Split<Interval> split0 = interval1.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.full();
      Split<Interval> split0 = interval1.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.full();
      Split<Interval> split0 = interval1.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Interval interval1 = Interval.full();
      Split<Interval> split0 = interval1.split(orientedPoint0);
      assertTrue(interval0.isInfinite());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-980.43904926), (-980.43904926)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence1);
      Split<Interval> split0 = interval0.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-980.43904926), (-980.43904926)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D_Unit0, false, precision_DoubleEquivalence1);
      Split<Interval> split0 = interval0.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      OrientedPoint orientedPoint0 = interval0.getMaxBoundary();
      Split<Interval> split0 = interval0.split(orientedPoint0);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Interval interval0 = Interval.full();
      double double0 = interval0.getSize();
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Interval interval0 = Interval.full();
      double double0 = interval0.getSize();
      assertTrue(interval0.isInfinite());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.isFull();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
      assertTrue(interval0.isInfinite());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFull();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Interval interval0 = Interval.max(0.0, precision_DoubleEquivalence0);
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.identity();
      Interval interval1 = interval0.transform(affineTransformMatrix1D0);
      assertFalse(interval1.isFinite());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max(1603.3, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
      assertTrue(interval0.isInfinite());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.point((-256.0), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      interval0.project((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      assertNotNull(vector1D0);
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      Interval interval1 = Interval.of(1.0, 3764.46, (Precision.DoubleEquivalence) null);
      Vector1D vector1D1 = interval1.project(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      Interval interval1 = Interval.of(1.0, 3764.46, (Precision.DoubleEquivalence) null);
      Vector1D vector1D1 = interval1.project(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1277.5065134));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of(orientedPoint0, (OrientedPoint) null);
      Vector1D vector1D1 = interval0.project(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.of((-1277.5065134));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false, precision_DoubleEquivalence0);
      Interval interval0 = Interval.of(orientedPoint0, (OrientedPoint) null);
      Vector1D vector1D1 = interval0.project(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Interval interval0 = Interval.full();
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true, precision_DoubleEquivalence0);
      Vector1D.Unit vector1D_Unit0 = orientedPoint0.getDirection();
      Vector1D vector1D0 = interval0.project((Vector1D) vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-980.43904926), (-980.43904926)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(Double.POSITIVE_INFINITY);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-980.43904926), (-980.43904926)).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(1338.1161294, (-980.43904926), precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(Double.POSITIVE_INFINITY);
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-524.73524298), Double.POSITIVE_INFINITY).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(vector1D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.PLUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn((-524.73524298), Double.POSITIVE_INFINITY).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(vector1D_Unit0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = interval0.contains(vector1D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = interval0.contains(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min(0.0, precision_DoubleEquivalence0);
      Vector1D vector1D0 = Vector1D.NaN;
      boolean boolean0 = interval0.contains(vector1D0);
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.25).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.25).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
      assertNotNull(regionLocation0);
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(0.25).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.max(780.319272543376, precision_DoubleEquivalence0);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
      assertFalse(interval0.isFinite());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(4254.0, 4254.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(4254.0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(4254.0, 4254.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(4254.0);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(4254.0, 4254.0).when(precision_DoubleEquivalence0).signum(anyDouble());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.contains(4254.0);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Interval interval0 = Interval.of((OrientedPoint) null, (OrientedPoint) null);
      RegionLocation regionLocation0 = interval0.classify(780.319272543376);
      assertNotNull(regionLocation0);
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min((-390.863487546476), precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      assertNotNull(vector1D0);
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.min((-390.863487546476), precision_DoubleEquivalence0);
      Vector1D vector1D0 = interval0.getCentroid();
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Interval interval0 = Interval.of((OrientedPoint) null, (OrientedPoint) null);
      boolean boolean0 = interval0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.hasMaxBoundary();
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.hasMaxBoundary();
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(vector1D0, vector1D0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.hasMaxBoundary();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.hasMaxBoundary();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Interval interval0 = Interval.min((-2555.8158955202953), (Precision.DoubleEquivalence) null);
      boolean boolean0 = interval0.hasMinBoundary();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Interval interval0 = Interval.min((-2555.8158955202953), (Precision.DoubleEquivalence) null);
      boolean boolean0 = interval0.hasMinBoundary();
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Interval interval0 = Interval.min((-2555.8158955202953), (Precision.DoubleEquivalence) null);
      boolean boolean0 = interval0.hasMinBoundary();
      assertTrue(interval0.isInfinite());
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      String string0 = interval0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.max((-189.53204134020137), precision_DoubleEquivalence0);
      String string0 = interval0.toString();
      assertFalse(interval0.hasMinBoundary());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isEmpty();
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isEmpty();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(0.0, 1.0, precision_DoubleEquivalence0);
      boolean boolean0 = interval0.isEmpty();
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      double double0 = interval0.getBoundarySize();
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      double double0 = interval0.getBoundarySize();
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Interval interval0 = Interval.full();
      boolean boolean0 = interval0.hasMinBoundary();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Interval interval0 = Interval.of(3764.46, 3764.46, precision_DoubleEquivalence0);
      interval0.toTree();
      ;
}
}
