 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = Vectors.linearCombination(2131.1387422, 2903.3997256532803, 2903.3997256532803, 2131.1387422);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = Vectors.normSq(1.0, (-0.9999999999));
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = Vectors.normSq(0.0, 0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = Vectors.normSq((-0.999999999999998), (-0.999999999999998));
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = Vectors.normSq(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = Vectors.norm(0.0, 0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = Vectors.norm(0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = Vectors.norm(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double double0 = Vectors.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, (-315.2112));
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      double double0 = Vectors.linearCombination(0.0, (-1630.9), (-1630.9), 1270.1016, 0.0, (-72.45668));
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = Vectors.linearCombination(0.0, (-1419.961666), 0.0, (-1419.961666));
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Vectors.linearCombination((-1.0), 3978.05, (-1.0), (-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = Vectors.checkedNorm((-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vectors.checkedNorm(0.0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = Vectors.checkedNorm(128.397951454976);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = Vectors.isRealNonZero(1405.6817);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = Vectors.isRealNonZero(0.0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = Vectors.isRealNonZero(Double.POSITIVE_INFINITY);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = Vectors.norm(1405.6817, 2211.0366377430296, 1563.439);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = Vectors.normSq(1.0, 3051.059744068918, (-2551.516));
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = Vectors.normSq(0.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = Vectors.normSq(1563.439);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IllegalArgumentException illegalArgumentException0 = Vectors.illegalNorm(2444341.506721);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = Vectors.linearCombination(320.0, 3.273390607896142E150, 3051.059744068918, 0.0, (-2223.045149750673), 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = Vectors.norm((-967.2962664577253), 1871324.1342061094);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = Vectors.norm(Double.POSITIVE_INFINITY);
      ;
}
