 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((Vector3D) vector3D_Unit0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(499.781, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(3.141592653589793, 3.141592653589793, 3.141592653589793);
      boolean boolean0 = sphericalCoordinates1.equals(sphericalCoordinates0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(3.141592653589793, 3.141592653589793, 3.141592653589793);
      boolean boolean0 = sphericalCoordinates1.equals(sphericalCoordinates0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(3.141592653589793, 3.141592653589793, 3.141592653589793);
      boolean boolean0 = sphericalCoordinates1.equals(sphericalCoordinates0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(3.141592653589793, 3.141592653589793, 3.141592653589793);
      boolean boolean0 = sphericalCoordinates1.equals(sphericalCoordinates0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      sphericalCoordinates0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      sphericalCoordinates0.hashCode();
      assertTrue(sphericalCoordinates0.isNaN());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      sphericalCoordinates0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      sphericalCoordinates0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(1342.429689523293, Double.POSITIVE_INFINITY, 1.4916681462400413E-154);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(1342.429689523293, Double.POSITIVE_INFINITY, 1.4916681462400413E-154);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(1342.429689523293, Double.POSITIVE_INFINITY, 1.4916681462400413E-154);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(1342.429689523293, Double.POSITIVE_INFINITY, 1.4916681462400413E-154);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(0.0, 1.0, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(0.0, 1.0, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(0.0, 1.0, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(0.0, 1.0, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(0.0, 1.0, 1.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((-3.141592653589793), (-5386.954909765198), 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((-3.141592653589793), (-5386.954909765198), 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian((-3.141592653589793), (-5386.954909765198), 0.0);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, Double.NaN, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, Double.NaN, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, Double.NaN, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(Double.POSITIVE_INFINITY, 637.6303654150395, (-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(Double.POSITIVE_INFINITY, 637.6303654150395, (-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(Double.POSITIVE_INFINITY, 637.6303654150395, (-1.0));
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, 3.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, 3.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(0.0, 3.0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(6.696928794914171E299, 4645.812826677649, 3.141592653589793);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(6.696928794914171E299, 4645.812826677649, 3.141592653589793);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector3D vector3D0 = SphericalCoordinates.toCartesian(6.696928794914171E299, 4645.812826677649, 3.141592653589793);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(NaN, NaN, 0.0)");
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(NaN, NaN, 0.0)");
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(NaN, NaN, 0.0)");
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(0.0, 0.0, 0.0)");
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(0.0, 0.0, 0.0)");
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(4.682878303135726, 0.7853981633974483, 1.5707963267948966)");
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(4.682878303135726, 0.7853981633974483, 1.5707963267948966)");
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(4.682878303135726, 0.7853981633974483, 1.5707963267948966)");
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(Infinity, -Infinity, -Infinity)");
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(Infinity, -Infinity, -Infinity)");
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.parse("(Infinity, -Infinity, -Infinity)");
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizePolar(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizeAzimuth(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizeAzimuth(Double.NEGATIVE_INFINITY);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getRadius();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getRadius();
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getRadius();
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      double double0 = sphericalCoordinates0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      double double0 = sphericalCoordinates0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 0.0);
      double double0 = sphericalCoordinates0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-1774.886281501992), 3.141592653589793, Double.NEGATIVE_INFINITY);
      double double0 = sphericalCoordinates0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-1774.886281501992), 3.141592653589793, Double.NEGATIVE_INFINITY);
      double double0 = sphericalCoordinates0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-1774.886281501992), 3.141592653589793, Double.NEGATIVE_INFINITY);
      double double0 = sphericalCoordinates0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      double double0 = sphericalCoordinates0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      double double0 = sphericalCoordinates0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of((-499.781), (-499.781), (-499.781));
      double double0 = sphericalCoordinates0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 3.141592653589793);
      double double0 = sphericalCoordinates0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 3.141592653589793);
      double double0 = sphericalCoordinates0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 3.141592653589793);
      double double0 = sphericalCoordinates0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1731.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-304.63048471266);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1731.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-304.63048471266);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1731.0);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-304.63048471266);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getRadius();
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getRadius();
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getRadius();
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(0.0, Double.NaN, 659.0);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(0.0, Double.NaN, 659.0);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(0.0, Double.NaN, 659.0);
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(527.0, 3.141592653589793, 3.141592653589793);
      double double0 = sphericalCoordinates0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      // Undeclared exception!
      try { 
        SphericalCoordinates.parse("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"\" at index 0: expected \"(\" but found \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      // Undeclared exception!
      try { 
        SphericalCoordinates.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      // Undeclared exception!
      try { 
        SphericalCoordinates.fromCartesian((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.SphericalCoordinates", e);
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizePolar(527.0);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizePolar(Double.NEGATIVE_INFINITY);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3055.81696143, Double.NaN, 1.9005111028024437);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3055.81696143, Double.NaN, 1.9005111028024437);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3055.81696143, Double.NaN, 1.9005111028024437);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isNaN();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = SphericalCoordinates.normalizeAzimuth((-65.0));
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertTrue(sphericalCoordinates1.isNaN());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 2631.6246, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(0.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(0.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(0.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(0.0, 0.0, 0.0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertFalse(sphericalCoordinates1.isInfinite());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.fromCartesian(vector3D1);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, (-1885.44957076), 1.4916681462400413E-154);
      Object object0 = new Object();
      boolean boolean0 = sphericalCoordinates0.equals(object0);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, (-1885.44957076), 1.4916681462400413E-154);
      Object object0 = new Object();
      boolean boolean0 = sphericalCoordinates0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, (-1885.44957076), 1.4916681462400413E-154);
      Object object0 = new Object();
      boolean boolean0 = sphericalCoordinates0.equals(object0);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, (-1885.44957076), 1.4916681462400413E-154);
      Object object0 = new Object();
      boolean boolean0 = sphericalCoordinates0.equals(object0);
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates0);
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates0);
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates0);
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      SphericalCoordinates sphericalCoordinates1 = SphericalCoordinates.of(1.0, 0.0, (-615.36));
      boolean boolean0 = sphericalCoordinates0.equals(sphericalCoordinates1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, 958.81, 1.0);
      boolean boolean0 = sphericalCoordinates0.isFinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, 1.4916681462400413E-154, Double.POSITIVE_INFINITY);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(1.4916681462400413E-154, Double.POSITIVE_INFINITY, 1342.429689523293);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(Double.POSITIVE_INFINITY, (-1.245328525806152), (-1.245328525806152));
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(Double.POSITIVE_INFINITY, (-1.245328525806152), (-1.245328525806152));
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(Double.POSITIVE_INFINITY, (-1.245328525806152), (-1.245328525806152));
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(Double.POSITIVE_INFINITY, (-1.245328525806152), (-1.245328525806152));
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(3.0, 3.0, 3.0);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      assertTrue(sphericalCoordinates0.isNaN());
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      sphericalCoordinates0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      sphericalCoordinates0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      sphericalCoordinates0.hashCode();
      assertTrue(sphericalCoordinates0.isNaN());
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      assertTrue(sphericalCoordinates0.isNaN());
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      boolean boolean0 = sphericalCoordinates0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      String string0 = sphericalCoordinates0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      int int0 = sphericalCoordinates0.getDimension();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.of(Double.NaN, Double.NaN, Double.NaN);
      Vector3D vector3D0 = sphericalCoordinates0.toVector();
      assertTrue(vector3D0.isInfinite());
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      SphericalCoordinates sphericalCoordinates0 = SphericalCoordinates.fromCartesian(vector3D0);
      double double0 = sphericalCoordinates0.getAzimuth();
      ;
}
