/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:28:50 GMT 2022
 */

package org.apache.commons.geometry.euclidean.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.oned.AffineTransformMatrix1D;
import org.apache.commons.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.geometry.euclidean.oned.OrientedPoints;
import org.apache.commons.geometry.euclidean.oned.Vector1D;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OrientedPoints_ESTest extends OrientedPoints_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1426.67);
      Vector1D vector1D0 = Vector1D.of(1426.67);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection((Vector1D) vector1D_Unit0, vector1D0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AffineTransformMatrix1D affineTransformMatrix1D0 = AffineTransformMatrix1D.createScale(1426.67);
      Vector1D vector1D0 = Vector1D.of(1426.67);
      Vector1D.Unit vector1D_Unit0 = affineTransformMatrix1D0.applyDirection(vector1D0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection((Vector1D) vector1D_Unit0, vector1D0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection(vector1D0, true, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection(vector1D0, false, precision_DoubleEquivalence0);
      assertTrue(orientedPoint0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection((Vector1D) vector1D_Unit0, true, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection(vector1D0, vector1D0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection(0.0, false, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection(0.0, false, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection(1389.037, true, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection(1389.037, true, (Precision.DoubleEquivalence) null);
      assertFalse(orientedPoint0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(vector1D0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing((Vector1D) vector1D_Unit0, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(0.0, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(0.0, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(41.90458228363, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(41.90458228363, (Precision.DoubleEquivalence) null);
      assertTrue(orientedPoint0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(vector1D0, precision_DoubleEquivalence0);
      assertFalse(orientedPoint0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.MINUS;
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing((Vector1D) vector1D_Unit0, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(0.0, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(0.0, (Precision.DoubleEquivalence) null);
      assertTrue(orientedPoint0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(1002.0, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(1002.0, (Precision.DoubleEquivalence) null);
      assertTrue(orientedPoint0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        OrientedPoints.fromPointAndDirection((Vector1D) null, (Vector1D) null, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoints", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      // Undeclared exception!
      try { 
        OrientedPoints.fromPointAndDirection(vector1D0, vector1D0, precision_DoubleEquivalence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Oriented point direction cannot be zero
         //
         verifyException("org.apache.commons.geometry.euclidean.oned.OrientedPoints", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector1D.Unit vector1D_Unit0 = Vector1D.Unit.from((-939.73767));
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      OrientedPoint orientedPoint0 = OrientedPoints.fromPointAndDirection((Vector1D) vector1D_Unit0, (Vector1D) vector1D_Unit0, precision_DoubleEquivalence0);
      assertTrue(orientedPoint0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing(vector1D0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing((-939.73767), precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing((-939.73767), precision_DoubleEquivalence0);
      assertFalse(orientedPoint0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createNegativeFacing(vector1D0, precision_DoubleEquivalence0);
      assertFalse(orientedPoint0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection((-1.651), true, precision_DoubleEquivalence0);
      assertFalse(orientedPoint0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.fromLocationAndDirection((-1.651), true, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing((-1.651), precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      OrientedPoint orientedPoint0 = OrientedPoints.createPositiveFacing((-1.651), precision_DoubleEquivalence0);
      ;
}
}
