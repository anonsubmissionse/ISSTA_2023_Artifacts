 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.identity();
      Line3D line3D1 = line3D0.transform(affineTransformMatrix3D0);
      ReverseRay3D reverseRay3D0 = line3D1.reverseRayTo(0.0);
      ReverseRay3D reverseRay3D1 = reverseRay3D0.transform(affineTransformMatrix3D0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0, (Vector3D) vector3D_Unit0);
      ReverseRay3D reverseRay3D1 = reverseRay3D0.transform(affineTransformMatrix3D0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1177.99064690699));
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((Vector3D) vector3D_Unit0);
      ReverseRay3D reverseRay3D1 = reverseRay3D0.transform(affineTransformMatrix3D0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, 1284.3);
      double double0 = reverseRay3D0.getSubspaceEnd();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1177.99064690699));
      double double0 = reverseRay3D0.getSubspaceEnd();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Vector3D vector3D0 = Vector3D.NaN;
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, (-989.8379163556424));
      reverseRay3D0.getEndPoint();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((Vector3D) vector3D_Unit0);
      reverseRay3D0.getEndPoint();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_X;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, 3.141592653589793);
      Vector3D vector3D1 = reverseRay3D0.getEndPoint();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1306.46117433));
      Vector3D vector3D0 = reverseRay3D0.getEndPoint();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(0.0, 0.0, (-1.0));
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, (Precision.DoubleEquivalence) null);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((Vector3D) vector3D_Unit0);
      reverseRay3D0.getEndPoint();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = line3D0.reverseRayTo((-1306.46117433));
      reverseRay3D0.containsAbscissa(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 707.9068659123387);
      // Undeclared exception!
      try { 
        reverseRay3D0.transform((Transform<Vector3D>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 371.61109061);
      // Undeclared exception!
      try { 
        reverseRay3D0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 0.0);
      // Undeclared exception!
      try { 
        reverseRay3D0.containsAbscissa(1.0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YZX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      ReverseRay3D reverseRay3D0 = null;
      try {
        reverseRay3D0 = new ReverseRay3D((Line3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReverseRay3D reverseRay3D0 = new ReverseRay3D((Line3D) null, 0.5);
      // Undeclared exception!
      try { 
        reverseRay3D0.getEndPoint();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.ReverseRay3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.getCentroid();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.containsAbscissa(0.0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.getStartPoint();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        reverseRay3D0.transform(affineTransformMatrix3D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Line direction cannot be zero
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.line.Lines3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSubspaceEnd();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSubspaceStart();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSubspaceStart();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      boolean boolean0 = reverseRay3D0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      boolean boolean0 = reverseRay3D0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      reverseRay3D0.getBounds();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSize();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      double double0 = reverseRay3D0.getSize();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      String string0 = reverseRay3D0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      String string0 = reverseRay3D0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      boolean boolean0 = reverseRay3D0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      Line3D line3D0 = new Line3D(vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0);
      ReverseRay3D reverseRay3D0 = new ReverseRay3D(line3D0, vector3D_Unit0);
      boolean boolean0 = reverseRay3D0.isInfinite();
      assertTrue(boolean0);
}
