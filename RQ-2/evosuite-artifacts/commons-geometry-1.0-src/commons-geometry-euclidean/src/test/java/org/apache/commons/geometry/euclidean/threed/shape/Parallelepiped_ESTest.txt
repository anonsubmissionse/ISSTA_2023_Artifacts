 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      // Undeclared exception!
      try { 
        Parallelepiped.axisAligned(vector3D0, vector3D0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XZY;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 3637.52, 3637.52, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Vector3D vector3D1 = quaternionRotation0.applyVector(vector3D0);
      // Undeclared exception!
      try { 
        Parallelepiped.axisAligned(vector3D1, vector3D0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.createScale((-0.999999999999998));
      // Undeclared exception!
      try { 
        Parallelepiped.fromTransformedUnitCube(affineTransformMatrix3D0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.K;
      QuaternionRotation quaternionRotation0 = QuaternionRotation.of(quaternion0);
      // Undeclared exception!
      try { 
        Parallelepiped.fromTransformedUnitCube(quaternionRotation0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      Vector3D vector3D0 = Vector3D.ZERO;
      Parallelepiped.Builder parallelepiped_Builder1 = parallelepiped_Builder0.setPosition(vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      Parallelepiped.Builder parallelepiped_Builder1 = parallelepiped_Builder0.setScale(3.0, 0.0, 0.5);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      Parallelepiped.Builder parallelepiped_Builder1 = parallelepiped_Builder0.setScale((Vector3D) null);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      // Undeclared exception!
      try { 
        parallelepiped_Builder0.build();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.identity();
      Parallelepiped.Builder parallelepiped_Builder1 = parallelepiped_Builder0.setRotation(quaternionRotation0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Parallelepiped.Builder parallelepiped_Builder0 = Parallelepiped.builder((Precision.DoubleEquivalence) null);
      Parallelepiped.Builder parallelepiped_Builder1 = parallelepiped_Builder0.setScale(0.5);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parallelepiped.unitCube((Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.shape.Parallelepiped", e);
      }
  }
