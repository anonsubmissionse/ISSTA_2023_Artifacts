 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D1 = vector3D0.add(0.0, (Vector3D) vector3D_Unit1);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.from(vector3D1);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit0, vector3D1, vector3D_Unit2);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Vector3D.centroid((Vector3D) vector3D_Unit2, vector3DArray0);
      Vector3D vector3D2 = axisSequence0.getAxis2();
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit2.normalizeOrNull();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit2.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit4, vector3D_Unit5, vector3D_Unit3);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D1 = vector3D0.add(0.0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit0, vector3D1, vector3D2);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Vector3D vector3D3 = Vector3D.centroid(vector3D2, vector3DArray0);
      Vector3D vector3D4 = axisSequence0.getAxis2();
      StlUtils.determineNormal(vector3D2, vector3D1, vector3D_Unit0, vector3D4);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit3 = vector3D2.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D3, vector3D2, vector3D4);
      StlUtils.byteBuffer(635882485);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.273390607896142E150, 0.0, 3.273390607896142E150);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit1, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = vector3D_Unit3.reject((Vector3D) vector3D_Unit4);
      vector3D_Unit4.distance((Vector3D) vector3D_Unit1);
      vector3D_Unit3.isFinite();
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit3.orthogonal((Vector3D) vector3D_Unit4);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D_Unit4, vector3D_Unit4, vector3D_Unit3);
      Vector3D.Unit vector3D_Unit6 = Vector3D.Unit.from(3.273390607896142E150, (double) 6, (double) 6);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit5, vector3D1, vector3D_Unit0, vector3D_Unit6);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.273390607896142E150, 0.0, 3.273390607896142E150);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit1, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = vector3D_Unit3.reject((Vector3D) vector3D_Unit4);
      vector3D_Unit4.distance((Vector3D) vector3D_Unit1);
      vector3D_Unit3.isFinite();
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit3.orthogonal((Vector3D) vector3D_Unit4);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D_Unit4, vector3D_Unit4, vector3D_Unit3);
      Vector3D.Unit vector3D_Unit6 = Vector3D.Unit.from(3.273390607896142E150, (double) 6, (double) 6);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit5, vector3D1, vector3D_Unit0, vector3D_Unit6);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit4, vector3D_Unit2, vector3D_Unit6, vector3D1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.273390607896142E150, 0.0, 3.273390607896142E150);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit1, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = vector3D_Unit3.reject((Vector3D) vector3D_Unit4);
      vector3D_Unit4.distance((Vector3D) vector3D_Unit1);
      vector3D_Unit3.isFinite();
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit3.orthogonal((Vector3D) vector3D_Unit4);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D_Unit4, vector3D_Unit4, vector3D_Unit3);
      Vector3D.Unit vector3D_Unit6 = Vector3D.Unit.from(3.273390607896142E150, (double) 6, (double) 6);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit5, vector3D1, vector3D_Unit0, vector3D_Unit6);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit4, vector3D_Unit2, vector3D_Unit6, vector3D1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.273390607896142E150, 0.0, 3.273390607896142E150);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit1, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = vector3D_Unit3.reject((Vector3D) vector3D_Unit4);
      vector3D_Unit4.distance((Vector3D) vector3D_Unit1);
      vector3D_Unit3.isFinite();
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit3.orthogonal((Vector3D) vector3D_Unit4);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D_Unit4, vector3D_Unit4, vector3D_Unit3);
      Vector3D.Unit vector3D_Unit6 = Vector3D.Unit.from(3.273390607896142E150, (double) 6, (double) 6);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit5, vector3D1, vector3D_Unit0, vector3D_Unit6);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit4, vector3D_Unit2, vector3D_Unit6, vector3D1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit7 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit7, vector3D_Unit7, vector3D0, vector3D1);
      Vector3D.Unit vector3D_Unit8 = vector3D_Unit1.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D_Unit7, vector3D_Unit1, vector3D_Unit8, vector3D_Unit4);
      vector3D1.transform(quaternionRotation0);
      Vector3D.Unit vector3D_Unit9 = vector3D_Unit1.normalize();
      boolean boolean1 = StlUtils.pointsAreCounterClockwise(vector3D3, vector3D_Unit7, vector3D_Unit9, vector3D3);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(3.273390607896142E150, 0.0, 3.273390607896142E150);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.orthogonal();
      StlUtils.pointsAreCounterClockwise(vector3D_Unit1, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit3 = vector3D_Unit0.negate();
      Vector3D.Unit vector3D_Unit4 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = vector3D_Unit3.reject((Vector3D) vector3D_Unit4);
      vector3D_Unit4.distance((Vector3D) vector3D_Unit1);
      vector3D_Unit3.isFinite();
      Vector3D.Unit vector3D_Unit5 = vector3D_Unit3.orthogonal((Vector3D) vector3D_Unit4);
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit3, vector3D_Unit4, vector3D_Unit4, vector3D_Unit3);
      Vector3D.Unit vector3D_Unit6 = Vector3D.Unit.from(3.273390607896142E150, (double) 6, (double) 6);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit5, vector3D1, vector3D_Unit0, vector3D_Unit6);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit4, vector3D_Unit2, vector3D_Unit6, vector3D1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit7 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit7, vector3D_Unit7, vector3D0, vector3D1);
      Vector3D.Unit vector3D_Unit8 = vector3D_Unit1.negate();
      QuaternionRotation quaternionRotation0 = QuaternionRotation.createBasisRotation(vector3D_Unit7, vector3D_Unit1, vector3D_Unit8, vector3D_Unit4);
      vector3D1.transform(quaternionRotation0);
      Vector3D.Unit vector3D_Unit9 = vector3D_Unit1.normalize();
      boolean boolean1 = StlUtils.pointsAreCounterClockwise(vector3D3, vector3D_Unit7, vector3D_Unit9, vector3D3);
      StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit4, vector3D1, vector3D3);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalize();
      Vector3D vector3D0 = vector3D_Unit0.subtract(0.0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D1 = Vector3D.of((-1519.96533209), (-1519.96533209), Double.POSITIVE_INFINITY);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit1);
      AffineTransformMatrix3D.createTranslation((Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D.createTranslation((-1.0), (-230.388), (-1519.96533209));
      Vector3D.Unit vector3D_Unit2 = affineTransformMatrix3D0.applyDirection((Vector3D) vector3D_Unit1);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit2, vector3D_Unit2, vector3D_Unit0);
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit1;
      vector3DArray0[2] = (Vector3D) vector3D_Unit1;
      vector3DArray0[3] = (Vector3D) vector3D_Unit1;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = vector3D1;
      vector3DArray0[6] = vector3D1;
      Vector3D vector3D2 = Vector3D.centroid(vector3D0, vector3DArray0);
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit0, vector3D2, vector3DArray0[1], vector3D1);
      StlUtils.determineNormal(vector3D2, vector3D3, vector3D1, vector3D2);
      StlUtils.determineNormal(vector3DArray0[0], vector3DArray0[3], vector3DArray0[0], vector3D_Unit0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-924.52), 1.0, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.createRotation(vector3DArray0[1], quaternionRotation0);
      Vector3D.Unit vector3D_Unit3 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit4 = affineTransformMatrix3D1.applyDirection((Vector3D) vector3D_Unit3);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit4, vector3D1, vector3D1, vector3D_Unit4);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalize();
      Vector3D vector3D0 = vector3D_Unit0.subtract(0.0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D1 = Vector3D.of((-1519.96533209), (-1519.96533209), Double.POSITIVE_INFINITY);
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit1, (Vector3D) vector3D_Unit1);
      AffineTransformMatrix3D.createTranslation((Vector3D) vector3D_Unit0);
      AffineTransformMatrix3D.createTranslation((-1.0), (-230.388), (-1519.96533209));
      Vector3D.Unit vector3D_Unit2 = affineTransformMatrix3D0.applyDirection((Vector3D) vector3D_Unit1);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit2, vector3D_Unit2, vector3D_Unit0);
      Vector3D[] vector3DArray0 = new Vector3D[7];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit1;
      vector3DArray0[2] = (Vector3D) vector3D_Unit1;
      vector3DArray0[3] = (Vector3D) vector3D_Unit1;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = vector3D1;
      vector3DArray0[6] = vector3D1;
      Vector3D vector3D2 = Vector3D.centroid(vector3D0, vector3DArray0);
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit0, vector3D2, vector3DArray0[1], vector3D1);
      StlUtils.determineNormal(vector3D2, vector3D3, vector3D1, vector3D2);
      StlUtils.determineNormal(vector3DArray0[0], vector3DArray0[3], vector3DArray0[0], vector3D_Unit0);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, (-924.52), 1.0, 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      AffineTransformMatrix3D affineTransformMatrix3D1 = AffineTransformMatrix3D.createRotation(vector3DArray0[1], quaternionRotation0);
      Vector3D.Unit vector3D_Unit3 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit4 = affineTransformMatrix3D1.applyDirection((Vector3D) vector3D_Unit3);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D_Unit4, vector3D1, vector3D1, vector3D_Unit4);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(857);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D vector3D1 = Vector3D.NaN;
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D1);
      assertEquals(vector3D0, vector3D2);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D vector3D1 = Vector3D.NaN;
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D1);
      StlUtils.byteBuffer(229);
      AxisSequence axisSequence1 = AxisSequence.YZY;
      Vector3D vector3D3 = axisSequence1.getAxis3();
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D3, vector3D1, vector3D2);
      StlUtils.byteBuffer(335);
      StlUtils.byteBuffer(0);
      StlUtils.byteBuffer(565);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D1, vector3D1, vector3D2);
      Vector3D vector3D4 = Vector3D.of((double) 565, 4107.84904515, 0.6);
      Vector3D.Unit vector3D_Unit0 = vector3D4.directionTo(vector3D0);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.normalize();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D2, vector3D0, vector3D_Unit2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D vector3D1 = Vector3D.NaN;
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D1);
      StlUtils.byteBuffer(229);
      AxisSequence axisSequence1 = AxisSequence.YZY;
      Vector3D vector3D3 = axisSequence1.getAxis3();
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D3, vector3D1, vector3D2);
      StlUtils.byteBuffer(335);
      StlUtils.byteBuffer(0);
      StlUtils.byteBuffer(565);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D1, vector3D1, vector3D2);
      Vector3D vector3D4 = Vector3D.of((double) 565, 4107.84904515, 0.6);
      Vector3D.Unit vector3D_Unit0 = vector3D4.directionTo(vector3D0);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.normalize();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D2, vector3D0, vector3D_Unit2);
      StlUtils.byteBuffer(0);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.ZXZ;
      Vector3D vector3D0 = axisSequence0.getAxis2();
      Vector3D vector3D1 = Vector3D.NaN;
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D1);
      StlUtils.byteBuffer(229);
      AxisSequence axisSequence1 = AxisSequence.YZY;
      Vector3D vector3D3 = axisSequence1.getAxis3();
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D3, vector3D1, vector3D2);
      StlUtils.byteBuffer(335);
      StlUtils.byteBuffer(0);
      StlUtils.byteBuffer(565);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D1, vector3D1, vector3D2);
      Vector3D vector3D4 = Vector3D.of((double) 565, 4107.84904515, 0.6);
      Vector3D.Unit vector3D_Unit0 = vector3D4.directionTo(vector3D0);
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull();
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.normalize();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D2, vector3D0, vector3D_Unit2);
      StlUtils.byteBuffer(0);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      Vector3D.Unit vector3D_Unit3 = Vector3D.Unit.MINUS_Z;
      boolean boolean1 = StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D0, vector3D_Unit2, vector3D_Unit3);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0, (-221.9), (-221.9));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D0);
      StlUtils.determineNormal(vector3D1, vector3D1, vector3D1, vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y;
      AxisSequence axisSequence0 = AxisSequence.YXZ;
      AxisAngleSequence axisAngleSequence0 = AxisAngleSequence.createRelative(axisSequence0, 0, (-221.9), (-221.9));
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D0 = quaternionRotation0.getAxis();
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D0);
      StlUtils.determineNormal(vector3D1, vector3D1, vector3D1, vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      Vector3D vector3D0 = vector3D_Unit0.add((Vector3D) vector3D_Unit1);
      Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.normalizeOrNull();
      Vector3D.Unit vector3D_Unit3 = Vector3D.Unit.from((Vector3D) vector3D_Unit2);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble());
      vector3D0.withNorm(2332.54617702);
      vector3D_Unit2.isZero(precision_DoubleEquivalence0);
      Vector3D[] vector3DArray0 = new Vector3D[8];
      vector3DArray0[0] = (Vector3D) vector3D_Unit1;
      vector3DArray0[1] = (Vector3D) vector3D_Unit2;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = (Vector3D) vector3D_Unit1;
      vector3D0.orthogonal();
      vector3DArray0[6] = (Vector3D) vector3D_Unit1;
      Vector3D.Unit.from((Vector3D) vector3D_Unit3);
      vector3DArray0[7] = vector3D0;
      Vector3D.max((Vector3D) vector3D_Unit1, vector3DArray0);
      StlUtils.determineNormal(vector3D_Unit2, vector3D_Unit2, vector3D_Unit0, vector3D_Unit1);
      // Undeclared exception!
      try { 
        StlUtils.pointsAreCounterClockwise(vector3DArray0[6], (Vector3D) null, vector3DArray0[1], vector3DArray0[5]);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.Vector3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1372.11150689402);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      Vector3D vector3D0 = Vector3D.of(doubleArray0);
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D1 = vector3D0.add(0.0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit0, vector3D1, vector3D2);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Vector3D.centroid(vector3D2, vector3DArray0);
      Vector3D vector3D3 = axisSequence0.getAxis2();
      Vector3D vector3D4 = StlUtils.determineNormal(vector3D2, vector3D1, vector3D_Unit0, vector3D3);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit3 = vector3D2.orthogonal();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D3, vector3D_Unit2, vector3D_Unit3, vector3D4);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.negate();
      Vector3D vector3D1 = vector3D0.add(0.0, (Vector3D) vector3D_Unit1);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit0, vector3D1, vector3D2);
      Vector3D[] vector3DArray0 = new Vector3D[0];
      Vector3D.centroid(vector3D2, vector3DArray0);
      Vector3D vector3D3 = axisSequence0.getAxis2();
      Vector3D vector3D4 = StlUtils.determineNormal(vector3D2, vector3D1, vector3D_Unit0, vector3D3);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit3 = vector3D2.orthogonal();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D3, vector3D_Unit2, vector3D_Unit3, vector3D4);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = vector3D_Unit0.lerp((Vector3D) vector3D_Unit1, 0.0);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_Y;
      vector3D0.toString();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2);
      Vector3D vector3D1 = vector3D_Unit0.transform(affineTransformMatrix3D0);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      affineTransformMatrix3D0.scale(0.0, (-741.062302270303), Double.NEGATIVE_INFINITY);
      vector3D1.directionTo((Vector3D) vector3D_Unit1);
      StlUtils.byteBuffer(0);
      Vector3D vector3D2 = vector3D1.subtract((-1.0), vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D_Unit0, vector3D_Unit1, vector3D_Unit2);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit1, vector3D1, vector3D_Unit1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = vector3D_Unit0.lerp((Vector3D) vector3D_Unit1, 0.0);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_Y;
      vector3D0.toString();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2);
      Vector3D vector3D1 = vector3D_Unit0.transform(affineTransformMatrix3D0);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      affineTransformMatrix3D0.scale(0.0, (-741.062302270303), Double.NEGATIVE_INFINITY);
      vector3D1.directionTo((Vector3D) vector3D_Unit1);
      StlUtils.byteBuffer(0);
      Vector3D vector3D2 = vector3D1.subtract((-1.0), vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D_Unit0, vector3D_Unit1, vector3D_Unit2);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit1, vector3D1, vector3D_Unit1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit0, vector3D2, vector3D_Unit2);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 1.0, (-2158.7613685322945), 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D4 = quaternionRotation0.getAxis();
      Vector3D vector3D5 = quaternionRotation0.apply(vector3D0);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D4, vector3D_Unit2, vector3D5);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Vector3D.Unit vector3D_Unit1 = Vector3D.Unit.MINUS_Y;
      Vector3D vector3D0 = vector3D_Unit0.lerp((Vector3D) vector3D_Unit1, 0.0);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_Y;
      vector3D0.toString();
      AffineTransformMatrix3D affineTransformMatrix3D0 = AffineTransformMatrix3D.fromColumnVectors((Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2, (Vector3D) vector3D_Unit2);
      Vector3D vector3D1 = vector3D_Unit0.transform(affineTransformMatrix3D0);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      affineTransformMatrix3D0.scale(0.0, (-741.062302270303), Double.NEGATIVE_INFINITY);
      vector3D1.directionTo((Vector3D) vector3D_Unit1);
      StlUtils.byteBuffer(0);
      Vector3D vector3D2 = vector3D1.subtract((-1.0), vector3D0);
      StlUtils.pointsAreCounterClockwise(vector3D0, vector3D_Unit0, vector3D_Unit1, vector3D_Unit2);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D_Unit1, vector3D1, vector3D_Unit1);
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0);
      Vector3D vector3D3 = StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit0, vector3D2, vector3D_Unit2);
      AxisReferenceFrame axisReferenceFrame0 = AxisReferenceFrame.ABSOLUTE;
      AxisSequence axisSequence0 = AxisSequence.YZY;
      AxisAngleSequence axisAngleSequence0 = new AxisAngleSequence(axisReferenceFrame0, axisSequence0, 1.0, (-2158.7613685322945), 0.0);
      QuaternionRotation quaternionRotation0 = QuaternionRotation.fromAxisAngleSequence(axisAngleSequence0);
      Vector3D vector3D4 = quaternionRotation0.getAxis();
      Vector3D vector3D5 = quaternionRotation0.apply(vector3D0);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D4, vector3D_Unit2, vector3D5);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.of(Double.NaN, 0.0, 0.0);
      Vector3D[] vector3DArray0 = new Vector3D[5];
      vector3DArray0[0] = vector3D0;
      vector3DArray0[1] = vector3D0;
      vector3DArray0[2] = vector3D0;
      vector3DArray0[3] = vector3D0;
      vector3DArray0[4] = vector3D0;
      Vector3D vector3D1 = Vector3D.centroid(vector3D0, vector3DArray0);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D0, vector3D0, vector3D1, vector3D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.from(1675.412693692, 1675.412693692, 1675.412693692);
      Vector3D vector3D0 = StlUtils.determineNormal((Vector3D) null, (Vector3D) null, (Vector3D) null, vector3D_Unit0);
      assertTrue(vector3D0.isInfinite());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.YXY;
      Vector3D vector3D0 = axisSequence0.getAxis1();
      AxisSequence axisSequence1 = AxisSequence.XZX;
      Vector3D vector3D1 = axisSequence1.getAxis2();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D0, vector3D1, vector3D1, vector3D1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      vector3D_Unit0.withNorm(1.0);
      Vector3D[] vector3DArray0 = new Vector3D[6];
      vector3DArray0[0] = (Vector3D) vector3D_Unit0;
      vector3DArray0[1] = (Vector3D) vector3D_Unit0;
      vector3DArray0[2] = (Vector3D) vector3D_Unit0;
      vector3DArray0[3] = (Vector3D) vector3D_Unit0;
      vector3DArray0[4] = (Vector3D) vector3D_Unit0;
      vector3DArray0[5] = (Vector3D) vector3D_Unit0;
      Vector3D vector3D0 = Vector3D.centroid((Vector3D) vector3D_Unit0, vector3DArray0);
      Vector3D.max(vector3DArray0[4], vector3DArray0);
      vector3D0.withNorm(0.0);
      StlUtils.pointsAreCounterClockwise(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D0);
      Vector3D vector3D1 = null;
      StlUtils.pointsAreCounterClockwise(vector3DArray0[3], vector3DArray0[0], vector3DArray0[0], (Vector3D) null);
      StlUtils.byteBuffer(272);
      // Undeclared exception!
      try { 
        StlUtils.byteBuffer((-526));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        StlUtils.determineNormal((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.stl.StlUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        vector3D1.orthogonal();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Y;
      Vector3D vector3D0 = StlUtils.determineNormal(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D0, vector3D0, vector3D0, vector3D0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D0, vector3D_Unit0, vector3D_Unit2);
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D_Unit2, vector3D_Unit1, vector3D_Unit0, vector3D0);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit1, vector3D_Unit2, vector3D0);
      assertEquals(vector3D0, vector3D2);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D0, vector3D_Unit0, vector3D_Unit2);
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D_Unit2, vector3D_Unit1, vector3D_Unit0, vector3D0);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit1, vector3D_Unit2, vector3D0);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit1, vector3D1, vector3D2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Z;
      Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.orthogonal();
      ByteBuffer byteBuffer0 = StlUtils.byteBuffer(6);
      Vector3D.Unit vector3D_Unit2 = Vector3D.Unit.PLUS_X;
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      StlUtils.pointsAreCounterClockwise(vector3D_Unit2, vector3D0, vector3D_Unit0, vector3D_Unit2);
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D_Unit2, vector3D_Unit1, vector3D_Unit0, vector3D0);
      Vector3D vector3D2 = StlUtils.determineNormal(vector3D_Unit1, vector3D_Unit1, vector3D_Unit2, vector3D0);
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D_Unit1, vector3D1, vector3D2);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StlUtils.pointsAreCounterClockwise((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
      // Undeclared exception!
      try { 
        StlUtils.determineNormal((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.stl.StlUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AxisSequence axisSequence0 = AxisSequence.XYX;
      Vector3D vector3D0 = axisSequence0.getAxis3();
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Vector3D vector3D1 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D2 = axisSequence0.getAxis2();
      boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D0, vector3D_Unit0, vector3D1);
      assertTrue(boolean0);
}
