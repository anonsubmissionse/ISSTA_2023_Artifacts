/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 02:01:54 GMT 2022
 */

package org.apache.commons.geometry.io.euclidean.threed.txt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.nio.charset.Charset;
import org.apache.commons.geometry.io.core.output.GeometryOutput;
import org.apache.commons.geometry.io.euclidean.threed.txt.TextBoundaryWriteHandler3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextBoundaryWriteHandler3D_ESTest extends TextBoundaryWriteHandler3D_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexSeparator());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexSeparator((String) null);
      textBoundaryWriteHandler3D0.getVertexSeparator();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexComponentSeparator());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexSeparator((String) null);
      textBoundaryWriteHandler3D0.getVertexSeparator();
      assertEquals(1, textBoundaryWriteHandler3D0.getFacetVertexCount());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexSeparator());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexSeparator("");
      textBoundaryWriteHandler3D0.getVertexSeparator();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexComponentSeparator());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexComponentSeparator());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexComponentSeparator((String) null);
      textBoundaryWriteHandler3D0.getVertexComponentSeparator();
      assertEquals(1, textBoundaryWriteHandler3D0.getFacetVertexCount());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexComponentSeparator((String) null);
      textBoundaryWriteHandler3D0.getVertexComponentSeparator();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexSeparator());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexComponentSeparator());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setVertexComponentSeparator("");
      textBoundaryWriteHandler3D0.getVertexComponentSeparator();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setFacetVertexCount(326);
      int int0 = textBoundaryWriteHandler3D0.getFacetVertexCount();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      Charset charset0 = textBoundaryWriteHandler3D0.getDefaultCharset();
      textBoundaryWriteHandler3D0.setFacetVertexCount(326);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0).when(geometryOutput0).getCharset();
      doReturn(outputStream0).when(geometryOutput0).getOutputStream();
      textBoundaryWriteHandler3D0.getFacetDefinitionWriter(geometryOutput0);
      assertEquals(1, textBoundaryWriteHandler3D0.getFacetVertexCount());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexComponentSeparator();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexComponentSeparator();
      assertEquals(1, textBoundaryWriteHandler3D0.getFacetVertexCount());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexComponentSeparator();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexSeparator());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.getFormat();
      assertEquals(1, textBoundaryWriteHandler3D0.getFacetVertexCount());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.getFormat();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexSeparator());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.getFormat();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexComponentSeparator());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      assertEquals(0, textBoundaryWriteHandler3D0.getFacetVertexCount());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      textBoundaryWriteHandler3D0.setFacetVertexCount(0);
      int int0 = textBoundaryWriteHandler3D0.getFacetVertexCount();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      int int0 = textBoundaryWriteHandler3D0.getFacetVertexCount();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexSeparator());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      int int0 = textBoundaryWriteHandler3D0.getFacetVertexCount();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexComponentSeparator());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      int int0 = textBoundaryWriteHandler3D0.getFacetVertexCount();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexSeparator();
      assertEquals(1, textBoundaryWriteHandler3D0.getFacetVertexCount());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexSeparator();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      String string0 = textBoundaryWriteHandler3D0.getVertexSeparator();
      assertNotNull(textBoundaryWriteHandler3D0.getVertexComponentSeparator());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextBoundaryWriteHandler3D textBoundaryWriteHandler3D0 = new TextBoundaryWriteHandler3D();
      Charset charset0 = textBoundaryWriteHandler3D0.getDefaultCharset();
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      GeometryOutput geometryOutput0 = mock(GeometryOutput.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, (Charset) null).when(geometryOutput0).getCharset();
      doReturn(outputStream0).when(geometryOutput0).getOutputStream();
      // Undeclared exception!
      try { 
        textBoundaryWriteHandler3D0.getFacetDefinitionWriter(geometryOutput0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }
}
