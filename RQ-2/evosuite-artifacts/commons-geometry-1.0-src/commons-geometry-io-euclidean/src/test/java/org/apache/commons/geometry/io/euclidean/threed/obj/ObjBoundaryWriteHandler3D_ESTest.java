/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:53:31 GMT 2022
 */

package org.apache.commons.geometry.io.euclidean.threed.obj;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.UncheckedIOException;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.DoubleFunction;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.apache.commons.geometry.euclidean.threed.BoundarySource3D;
import org.apache.commons.geometry.euclidean.threed.ConvexVolume;
import org.apache.commons.geometry.euclidean.threed.PlaneConvexSubset;
import org.apache.commons.geometry.euclidean.threed.RegionBSPTree3D;
import org.apache.commons.geometry.io.core.output.FileGeometryOutput;
import org.apache.commons.geometry.io.core.output.GeometryOutput;
import org.apache.commons.geometry.io.core.output.StreamGeometryOutput;
import org.apache.commons.geometry.io.euclidean.threed.FacetDefinition;
import org.apache.commons.geometry.io.euclidean.threed.SimpleFacetDefinition;
import org.apache.commons.geometry.io.euclidean.threed.obj.ObjBoundaryWriteHandler3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjBoundaryWriteHandler3D_ESTest extends ObjBoundaryWriteHandler3D_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      MockFile mockFile0 = new MockFile("L2d@V9.}H%}-qR", "c3q-(3rE]!:0=*}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockPrintStream0);
      objBoundaryWriteHandler3D0.write((BoundarySource3D) regionBSPTree3D0, (GeometryOutput) streamGeometryOutput0);
      assertNotNull(objBoundaryWriteHandler3D0.getLineSeparator());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      MockFile mockFile0 = new MockFile("L2d@V9.}H%}-qR", "c3q-(3rE]!:0=*}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockPrintStream0);
      objBoundaryWriteHandler3D0.write((BoundarySource3D) regionBSPTree3D0, (GeometryOutput) streamGeometryOutput0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      assertEquals(0, objBoundaryWriteHandler3D0.getMeshBufferBatchSize());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setMeshBufferBatchSize(0);
      int int0 = objBoundaryWriteHandler3D0.getMeshBufferBatchSize();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setMeshBufferBatchSize(497);
      int int0 = objBoundaryWriteHandler3D0.getMeshBufferBatchSize();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      assertNotNull(objBoundaryWriteHandler3D0.getLineSeparator());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setLineSeparator((String) null);
      objBoundaryWriteHandler3D0.getLineSeparator();
      assertEquals(0, objBoundaryWriteHandler3D0.getMeshBufferBatchSize());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      assertNotNull(objBoundaryWriteHandler3D0.getLineSeparator());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setLineSeparator("");
      objBoundaryWriteHandler3D0.getLineSeparator();
      assertEquals(1, objBoundaryWriteHandler3D0.getMeshBufferBatchSize());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setDoubleFormat((DoubleFunction<String>) null);
      objBoundaryWriteHandler3D0.getDoubleFormat();
      assertEquals(1, objBoundaryWriteHandler3D0.getMeshBufferBatchSize());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setDoubleFormat((DoubleFunction<String>) null);
      objBoundaryWriteHandler3D0.getDoubleFormat();
      assertNotNull(objBoundaryWriteHandler3D0.getLineSeparator());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setDefaultCharset((Charset) null);
      objBoundaryWriteHandler3D0.getDefaultCharset();
      assertNotNull(objBoundaryWriteHandler3D0.getLineSeparator());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.setDefaultCharset((Charset) null);
      objBoundaryWriteHandler3D0.getDefaultCharset();
      assertEquals(1, objBoundaryWriteHandler3D0.getMeshBufferBatchSize());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      UnaryOperator<SimpleFacetDefinition> unaryOperator0 = UnaryOperator.identity();
      Stream<SimpleFacetDefinition> stream0 = Stream.iterate((SimpleFacetDefinition) null, unaryOperator0);
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput((Path) null);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) fileGeometryOutput0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      Stream<SimpleFacetDefinition> stream0 = Stream.empty();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, "\n");
      objBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException("java.util.stream.AbstractPipeline", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stream<SimpleFacetDefinition> stream0 = Stream.empty();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, "org.apache.commons.geometry.euclidean.threed.rotation.AxisReferenceFrame");
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail("Expecting exception: UncheckedIOException");
      } catch(UncheckedIOException e) {
         //
         // IOException: Simulated IOException
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      ConvexVolume convexVolume0 = ConvexVolume.full();
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((BoundarySource3D) convexVolume0, (GeometryOutput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      RegionBSPTree3D regionBSPTree3D0 = RegionBSPTree3D.empty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*e 2'gyp]");
      Charset charset0 = Charset.defaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, "A", charset0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((BoundarySource3D) regionBSPTree3D0, (GeometryOutput) streamGeometryOutput0);
        fail("Expecting exception: UncheckedIOException");
      } catch(UncheckedIOException e) {
         //
         // IOException: Simulated IOException
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputStream outputStream0 = null;
      Locale locale0 = new Locale("", "");
      Locale locale1 = Locale.CHINESE;
      locale0.getDisplayVariant(locale1);
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      PlaneConvexSubset planeConvexSubset0 = mock(PlaneConvexSubset.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(planeConvexSubset0).isInfinite();
      doReturn(false).when(planeConvexSubset0).isEmpty();
      doReturn((List) null).when(planeConvexSubset0).getVertices();
      Supplier<PlaneConvexSubset> supplier0 = (Supplier<PlaneConvexSubset>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(planeConvexSubset0).when(supplier0).get();
      Stream<PlaneConvexSubset> stream0 = Stream.generate(supplier0);
      objBoundaryWriteHandler3D0.getLineSeparator();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.lookupTag(linkedList0, arrayList0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(pipedOutputStream0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter$MeshBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      PlaneConvexSubset planeConvexSubset0 = mock(PlaneConvexSubset.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(planeConvexSubset0).toString();
      doReturn(true).when(planeConvexSubset0).isInfinite();
      Supplier<PlaneConvexSubset> supplier0 = (Supplier<PlaneConvexSubset>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(planeConvexSubset0).when(supplier0).get();
      Stream<PlaneConvexSubset> stream0 = Stream.generate(supplier0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(pipedOutputStream0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // OBJ input geometry cannot be infinite: null
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter$MeshBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      Stream<PlaneConvexSubset> stream0 = Stream.empty();
      MockFile mockFile0 = new MockFile("G\"&zq%9q$");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = objBoundaryWriteHandler3D0.getDefaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, "org.apache.commons.geometry.io.euclidean.threed.obj.ObjBoundaryWriteHandler3D", charset0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail("Expecting exception: UncheckedIOException");
      } catch(UncheckedIOException e) {
         //
         // IOException: Simulated IOException
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      MockPrintStream mockPrintStream0 = new MockPrintStream("v");
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockPrintStream0, "v");
      Supplier<SimpleFacetDefinition> supplier0 = (Supplier<SimpleFacetDefinition>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Stream<SimpleFacetDefinition> stream0 = Stream.generate(supplier0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.writeFacets((Stream<? extends FacetDefinition>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.obj.ObjWriter$MeshBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile(",", "U?^G4NjddWQ*Dp");
      Path path0 = mockFile0.toPath();
      FileGeometryOutput fileGeometryOutput0 = new FileGeometryOutput(path0, charset0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((BoundarySource3D) null, (GeometryOutput) fileGeometryOutput0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.euclidean.threed.AbstractBoundaryWriteHandler3D", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      int int0 = objBoundaryWriteHandler3D0.getMeshBufferBatchSize();
      assertNotNull(objBoundaryWriteHandler3D0.getLineSeparator());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      int int0 = objBoundaryWriteHandler3D0.getMeshBufferBatchSize();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      Stream<PlaneConvexSubset> stream0 = Stream.empty();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G\"&zq%9q$");
      Charset charset0 = objBoundaryWriteHandler3D0.getDefaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(mockFileOutputStream0, "G\"&zq%9q$", charset0);
      objBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
      // Undeclared exception!
      try { 
        objBoundaryWriteHandler3D0.write((Stream<? extends PlaneConvexSubset>) stream0, (GeometryOutput) streamGeometryOutput0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException("java.util.stream.AbstractPipeline", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      DoubleFunction<String> doubleFunction0 = objBoundaryWriteHandler3D0.getDoubleFormat();
      objBoundaryWriteHandler3D0.setDoubleFormat(doubleFunction0);
      assertNotNull(objBoundaryWriteHandler3D0.getLineSeparator());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      DoubleFunction<String> doubleFunction0 = objBoundaryWriteHandler3D0.getDoubleFormat();
      objBoundaryWriteHandler3D0.setDoubleFormat(doubleFunction0);
      assertEquals(0, objBoundaryWriteHandler3D0.getMeshBufferBatchSize());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.getFormat();
      assertNotNull(objBoundaryWriteHandler3D0.getLineSeparator());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjBoundaryWriteHandler3D objBoundaryWriteHandler3D0 = new ObjBoundaryWriteHandler3D();
      objBoundaryWriteHandler3D0.getFormat();
      assertEquals(1, objBoundaryWriteHandler3D0.getMeshBufferBatchSize());
}
}
