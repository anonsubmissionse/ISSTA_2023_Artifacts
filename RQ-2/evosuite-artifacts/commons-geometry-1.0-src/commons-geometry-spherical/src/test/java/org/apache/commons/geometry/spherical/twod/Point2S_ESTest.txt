 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
      boolean boolean0 = point2S0.equals(point2S1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
      boolean boolean0 = point2S0.equals(point2S1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
      boolean boolean0 = point2S0.equals(point2S1);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_X;
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
      boolean boolean0 = point2S0.equals(point2S1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      Point2S point2S1 = Point2S.PLUS_J;
      boolean boolean0 = point2S0.equals(point2S1);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      Point2S point2S1 = Point2S.PLUS_J;
      boolean boolean0 = point2S0.equals(point2S1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = point2S0.PLUS_K.slerp(point2S0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = point2S0.slerp(point2S0, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = point2S0.PLUS_K.slerp(point2S0, 2065.170361);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = point2S0.PLUS_K.slerp(point2S0, 2065.170361);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Point2S point2S0 = Point2S.parse("(0.0, 0.0)");
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point2S point2S0 = Point2S.parse("(NaN, NaN)");
      assertTrue(point2S0.isInfinite());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point2S point2S0 = Point2S.of(1.5707963267948966, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point2S point2S0 = Point2S.of(1.5707963267948966, 0.0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.0, 1.5707963267948966);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.0, 1.5707963267948966);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      assertNotNull(vector3D_Unit0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      assertTrue(vector3D_Unit0.isInfinite());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point2S point2S0 = Point2S.of(484.757, 484.757);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point2S point2S0 = Point2S.of(484.757, 484.757);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point2S point2S0 = Point2S.of(484.757, 484.757);
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      double double0 = point2S0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point2S point2S0 = Point2S.of(3997.1697075, Double.NEGATIVE_INFINITY);
      double double0 = point2S0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point2S point2S0 = Point2S.of(3997.1697075, Double.NEGATIVE_INFINITY);
      double double0 = point2S0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      double double0 = point2S0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      double double0 = point2S0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.PLUS_Z;
      Point2S point2S0 = Point2S.from(vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = point2S0.PLUS_I.eq(point2S0, precision_DoubleEquivalence0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = Point2S.of(484.757, 484.757);
      double double0 = Point2S.distance(point2S1, point2S0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = Point2S.of(484.757, 484.757);
      double double0 = Point2S.distance(point2S1, point2S0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = Point2S.of(484.757, 484.757);
      double double0 = Point2S.distance(point2S1, point2S0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      double double0 = point2S0.MINUS_I.distance(point2S0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = point2S0.antipodal();
      double double0 = point2S1.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = point2S0.antipodal();
      double double0 = point2S1.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      // Undeclared exception!
      try { 
        point2S0.MINUS_I.slerp(point2S0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
         //
         // Illegal norm: NaN
         //
         verifyException("org.apache.commons.numbers.quaternion.Quaternion", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point2S.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point2S.from((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.threed.SphericalCoordinates", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Point2S.from(vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal norm: Infinity
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      // Undeclared exception!
      try { 
        point2S0.PLUS_I.eq(point2S0, (Precision.DoubleEquivalence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.Point2S", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      // Undeclared exception!
      try { 
        Point2S.distance(point2S0, point2S0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.Point2S", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      // Undeclared exception!
      try { 
        point2S0.distance((Point2S) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.twod.Point2S", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      boolean boolean0 = point2S0.isNaN();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      double double0 = point2S0.getPolar();
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      double double0 = point2S0.distance(point2S0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      double double0 = point2S0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_I;
      double double0 = Point2S.distance(point2S0, point2S0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = Point2S.PLUS_I;
      boolean boolean0 = point2S0.equals(point2S1);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Point2S point2S0 = Point2S.PLUS_K;
      Point2S point2S1 = Point2S.PLUS_I;
      boolean boolean0 = point2S0.equals(point2S1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_K;
      Point2S point2S1 = Point2S.NaN;
      boolean boolean0 = point2S1.equals(point2S0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      Point2S point2S1 = Point2S.MINUS_J;
      boolean boolean0 = point2S1.equals(point2S0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      Point2S point2S1 = Point2S.MINUS_J;
      boolean boolean0 = point2S1.equals(point2S0);
      assertTrue(point2S0.isNaN());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      Point2S point2S1 = Point2S.MINUS_J;
      boolean boolean0 = point2S1.equals(point2S0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = point2S0.PLUS_I.antipodal();
      boolean boolean0 = point2S1.equals(point2S0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      Point2S point2S1 = point2S0.PLUS_I.antipodal();
      boolean boolean0 = point2S1.equals(point2S0);
      assertTrue(point2S1.isNaN());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      boolean boolean0 = point2S0.equals(point2S0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      Object object0 = new Object();
      boolean boolean0 = point2S0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      point2S0.hashCode();
      assertTrue(point2S0.isNaN());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      boolean boolean0 = point2S0.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.0), Double.NaN);
      boolean boolean0 = point2S0.isFinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_I;
      boolean boolean0 = point2S0.MINUS_K.isFinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1551.072971986405), (-1551.072971986405));
      boolean boolean0 = point2S0.NaN.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1551.072971986405), (-1551.072971986405));
      boolean boolean0 = point2S0.NaN.isFinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1551.072971986405), (-1551.072971986405));
      boolean boolean0 = point2S0.NaN.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.4256995744312684), Double.NEGATIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.4256995744312684), Double.NEGATIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.4256995744312684), Double.NEGATIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      boolean boolean0 = point2S0.isInfinite();
      assertTrue(point2S0.isNaN());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      boolean boolean0 = point2S0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.967072604488304, Double.NaN);
      boolean boolean0 = point2S0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.967072604488304, Double.NaN);
      boolean boolean0 = point2S0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.967072604488304, Double.NaN);
      boolean boolean0 = point2S0.isInfinite();
      assertTrue(point2S0.isNaN());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.9999999999, Double.NaN);
      boolean boolean0 = point2S0.isNaN();
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Point2S point2S0 = Point2S.of(0.9999999999, Double.NaN);
      boolean boolean0 = point2S0.isNaN();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      point2S0.MINUS_I.hashCode();
      assertTrue(point2S0.isNaN());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Point2S point2S0 = Point2S.NaN;
      boolean boolean0 = point2S0.isNaN();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      int int0 = point2S0.getDimension();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      Vector3D.Unit vector3D_Unit0 = point2S0.getVector();
      Point2S point2S1 = Point2S.from(vector3D_Unit0);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point2S.parse("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"\" at index 0: expected \"(\" but found \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      boolean boolean0 = point2S0.PLUS_K.eq(point2S0, precision_DoubleEquivalence0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Point2S point2S0 = Point2S.of((-1.4256995744312684), Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        point2S0.slerp(point2S0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Vectors", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Point2S point2S0 = Point2S.of(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = point2S0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Point2S point2S0 = Point2S.MINUS_J;
      String string0 = point2S0.PLUS_K.toString();
      ;
}
