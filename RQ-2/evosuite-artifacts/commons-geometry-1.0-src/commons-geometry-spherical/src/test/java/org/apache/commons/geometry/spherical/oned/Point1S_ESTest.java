/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:34:38 GMT 2022
 */

package org.apache.commons.geometry.spherical.oned;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.twod.PolarCoordinates;
import org.apache.commons.geometry.euclidean.twod.Vector2D;
import org.apache.commons.geometry.spherical.oned.Point1S;
import org.apache.commons.numbers.angle.Angle;
import org.apache.commons.numbers.core.Precision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Point1S_ESTest extends Point1S_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(0.0, 0.0);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      point1S0.eq(point1S1, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(0.0, 0.0);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      point1S0.eq(point1S1, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S1.equals(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S1.equals(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S1.equals(point1S0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S1.equals(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S1.equals(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-2031.388), 601.1);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      point1S0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-2031.388), 601.1);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      point1S0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.POSITIVE_INFINITY);
      Point1S point1S1 = point1S0.antipodal();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = Point1S.of((-2685.56));
      double double0 = point1S1.signedDistance(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = Point1S.of((-2685.56));
      double double0 = point1S1.signedDistance(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.signedDistance(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.signedDistance(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.signedDistance(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point1S point1S0 = Point1S.parse("(NaN)");
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point1S point1S0 = Point1S.parse("(Infinity)");
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point1S point1S0 = Point1S.parse("(Infinity)");
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point1S point1S0 = Point1S.parse("(0.0)");
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point1S point1S0 = Point1S.parse("(0.0)");
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point1S point1S0 = Point1S.parse("(-2685.56)");
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point1S point1S0 = Point1S.parse("(-2685.56)");
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of(Double.NaN);
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      assertTrue(point1S0.isInfinite());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of(Double.NEGATIVE_INFINITY);
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of(Double.NEGATIVE_INFINITY);
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.NaN);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      boolean boolean0 = point1S0.isNaN();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point1S point1S0 = Point1S.of(2221.38449967);
      Vector2D vector2D0 = point1S0.getVector();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point1S point1S0 = Point1S.of(2221.38449967);
      Vector2D vector2D0 = point1S0.getVector();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Vector2D vector2D0 = point1S0.getVector();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Vector2D vector2D0 = point1S0.getVector();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = point1S0.getNormalizedAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = point1S0.getNormalizedAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of(0.0);
      Angle.Turn angle_Turn0 = angle_Deg0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      double double0 = point1S0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.of(0.0);
      Angle.Turn angle_Turn0 = angle_Deg0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      double double0 = point1S0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Point1S point1S1 = point1S0.PI.above((-96.44228530624491));
      double double0 = point1S1.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Point1S point1S1 = point1S0.PI.above((-96.44228530624491));
      double double0 = point1S1.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-2213.87945022928), Double.NEGATIVE_INFINITY);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of((-2213.87945022928), Double.NEGATIVE_INFINITY);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point1S point1S0 = Point1S.of(0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      point1S0.eq(point1S0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Point1S point1S0 = Point1S.of(0.0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble());
      point1S0.eq(point1S0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      double double0 = Point1S.distance(point1S0, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      double double0 = Point1S.distance(point1S0, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      double double0 = Point1S.distance(point1S0, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.distance(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.distance(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Point1S point1S1 = point1S0.ZERO.above(point1S0);
      double double0 = point1S0.distance(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      point1S0.NaN.antipodal();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      point1S0.NaN.antipodal();
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Point1S point1S1 = point1S0.antipodal();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      Point1S point1S1 = point1S0.antipodal();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.NEGATIVE_INFINITY);
      Point1S point1S1 = point1S0.antipodal();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Point1S point1S1 = point1S0.PI.above(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Point1S point1S1 = point1S0.PI.above(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Point1S point1S1 = point1S0.above(Double.NaN);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Point1S point1S1 = point1S0.above(Double.NaN);
      assertTrue(point1S1.isNaN());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above((-3485.3882551177367));
      Point1S point1S2 = point1S1.ZERO.above(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above((-3485.3882551177367));
      Point1S point1S2 = point1S1.ZERO.above(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above((-3485.3882551177367));
      Point1S point1S2 = point1S1.ZERO.above(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above((-3485.3882551177367));
      Point1S point1S2 = point1S1.ZERO.above(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.signedDistance((Point1S) null, (Point1S) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.oned.Point1S", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.of(2406.0, 2406.0);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      // Undeclared exception!
      try { 
        point1S0.signedDistance((Point1S) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.oned.Point1S", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.of((Angle) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.oned.Point1S", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.from((Vector2D) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.euclidean.twod.PolarCoordinates", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.from((PolarCoordinates) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.oned.Point1S", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Point1S point1S0 = Point1S.PI;
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        point1S0.eq((Point1S) null, precision_DoubleEquivalence0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.oned.Point1S", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.distance((Point1S) null, (Point1S) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.oned.Point1S", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Point1S point1S0 = Point1S.of(388.0);
      // Undeclared exception!
      try { 
        point1S0.distance((Point1S) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.oned.Point1S", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Angle.Turn angle_Turn0 = Angle.Turn.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      // Undeclared exception!
      try { 
        point1S0.above((Point1S) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.spherical.oned.Point1S", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = Point1S.of((-2685.56));
      double double0 = Point1S.signedDistance(point1S0, point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = Point1S.of((-2685.56));
      double double0 = Point1S.signedDistance(point1S0, point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = Point1S.signedDistance(point1S0, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = Point1S.signedDistance(point1S0, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = Point1S.signedDistance(point1S0, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      // Undeclared exception!
      try { 
        point1S0.above(1.5707963267948966);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize azimuth value: NaN
         //
         verifyException("org.apache.commons.geometry.spherical.oned.Point1S", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = point1S0.signedDistance(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = point1S0.signedDistance(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Angle.Deg angle_Deg0 = angle_Rad0.toDeg();
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      double double0 = point1S0.signedDistance(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      double double0 = point1S0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.PI;
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      double double0 = point1S0.getAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      point1S0.PI.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Point1S point1S0 = Point1S.of((Angle) angle_Deg0);
      point1S0.PI.isFinite();
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      boolean boolean0 = point1S0.isNaN();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), (-2644.75));
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Point1S point1S1 = Point1S.from((Vector2D) vector2D_Unit0);
      double double0 = Point1S.distance(point1S1, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), (-2644.75));
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Point1S point1S1 = Point1S.from((Vector2D) vector2D_Unit0);
      double double0 = Point1S.distance(point1S1, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), (-2644.75));
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Point1S point1S1 = Point1S.from((Vector2D) vector2D_Unit0);
      double double0 = Point1S.distance(point1S1, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), (-2644.75));
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Point1S point1S1 = Point1S.from((Vector2D) vector2D_Unit0);
      double double0 = Point1S.distance(point1S1, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), (-2644.75));
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X;
      Point1S point1S1 = Point1S.from((Vector2D) vector2D_Unit0);
      double double0 = Point1S.distance(point1S1, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S1 = Point1S.from(vector2D0);
      double double0 = Point1S.signedDistance(point1S1, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S1 = Point1S.from(vector2D0);
      double double0 = Point1S.signedDistance(point1S1, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S1 = Point1S.from(vector2D0);
      double double0 = Point1S.signedDistance(point1S1, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Angle.Rad angle_Rad0 = Angle.Rad.TWO_PI;
      Angle.Turn angle_Turn0 = angle_Rad0.toTurn();
      Point1S point1S0 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S1 = Point1S.from(vector2D0);
      double double0 = Point1S.signedDistance(point1S1, point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(6.696928794914171E299, (-3035.5603459421836));
      Point1S point1S0 = Point1S.from(vector2D0);
      Angle.Turn angle_Turn0 = Angle.Turn.of(6.696928794914171E299);
      Point1S point1S1 = Point1S.of((Angle) angle_Turn0);
      Point1S point1S2 = point1S0.above(point1S1);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
      assertNotNull(vector2D0);
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
      Point1S point1S1 = point1S0.ZERO.above((-2.141592653589793));
      Point1S point1S2 = Point1S.from(vector2D0);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
      Point1S point1S1 = point1S0.ZERO.above((-2.141592653589793));
      Point1S point1S2 = Point1S.from(vector2D0);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
      Point1S point1S1 = point1S0.ZERO.above((-2.141592653589793));
      Point1S point1S2 = Point1S.from(vector2D0);
      boolean boolean0 = point1S2.equals(point1S1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
      Point1S point1S1 = point1S0.ZERO.above((-2.141592653589793));
      Point1S point1S2 = Point1S.from(vector2D0);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Vector2D vector2D0 = point1S0.ZERO.getVector();
      Point1S point1S1 = point1S0.ZERO.above((-2.141592653589793));
      Point1S point1S2 = Point1S.from(vector2D0);
      boolean boolean0 = point1S2.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S0.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S0.equals(point1S1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S0.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S0.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      Point1S point1S1 = Point1S.of((-2.141592653589793));
      boolean boolean0 = point1S0.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      boolean boolean0 = point1S0.equals("(NaN)");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.equals(point1S0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.equals(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.equals(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Point1S point1S1 = Point1S.NaN;
      boolean boolean0 = point1S0.equals(point1S1);
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      Point1S point1S1 = Point1S.NaN;
      boolean boolean0 = point1S0.equals(point1S1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      point1S0.hashCode();
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Point1S point1S0 = Point1S.of(0.0);
      Point1S point1S1 = Point1S.NaN;
      // Undeclared exception!
      try { 
        point1S1.above(point1S0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize azimuth value: NaN
         //
         verifyException("org.apache.commons.geometry.spherical.oned.Point1S", e);
      }
  }
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.POSITIVE_INFINITY);
      boolean boolean0 = point1S0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.POSITIVE_INFINITY);
      boolean boolean0 = point1S0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.POSITIVE_INFINITY);
      boolean boolean0 = point1S0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian((-3.0867615180281858), 7.853981633974483);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      boolean boolean0 = point1S0.isInfinite();
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      boolean boolean0 = point1S0.isInfinite();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      Vector2D vector2D0 = point1S0.getVector();
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      int int0 = point1S0.getDimension();
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(Double.NaN, Double.NaN);
      PolarCoordinates polarCoordinates0 = PolarCoordinates.fromCartesian(vector2D0);
      Point1S point1S0 = Point1S.from(polarCoordinates0);
      assertTrue(point1S0.isInfinite());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        Point1S.parse("}{Z>>>sA:OUV.r,X?B");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"}{Z>>>sA:OUV.r,X?B\" at index 0: expected \"(\" but found \"}\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      String string0 = point1S0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Point1S point1S0 = Point1S.of((-2394.24));
      double double0 = point1S0.getNormalizedAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Point1S point1S0 = Point1S.of((-2394.24));
      double double0 = point1S0.getNormalizedAzimuth();
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector2D vector2D0 = PolarCoordinates.toCartesian(Double.NaN, Double.NaN);
      Point1S point1S0 = Point1S.from(vector2D0);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Point1S point1S0 = Point1S.ZERO;
      double double0 = point1S0.distance(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above(point1S0);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(0.0);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      Point1S point1S1 = point1S0.above(point1S0);
      ;
}
}
