 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Angle.Rad angle_Rad0 = Angle.Rad.of(6.283185307179586);
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      CutAngle cutAngle0 = CutAngles.fromPointAndDirection(point1S0, true, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Point1S point1S0 = Point1S.of(0.0);
      CutAngle cutAngle0 = CutAngles.fromPointAndDirection(point1S0, false, (Precision.DoubleEquivalence) null);
      assertTrue(cutAngle0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      CutAngle cutAngle0 = CutAngles.fromPointAndDirection(point1S0, false, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection((-1038.0), false, (Precision.DoubleEquivalence) null);
      assertTrue(cutAngle0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection((-1038.0), false, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(6.283185307179586, false, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(6.283185307179586, false, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(Double.NEGATIVE_INFINITY, false, (Precision.DoubleEquivalence) null);
      assertTrue(cutAngle0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(Double.NEGATIVE_INFINITY, false, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.NEGATIVE_INFINITY);
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(point1S0, (Precision.DoubleEquivalence) null);
      assertTrue(cutAngle0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.from(0.6, 0.0);
      Point1S point1S0 = Point1S.from((Vector2D) vector2D_Unit0);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(point1S0, precision_DoubleEquivalence0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point1S point1S0 = Point1S.of((-1.0));
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(point1S0, (Precision.DoubleEquivalence) null);
      assertTrue(cutAngle0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(Double.NEGATIVE_INFINITY, (Precision.DoubleEquivalence) null);
      assertTrue(cutAngle0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(Double.NEGATIVE_INFINITY, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(6.283185307179586, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(6.283185307179586, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing((-4948.84918513), (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing((-4948.84918513), (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Angle.Deg angle_Deg0 = Angle.Deg.ZERO;
      Angle.Turn angle_Turn0 = angle_Deg0.toTurn();
      Angle.Rad angle_Rad0 = angle_Turn0.toRad();
      Point1S point1S0 = Point1S.of((Angle) angle_Rad0);
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(point1S0, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(point1S0, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(Double.NEGATIVE_INFINITY, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(Double.NEGATIVE_INFINITY, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(598.6213745197335, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(598.6213745197335, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point1S point1S0 = Point1S.NaN;
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(point1S0, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.NEGATIVE_INFINITY);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(point1S0, precision_DoubleEquivalence0);
      assertTrue(cutAngle0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point1S point1S0 = Point1S.of(Double.NEGATIVE_INFINITY);
      Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer());
      CutAngle cutAngle0 = CutAngles.fromPointAndDirection(point1S0, false, precision_DoubleEquivalence0);
      assertTrue(cutAngle0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(0.0, true, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.fromAzimuthAndDirection(0.0, true, (Precision.DoubleEquivalence) null);
      assertTrue(cutAngle0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(0.0, (Precision.DoubleEquivalence) null);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createNegativeFacing(0.0, (Precision.DoubleEquivalence) null);
      assertTrue(cutAngle0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(0.0, (Precision.DoubleEquivalence) null);
      assertTrue(cutAngle0.isPositiveFacing());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CutAngle cutAngle0 = CutAngles.createPositiveFacing(0.0, (Precision.DoubleEquivalence) null);
      ;
}
