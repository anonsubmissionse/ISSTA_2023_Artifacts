/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 00:47:23 GMT 2022
 */

package org.apache.commons.geometry.core.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.geometry.core.partitioning.Split;
import org.apache.commons.geometry.core.partitioning.SplitLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Split_ESTest extends Split_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-478));
      Split<Object> split0 = new Split<Object>(integer0, (Object) null);
      split0.getPlus();
      assertNotNull(split0.getLocation());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Split<String> split0 = new Split<String>((String) null, (String) null);
      String string0 = split0.getMinus();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(51);
      Split<Object> split0 = new Split<Object>(integer0, integer0);
      SplitLocation splitLocation0 = split0.getLocation();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Split<String> split0 = new Split<String>("", (String) null);
      SplitLocation splitLocation0 = split0.getLocation();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Split<Integer> split0 = new Split<Integer>((Integer) null, (Integer) null);
      SplitLocation splitLocation0 = split0.getLocation();
      Split<Object> split1 = new Split<Object>((Object) null, splitLocation0);
      SplitLocation splitLocation1 = split1.getLocation();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(2312);
      Split<Integer> split0 = new Split<Integer>(integer0, (Integer) null);
      split0.getMinus();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Split<Integer> split0 = new Split<Integer>((Integer) null, (Integer) null);
      SplitLocation splitLocation0 = split0.getLocation();
      Split<Object> split1 = new Split<Object>((Object) null, splitLocation0);
      split1.getPlus();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(2312);
      Split<Integer> split0 = new Split<Integer>(integer0, (Integer) null);
      Split<Object> split1 = new Split<Object>(integer0, split0);
      String string0 = split1.toString();
      ;
}
}
