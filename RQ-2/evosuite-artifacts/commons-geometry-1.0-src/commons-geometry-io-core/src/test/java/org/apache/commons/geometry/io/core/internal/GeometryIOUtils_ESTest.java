/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 01:45:15 GMT 2022
 */

package org.apache.commons.geometry.io.core.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UncheckedIOException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.util.function.Supplier;
import java.util.stream.Stream;
import org.apache.commons.geometry.io.core.input.FileGeometryInput;
import org.apache.commons.geometry.io.core.input.StreamGeometryInput;
import org.apache.commons.geometry.io.core.internal.GeometryIOUtils;
import org.apache.commons.geometry.io.core.internal.IOConsumer;
import org.apache.commons.geometry.io.core.internal.IOFunction;
import org.apache.commons.geometry.io.core.internal.IOSupplier;
import org.apache.commons.geometry.io.core.internal.IOToIntFunction;
import org.apache.commons.geometry.io.core.output.StreamGeometryOutput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GeometryIOUtils_ESTest extends GeometryIOUtils_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("WQ?<)VUy/8(+e}2z)");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(objectOutputStream0, "WQ?<)VUy/8(+e}2z)", charset0);
      BufferedWriter bufferedWriter0 = GeometryIOUtils.createBufferedWriter(streamGeometryOutput0, (Charset) null);
      assertNotNull(bufferedWriter0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput((InputStream) null, "R!CV 3)6WKU", charset0);
      // Undeclared exception!
      try { 
        GeometryIOUtils.createBufferedReader(streamGeometryInput0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      GeometryIOUtils.closeUnchecked(objectOutputStream0);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IOFunction<DataInputStream, BufferedInputStream> iOFunction0 = (IOFunction<DataInputStream, BufferedInputStream>) mock(IOFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOFunction0).apply(any(java.io.DataInputStream.class));
      IOSupplier<DataInputStream> iOSupplier0 = (IOSupplier<DataInputStream>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOSupplier0).get();
      BufferedInputStream bufferedInputStream0 = GeometryIOUtils.tryApplyCloseable(iOFunction0, (IOSupplier<? extends DataInputStream>) iOSupplier0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)94);
      IOFunction<PipedOutputStream, ByteArrayInputStream> iOFunction0 = (IOFunction<PipedOutputStream, ByteArrayInputStream>) mock(IOFunction.class, new ViolatedAssumptionAnswer());
      doReturn(byteArrayInputStream0).when(iOFunction0).apply(any(java.io.PipedOutputStream.class));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOSupplier<PipedOutputStream> iOSupplier0 = (IOSupplier<PipedOutputStream>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(pipedOutputStream0).when(iOSupplier0).get();
      ByteArrayInputStream byteArrayInputStream1 = GeometryIOUtils.tryApplyCloseable(iOFunction0, (IOSupplier<? extends PipedOutputStream>) iOSupplier0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IOSupplier<LineNumberReader> iOSupplier0 = (IOSupplier<LineNumberReader>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOSupplier0).get();
      LineNumberReader lineNumberReader0 = GeometryIOUtils.getUnchecked(iOSupplier0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wL4D^UvT");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 1);
      IOSupplier<LineNumberReader> iOSupplier0 = (IOSupplier<LineNumberReader>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(lineNumberReader0).when(iOSupplier0).get();
      LineNumberReader lineNumberReader1 = GeometryIOUtils.getUnchecked(iOSupplier0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("|:Tn$v/4ja842a3,");
      MockIOException mockIOException0 = new MockIOException("", mockThrowable0);
      UncheckedIOException uncheckedIOException0 = GeometryIOUtils.createUnchecked(mockIOException0);
      assertNotNull(uncheckedIOException0.getMessage());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Supplier<PushbackReader> supplier0 = (Supplier<PushbackReader>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Stream<PushbackReader> stream0 = Stream.generate(supplier0);
      IOFunction<BufferedInputStream, Stream<PushbackReader>> iOFunction0 = (IOFunction<BufferedInputStream, Stream<PushbackReader>>) mock(IOFunction.class, new ViolatedAssumptionAnswer());
      doReturn(stream0).when(iOFunction0).apply(any(java.io.BufferedInputStream.class));
      IOSupplier<BufferedInputStream> iOSupplier0 = (IOSupplier<BufferedInputStream>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedInputStream) null).when(iOSupplier0).get();
      Stream<PushbackReader> stream1 = GeometryIOUtils.createCloseableStream(iOFunction0, (IOSupplier<? extends BufferedInputStream>) iOSupplier0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      StreamGeometryInput streamGeometryInput0 = new StreamGeometryInput(dataInputStream0);
      BufferedReader bufferedReader0 = GeometryIOUtils.createBufferedReader(streamGeometryInput0, charset0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOToIntFunction<MockFileOutputStream> iOToIntFunction0 = (IOToIntFunction<MockFileOutputStream>) mock(IOToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iOToIntFunction0).applyAsInt(any(org.evosuite.runtime.mock.java.io.MockFileOutputStream.class));
      MockFile mockFile0 = new MockFile("pvPy");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      int int0 = GeometryIOUtils.applyAsIntUnchecked(iOToIntFunction0, mockFileOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOToIntFunction<Object> iOToIntFunction0 = (IOToIntFunction<Object>) mock(IOToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(19).when(iOToIntFunction0).applyAsInt(any());
      int int0 = GeometryIOUtils.applyAsIntUnchecked(iOToIntFunction0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOToIntFunction<InputStreamReader> iOToIntFunction0 = (IOToIntFunction<InputStreamReader>) mock(IOToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2828)).when(iOToIntFunction0).applyAsInt(any(java.io.InputStreamReader.class));
      int int0 = GeometryIOUtils.applyAsIntUnchecked(iOToIntFunction0, (InputStreamReader) null);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOFunction<BufferedInputStream, Stream<BufferedReader>> iOFunction0 = (IOFunction<BufferedInputStream, Stream<BufferedReader>>) mock(IOFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Stream<BufferedReader>) null).when(iOFunction0).apply(any(java.io.BufferedInputStream.class));
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, (InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      IOSupplier<BufferedInputStream> iOSupplier0 = (IOSupplier<BufferedInputStream>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(bufferedInputStream0).when(iOSupplier0).get();
      // Undeclared exception!
      try { 
        GeometryIOUtils.createCloseableStream(iOFunction0, (IOSupplier<? extends BufferedInputStream>) iOSupplier0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter(": ");
      // Undeclared exception!
      try { 
        GeometryIOUtils.closeUnchecked(mockFileWriter0);
        fail("Expecting exception: UncheckedIOException");
      } catch(UncheckedIOException e) {
         //
         // IOException: Simulated IOException
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1807);
      // Undeclared exception!
      try { 
        GeometryIOUtils.acceptUnchecked((IOConsumer<FilterInputStream>) null, (FilterInputStream) bufferedInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryIOUtils.tryApplyCloseable((IOFunction<CharArrayReader, BufferedOutputStream>) null, (IOSupplier<? extends CharArrayReader>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J63\"0`|]e5g yw~(/", "J63\"0`|]e5g yw~(/");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      IOSupplier<MockFileWriter> iOSupplier0 = (IOSupplier<MockFileWriter>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(mockFileWriter0).when(iOSupplier0).get();
      // Undeclared exception!
      try { 
        GeometryIOUtils.tryApplyCloseable((IOFunction<OutputStreamWriter, Object>) null, (IOSupplier<? extends OutputStreamWriter>) iOSupplier0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName(": ");
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName(": ");
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName((URL) null);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("|:Tn$v/4ja842a3,");
      IllegalStateException illegalStateException0 = GeometryIOUtils.parseError("|:Tn$v/4ja842a3,", (Throwable) mockThrowable0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      IOSupplier<DataInputStream> iOSupplier0 = (IOSupplier<DataInputStream>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(dataInputStream0).when(iOSupplier0).get();
      IOFunction<FilterInputStream, Stream<ObjectOutputStream>> iOFunction0 = (IOFunction<FilterInputStream, Stream<ObjectOutputStream>>) mock(IOFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOFunction0).apply(any(java.io.FilterInputStream.class));
      // Undeclared exception!
      try { 
        GeometryIOUtils.createCloseableStream(iOFunction0, (IOSupplier<? extends FilterInputStream>) iOSupplier0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StreamGeometryOutput streamGeometryOutput0 = new StreamGeometryOutput(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        GeometryIOUtils.createBufferedWriter(streamGeometryOutput0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0a*E <iUwjiv", "0a*E <iUwjiv");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0, charset0);
      // Undeclared exception!
      try { 
        GeometryIOUtils.createBufferedReader(fileGeometryInput0, charset0);
        fail("Expecting exception: UncheckedIOException");
      } catch(UncheckedIOException e) {
         //
         // NoSuchFileException: /media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/commons-geometry-1.0-src/commons-geometry-io-core/0a*E <iUwjiv/0a*E <iUwjiv
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      FileGeometryInput fileGeometryInput0 = new FileGeometryInput(path0);
      // Undeclared exception!
      try { 
        GeometryIOUtils.createBufferedReader(fileGeometryInput0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.InputStreamReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileExtension("}|_.,");
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileExtension("");
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileExtension((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName("");
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      String string0 = GeometryIOUtils.getFileName(uRL0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      String string0 = GeometryIOUtils.getFileName(uRL0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fooExample", "");
      Path path0 = mockFile0.toPath();
      String string0 = GeometryIOUtils.getFileName(path0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fooExample", "");
      Path path0 = mockFile0.toPath();
      String string0 = GeometryIOUtils.getFileName(path0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = GeometryIOUtils.getFileName((Path) null);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryIOUtils.applyAsIntUnchecked((IOToIntFunction<String>) null, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryIOUtils.createUnchecked((IOException) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryIOUtils.getUnchecked((IOSupplier<MockFileInputStream>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeometryIOUtils.closeUnchecked((Closeable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.io.core.internal.GeometryIOUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IllegalStateException illegalStateException0 = GeometryIOUtils.parseError("[fileName= ");
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOConsumer<BufferedReader> iOConsumer0 = (IOConsumer<BufferedReader>) mock(IOConsumer.class, new ViolatedAssumptionAnswer());
      GeometryIOUtils.acceptUnchecked(iOConsumer0, (BufferedReader) null);
  }
}
