 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-1392409282871L));
      CounterMetric counterMetric0 = counter0.calculateMetric();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-1392409282871L));
      CounterMetric counterMetric0 = counter0.calculateMetric();
      System.setCurrentTimeMillis(0L);
      CounterMetric counterMetric1 = counter0.calculateMetric();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-1392409282871L));
      CounterMetric counterMetric0 = counter0.calculateMetric();
      System.setCurrentTimeMillis(0L);
      CounterMetric counterMetric1 = counter0.calculateMetric();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-1392409282871L));
      CounterMetric counterMetric0 = counter0.calculateMetric();
      System.setCurrentTimeMillis(0L);
      CounterMetric counterMetric1 = counter0.calculateMetric();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis(1392409282854L);
      counter0.dec(1392409282854L);
      CounterMetric counterMetric0 = counter0.calculateMetric();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis(1392409282854L);
      counter0.dec(1392409282854L);
      CounterMetric counterMetric0 = counter0.calculateMetric();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis(1392409282854L);
      counter0.dec(1392409282854L);
      CounterMetric counterMetric0 = counter0.calculateMetric();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis(1392409282854L);
      counter0.dec(1392409282854L);
      CounterMetric counterMetric0 = counter0.calculateMetric();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Counter counter0 = new Counter();
      Clock.MockClock clock_MockClock0 = new Clock.MockClock(1L);
      Counter.clock = (Clock) clock_MockClock0;
      counter0.calculateMetric();
      CounterMetric counterMetric0 = counter0.calculateMetric();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Counter counter0 = new Counter();
      Clock.MockClock clock_MockClock0 = new Clock.MockClock(1L);
      Counter.clock = (Clock) clock_MockClock0;
      counter0.calculateMetric();
      CounterMetric counterMetric0 = counter0.calculateMetric();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Counter counter0 = new Counter();
      Clock.MockClock clock_MockClock0 = new Clock.MockClock(1L);
      Counter.clock = (Clock) clock_MockClock0;
      counter0.calculateMetric();
      CounterMetric counterMetric0 = counter0.calculateMetric();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.dec(1L);
      // Undeclared exception!
      try { 
        counter0.calculateMetric();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Counter counter0 = new Counter();
      Counter.clock = counter0.clock;
      Clock.MockClock clock_MockClock0 = new Clock.MockClock();
      Counter.clock = (Clock) clock_MockClock0;
      Counter.clock = null;
      // Undeclared exception!
      try { 
        counter0.reset();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Counter counter0 = new Counter();
      Counter.clock = null;
      // Undeclared exception!
      try { 
        counter0.calculateMetric();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Counter.clock = null;
      Counter counter0 = null;
      try {
        counter0 = new Counter();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.metrics.metric.Counter", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.reset();
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.dec();
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.inc(0L);
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.inc();
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Counter counter0 = new Counter();
      String string0 = counter0.toString();
      ;
}
