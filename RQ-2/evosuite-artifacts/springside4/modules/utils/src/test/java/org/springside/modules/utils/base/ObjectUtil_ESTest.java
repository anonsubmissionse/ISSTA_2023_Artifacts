/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 03:50:49 GMT 2022
 */

package org.springside.modules.utils.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.sql.SQLClientInfoException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLWarning;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.springside.modules.utils.base.ObjectUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectUtil_ESTest extends ObjectUtil_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      ObjectUtil.toPrettyString(objectUtil0);
      Object[] objectArray0 = new Object[1];
      String string0 = "com.google.common.io.PatternFilenameFilter";
      SQLWarning sQLWarning0 = new SQLWarning("com.google.common.io.PatternFilenameFilter", "com.google.common.io.PatternFilenameFilter");
      int int0 = 0;
      // Undeclared exception!
      try { 
        sQLWarning0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        sQLFeatureNotSupportedException0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      Object object0 = new Object();
      ObjectUtil.toPrettyString(object0);
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "java.lang.Object@0000000002";
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "java.lang.Object@0000000002";
      ObjectUtil.hashCode(objectArray0);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      ObjectUtil.hashCode(objectArray0);
      ObjectUtil.toPrettyString((Object) null);
      ObjectUtil.hashCode(objectArray0);
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "null", (String) null, 198);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string1 = "g9 !cn=OR!2{s";
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "g9 !cn=OR!2{s", "com.google.common.io.PatternFilenameFilter", 198);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "g9 !cn=OR!2{s", "", 198);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("64K", "org.springside.modules.utils.base.ObjectUtil", "null", 198);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("org.springside.modules.utils.base.ObjectUtil", "null", (String) null, 198);
      stackTraceElementArray0[4] = stackTraceElement4;
      int int0 = 0;
      StackTraceElement stackTraceElement5 = null;
      try {
        stackTraceElement5 = new StackTraceElement((String) null, "64K", "org.springside.modules.utils.base.ObjectUtil", 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) objectUtil0;
      objectArray0[1] = (Object) objectUtil0;
      objectArray0[2] = (Object) objectUtil0;
      objectArray0[3] = (Object) objectUtil0;
      ObjectUtil.hashCode(objectArray0);
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      int int0 = 0;
      String string2 = "CO~5";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      ObjectUtil.hashCode(objectArray0);
  }
}
