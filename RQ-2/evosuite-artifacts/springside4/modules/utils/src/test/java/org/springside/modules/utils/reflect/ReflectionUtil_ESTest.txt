 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.setField("", (Field) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ReflectionUtil.invokeConstructor(class0, (Object[]) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        ReflectionUtil.setProperty((Object) null, "", mockIllegalAccessException0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockException mockException0 = new MockException();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockException0);
      // Undeclared exception!
      try { 
        ReflectionUtil.setProperty(invocationTargetException0, (String) null, mockException0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException((String) null);
      // Undeclared exception!
      try { 
        ReflectionUtil.setFieldValue((Object) null, "", noSuchMethodException0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.setFieldValue("", (String) null, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeSetter((Object) null, "", "3g`7`Ya");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethodByName((Object) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(">ie[4;}<'");
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethodByName((Object) mockRuntimeException0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // methodName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Class[] classArray0 = (Class[]) Array.newInstance(Class.class, 3);
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) null, "diz_KyV{ ;|e", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException((String) null);
      Object[] objectArray0 = new Object[1];
      Class[] classArray0 = (Class[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) noSuchMethodException0, (String) null, objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // methodName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) null, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod(object0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // methodName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeGetter((Object) null, "=Xdjh");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeConstructor(class0, objectArray0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      Class[] classArray0 = (Class[]) Array.newInstance(Class.class, 10);
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeConstructor((Class<String>) classArray0[4], objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // class cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.getProperty((Object) null, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtil.getProperty(object0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException((String) null);
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue((Object) noSuchMethodException0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("10.11");
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(mockRuntimeException0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<NoSuchMethodException>[] classArray0 = (Class<NoSuchMethodException>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) "%>uG}Y9", "%>uG}Y9", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Could not find method [%>uG}Y9] on target [%>uG}Y9]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("fkP?EY'AEhj~o2`u");
      // Undeclared exception!
      try { 
        ReflectionUtil.setFieldValue("fkP?EY'AEhj~o2`u", "fkP?EY'AEhj~o2`u", mockIllegalAccessException0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [fkP?EY'AEhj~o2`u] on target [fkP?EY'AEhj~o2`u]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockIllegalAccessException0, "");
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(invocationTargetException0);
      assertNotNull(runtimeException0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(noSuchMethodException0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(mockIllegalAccessException0);
      assertNotNull(runtimeException0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockException mockException0 = new MockException("ItXYDF6<Q,(.4^3g");
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(mockException0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethodByName((Object) runtimeException0, "Mq]OBe/YY:g", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Could not find method [Mq]OBe/YY:g] on target [org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: ItXYDF6<Q,(.4^3g]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked((Exception) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtil.setProperty(runtimeException0, "Could not find field [", object0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [Could not find field [] on target [org.evosuite.runtime.mock.java.lang.MockThrowable]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("Could not find getter method [");
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockIllegalAccessException0, "-#");
      // Undeclared exception!
      try { 
        ReflectionUtil.getProperty((Object) invocationTargetException0, "1.7");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [1.7] on target [java.lang.reflect.InvocationTargetException: -#]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(".d!8");
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeSetter(class0, ".d!8", mockRuntimeException0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Could not find getter method [.d!8] on target [class java.lang.Object]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeGetter((Object) noSuchMethodException0, "L' z7t9\"JL~srxBt20h");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Could not find getter method [L' z7t9\"JL~srxBt20h] on target [java.lang.NoSuchMethodException]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) "", (Method) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) mockRuntimeException0, "YtGg}U.*==<nf]U", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Could not find method [YtGg}U.*==<nf]U] on target [org.evosuite.runtime.mock.java.lang.MockThrowable]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ReflectionUtil reflectionUtil0 = new ReflectionUtil();
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue((Object) reflectionUtil0, "Could not find etter method [");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [Could not find etter method [] on target [org.springside.modules.utils.reflect.ReflectionUtil@1]
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue((Object) "4D]%Rq+C[", (Field) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ReflectionUtil", e);
      }
  }
