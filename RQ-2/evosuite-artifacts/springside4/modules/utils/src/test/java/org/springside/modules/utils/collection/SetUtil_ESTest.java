/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 04:05:54 GMT 2022
 */

package org.springside.modules.utils.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.SetUtil;
import org.springside.modules.utils.collection.type.ConcurrentHashSet;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SetUtil_ESTest extends SetUtil_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = 477;
      HashSet<Object> hashSet0 = new HashSet<Object>(477, 477);
      Stream<Object> stream0 = hashSet0.parallelStream();
      Set<Object> set0 = SetUtil.intersectionView((Set<Object>) hashSet0, (Set<?>) hashSet0);
      hashSet0.add(set0);
      SetUtil.emptySetIfNull(set0);
      Comparator<Locale.LanguageRange> comparator0 = (Comparator<Locale.LanguageRange>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      hashSet0.add(stream0);
      SetUtil.newSortedSet((Comparator<? super Locale.LanguageRange>) comparator0);
      // Undeclared exception!
      try { 
        SetUtil.newHashSet((Iterable<?>) set0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Set<Object> set0 = SetUtil.intersectionView((Set<Object>) hashSet0, (Set<?>) hashSet0);
      hashSet0.add(set0);
      Set<Object> set1 = SetUtil.intersectionView((Set<Object>) set0, (Set<?>) hashSet0);
      Set<Object> set2 = SetUtil.intersectionView((Set<Object>) hashSet0, (Set<?>) set1);
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = new Boolean("");
      hashMap0.replace(boolean0, boolean1);
      SetUtil.newSetFromMap((Map<Boolean, Boolean>) hashMap0);
      Set<Locale.LanguageRange> set3 = SetUtil.emptySetIfNull((Set<Locale.LanguageRange>) null);
      Set<Locale.LanguageRange> set4 = SetUtil.emptySetIfNull((Set<Locale.LanguageRange>) set3);
      SetUtil.unmodifiableSet((Set<? extends Locale.LanguageRange>) set4);
      SetUtil.emptySet();
      SetUtil.emptySet();
      SetUtil.newHashSet();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) set2;
      objectArray0[2] = (Object) hashMap0;
      // Undeclared exception!
      try { 
        SetUtil.newHashSet(objectArray0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      SetUtil.newSetFromMap((Map<Object, Boolean>) hashMap0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      SetUtil.newHashSet(locale_CategoryArray0);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*";
      HashSet<String> hashSet0 = SetUtil.newHashSet(stringArray0);
      hashSet0.add("Pz8brc>L@k");
      SetUtil.emptySetIfNull((Set<String>) hashSet0);
      SetUtil.newHashSet((Iterable<? extends String>) hashSet0);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashSet<Object> hashSet0 = SetUtil.newHashSet();
      Object object0 = new Object();
      hashSet0.add(object0);
      hashSet0.add("org.springside.modules.utils.collection.SetUtil");
      Set<Object> set0 = SetUtil.unmodifiableSet((Set<?>) hashSet0);
      hashSet0.add(set0);
      HashSet<String> hashSet1 = new HashSet<String>();
      hashSet1.add("org.springside.modules.utils.collection.SetUtil");
      hashSet1.add("");
      Set<String> set1 = SetUtil.unmodifiableSet((Set<? extends String>) hashSet1);
      Set<String> set2 = SetUtil.differenceView((Set<String>) set1, (Set<?>) hashSet1);
      Set<String> set3 = SetUtil.singletonSet("");
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Integer integer0 = new Integer(421);
      hashSet0.add(integer0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      HashSet<Locale.Category> hashSet2 = SetUtil.newHashSet(locale_CategoryArray0);
      SetUtil.intersectionView((Set<Locale.Category>) hashSet2, (Set<?>) set3);
      SetUtil setUtil0 = new SetUtil();
      SetUtil.intersectionView((Set<Object>) set0, (Set<?>) set2);
      SetUtil.newSortedSet();
      SetUtil.intersectionView((Set<Object>) set0, (Set<?>) set1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Integer> treeSet0 = SetUtil.newSortedSet((Comparator<? super Integer>) comparator0);
      SetUtil.disjointView((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) treeSet0);
      // Undeclared exception!
      try { 
        SetUtil.newHashSet((Iterable<?>) set0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-830));
      Integer integer0 = new Integer((-830));
      Integer integer1 = Integer.getInteger("", integer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayDeque0.forEach(consumer0);
      arrayDeque0.stream();
      Integer.max(16, (-1));
      Integer.max(16, 0);
      arrayDeque0.add(integer1);
      SetUtil.newHashSet((Iterable<? extends Integer>) arrayDeque0);
      Set<String> set0 = null;
      // Undeclared exception!
      try { 
        SetUtil.unmodifiableSet((Set<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SetUtil setUtil0 = new SetUtil();
      HashSet<Integer> hashSet0 = SetUtil.newHashSetWithCapacity(3861);
      HashSet<Integer> hashSet1 = SetUtil.newHashSetWithCapacity(3861);
      Set<Integer> set0 = SetUtil.unionView((Set<? extends Integer>) hashSet0, (Set<? extends Integer>) hashSet1);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((-1667));
      hashSet1.add(integer0);
      SetUtil.newSetFromMap((Map<Integer, Boolean>) hashMap0);
      Set<Locale.FilteringMode> set1 = null;
      // Undeclared exception!
      try { 
        SetUtil.differenceView((Set<Locale.FilteringMode>) null, (Set<?>) set0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // set1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      SetUtil.emptySetIfNull((Set<String>) concurrentHashSet0);
      SetUtil.newSortedSet();
      // Undeclared exception!
      try { 
        SetUtil.disjointView((Set<? extends Integer>) null, (Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // set1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SetUtil.singletonSet(boolean0);
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ConcurrentHashSet<Locale.Category> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      Set<Locale.Category> set0 = SetUtil.unionView((Set<? extends Locale.Category>) concurrentHashSet0, (Set<? extends Locale.Category>) concurrentHashSet0);
      Set<Locale.Category> set1 = SetUtil.differenceView((Set<Locale.Category>) set0, (Set<?>) set0);
      SetUtil.disjointView((Set<?>) set0, (Set<?>) set1);
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Set<String> set0 = null;
      Set<String> set1 = SetUtil.emptySetIfNull((Set<String>) null);
      // Undeclared exception!
      try { 
        SetUtil.unionView((Set<? extends String>) set1, (Set<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // set2
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtil.intersectionView((Set<Integer>) null, (Set<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // set1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SetUtil setUtil0 = new SetUtil();
      // Undeclared exception!
      try { 
        SetUtil.newHashSetWithCapacity((-2144));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -2144
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SetUtil.newConcurrentHashSet();
      SetUtil.emptySet();
      // Undeclared exception!
      try { 
        SetUtil.newHashSet((Iterable<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SetUtil.newSortedSet();
      SetUtil.emptySet();
      // Undeclared exception!
      try { 
        SetUtil.newSetFromMap((Map<String, Boolean>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$SetFromMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtil.newHashSetWithCapacity((-1283));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -1283
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      SetUtil.newHashSet((Iterable<? extends String>) concurrentHashSet0);
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SetUtil.newConcurrentHashSet();
      SetUtil setUtil0 = new SetUtil();
      SetUtil.emptySet();
      // Undeclared exception!
      try { 
        SetUtil.newSortedSet((Comparator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SetUtil.newConcurrentHashSet();
      SetUtil setUtil0 = new SetUtil();
      // Undeclared exception!
      try { 
        SetUtil.newSortedSet((Comparator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtil.newHashSet((Boolean[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Sets", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SetUtil.newConcurrentHashSet();
      SetUtil.emptySet();
      ConcurrentHashSet<String> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      SetUtil.unmodifiableSet((Set<? extends String>) concurrentHashSet0);
      SetUtil.newSortedSet();
      HashMap<Locale.FilteringMode, Boolean> hashMap0 = new HashMap<Locale.FilteringMode, Boolean>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Boolean boolean0 = Boolean.valueOf("");
      Boolean.getBoolean("");
      hashMap0.put(locale_FilteringMode0, boolean0);
      HashMap<Locale.FilteringMode, Boolean> hashMap1 = new HashMap<Locale.FilteringMode, Boolean>();
      hashMap0.putAll(hashMap1);
      // Undeclared exception!
      try { 
        SetUtil.newSetFromMap((Map<Locale.FilteringMode, Boolean>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Map is non-empty
         //
         verifyException("java.util.Collections$SetFromMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = SetUtil.newSortedSet();
      Set<Boolean> set0 = SetUtil.disjointView((Set<? extends Boolean>) treeSet0, (Set<? extends Boolean>) treeSet0);
      assertNotNull(set0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashSet<String> hashSet0 = SetUtil.newHashSet();
      Set<String> set0 = SetUtil.differenceView((Set<String>) hashSet0, (Set<?>) hashSet0);
      assertNotNull(set0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashSet<Boolean> hashSet0 = new HashSet<Boolean>();
      Set<Boolean> set0 = SetUtil.intersectionView((Set<Boolean>) hashSet0, (Set<?>) hashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      Set<String> set0 = SetUtil.unionView((Set<? extends String>) concurrentHashSet0, (Set<? extends String>) concurrentHashSet0);
      assertNotNull(set0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Locale.FilteringMode, Boolean> hashMap0 = new HashMap<Locale.FilteringMode, Boolean>();
      Set<Locale.FilteringMode> set0 = SetUtil.newSetFromMap((Map<Locale.FilteringMode, Boolean>) hashMap0);
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Set<String> set0 = SetUtil.unmodifiableSet((Set<? extends String>) treeSet0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashSet<Boolean> hashSet0 = SetUtil.newHashSet();
      Set<Boolean> set0 = SetUtil.emptySetIfNull((Set<Boolean>) hashSet0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Set<Object> set0 = SetUtil.emptySet();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConcurrentHashSet<Boolean> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      assertTrue(concurrentHashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashSet<String> hashSet0 = SetUtil.newHashSet(stringArray0);
      assertEquals(1, hashSet0.size());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = SetUtil.newHashSet();
      assertTrue(hashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtil.newSetFromMap((Map<Boolean, Boolean>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$SetFromMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SetUtil.newHashSetWithCapacity(0);
      SetUtil setUtil0 = new SetUtil();
      Boolean[] booleanArray0 = new Boolean[14];
      HashSet<Boolean> hashSet0 = SetUtil.newHashSet(booleanArray0);
      SetUtil.disjointView((Set<? extends Boolean>) hashSet0, (Set<? extends Boolean>) hashSet0);
      ConcurrentHashSet<Locale.FilteringMode> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      SetUtil.emptySetIfNull((Set<Locale.FilteringMode>) concurrentHashSet0);
      Set<String> set0 = SetUtil.emptySet();
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      HashSet<String> hashSet0 = SetUtil.newHashSet((Iterable<? extends String>) priorityQueue0);
      assertTrue(hashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashSet<Integer> hashSet0 = SetUtil.newHashSet();
      SetUtil.unmodifiableSet((Set<?>) hashSet0);
      Set<String> set0 = SetUtil.singletonSet("gAw59 m7!UbDvZa*.T");
      SetUtil.unionView((Set<? extends String>) set0, (Set<? extends String>) set0);
      Set<Object> set1 = SetUtil.emptySetIfNull((Set<Object>) null);
      SetUtil.differenceView((Set<Integer>) hashSet0, (Set<?>) set1);
      SetUtil.newSortedSet();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Object> treeSet0 = SetUtil.newSortedSet((Comparator<? super Object>) comparator0);
      // Undeclared exception!
      try { 
        SetUtil.intersectionView((Set<Object>) null, (Set<?>) treeSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // set1
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
