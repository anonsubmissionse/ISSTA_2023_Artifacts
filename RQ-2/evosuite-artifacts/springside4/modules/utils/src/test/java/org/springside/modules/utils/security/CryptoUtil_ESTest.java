/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 04:08:56 GMT 2022
 */

package org.springside.modules.utils.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.InvalidParameterException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.security.CryptoUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CryptoUtil_ESTest extends CryptoUtil_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[9];
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray0, byteArray1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Invalid AES key length: 9 bytes
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      boolean boolean0 = CryptoUtil.isMacValid(byteArray0, (byte[]) null, byteArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      byte[] byteArray1 = CryptoUtil.generateHmacSha1Key();
      CryptoUtil.hmacSha1(byteArray1, byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      byte[] byteArray1 = CryptoUtil.hmacSha1(byteArray0, byteArray0);
      boolean boolean0 = CryptoUtil.isMacValid(byteArray1, byteArray0, byteArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      byte[] byteArray1 = new byte[0];
      String string0 = CryptoUtil.aesDecrypt(byteArray1, byteArray0, byteArray0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      byte[] byteArray1 = new byte[0];
      String string0 = CryptoUtil.aesDecrypt(byteArray1, byteArray0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.isMacValid((byte[]) null, (byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CryptoUtil.hmacSha1(byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.generateAesKey((-3051));
        fail("Expecting exception: InvalidParameterException");
      } catch(InvalidParameterException e) {
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      byte[] byteArray1 = CryptoUtil.hmacSha1(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray1, byteArray0, byteArray1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Wrong IV length: must be 16 bytes long
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray0, byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateHmacSha1Key();
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray0, byteArray1, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt((byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt((byte[]) null, byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, byteArray1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, byteArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Given final block not properly padded. Such issues can arise if a bad key is used during decryption.
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey(128);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CryptoUtil cryptoUtil0 = new CryptoUtil();
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // Given final block not properly padded. Such issues can arise if a bad key is used during decryption.
         //
         verifyException("org.springside.modules.utils.base.ExceptionUtil", e);
      }
  }
}
