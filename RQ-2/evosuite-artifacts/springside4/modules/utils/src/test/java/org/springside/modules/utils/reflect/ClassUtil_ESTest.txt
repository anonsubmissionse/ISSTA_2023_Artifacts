 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method method0 = ClassUtil.getAccessibleMethodByName(class0, ",](wcz;%n!+ R?KRo");
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Field field0 = ClassUtil.getAccessibleField(class0, "A1G<4*GzezaOi:p");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Annotation> class1 = Annotation.class;
      Set<Method> set0 = ClassUtil.getAnnotatedPublicMethods((Class<?>) class0, class1);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      Set<Field> set0 = ClassUtil.getAnnotatedFields((Class<?>) class0, class1);
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Class<?> class0 = ClassUtil.unwrapCglib(classUtils_Interfaces0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = ClassUtil.getShortClassName("lAW3");
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class[] classArray0 = (Class[]) Array.newInstance(Class.class, 4);
      String string0 = ClassUtil.getShortClassName(classArray0[1]);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = ClassUtil.getPackageName("{.SB1~n:zcSP`r?Iaxk");
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = ClassUtil.getPackageName((Class<?>) null);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtil.getAllInterfaces(class0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapCglib((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Instance must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.makeAccessible((Method) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ClassUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.makeAccessible((Field) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ClassUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getShortClassName("[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName("[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.getGetterMethod(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ClassUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGetterMethod((Class<?>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // class can't be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassGenricType((Class) null, 66);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ClassUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getAnnotatedPublicFields((Class<?>) null, (Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.getAnnotatedFields((Class<?>) class0, class0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getAllAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ClassUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.getAccessibleMethodByName(class0, "G-$");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 9);
      // Undeclared exception!
      try { 
        ClassUtil.getAccessibleMethod(class0, ">Zu*l-GS5QJT?(", classArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ClassUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.getAccessibleField(class0, "G6Ezanl");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ClassUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
      Class<?> class0 = ClassUtil.unwrapCglib(classUtils0);
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 6);
      Method method0 = ClassUtil.getAccessibleMethod(class0, "KKjZ]*/", classArray0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Set<Field> set0 = ClassUtil.getAnnotatedFields((Class<?>) class0, class1);
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Double> class1 = ClassUtil.getClassGenricType((Class) class0);
      List<Class<?>> list0 = ClassUtil.getAllSuperclasses(class1);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassLoader classLoader0 = ClassUtil.getDefaultClassLoader();
      boolean boolean0 = ClassUtil.isPresent("org.springside.modules.utils.reflect.ClassUtil", classLoader0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Method method0 = ClassUtil.getSetterMethod(class0, "", class0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Set<Field> set0 = ClassUtil.getAnnotatedPublicFields((Class<?>) class0, class1);
      assertEquals(1, set0.size());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Annotation> class1 = Annotation.class;
      Set<Field> set0 = ClassUtil.getAnnotatedPublicFields((Class<?>) class0, class1);
      assertTrue(set0.isEmpty());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = ClassUtil.getPackageName("");
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = ClassUtil.getShortClassName("");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassGenricType((Class) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.reflect.ClassUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = ClassUtil.isPresent("g(z}", classLoader0);
      assertTrue(boolean0);
}
