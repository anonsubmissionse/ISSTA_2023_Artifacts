/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 03:52:02 GMT 2022
 */

package org.springside.modules.utils.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ConcurrentHashMultiset;
import com.google.common.collect.ImmutableSetMultimap;
import com.google.common.collect.LinkedListMultimap;
import com.google.common.collect.MapDifference;
import com.google.common.collect.Multimap;
import com.google.common.collect.TreeMultimap;
import com.google.common.collect.TreeRangeMap;
import java.lang.reflect.Array;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.BiFunction;
import java.util.function.IntBinaryOperator;
import java.util.function.ToIntFunction;
import org.apache.commons.lang3.mutable.MutableInt;
import org.apache.commons.lang3.mutable.MutableLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.MapUtil;
import org.springside.modules.utils.collection.type.primitive.IntObjectHashMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapUtil_ESTest extends MapUtil_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ConcurrentHashMap<Object, Object> concurrentHashMap0 = new ConcurrentHashMap<Object, Object>();
      MutableLong mutableLong0 = new MutableLong((-1L));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduce((-1L), (BiFunction<? super Object, ? super Object, ? extends Integer>) biFunction0, (BiFunction<? super Integer, ? super Integer, ? extends Integer>) biFunction0);
      Object object0 = MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<Object, Object>) concurrentHashMap0, (Object) mutableLong0, (Object) concurrentHashMap0);
      objectArray0[0] = object0;
      MutableInt mutableInt0 = new MutableInt(mutableLong0);
      ConcurrentHashMap concurrentHashMap1 = new ConcurrentHashMap<MutableInt, MutableInt>();
      Object object1 = new Object();
      objectArray0[1] = object1;
      // Undeclared exception!
      try { 
        MapUtil.newHashMap(objectArray0, objectArray0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Float float0 = new Float((-3971.86428));
      Float.sum((-117.0F), (-117.0F));
      MutableLong mutableLong0 = new MutableLong(float0);
      MapUtil.singletonMap(mutableLong0, mutableLong0);
      MapUtil.createRangeMap();
      MapUtil.createConcurrentMapCounter();
      Integer[] integerArray0 = new Integer[0];
      MapUtil.newHashMap(integerArray0, integerArray0);
      TreeMap<Locale.FilteringMode, String> treeMap0 = MapUtil.newSortedMap();
      SortedMap<Locale.FilteringMode, String> sortedMap0 = MapUtil.unmodifiableSortedMap((SortedMap<Locale.FilteringMode, ? extends String>) treeMap0);
      TreeMap<Locale.FilteringMode, String> treeMap1 = new TreeMap<Locale.FilteringMode, String>(sortedMap0);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConcurrentSkipListMap<Locale.FilteringMode, MutableLong> concurrentSkipListMap0 = new ConcurrentSkipListMap<Locale.FilteringMode, MutableLong>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Byte byte0 = new Byte((byte) (-65));
      MutableLong mutableLong0 = new MutableLong((Number) byte0);
      mutableLong0.decrementAndGet();
      mutableLong0.getAndIncrement();
      concurrentSkipListMap0.put(locale_FilteringMode0, mutableLong0);
      Short short0 = new Short((short)1733);
      concurrentSkipListMap0.clone();
      Short.toUnsignedInt((short) (-2856));
      MutableLong mutableLong1 = new MutableLong((Number) short0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      concurrentSkipListMap0.put(locale_FilteringMode1, mutableLong1);
      concurrentSkipListMap0.put(locale_FilteringMode0, mutableLong1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      MapUtil.ValueCreator<MutableLong> mapUtil_ValueCreator0 = (MapUtil.ValueCreator<MutableLong>) mock(MapUtil.ValueCreator.class, new ViolatedAssumptionAnswer());
      MapUtil.createIfAbsent((ConcurrentMap<Locale.FilteringMode, MutableLong>) concurrentSkipListMap0, locale_FilteringMode2, (MapUtil.ValueCreator<? extends MutableLong>) mapUtil_ValueCreator0);
      MapUtil.newSortedMap();
      MapUtil.createWeakValueConcurrentHashMap((int) 1733, 43);
      MapUtil.createListValueMap(62680, 3522);
      MapUtil.createRangeMap();
      MapUtil.emptyMap();
      MapUtil.createWeakValueConcurrentHashMap(0, 43);
      // Undeclared exception!
      try { 
        MapUtil.createMutableIntValueHashMap(1448, (-5885.054F));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -5885.054
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.difference((Map<? extends Integer, ? extends Integer>) null, (Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MapUtil.newSortedMap();
      MapUtil.createRangeMap();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g4";
      stringArray0[1] = "up fn{Kf%z";
      stringArray0[2] = "4]4+m$)PEw7x1";
      MapUtil.newHashMap(locale_FilteringModeArray0, stringArray0);
      MapUtil.newHashMap();
      // Undeclared exception!
      try { 
        MapUtil.unmodifiableMap((Map<?, ? extends Class<MutableLong>>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConcurrentHashMap<Object, String> concurrentHashMap0 = new ConcurrentHashMap<Object, String>();
      concurrentHashMap0.clear();
      MapUtil.isNotEmpty(concurrentHashMap0);
      // Undeclared exception!
      try { 
        MapUtil.createSortedSetValueMap((Comparator<MutableInt>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MapUtil.newHashMapWithCapacity(Integer.MAX_VALUE, (float) Integer.MAX_VALUE);
      // Undeclared exception!
      MapUtil.createWeakKeyConcurrentHashMap(Integer.MAX_VALUE, Integer.MAX_VALUE);
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Map<String, Integer> map0 = MapUtil.emptyMapIfNull((Map<String, Integer>) null);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>(map0);
      String string0 = "org.springside.modules.utils.collection.MapUtil";
      concurrentHashMap0.contains("org.springside.modules.utils.collection.MapUtil");
      concurrentHashMap0.size();
      concurrentHashMap0.put("org.springside.modules.utils.collection.MapUtil", "org.springside.modules.utils.collection.MapUtil");
      MapUtil.ValueCreator<String> mapUtil_ValueCreator0 = (MapUtil.ValueCreator<String>) mock(MapUtil.ValueCreator.class, new ViolatedAssumptionAnswer());
      MapUtil.createIfAbsent((ConcurrentMap<String, Object>) concurrentHashMap0, "org.springside.modules.utils.collection.MapUtil", (MapUtil.ValueCreator<?>) mapUtil_ValueCreator0);
      MapUtil.createRangeMap();
      HashMap<MutableLong, Integer> hashMap0 = new HashMap<MutableLong, Integer>();
      MutableLong mutableLong0 = new MutableLong(1054L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(mutableLong0, biFunction0);
      MapUtil.difference((Map<? extends MutableLong, ? extends Integer>) hashMap0, (Map<? extends MutableLong, ? extends Integer>) hashMap0);
      Comparator<MutableInt> comparator0 = (Comparator<MutableInt>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MapUtil.createSortedSetValueMap((Comparator<MutableInt>) comparator0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5 cannot be cast to com.google.common.collect.SortedSetMultimap
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createSortedSetValueMap((Comparator<MutableInt>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MapUtil.newSortedMap();
      MapUtil.createListValueMap(0, 0);
      MapUtil.newHashMap();
      // Undeclared exception!
      try { 
        MapUtil.createLongObjectHashMap((-501), (float) 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeMap<MutableLong, MutableLong> treeMap0 = MapUtil.newSortedMap();
      treeMap0.ceilingEntry((MutableLong) null);
      MapUtil.unmodifiableMap((Map<? extends MutableLong, ? extends MutableLong>) treeMap0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MapUtil.createIntObjectHashMap(0, 1271.2F);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.IntObjectHashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Locale.FilteringMode, MutableInt> hashMap0 = MapUtil.createMutableIntValueHashMap(0, 2216.994F);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Long long0 = new Long(2022L);
      MutableInt mutableInt0 = new MutableInt(long0);
      hashMap0.put(locale_FilteringMode0, mutableInt0);
      MapUtil.isEmpty(hashMap0);
      // Undeclared exception!
      try { 
        MapUtil.createWeakKeyConcurrentHashMap(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MapUtil.createSortedSetValueMap();
      Vector<MutableInt> vector0 = new Vector<MutableInt>();
      MutableInt mutableInt0 = new MutableInt(25);
      vector0.add(mutableInt0);
      HashMap<MutableInt, MutableInt> hashMap0 = MapUtil.newHashMap((List<MutableInt>) vector0, (List<MutableInt>) vector0);
      assertTrue(hashMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<MutableInt, Object> hashMap0 = MapUtil.newHashMap();
      MutableInt mutableInt0 = new MutableInt(5890);
      hashMap0.put(mutableInt0, mutableInt0);
      MutableInt mutableInt1 = new MutableInt((-2260));
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      Double double0 = new Double(1042.539);
      MutableLong mutableLong0 = new MutableLong((long) 5890);
      hashMap0.put(mutableInt1, mutableLong0);
      mutableLong0.decrement();
      mutableInt1.addAndGet((Number) double0);
      hashMap0.remove((Object) mutableInt2);
      hashMap0.put(mutableInt1, mutableInt1);
      hashMap0.clear();
      hashMap0.put(mutableInt1, mutableInt1);
      MapUtil.isNotEmpty(hashMap0);
      MapUtil.createConcurrentMapCounter();
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<String>) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      MapUtil.newHashMapWithCapacity(0, 1.6F);
      // Undeclared exception!
      try { 
        MapUtil.createMutableLongValueHashMap(0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MapUtil.createMutableLongValueHashMap(1, (float) 1);
      // Undeclared exception!
      try { 
        MapUtil.unmodifiableSortedMap((SortedMap<MutableInt, ?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createListValueMap((-1), 2058);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -1
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createListValueMap((-332), (-332));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -332
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.iterator();
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      stack1.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      stack1.remove((Object) locale_FilteringMode1);
      stack1.add(locale_FilteringMode1);
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<String>) stack0, (List<Locale.FilteringMode>) stack1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // keys.size is 0 but values.size is 2
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MapUtil.createRangeMap();
      int int0 = 414;
      ConcurrentMap<MutableLong, Integer> concurrentMap0 = MapUtil.createWeakValueConcurrentHashMap(414, 414);
      MutableLong mutableLong0 = new MutableLong((long) 414);
      MapUtil.ValueCreator<Integer> mapUtil_ValueCreator0 = (MapUtil.ValueCreator<Integer>) mock(MapUtil.ValueCreator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(mapUtil_ValueCreator0).get();
      // Undeclared exception!
      try { 
        MapUtil.createIfAbsent((ConcurrentMap<MutableLong, Integer>) concurrentMap0, mutableLong0, (MapUtil.ValueCreator<? extends Integer>) mapUtil_ValueCreator0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConcurrentMap<Object, Integer> concurrentMap0 = MapUtil.createWeakKeyConcurrentHashMap(46, 46);
      MapUtil.isNotEmpty(concurrentMap0);
      MapUtil.createMutableLongValueHashMap(46, (float) 46);
      MapUtil.createConcurrentMapCounter();
      ArrayList<Class<Integer>> arrayList0 = new ArrayList<Class<Integer>>();
      ArrayList<MutableLong> arrayList1 = new ArrayList<MutableLong>();
      MapUtil.newHashMap((List<Class<Integer>>) arrayList0, (List<MutableLong>) arrayList1);
      IntObjectHashMap<Class<String>> intObjectHashMap0 = MapUtil.createIntObjectHashMap(46, 1.0F);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcurrentMap<Object, Integer> concurrentMap0 = MapUtil.createWeakKeyConcurrentHashMap(46, 46);
      MapUtil.isNotEmpty(concurrentMap0);
      MapUtil.createMutableLongValueHashMap(46, (float) 46);
      MapUtil.createConcurrentMapCounter();
      ArrayList<Class<Integer>> arrayList0 = new ArrayList<Class<Integer>>();
      ArrayList<MutableLong> arrayList1 = new ArrayList<MutableLong>();
      MapUtil.newHashMap((List<Class<Integer>>) arrayList0, (List<MutableLong>) arrayList1);
      IntObjectHashMap<Class<String>> intObjectHashMap0 = MapUtil.createIntObjectHashMap(46, 1.0F);
      ConcurrentHashMultiset<MutableLong> concurrentHashMultiset0 = MapUtil.createConcurrentMapCounter((Iterable<? extends MutableLong>) arrayList1);
      assertNotNull(concurrentHashMultiset0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(957692532);
      MutableInt mutableInt0 = new MutableInt(957692532);
      mutableInt0.incrementAndGet();
      mutableInt0.getAndIncrement();
      MapUtil.singletonMap(integer0, mutableInt0);
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = MapUtil.newConcurrentSortedMap();
      // Undeclared exception!
      try { 
        MapUtil.createIfAbsent((ConcurrentMap<String, Object>) concurrentSkipListMap0, "", (MapUtil.ValueCreator<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MapUtil.createWeakValueConcurrentHashMap(6, 8);
      ConcurrentMap<MutableInt, String> concurrentMap0 = MapUtil.newConcurrentHashMap();
      Map<Object, String> map0 = MapUtil.unmodifiableMap((Map<?, ? extends String>) concurrentMap0);
      MapUtil.difference((Map<?, ? extends String>) concurrentMap0, (Map<?, ? extends String>) map0);
      MapUtil.createLongObjectHashMap(6, 0.5F);
      MapUtil.isEmpty(map0);
      // Undeclared exception!
      MapUtil.createWeakKeyConcurrentHashMap(8, 2147483645);
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConcurrentSkipListMap<Map.Entry<MutableInt, MutableInt>, MutableLong> concurrentSkipListMap0 = new ConcurrentSkipListMap<Map.Entry<MutableInt, MutableInt>, MutableLong>();
      int int0 = 2;
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      Integer.getInteger("X}", integer1);
      Integer.getInteger("", (Integer) null);
      MutableLong mutableLong0 = new MutableLong((Number) integer0);
      // Undeclared exception!
      try { 
        MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<Map.Entry<MutableInt, MutableInt>, MutableLong>) concurrentSkipListMap0, (Map.Entry<MutableInt, MutableInt>) null, mutableLong0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) null);
      int int0 = 65;
      MutableInt mutableInt0 = new MutableInt(65);
      mutableInt0.getAndIncrement();
      mutableInt0.getAndDecrement();
      arrayList0.add((Object) mutableInt0);
      Stack<Map.Entry<String, String>> stack0 = new Stack<Map.Entry<String, String>>();
      Map.Entry<String, String> map_Entry0 = (Map.Entry<String, String>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(65);
      mutableInt0.addAndGet((Number) integer0);
      arrayList0.add((Object) stack0);
      stack0.add(map_Entry0);
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<Object>) arrayList0, (List<Map.Entry<String, String>>) stack0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // keys.size is 3 but values.size is 1
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Map.Entry<Integer, Object> map_Entry0 = (Map.Entry<Integer, Object>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(map_Entry0).toString();
      MapUtil.newHashMap(map_Entry0, (String) null);
      // Undeclared exception!
      try { 
        MapUtil.createConcurrentMapCounter((Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.newEnumMap((Class<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createLongObjectHashMap(0, (-39.495F));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumMap<Locale.FilteringMode, Object> enumMap0 = MapUtil.newEnumMap(class0);
      ConcurrentMap<MutableLong, MutableLong> concurrentMap0 = MapUtil.newConcurrentHashMap();
      MapUtil.isNotEmpty(enumMap0);
      TreeSet<MutableInt> treeSet0 = new TreeSet<MutableInt>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(treeSet0);
      arrayList0.add((Object) concurrentMap0);
      arrayList0.add((Object) null);
      ArrayList<TreeMultimap<MutableInt, Locale.FilteringMode>> arrayList1 = new ArrayList<TreeMultimap<MutableInt, Locale.FilteringMode>>();
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<Object>) arrayList0, (List<TreeMultimap<MutableInt, Locale.FilteringMode>>) arrayList1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // keys.size is 2 but values.size is 0
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MapUtil.emptyMap();
      ArrayDeque<MutableInt> arrayDeque0 = new ArrayDeque<MutableInt>(61);
      ConcurrentHashMultiset<MutableInt> concurrentHashMultiset0 = MapUtil.createConcurrentMapCounter((Iterable<? extends MutableInt>) arrayDeque0);
      assertNotNull(concurrentHashMultiset0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = MapUtil.newHashMap((Object) null, (Object) "keys.size is ");
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapUtil.newSortedMap((Comparator<Object>) comparator0);
      // Undeclared exception!
      MapUtil.createWeakValueConcurrentHashMap(40320, 40320);
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MapUtil.isNotEmpty((Map<?, ?>) null);
      String string0 = " but values.size is ";
      MapUtil.createRangeMap();
      MapUtil.isEmpty((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        MapUtil.createWeakValueConcurrentHashMap((-3730), (-3730));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      String string0 = null;
      MutableInt mutableInt0 = new MutableInt(65);
      mutableInt0.getAndIncrement();
      Stack<Map.Entry<String, String>> stack0 = new Stack<Map.Entry<String, String>>();
      Integer integer0 = new Integer(65);
      Integer integer1 = new Integer(65);
      HashMap<Object, Map.Entry<String, String>> hashMap0 = MapUtil.newHashMap((List<Object>) arrayList0, (List<Map.Entry<String, String>>) stack0);
      stack0.ensureCapacity(65);
      Map.Entry<String, String> map_Entry0 = (Map.Entry<String, String>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      hashMap0.put((Object) null, map_Entry0);
      stack0.removeAllElements();
      ConcurrentMap<String, String> concurrentMap0 = MapUtil.createWeakValueConcurrentHashMap(65, 65);
      // Undeclared exception!
      try { 
        MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<String, String>) concurrentMap0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TreeMultimap[] treeMultimapArray0 = (TreeMultimap[]) Array.newInstance(TreeMultimap.class, 0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((TreeMultimap<Class<Object>, MutableLong>[]) treeMultimapArray0, locale_FilteringModeArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // keys.length is 0 but values.length is 6
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createMutableLongValueHashMap((-1014), (float) (-1014));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1014
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConcurrentSkipListMap<MutableLong, Object> concurrentSkipListMap0 = MapUtil.newConcurrentSortedMap();
      Byte byte0 = new Byte((byte)0);
      MutableLong mutableLong0 = new MutableLong((Number) byte0);
      concurrentSkipListMap0.put(mutableLong0, mutableLong0);
      boolean boolean0 = MapUtil.isNotEmpty(concurrentSkipListMap0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MapUtil.createWeakValueConcurrentHashMap(35, 35);
      MapUtil.createConcurrentMapCounter();
      TreeRangeMap<String, TreeMultimap<Class<Locale.FilteringMode>, Locale.FilteringMode>> treeRangeMap0 = MapUtil.createRangeMap();
      assertNotNull(treeRangeMap0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Locale.FilteringMode> hashMap0 = MapUtil.newHashMap();
      MapUtil.isEmpty(hashMap0);
      ConcurrentMap<MutableLong, MutableLong> concurrentMap0 = MapUtil.newConcurrentHashMap();
      MutableLong mutableLong0 = new MutableLong(0L);
      MutableLong mutableLong1 = MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<MutableLong, MutableLong>) concurrentMap0, mutableLong0, mutableLong0);
      assertEquals(0, mutableLong1.longValue());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConcurrentSkipListMap<Object, String> concurrentSkipListMap0 = MapUtil.newConcurrentSortedMap();
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      concurrentSkipListMap0.remove((Object) locale_Category0, (Object) locale_Category0);
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      concurrentSkipListMap0.put(locale_Category0, "ENAR\"l-oNF`");
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      MutableLong[] mutableLongArray0 = new MutableLong[0];
      // Undeclared exception!
      try { 
        MapUtil.newHashMap(locale_CategoryArray0, mutableLongArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // keys.length is 5 but values.length is 0
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableLong[] mutableLongArray0 = new MutableLong[2];
      MapUtil.newHashMap(mutableLongArray0, (Object[]) mutableLongArray0);
      TreeMap<Locale.FilteringMode, MutableInt> treeMap0 = MapUtil.newSortedMap();
      MapUtil.unmodifiableSortedMap((SortedMap<Locale.FilteringMode, ? extends MutableInt>) treeMap0);
      TreeRangeMap<Integer, Map.Entry<Class<Object>, Class<Object>>> treeRangeMap0 = MapUtil.createRangeMap();
      assertNotNull(treeRangeMap0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MapUtil.createRangeMap();
      ConcurrentMap<MutableLong, Integer> concurrentMap0 = MapUtil.createWeakValueConcurrentHashMap(414, 414);
      MutableLong mutableLong0 = new MutableLong((long) 414);
      Integer integer0 = new Integer(3);
      MapUtil.ValueCreator<Integer> mapUtil_ValueCreator0 = (MapUtil.ValueCreator<Integer>) mock(MapUtil.ValueCreator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(mapUtil_ValueCreator0).get();
      MapUtil.createIfAbsent((ConcurrentMap<MutableLong, Integer>) concurrentMap0, mutableLong0, (MapUtil.ValueCreator<? extends Integer>) mapUtil_ValueCreator0);
      MapUtil.emptyMap();
      // Undeclared exception!
      try { 
        MapUtil.createMutableLongValueHashMap(1217, (-2101.047F));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -2101.047
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MapUtil.isNotEmpty((Map<?, ?>) null);
      Float float0 = new Float((-1205.5944F));
      MutableLong mutableLong0 = new MutableLong(float0);
      mutableLong0.decrement();
      Float.max((-1554.6093F), 294.1088F);
      Float.sum((-1205.5944F), 1.0F);
      mutableLong0.add(1L);
      mutableLong0.addAndGet(1L);
      MapUtil.newHashMap((Object) null, mutableLong0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MapUtil.createSortedSetValueMap(comparator0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5 cannot be cast to com.google.common.collect.SortedSetMultimap
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MapUtil.createRangeMap();
      Map<Integer, MutableInt> map0 = MapUtil.emptyMap();
      MapUtil.difference((Map<? extends Integer, ? extends MutableInt>) map0, (Map<? extends Integer, ? extends MutableInt>) map0);
      // Undeclared exception!
      try { 
        MapUtil.createLongObjectHashMap((-902), (float) (-902));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException("org.springside.modules.utils.collection.type.primitive.LongObjectHashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConcurrentHashMap<String, Class<MutableLong>> concurrentHashMap0 = new ConcurrentHashMap<String, Class<MutableLong>>();
      MapUtil.createListValueMap(9, 9);
      ConcurrentSkipListMap<MutableInt, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<MutableInt, String>();
      MutableInt mutableInt0 = new MutableInt(1);
      concurrentSkipListMap0.put(mutableInt0, "O");
      mutableInt0.setValue(4704);
      mutableInt0.subtract(14);
      Integer integer0 = new Integer((-964));
      mutableInt0.add((Number) integer0);
      MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<MutableInt, String>) concurrentSkipListMap0, mutableInt0, "com.google.common.collect.Maps$IteratorBasedAbstractMap$1");
      MapUtil.emptyMapIfNull((Map<Object, String>) null);
      ConcurrentMap<MutableLong, Locale.FilteringMode> concurrentMap0 = MapUtil.newConcurrentHashMap();
      assertTrue(concurrentMap0.isEmpty());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ConcurrentHashMap<Object, Object> concurrentHashMap0 = new ConcurrentHashMap<Object, Object>();
      MutableLong mutableLong0 = new MutableLong((-1L));
      mutableLong0.getAndDecrement();
      Object object0 = MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<Object, Object>) concurrentHashMap0, (Object) mutableLong0, (Object) concurrentHashMap0);
      concurrentHashMap0.toString();
      objectArray0[0] = object0;
      MutableInt mutableInt0 = new MutableInt(mutableLong0);
      concurrentHashMap0.put(mutableLong0, mutableInt0);
      Object object1 = new Object();
      objectArray0[1] = object1;
      HashMap<Object, Object> hashMap0 = MapUtil.newHashMap(objectArray0, objectArray0);
      MapUtil.isEmpty(hashMap0);
      MapUtil.newConcurrentSortedMap();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumMap<Locale.FilteringMode, MutableLong> enumMap0 = MapUtil.newEnumMap(class0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Map<MutableInt, Object> map0 = MapUtil.emptyMap();
      Integer integer0 = new Integer(3461);
      MapUtil.singletonMap(integer0, (Object) map0);
      TreeMap<MutableLong, String> treeMap0 = MapUtil.newSortedMap();
      SortedMap<MutableLong, String> sortedMap0 = MapUtil.unmodifiableSortedMap((SortedMap<MutableLong, ? extends String>) treeMap0);
      SortedMap<MutableLong, String> sortedMap1 = MapUtil.unmodifiableSortedMap((SortedMap<MutableLong, ? extends String>) sortedMap0);
      ConcurrentHashMap<MutableLong, String> concurrentHashMap0 = new ConcurrentHashMap<MutableLong, String>(sortedMap1);
      Map<MutableLong, String> map1 = MapUtil.emptyMapIfNull((Map<MutableLong, String>) concurrentHashMap0);
      assertTrue(map1.isEmpty());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MapUtil.emptyMap();
      ConcurrentMap<Integer, Locale.FilteringMode> concurrentMap0 = MapUtil.createWeakValueConcurrentHashMap(5, 5);
      MapDifference<Integer, Locale.FilteringMode> mapDifference0 = MapUtil.difference((Map<? extends Integer, ? extends Locale.FilteringMode>) concurrentMap0, (Map<? extends Integer, ? extends Locale.FilteringMode>) concurrentMap0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = MapUtil.isEmpty((Map<?, ?>) null);
      MapUtil.newSortedMap();
      TreeMap<Integer, MutableLong> treeMap0 = new TreeMap<Integer, MutableLong>();
      Integer integer0 = new Integer(405);
      MutableLong mutableLong0 = new MutableLong((Number) integer0);
      treeMap0.put(integer0, mutableLong0);
      Integer integer1 = new Integer(97);
      treeMap0.ceilingKey(integer1);
      boolean boolean1 = MapUtil.isNotEmpty(treeMap0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = MapUtil.isEmpty((Map<?, ?>) null);
      MapUtil.newSortedMap();
      TreeMap<Integer, MutableLong> treeMap0 = new TreeMap<Integer, MutableLong>();
      Integer integer0 = new Integer(405);
      MutableLong mutableLong0 = new MutableLong((Number) integer0);
      treeMap0.put(integer0, mutableLong0);
      Integer integer1 = new Integer(97);
      treeMap0.ceilingKey(integer1);
      boolean boolean1 = MapUtil.isNotEmpty(treeMap0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<String, MutableLong> hashMap0 = MapUtil.newHashMap();
      MutableInt mutableInt0 = new MutableInt(0);
      MutableLong mutableLong0 = new MutableLong(0L);
      ImmutableSetMultimap<MutableInt, MutableLong> immutableSetMultimap0 = ImmutableSetMultimap.of(mutableInt0, mutableLong0, mutableInt0, mutableLong0, mutableInt0, mutableLong0, mutableInt0, mutableLong0);
      LinkedListMultimap<MutableInt, MutableLong> linkedListMultimap0 = LinkedListMultimap.create((Multimap<? extends MutableInt, ? extends MutableLong>) immutableSetMultimap0);
      List<MutableLong> list0 = linkedListMultimap0.removeAll(hashMap0);
      linkedListMultimap0.clear();
      Stack<Object> stack0 = new Stack<Object>();
      MapUtil.newHashMap((List<MutableLong>) list0, (List<Object>) stack0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      HashMap<Object, Locale.FilteringMode> hashMap1 = MapUtil.newHashMap((List<Object>) stack0, (List<Locale.FilteringMode>) linkedList0);
      MapUtil.emptyMapIfNull((Map<Object, Locale.FilteringMode>) hashMap1);
      MapUtil mapUtil0 = new MapUtil();
      MapUtil.createSortedSetValueMap();
      // Undeclared exception!
      try { 
        MapUtil.newHashMapWithCapacity(0, (float) 0L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.iterator();
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      stack1.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      stack1.remove((Object) locale_FilteringMode1);
      stack1.add(locale_FilteringMode1);
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<String>) stack0, (List<Locale.FilteringMode>) stack1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // keys.size is 0 but values.size is 2
         //
         verifyException("org.springside.modules.utils.collection.MapUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConcurrentMap<String, Object> concurrentMap0 = MapUtil.newConcurrentHashMap();
      MapUtil.isEmpty(concurrentMap0);
      MapUtil.newSortedMap();
      MapUtil.createMutableIntValueHashMap(1, 0.75F);
      MapUtil.createRangeMap();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      MapUtil.newEnumMap(class0);
      MapUtil.createRangeMap();
      MapUtil.isEmpty(concurrentMap0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapUtil.newSortedMap(comparator0);
      ConcurrentHashMap<Integer, MutableInt> concurrentHashMap0 = new ConcurrentHashMap<Integer, MutableInt>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeysToInt(1, toIntFunction0, 1, intBinaryOperator0);
      concurrentHashMap0.clear();
      MapUtil.emptyMapIfNull((Map<Integer, MutableInt>) concurrentHashMap0);
      MapUtil mapUtil0 = new MapUtil();
  }
}
