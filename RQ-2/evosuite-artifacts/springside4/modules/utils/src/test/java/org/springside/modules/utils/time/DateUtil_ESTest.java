/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 03:49:46 GMT 2022
 */

package org.springside.modules.utils.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.springside.modules.utils.time.DateUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateUtil_ESTest extends DateUtil_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      int int0 = DateUtil.getMonthLength((Date) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = DateUtil.getMonthLength(0, 12);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), (-11), (-11));
      Date date0 = DateUtil.nextYear(mockDate0);
      Date date1 = DateUtil.nextHour(date0);
      boolean boolean0 = DateUtil.isBetween(mockDate0, date1, mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), (-11), (-11));
      Date date0 = DateUtil.nextYear(mockDate0);
      Date date1 = DateUtil.nextHour(date0);
      boolean boolean0 = DateUtil.isBetween(mockDate0, date1, mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(3600000L);
      Date date0 = Date.from(instant0);
      Date date1 = DateUtil.subSeconds(date0, 775);
      assertNotNull(date1.toString());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.subDays(mockDate0, 8);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.nextWeek(mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.nextMonth(mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.nextMinute(mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-19), (-19), (-19));
      Date date0 = DateUtil.nextDate(mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-18), (-18), (-2358));
      Date date0 = DateUtil.endOfWeek(mockDate0);
      boolean boolean0 = DateUtil.isSameDay(date0, mockDate0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-18), (-18), (-2358));
      Date date0 = DateUtil.endOfWeek(mockDate0);
      boolean boolean0 = DateUtil.isSameDay(date0, mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1163), 653, (-1163));
      int int0 = DateUtil.getMonthLength((Date) mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-18), (-18), (-2358));
      Date date0 = DateUtil.endOfYear(mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3519), (-3519), (-3519));
      Date date0 = DateUtil.endOfMonth(mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.addDays(mockDate0, 0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subWeeks((Date) null, 939);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subMonths((Date) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subMinutes((Date) null, 1779);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subHours((Date) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setYears((Date) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setSeconds((Date) null, 1644);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setMonths((Date) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setMinutes((Date) null, 1582);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setMilliseconds((Date) null, 812);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setHours((Date) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setDays((Date) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextYear((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 883, 280000000, 883, 883);
      // Undeclared exception!
      try { 
        DateUtil.nextYear(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 280000000, 7, 2661);
      // Undeclared exception!
      try { 
        DateUtil.nextWeek(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(279999992, 279999992, (-1749), 132, (-828));
      // Undeclared exception!
      try { 
        DateUtil.nextMonth(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate(279999980, (-1), (-1222));
      // Undeclared exception!
      try { 
        DateUtil.nextMinute(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextHour((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate(279999980, 279999980, 500);
      // Undeclared exception!
      try { 
        DateUtil.nextHour(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 9, 280000000, 9, 280000000, 9);
      // Undeclared exception!
      try { 
        DateUtil.nextDate(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.isSameTime((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.time.DateUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateUtil.isSameDay((Date) null, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.isLeapYear((Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getWeekOfYear((Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getWeekOfMonth((Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getMonthLength((Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getDayOfYear((Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getDayOfWeek((Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000020, 280000020, 48);
      // Undeclared exception!
      try { 
        DateUtil.endOfYear(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfWeek((Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 280000000, 280000000, 280000000);
      // Undeclared exception!
      try { 
        DateUtil.endOfWeek(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 588, (-1121), (-755), (-588));
      // Undeclared exception!
      try { 
        DateUtil.endOfMonth(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfMinute((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfHour((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, (-973), 23);
      // Undeclared exception!
      try { 
        DateUtil.endOfHour(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfDate((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 822, 822);
      // Undeclared exception!
      try { 
        DateUtil.endOfDate(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfYear((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 10, 280000000, 280000000, (-855));
      // Undeclared exception!
      try { 
        DateUtil.beginOfYear(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfWeek((Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 8, 8, 8);
      // Undeclared exception!
      try { 
        DateUtil.beginOfWeek(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfMonth((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, (-2), (-2), (-2), (-2));
      // Undeclared exception!
      try { 
        DateUtil.beginOfMonth(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfMinute((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 280000000, (-192), (-192));
      // Undeclared exception!
      try { 
        DateUtil.beginOfMinute(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfHour((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 7, 280000000, (-2934));
      // Undeclared exception!
      try { 
        DateUtil.beginOfHour(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfDate((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, (-851), (-3008), (-540), (-909));
      // Undeclared exception!
      try { 
        DateUtil.beginOfDate(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addWeeks((Date) null, (-2732));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addSeconds((Date) null, 2265);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addMonths((Date) null, (-2667));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addMinutes((Date) null, 5);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addHours((Date) null, 628);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getMonthLength(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 0
         //
         verifyException("org.springside.modules.utils.time.DateUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = DateUtil.isLeapYear(279999980);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      boolean boolean0 = DateUtil.isLeapYear((-1301));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      boolean boolean0 = DateUtil.isLeapYear(812);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      int int0 = DateUtil.getDayOfWeek(mockDate0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      int int0 = DateUtil.getDayOfWeek(mockDate0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextMinute((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextDate((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextWeek((Date) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextMonth((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = DateUtil.getMonthLength(2, 2);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getMonthLength(0, 1582);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 1582
         //
         verifyException("org.springside.modules.utils.time.DateUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      boolean boolean0 = DateUtil.isLeapYear(1700);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      boolean boolean0 = DateUtil.isLeapYear(280000000);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = DateUtil.getMonthLength(28, 2);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), (-11), (-11));
      boolean boolean0 = DateUtil.isLeapYear((Date) mockDate0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1739, (-1872), 0);
      Date date0 = DateUtil.nextYear(mockDate0);
      boolean boolean0 = DateUtil.isBetween(mockDate0, date0, date0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1739, (-1872), 0);
      Date date0 = DateUtil.nextYear(mockDate0);
      boolean boolean0 = DateUtil.isBetween(mockDate0, date0, date0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      // Undeclared exception!
      try { 
        DateUtil.isBetween(mockDate0, mockDate0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // some date parameters is null or dateBein after dateEnd
         //
         verifyException("org.springside.modules.utils.time.DateUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateUtil.isBetween(mockDate0, (Date) null, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // some date parameters is null or dateBein after dateEnd
         //
         verifyException("org.springside.modules.utils.time.DateUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.isBetween((Date) null, (Date) null, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // some date parameters is null or dateBein after dateEnd
         //
         verifyException("org.springside.modules.utils.time.DateUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = DateUtil.isSameTime(mockDate0, mockDate0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22), (-22));
      Date date0 = DateUtil.endOfMinute(mockDate0);
      boolean boolean0 = DateUtil.isSameTime(mockDate0, date0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22), (-22));
      Date date0 = DateUtil.endOfMinute(mockDate0);
      boolean boolean0 = DateUtil.isSameTime(mockDate0, date0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.setSeconds(mockDate0, (-907));
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1959L);
      Date date0 = DateUtil.setMilliseconds(mockDate0, 1747);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.addHours(mockDate0, 5);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.subWeeks(mockDate0, 3);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1739, (-1872), 0);
      Date date0 = DateUtil.subMonths(mockDate0, (-1872));
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.addWeeks(mockDate0, 621);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.endOfHour(mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.setHours(mockDate0, (-3975));
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateUtil dateUtil0 = new DateUtil();
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      int int0 = DateUtil.getDayOfYear(mockDate0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.beginOfWeek(mockDate0);
      boolean boolean0 = DateUtil.isBetween(date0, mockDate0, mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.beginOfWeek(mockDate0);
      boolean boolean0 = DateUtil.isBetween(date0, mockDate0, mockDate0);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1318, 1318, 1318);
      int int0 = DateUtil.getWeekOfYear(mockDate0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.nextHour(mockDate0);
      // Undeclared exception!
      try { 
        DateUtil.isBetween(date0, date0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // some date parameters is null or dateBein after dateEnd
         //
         verifyException("org.springside.modules.utils.time.DateUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22), (-22));
      Date date0 = DateUtil.addSeconds(mockDate0, (-22));
      boolean boolean0 = DateUtil.isSameTime(mockDate0, date0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22), (-22));
      Date date0 = DateUtil.addSeconds(mockDate0, (-22));
      boolean boolean0 = DateUtil.isSameTime(mockDate0, date0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.subMinutes(mockDate0, 5);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.addMonths(mockDate0, 1900);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.setDays(mockDate0, 621);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1959L);
      Date date0 = DateUtil.setMonths(mockDate0, 1747);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(1L);
      Date date0 = Date.from(instant0);
      Date date1 = DateUtil.endOfMinute(date0);
      Date date2 = DateUtil.beginOfMinute(date1);
      assertNotNull(date1.toString());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(1L);
      Date date0 = Date.from(instant0);
      Date date1 = DateUtil.endOfMinute(date0);
      Date date2 = DateUtil.beginOfMinute(date1);
      assertNotNull(date2.toString());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1318, 1318, 1318);
      Date date0 = DateUtil.setYears(mockDate0, 23);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = DateUtil.isLeapYear((Date) mockDate0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      Date date0 = DateUtil.setMinutes(mockDate0, 6);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(1L);
      Date date0 = Date.from(instant0);
      Date date1 = DateUtil.beginOfDate(date0);
      assertNotNull(date1.toString());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = DateUtil.isSameDay(mockDate0, mockDate0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.beginOfHour(mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.beginOfYear(mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      Date date0 = DateUtil.beginOfMonth(mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfYear((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(3600000L);
      Date date0 = Date.from(instant0);
      // Undeclared exception!
      try { 
        DateUtil.getMonthLength(date0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 0
         //
         verifyException("org.springside.modules.utils.time.DateUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      int int0 = DateUtil.getWeekOfMonth(mockDate0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subSeconds((Date) null, (-3276));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22), (-22));
      Date date0 = DateUtil.endOfDate(mockDate0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfMonth((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, (-471), (-1173), (-939), (-1002));
      // Undeclared exception!
      try { 
        DateUtil.endOfMinute(mockDate0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.subHours(mockDate0, 5);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addDays((Date) null, 8);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      Date date0 = DateUtil.addMinutes(mockDate0, 0);
      assertNotNull(date0.toString());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subDays((Date) null, (-2049));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.apache.commons.lang3.time.DateUtils", e);
      }
  }
}
