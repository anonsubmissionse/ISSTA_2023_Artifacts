/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 04:08:39 GMT 2022
 */

package org.springside.modules.utils.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springside.modules.utils.base.PropertiesUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertiesUtil_ESTest extends PropertiesUtil_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("");
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".2+)*{6W1rJ)uRav");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "%c0zm3p_WY%~jecS[NF");
      Properties properties0 = PropertiesUtil.loadFromFile(".2+)*{6W1rJ)uRav");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("ikx`t3n,C3");
      String string0 = PropertiesUtil.getString(properties0, "com.google.common.io.PatternFilenameFilter", (String) null);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("org.sp1ingside.modules.Dtils.io.IOUtil");
      String string0 = PropertiesUtil.getString(properties0, "org.sp1ingside.modules.Dtils.io.IOUtil", "org.sp1ingside.modules.Dtils.io.IOUtil");
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Properties properties0 = new Properties();
      Long long0 = PropertiesUtil.getLong(properties0, "?8a8wO(aA)<&k~;CY", (Long) null);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("JDwOl8YtsOBY+N*PY");
      Long long0 = new Long(0L);
      Long long1 = PropertiesUtil.getLong(properties0, "JDwOl8YtsOBY+N*PY", long0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Properties properties0 = new Properties();
      Long long0 = new Long(1L);
      Long long1 = PropertiesUtil.getLong(properties0, " fail ", long0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("com.google.common.io.PatternFilenameFilter");
      Integer integer0 = PropertiesUtil.getInt(properties0, "com.google.common.io.PatternFilenameFilter", (Integer) null);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("org.springside.modules.utils.base.PropertiesUtil");
      Integer integer0 = new Integer(0);
      Integer integer1 = PropertiesUtil.getInt(properties0, "org.springside.modules.utils.base.PropertiesUtil", integer0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Properties properties0 = new Properties();
      Integer integer0 = Integer.valueOf(313);
      Integer integer1 = PropertiesUtil.getInt(properties0, "Q3jd$s", integer0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Properties properties0 = new Properties();
      Integer integer0 = new Integer((-1));
      Integer integer1 = PropertiesUtil.getInt(properties0, "", integer0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("com.google.common.io.PatternFilenameFilter");
      Double double0 = PropertiesUtil.getDouble(properties0, "com.google.common.io.PatternFilenameFilter", (Double) null);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("Load property from ");
      Double double0 = new Double(0.0);
      Double double1 = PropertiesUtil.getDouble(properties0, "Load property from ", double0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Properties properties0 = new Properties();
      Double double0 = new Double(3080.15342399);
      Double double1 = PropertiesUtil.getDouble(properties0, "", double0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      Boolean boolean0 = PropertiesUtil.getBoolean(properties0, "sB,vy\"h[%#izD_*[4", (Boolean) null);
      assertNotNull(boolean0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("Load property from ");
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = PropertiesUtil.getBoolean(properties0, "Load property from ", boolean0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertiesUtil.loadFromString((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "S\\u^^V^d]";
      // Undeclared exception!
      try { 
        PropertiesUtil.loadFromString(string0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Malformed \\uxxxx encoding.
         //
         verifyException("java.util.Properties", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Q");
      String string0 = "r^:\\u+y8>;ej?r_";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      // Undeclared exception!
      try { 
        PropertiesUtil.loadFromFile("Q");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Malformed \\uxxxx encoding.
         //
         verifyException("java.util.Properties", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertiesUtil.getString((Properties) null, "J)#", "org.springside.modules.utils.base.PropertiesUtil");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.base.PropertiesUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Long long0 = new Long(763L);
      // Undeclared exception!
      try { 
        PropertiesUtil.getLong((Properties) null, " fail ", long0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.base.PropertiesUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile(" fail ");
      Double double0 = new Double((-730.6777606374488));
      // Undeclared exception!
      try { 
        PropertiesUtil.getDouble(properties0, (String) null, double0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        PropertiesUtil.getBoolean((Properties) null, "", boolean0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.base.PropertiesUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("org.sp1ingside.modules.Dtils.io.IOUtil");
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = PropertiesUtil.getBoolean(properties0, "org.sp1ingside.modules.Dtils.io.IOUtil", boolean0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("org.sp1ingside.modules.Dtils.io.IOUtil");
      Double double0 = new Double((-14L));
      Double double1 = PropertiesUtil.getDouble(properties0, "org.sp1ingside.modules.Dtils.io.IOUtil", double0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PropertiesUtil propertiesUtil0 = new PropertiesUtil();
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("org.sp1ingside.modules.Dtils.io.IOUtil");
      Long long0 = new Long((-14L));
      Long long1 = PropertiesUtil.getLong(properties0, "org.sp1ingside.modules.Dtils.io.IOUtil", long0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = PropertiesUtil.getString(properties0, "", "?8a8wO(aA)<&k~;CY");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertiesUtil.loadFromFile("");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        PropertiesUtil.getInt((Properties) null, (String) null, integer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.base.PropertiesUtil", e);
      }
  }
}
