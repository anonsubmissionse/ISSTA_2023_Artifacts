/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 04:01:13 GMT 2022
 */

package org.springside.modules.utils.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.base.BooleanUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BooleanUtil_ESTest extends BooleanUtil_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = BooleanUtil.toBoolean("true");
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.toBooleanObject("true");
      Boolean boolean1 = BooleanUtil.parseGeneralString("true", boolean0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.parseGeneralString("true");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.parseGeneralString("false");
      assertFalse(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = BooleanUtil.or(booleanArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      Boolean boolean1 = BooleanUtil.negate(boolean0);
      Boolean boolean2 = BooleanUtil.toBooleanObject((String) null, boolean1);
      assertFalse(boolean2);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = BooleanUtil.negate(boolean0);
      assertFalse(boolean1);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = BooleanUtil.and(booleanArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanUtil.parseGeneralString((String) null, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.base.BooleanUtil", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanUtil.or((boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanUtil.and((boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.BooleanUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = BooleanUtil.negate(false);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = BooleanUtil.negate(true);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.toBooleanObject("T2", (Boolean) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.toBooleanObject((String) null, (Boolean) null);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.toBooleanObject("T2");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.toBooleanObject((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      boolean boolean0 = BooleanUtil.and(booleanArray0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      boolean boolean0 = BooleanUtil.or(booleanArray0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.parseGeneralString((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BooleanUtil booleanUtil0 = new BooleanUtil();
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = BooleanUtil.toBoolean("\"");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.negate((Boolean) null);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean boolean1 = BooleanUtil.parseGeneralString((String) null, boolean0);
      ;
}
}
