 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithWildcardFileName(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.text.WildcardMatcher", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithWildcardFileName((File) null, "dA][:e!{`Ffc|");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithRegexFileName(mockFile0, "a*_B{:+O3a&q<nc`+\"z");
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // a*_B{:+O3a&q<nc`+\"z
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.springside.modules.utils.io.FileTreeWalker$1", "");
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithRegexFileName(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithRegexFileName((File) null, "/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils/yrYnK+%w/^w(v@bHS");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithExtension((File) null, "+j^_,v'-;.Z|67");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("_3xaf/_3xaf");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      // Undeclared exception!
      FileTreeWalker.listFileWithAntPath(mockFile0, "_13{b:[YjjVlF");
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithAntPath((File) null, "'g'bX>s5st;M12");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFile((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listAll((File) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile.createTempFile("com.google.common.io.Files$FilePredicate", "sOA*w7rG`c", (File) mockFile0);
      List<File> list0 = FileTreeWalker.listFileWithAntPath(mockFile0, (String) null);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*dh-~,4j`+J{fU>&#p)", "*dh-~,4j`+J{fU>&#p)");
      List<File> list0 = FileTreeWalker.listFileWithExtension(mockFile0, "");
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile.createTempFile("com.google.common.io.Files$FilePredicate", "sOA*w7rG`c", (File) mockFile0);
      List<File> list0 = FileTreeWalker.listFileWithExtension(mockFile0, "");
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.springside.modules.utils.io.FileTreeWalker$AntPathFilter", "org.springside.modules.utils.io.FileTreeWalker$AntPathFilter");
      List<File> list0 = FileTreeWalker.listFileWithWildcardFileName(mockFile0, "org.springside.modules.utils.io.FileTreeWalker$AntPathFilter");
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      List<File> list0 = FileTreeWalker.listFileWithWildcardFileName(mockFile0, "");
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]2\"Sctg:q:");
      List<File> list0 = FileTreeWalker.listFileWithRegexFileName(mockFile0, "]2\"Sctg:q:");
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile.createTempFile("com.google.common.io.Files$FilePredicate", "sOA*w7rG`c", (File) mockFile0);
      List<File> list0 = FileTreeWalker.listFileWithRegexFileName(mockFile0, "");
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileTreeWalker fileTreeWalker0 = new FileTreeWalker();
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeTraverser<File> treeTraverser0 = FileTreeWalker.fileTreeTraverser();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.springside.modules.utils.io.FileTreeWalker$AntPathFilter", "org.springside.modules.utils.io.FileTreeWalker$AntPathFilter");
      List<File> list0 = FileTreeWalker.listFileWithAntPath(mockFile0, "");
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.springside.modules.utils.io.FileTreeWalker$AntPathFilter", "org.springside.modules.utils.io.FileTreeWalker$AntPathFilter");
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithExtension(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.springside.modules.utils.io.FileTreeWalker$AntPathFilter", "org.springside.modules.utils.io.FileTreeWalker$AntPathFilter");
      List<File> list0 = FileTreeWalker.listAll(mockFile0);
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      List<File> list0 = FileTreeWalker.listFileWithWildcardFileName(mockFile0, "");
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      List<File> list0 = FileTreeWalker.listFile(mockFile0);
      assertEquals(0, list0.size());
}
