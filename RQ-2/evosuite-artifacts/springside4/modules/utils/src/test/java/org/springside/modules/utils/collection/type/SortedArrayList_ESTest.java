/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 03:58:15 GMT 2022
 */

package org.springside.modules.utils.collection.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springside.modules.utils.collection.type.SortedArrayList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SortedArrayList_ESTest extends SortedArrayList_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("");
      boolean boolean1 = linkedList0.add("");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(1, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertEquals(0, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(sortedArrayList0, linkedList0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      assertEquals(sortedArrayList0, integer0);
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      assertTrue(boolean3);
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      int int0 = sortedArrayList0.findInsertionPoint("");
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      int int0 = sortedArrayList0.findInsertionPoint("");
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      int int0 = sortedArrayList0.findInsertionPoint("");
      assertEquals(0, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      int int0 = sortedArrayList0.findInsertionPoint("");
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) "");
      int int0 = sortedArrayList0.findInsertionPoint("");
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertEquals(0, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      Comparator<Object> comparator0 = sortedArrayList0.getComparator();
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      Comparator<Object> comparator0 = sortedArrayList0.getComparator();
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      Comparator<Object> comparator0 = sortedArrayList0.getComparator();
      assertNotNull(comparator0);
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) "org.springside.modules.utils.collection.type.SortedArrayList", (-886), (-2184));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) "org.springside.modules.utils.collection.type.SortedArrayList", (-886), (-2184));
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) "org.springside.modules.utils.collection.type.SortedArrayList", (-886), (-2184));
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) "org.springside.modules.utils.collection.type.SortedArrayList", (-886), (-2184));
      assertTrue(sortedArrayList1.isEmpty());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) "org.springside.modules.utils.collection.type.SortedArrayList", (-886), (-2184));
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) "org.springside.modules.utils.collection.type.SortedArrayList", (-886), (-2184));
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) "org.springside.modules.utils.collection.type.SortedArrayList", (-886), (-2184));
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) "");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) "");
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) "");
      int int0 = sortedArrayList0.findInsertionPoint("");
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) "");
      int int0 = sortedArrayList0.findInsertionPoint("");
      assertEquals(0, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) "");
      int int0 = sortedArrayList0.findInsertionPoint("");
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) "");
      int int0 = sortedArrayList0.findInsertionPoint("");
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) "");
      int int0 = sortedArrayList0.findInsertionPoint("");
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Object object0 = new Object();
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Object object0 = new Object();
      int int0 = sortedArrayList0.compare(object0, object0);
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Object object0 = new Object();
      int int0 = sortedArrayList0.compare(object0, object0);
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Object object0 = new Object();
      int int0 = sortedArrayList0.compare(object0, object0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Object object0 = new Object();
      int int0 = sortedArrayList0.compare(object0, object0);
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare("vC<-JU-}J4~DZeQ;B", "");
      ;
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare("vC<-JU-}J4~DZeQ;B", "");
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare("vC<-JU-}J4~DZeQ;B", "");
      assertEquals(0, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare("vC<-JU-}J4~DZeQ;B", "");
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      assertEquals(0, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare("?wi%F|XwMw>>Xk(ko", "org.springside.modules.utils.collection.type.SortedArrayList");
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare("?wi%F|XwMw>>Xk(ko", "org.springside.modules.utils.collection.type.SortedArrayList");
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare("?wi%F|XwMw>>Xk(ko", "org.springside.modules.utils.collection.type.SortedArrayList");
      assertEquals(0, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare("?wi%F|XwMw>>Xk(ko", "org.springside.modules.utils.collection.type.SortedArrayList");
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertEquals(0, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertEquals(0, sortedArrayList1.size());
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertTrue(sortedArrayList1.isEmpty());
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.addAll((Collection<?>) sortedArrayList0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.addAll((Collection<?>) sortedArrayList0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.addAll((Collection<?>) sortedArrayList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.addAll((Collection<?>) sortedArrayList0);
      assertEquals(1, sortedArrayList1.size());
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.addAll((Collection<?>) sortedArrayList0);
      assertTrue(sortedArrayList1.isEmpty());
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      ;
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      Integer integer0 = new Integer(1);
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      Integer integer0 = new Integer(1);
//TOGA incorrect assertion       assertTrue(integer0);
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
      assertFalse(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      ;
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      assertFalse(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      assertEquals(0, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      assertEquals(1, sortedArrayList1.size());
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      assertTrue(sortedArrayList1.isEmpty());
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ;
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      ;
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      ;
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      ;
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      assertEquals(1, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertEquals(0, sortedArrayList1.size());
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertTrue(sortedArrayList1.isEmpty());
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertEquals(sortedArrayList0, sortedArrayList1);
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      assertTrue(sortedArrayList1.isEmpty());
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      assertEquals(sortedArrayList0, sortedArrayList1);
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("");
      assertEquals(0, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("");
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("");
      assertTrue(sortedArrayList1.isEmpty());
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("");
      ;
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("");
      ;
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("");
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("");
      ;
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("");
      ;
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("");
      ;
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("");
      ;
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertEquals(0, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertTrue(sortedArrayList1.isEmpty());
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      assertEquals(sortedArrayList0, sortedArrayList1);
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add((Object) sortedArrayList0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add((Object) sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add((Object) sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add((Object) sortedArrayList0);
      ;
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add((Object) sortedArrayList0);
      assertTrue(sortedArrayList1.isEmpty());
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ;
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.clear();
      ;
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.clear();
      ;
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = null;
      try {
        sortedArrayList0 = new SortedArrayList<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.SortedArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertEquals(1, sortedArrayList0.size());
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      assertNotNull(sortedArrayList0);
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      ;
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(1, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(sortedArrayList0, linkedList0);
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ;
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      ;
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      ;
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals(0, linkedList0.size());
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      ;
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(boolean1);
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) "");
      assertTrue(boolean2);
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) "");
      assertTrue(sortedArrayList0.isEmpty());
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) "");
      ;
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Stream<Object> stream0 = sortedArrayList0.stream();
      boolean boolean0 = sortedArrayList0.add((Object) "");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Stream<Object> stream0 = sortedArrayList0.stream();
      boolean boolean0 = sortedArrayList0.add((Object) "");
      int int0 = sortedArrayList0.findInsertionPoint((Object) stream0, 0, 0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      ;
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      int int0 = sortedArrayList0.findInsertionPoint(" o/crK", 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(sortedArrayList0);
      linkedList0.addFirst(sortedArrayList0);
      // Undeclared exception!
      try { 
        sortedArrayList1.addAll((Collection<?>) linkedList0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      // Undeclared exception!
      try { 
        sortedArrayList0.add((-1196), (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.SortedArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(comparator0);
      Comparator<Object> comparator1 = sortedArrayList0.getComparator();
      assertEquals(comparator0, comparator1);
}
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(47);
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        sortedArrayList0.set(47, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.SortedArrayList", e);
      }
  }
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      int int0 = sortedArrayList0.findInsertionPoint(sortedArrayList0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      // Undeclared exception!
      try { 
        sortedArrayList0.addAll((-1), (Collection<?>) sortedArrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springside.modules.utils.collection.type.SortedArrayList", e);
      }
  }
}
