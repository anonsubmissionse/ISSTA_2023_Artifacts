/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 07 04:04:20 GMT 2022
 */

package org.springside.modules.utils.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.net.URL;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springside.modules.utils.io.ResourceUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResourceUtil_ESTest extends ResourceUtil_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      List<URL> list0 = ResourceUtil.getResources("%X9", classLoader0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      URL uRL0 = ResourceUtil.asUrl("");
      assertNotNull(uRL0.getHost());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InputStream inputStream0 = ResourceUtil.asStream("");
      assertEquals(0, inputStream0.available());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.toString((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.toString(" &2~&b!bfQ,T5@9?6K");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // resource  &2~&b!bfQ,T5@9?6K not found.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.toLines((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.toLines("^3a@ZR(Vk");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // resource ^3a@ZR(Vk not found.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        ResourceUtil.getResources((String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.getResources((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.asUrl((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.asStream((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      List<URL> list0 = ResourceUtil.getResources("", classLoader0);
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<URL> list0 = ResourceUtil.getResources("");
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<URL> list0 = ResourceUtil.getResources("?vYOP^s!4'+nn'^]ir");
      assertTrue(list0.isEmpty());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.asUrl("application.properties\nlogback.xml\norg\ntest.txt\n");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // resource application.properties
         // logback.xml
         // org
         // test.txt
         //  not found.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.asStream("/");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // resource / not found.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResourceUtil resourceUtil0 = new ResourceUtil();
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<String> list0 = ResourceUtil.toLines("");
      assertEquals(0, list0.size());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = ResourceUtil.toString("");
      ;
}
}
