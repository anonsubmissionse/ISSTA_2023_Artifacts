/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Oct 07 03:47:48 GMT 2022
 */

package org.springside.modules.utils.collection;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class CollectionUtil_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.springside.modules.utils.collection.CollectionUtil"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.dir", "/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/springside4/modules/utils"); 
    java.lang.System.setProperty("user.home", "/home/ISSTA_USER"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "ISSTA_USER"); 
    java.lang.System.setProperty("user.timezone", "America/New_York"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CollectionUtil_ESTest_scaffolding.class.getClassLoader() ,
      "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
      "com.google.common.collect.Lists$RandomAccessPartition",
      "org.mockito.mock.SerializableMode",
      "org.mockito.internal.util.ObjectMethodsGuru",
      "org.mockito.internal.invocation.InvocationMatcher",
      "com.google.common.collect.PeekingIterator",
      "com.google.common.math.IntMath",
      "com.google.common.collect.MapMakerInternalMap$InternalEntryHelper",
      "org.mockito.exceptions.misusing.NotAMockException",
      "org.mockito.exceptions.misusing.FriendlyReminderException",
      "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
      "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues",
      "com.google.common.collect.NullsLastOrdering",
      "com.google.common.collect.Platform",
      "org.mockito.exceptions.verification.SmartNullPointerException",
      "org.mockito.internal.stubbing.defaultanswers.ReturnsMocks",
      "com.google.common.base.Objects$ToStringHelper",
      "com.google.common.collect.ByFunctionOrdering",
      "org.mockito.verification.VerificationMode",
      "com.google.common.collect.Iterators$10",
      "org.mockito.plugins.MockMaker",
      "com.google.common.collect.Iterators$12",
      "com.google.common.collect.Iterators$11",
      "com.google.common.base.Predicate",
      "org.mockito.exceptions.misusing.MockitoConfigurationException",
      "org.mockito.internal.progress.IOngoingStubbing",
      "org.mockito.cglib.proxy.MethodProxy$CreateInfo",
      "org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType",
      "com.google.common.collect.NullsFirstOrdering",
      "org.mockito.internal.MockitoCore",
      "org.mockito.internal.verification.api.VerificationDataInOrder",
      "org.mockito.listeners.InvocationListener",
      "org.mockito.stubbing.Stubber",
      "org.mockito.asm.Type",
      "org.mockito.stubbing.Answer",
      "com.google.common.collect.Lists$Partition",
      "com.google.common.collect.Lists",
      "com.google.common.math.MathPreconditions",
      "com.google.common.collect.UnmodifiableListIterator",
      "org.mockito.Incubating",
      "org.mockito.internal.creation.cglib.CglibMockMaker",
      "com.google.common.collect.MapMakerInternalMap$Strength",
      "org.mockito.exceptions.misusing.WrongTypeOfReturnValue",
      "org.mockito.MockSettings",
      "com.google.common.collect.MapMakerInternalMap$Segment",
      "com.google.common.base.Equivalence$Equals",
      "org.mockito.exceptions.base.MockitoAssertionError",
      "org.mockito.exceptions.verification.NeverWantedButInvoked",
      "org.mockito.cglib.core.CodeGenerationException",
      "com.google.common.base.Equivalence$Wrapper",
      "org.hamcrest.Matcher",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.MapMaker",
      "com.google.common.collect.MapMakerInternalMap$InternalEntry",
      "org.mockito.internal.verification.SingleRegisteredInvocation",
      "org.mockito.listeners.MethodInvocationReport",
      "com.google.common.collect.ImmutableCollection",
      "org.mockito.exceptions.Reporter",
      "org.mockito.cglib.reflect.FastClass",
      "org.mockito.stubbing.VoidMethodStubbable",
      "com.google.common.base.Objects",
      "com.google.common.collect.ImmutableCollection$Builder",
      "com.google.common.collect.Iterators$6",
      "org.mockito.internal.verification.RegisteredInvocations",
      "com.google.common.collect.Lists$AbstractListWrapper",
      "org.mockito.invocation.StubInfo",
      "com.google.common.collect.Iterators$1",
      "com.google.common.collect.Iterators$2",
      "com.google.common.collect.Iterators$3",
      "com.google.common.collect.Iterators$5",
      "com.google.common.base.ExtraObjectsMethodsForWeb",
      "com.google.common.collect.Lists$StringAsImmutableList",
      "com.google.common.collect.Lists$2",
      "org.hamcrest.SelfDescribing",
      "org.hamcrest.Description$NullDescription",
      "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
      "com.google.common.collect.Lists$1",
      "com.google.common.base.Equivalence$Identity",
      "org.mockito.cglib.reflect.FastMethod",
      "org.mockito.internal.util.reflection.GenericMetadataSupport$NotGenericReturnTypeSupport",
      "com.google.common.base.Supplier",
      "org.mockito.invocation.DescribedInvocation",
      "org.mockito.exceptions.base.MockitoException",
      "com.google.common.collect.ImmutableList",
      "com.google.common.collect.ReverseOrdering",
      "org.mockito.internal.InternalMockHandler",
      "org.mockito.cglib.core.Signature",
      "org.mockito.internal.reporting.Discrepancy",
      "com.google.common.collect.Ordering",
      "com.google.common.collect.NaturalOrdering",
      "com.google.common.collect.MapMakerInternalMap",
      "com.google.common.collect.AllEqualOrdering",
      "com.google.common.math.IntMath$1",
      "org.mockito.cglib.proxy.Callback",
      "org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer",
      "org.mockito.exceptions.misusing.UnfinishedVerificationException",
      "com.google.common.collect.ImmutableList$SubList",
      "com.google.common.base.FunctionalEquivalence",
      "org.mockito.mock.MockCreationSettings",
      "org.mockito.internal.stubbing.InvocationContainer",
      "org.mockito.invocation.Location",
      "org.mockito.cglib.reflect.FastMember",
      "com.google.common.collect.RegularImmutableList",
      "org.mockito.internal.stubbing.InvocationContainerImpl",
      "com.google.common.base.Optional",
      "com.google.common.collect.Lists$TransformingRandomAccessList",
      "org.mockito.internal.progress.MockingProgress",
      "org.mockito.exceptions.misusing.MissingMethodInvocationException",
      "org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType",
      "org.mockito.internal.stubbing.answers.CallsRealMethods",
      "org.mockito.exceptions.verification.TooLittleActualInvocations",
      "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs$ReturnsDeepStubsSerializationFallback",
      "org.mockito.cglib.proxy.MethodInterceptor",
      "org.mockito.stubbing.DeprecatedOngoingStubbing",
      "org.mockito.exceptions.verification.TooManyActualInvocations",
      "org.mockito.internal.util.collections.ListUtil$Filter",
      "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs",
      "com.google.common.collect.LexicographicalOrdering",
      "org.mockito.internal.util.reflection.GenericMetadataSupport",
      "org.mockito.internal.invocation.MockitoMethod",
      "com.google.common.base.Present",
      "com.google.common.collect.TopKSelector",
      "com.google.common.collect.Iterables",
      "com.google.common.collect.ImmutableAsList",
      "com.google.common.collect.RegularImmutableAsList",
      "org.mockito.plugins.PluginSwitch",
      "org.mockito.internal.util.collections.Iterables",
      "org.mockito.invocation.InvocationOnMock",
      "org.mockito.internal.configuration.plugins.DefaultPluginSwitch",
      "com.google.common.collect.UsingToStringOrdering",
      "org.mockito.invocation.MockHandler",
      "com.google.common.collect.Lists$TransformingSequentialList",
      "com.google.common.collect.ObjectArrays",
      "org.mockito.stubbing.OngoingStubbing",
      "org.springside.modules.utils.collection.type.Pair",
      "com.google.common.collect.AbstractIterator",
      "org.mockito.internal.progress.ArgumentMatcherStorage",
      "com.google.common.collect.ImmutableList$1",
      "org.mockito.exceptions.misusing.CannotVerifyStubOnlyMock",
      "com.google.common.collect.UnmodifiableIterator",
      "org.mockito.internal.configuration.plugins.PluginRegistry",
      "com.google.common.base.Objects$ToStringHelper$ValueHolder",
      "org.mockito.invocation.Invocation",
      "org.mockito.internal.util.reflection.GenericMetadataSupport$FromClassGenericMetadataSupport",
      "org.mockito.internal.stubbing.StubbedInvocationMatcher",
      "org.mockito.exceptions.verification.VerificationInOrderFailure",
      "com.google.common.collect.Lists$RandomAccessListWrapper",
      "org.mockito.exceptions.misusing.NullInsteadOfMockException",
      "org.mockito.internal.configuration.plugins.PluginLoader",
      "com.google.common.collect.ImmutableList$ReverseImmutableList",
      "com.google.common.collect.MapMakerInternalMap$WeakValueReference",
      "com.google.common.collect.SingletonImmutableList",
      "com.google.common.base.Function",
      "org.mockito.cglib.reflect.FastConstructor",
      "com.google.common.collect.ComparatorOrdering",
      "org.springside.modules.utils.collection.CollectionUtil",
      "com.google.common.collect.AbstractIndexedListIterator",
      "org.mockito.internal.util.reflection.GenericMetadataSupport$FromParameterizedTypeGenericMetadataSupport",
      "com.google.common.collect.MapMakerInternalMap$Strength$2",
      "com.google.common.collect.MapMakerInternalMap$Strength$1",
      "com.google.common.collect.CollectPreconditions",
      "org.mockito.internal.configuration.plugins.Plugins",
      "org.mockito.internal.invocation.AbstractAwareMethod",
      "com.google.common.collect.ExplicitOrdering",
      "org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider",
      "org.mockito.plugins.StackTraceCleanerProvider",
      "org.mockito.internal.util.reflection.GenericMetadataSupport$ParameterizedReturnType",
      "com.google.common.collect.ImmutableList$Builder",
      "org.mockito.exceptions.misusing.UnfinishedStubbingException",
      "org.mockito.internal.listeners.MockingProgressListener",
      "org.mockito.exceptions.verification.NoInteractionsWanted",
      "org.mockito.internal.invocation.CapturesArgumensFromInvocation",
      "org.mockito.mock.MockName",
      "org.mockito.exceptions.PrintableInvocation",
      "com.google.common.collect.CompoundOrdering",
      "com.google.common.collect.Iterators",
      "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry",
      "org.mockito.internal.verification.api.InOrderContext",
      "org.mockito.internal.verification.api.VerificationData",
      "org.mockito.exceptions.verification.WantedButNotInvoked",
      "org.mockito.internal.progress.ThreadSafeMockingProgress",
      "com.google.common.base.PairwiseEquivalence",
      "com.google.common.collect.Ordering$IncomparableValueException",
      "org.mockito.MockingDetails",
      "com.google.common.collect.MapMakerInternalMap$1",
      "org.hamcrest.Description",
      "org.mockito.internal.verification.DefaultRegisteredInvocations",
      "org.mockito.Answers",
      "org.mockito.InOrder",
      "com.google.common.base.Equivalence",
      "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues",
      "com.google.common.collect.ReverseNaturalOrdering",
      "org.mockito.exceptions.stacktrace.StackTraceCleaner",
      "org.mockito.internal.progress.HandyReturnValues",
      "org.mockito.cglib.proxy.MethodProxy",
      "org.mockito.internal.util.MockUtil",
      "org.mockito.internal.configuration.plugins.PluginFinder",
      "org.mockito.exceptions.misusing.CannotStubVoidMethodWithReturnValue",
      "com.google.common.collect.Iterators$MergingIterator"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.lang.Comparable", false, CollectionUtil_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.util.Comparator", false, CollectionUtil_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CollectionUtil_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.springside.modules.utils.collection.CollectionUtil",
      "com.google.common.collect.Ordering",
      "com.google.common.collect.NaturalOrdering",
      "com.google.common.collect.UnmodifiableIterator",
      "com.google.common.collect.UnmodifiableListIterator",
      "com.google.common.collect.Iterators$1",
      "com.google.common.collect.Iterators$2",
      "com.google.common.collect.Iterators",
      "com.google.common.collect.ComparatorOrdering",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.ReverseOrdering",
      "com.google.common.collect.CollectPreconditions",
      "com.google.common.collect.ImmutableCollection",
      "com.google.common.collect.ImmutableList",
      "com.google.common.collect.ObjectArrays",
      "com.google.common.collect.RegularImmutableList",
      "com.google.common.collect.ReverseNaturalOrdering",
      "com.google.common.collect.Iterables",
      "org.springside.modules.utils.collection.type.Pair",
      "com.google.common.base.ExtraObjectsMethodsForWeb",
      "com.google.common.base.Objects",
      "com.google.common.collect.Platform",
      "com.google.common.collect.TopKSelector",
      "com.google.common.math.IntMath",
      "com.google.common.math.MathPreconditions",
      "com.google.common.math.IntMath$1",
      "com.google.common.collect.Lists"
    );
  }
}
