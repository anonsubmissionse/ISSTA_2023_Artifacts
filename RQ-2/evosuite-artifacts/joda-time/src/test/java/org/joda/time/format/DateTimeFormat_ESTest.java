/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:10:43 GMT 2022
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeFormat_ESTest extends DateTimeFormat_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      assertNotNull(dateTimeFormat_StyleFormatter0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimateParsedLength());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      assertNotNull(dateTimeParserBucket0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      assertNotNull(dateTimeParserBucket0.getOffsetInteger());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      assertEquals(1, dateTimeParserBucket0.getOffset());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      assertEquals(1, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      assertEquals(1, dateTimeFormat_StyleFormatter0.estimateParsedLength());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      assertNotNull(dateTimeParserBucket0.getOffsetInteger());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      assertEquals(1, dateTimeParserBucket0.getOffset());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 1910, 0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("gw^'p");
      Integer integer0 = Integer.valueOf(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gJChronology0, locale0, integer0, 1910);
      int int0 = dateTimeFormat_StyleFormatter0.parseInto(dateTimeParserBucket0, "gw^'p", 0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2603), 0, 6572);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2603), 0, 6572);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2603), 0, 6572);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2603), 0, 6572);
      int int0 = dateTimeFormat_StyleFormatter0.estimatePrintedLength();
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2603), 0, 6572);
      int int0 = dateTimeFormat_StyleFormatter0.estimatePrintedLength();
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimateParsedLength());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2603), 0, 6572);
      int int0 = dateTimeFormat_StyleFormatter0.estimatePrintedLength();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals(dateTimeFormat_StyleFormatterCacheKey0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals(dateTimeFormat_StyleFormatterCacheKey0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals(dateTimeFormat_StyleFormatterCacheKey0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals(dateTimeFormat_StyleFormatterCacheKey0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals(dateTimeFormat_StyleFormatterCacheKey0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals(dateTimeFormat_StyleFormatterCacheKey0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(355, 355, (-4413), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals(dateTimeFormat_StyleFormatterCacheKey0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      assertNotNull(dateTimeFormat_StyleFormatterCacheKey0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals((Object) null);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals((Object) null);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals((Object) null);
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals((Object) null);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals((Object) null);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals((Object) null);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey(1080, 1080, 1080, locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      assertNotNull(dateTimeFormat_StyleFormatterCacheKey0);
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals("system");
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals("system");
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals("system");
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals("system");
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals("system");
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("system");
      DateTimeFormat.StyleFormatterCacheKey dateTimeFormat_StyleFormatterCacheKey0 = new DateTimeFormat.StyleFormatterCacheKey((-1007), (-1007), (-873), locale0);
      boolean boolean0 = dateTimeFormat_StyleFormatterCacheKey0.equals("system");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-801), 0, (-801));
      assertNotNull(dateTimeFormat_StyleFormatter0);
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-801), 0, (-801));
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimateParsedLength());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-801), 0, (-801));
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-801), 0, (-801));
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-801), 0, (-801));
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0.toString());
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-801), 0, (-801));
      StringBuilder stringBuilder0 = new StringBuilder();
      LocalDateTime localDateTime0 = new LocalDateTime();
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-801), 0, (-801));
      StringBuilder stringBuilder0 = new StringBuilder();
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(0, localDateTime0.size());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      assertNotNull(dateTimeFormat_StyleFormatter0);
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimateParsedLength());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      assertEquals(1, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimateParsedLength());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      Locale locale0 = Locale.UK;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0.toString());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTimeFormat_StyleFormatter0.getPattern(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      assertNotNull(dateTimeFormat_StyleFormatter0);
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimateParsedLength());
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0.getLanguage());
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0.getISO3Country());
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0.getISO3Language());
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, 0L, (Chronology) islamicChronology0, 0, dateTimeZone0, locale0);
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, 0L, (Chronology) islamicChronology0, 0, dateTimeZone0, locale0);
      assertEquals(0, dateTimeFormat_StyleFormatter0.estimateParsedLength());
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, 0L, (Chronology) islamicChronology0, 0, dateTimeZone0, locale0);
      assertNotNull(dateTimeZone0.getID());
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, 0L, (Chronology) islamicChronology0, 0, dateTimeZone0, locale0);
      assertNotNull(dateTimeZone0.toString());
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, 0L, (Chronology) islamicChronology0, 0, dateTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, 0L, (Chronology) islamicChronology0, 0, dateTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, 0L, (Chronology) islamicChronology0, 0, dateTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, 0L, (Chronology) islamicChronology0, 0, dateTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, 0L, (Chronology) islamicChronology0, 0, dateTimeZone0, locale0);
      assertNotNull(locale0.getCountry());
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, 0L, (Chronology) islamicChronology0, 0, dateTimeZone0, locale0);
      assertNotNull(locale0.getVariant());
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Locale locale0 = Locale.UK;
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, 0L, (Chronology) islamicChronology0, 0, dateTimeZone0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("ywQt&:onQ VQG");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("xuf'lz%r");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("xtqFn!tstwN-Dz3ik6'");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("xqFn!tstwN-Dz3ik6'");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("GH??Yp");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("yoWwQt&onQ VLQG");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("xlqFn!tstwN-Dz3ik6'");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("1xj^'~MZCt?vA");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("w axyg8~/");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern(" xf:5");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("year");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("YcA~]-a]wh");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("-\"yX*QEyAZ)hpq");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("yWwQt&:onQ VLQG");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: W
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("ExUp\"|f9");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("dayYMonR");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("w?axJg8~=");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("yI&ar");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("ExGp\"|f9");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.appendPatternTo((DateTimeFormatterBuilder) null, "'XOB;/v_S");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("'");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("yyC&fr");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("\"yv!: eacmwAJ'<$>=G");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("system");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("/YyrQ~Lx)z\"up");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("`Yk,>]5ynn}st");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: nn
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("Yxx/mo");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("zyag~I87NH&v2");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      ;
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forPattern("ZG%[W@}>");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: W
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DateTimeFormat.shortDateTime();
      DateTimeFormat.forPattern("wC~:6~");
      String string0 = "X`2-]S";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "X`2-]S");
      System.setCurrentTimeMillis((-1L));
      DateTimeFormat.shortDate();
      // Undeclared exception!
      try { 
        DateTimeFormat.forStyle("wC~:6~");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid style specification: wC~:6~
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zyag~I87NH&v2");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.FRANCE;
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) islamicChronology0);
      dateTimeFormat_StyleFormatter0.printTo((Appendable) mockPrintStream0, (ReadablePartial) yearMonth0, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 0);
      int int0 = dateTimeFormat_StyleFormatter0.estimateParsedLength();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.mediumDateTime();
      assertEquals(0, dateTimeFormatter0.getDefaultYear());
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeFormat.forStyle("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid style specification: 
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DateTimeFormat dateTimeFormat0 = new DateTimeFormat();
  }
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.fullDate();
      assertTrue(dateTimeFormatter0.isPrinter());
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.mediumDate();
      assertFalse(dateTimeFormatter0.isPrinter());
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.fullDateTime();
      // Undeclared exception!
      try { 
        YearMonth.parse("", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.shortTime();
      ;
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.longTime();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.longDateTime();
      assertTrue(dateTimeFormatter0.isPrinter());
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.longDate();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.mediumTime();
      assertTrue(dateTimeFormatter0.isPrinter());
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.fullTime();
      ;
}
}
