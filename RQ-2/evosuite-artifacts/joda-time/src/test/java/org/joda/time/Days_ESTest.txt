 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Days days0 = Days.FOUR;
      Days days1 = Days.ZERO;
      boolean boolean0 = days0.isLessThan(days1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Days days0 = Days.TWO;
      boolean boolean0 = days0.isLessThan((Days) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Days days0 = Days.THREE;
      Days days1 = days0.dividedBy((-1429));
      boolean boolean0 = days1.isGreaterThan(days0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Days days0 = Days.THREE;
      Days days1 = days0.dividedBy((-1429));
      boolean boolean0 = days1.isGreaterThan(days0);
      assertEquals(0, days1.getDays());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-2147481517));
      Days days0 = minutes0.toStandardDays();
      boolean boolean0 = days0.isGreaterThan((Days) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-2147481517));
      Days days0 = minutes0.toStandardDays();
      boolean boolean0 = days0.isGreaterThan((Days) null);
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Days days0 = Days.FOUR;
      Weeks weeks0 = days0.toStandardWeeks();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Days days0 = Days.days((-1562));
      Weeks weeks0 = days0.toStandardWeeks();
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Days days0 = Days.days((-1562));
      Weeks weeks0 = days0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Days days0 = Days.THREE;
      Days days1 = days0.plus(3514);
      Days days2 = days1.dividedBy((-1429));
      Seconds seconds0 = days2.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.THREE;
      Days days1 = days0.plus(3514);
      Days days2 = days1.dividedBy((-1429));
      Seconds seconds0 = days2.toStandardSeconds();
      assertEquals(0, days1.getDays());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.ZERO;
      Minutes minutes0 = days0.ZERO.toStandardMinutes();
      assertEquals(1, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Days days0 = Days.SIX;
      Days days1 = days0.negated();
      Minutes minutes0 = days1.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.FOUR;
      Hours hours0 = days0.ONE.toStandardHours();
      assertEquals(1, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.ONE;
      Days days1 = days0.multipliedBy((-180));
      Hours hours0 = days1.toStandardHours();
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Days days0 = Days.FIVE;
      Days days1 = days0.dividedBy(3519);
      Duration duration0 = days1.toStandardDuration();
      assertEquals(1, duration0.getStandardMinutes());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Days days0 = Days.FOUR;
      Duration duration0 = days0.MIN_VALUE.toStandardDuration();
      assertEquals(0, duration0.getStandardDays());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Days days0 = Days.SIX;
      Days days1 = days0.MIN_VALUE.plus(days0);
      assertEquals(1, days1.getDays());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Days days0 = duration0.toStandardDays();
      Days days1 = days0.TWO.plus((-2972));
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = days0.negated();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Days days0 = Days.SIX;
      Days days1 = days0.TWO.multipliedBy(0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Days days0 = Days.SIX;
      Days days1 = days0.multipliedBy(5);
      assertEquals(0, days1.getDays());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Days days0 = Days.THREE;
      Days days1 = Days.SIX;
      Days days2 = days0.minus(days1);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Days days0 = Days.days((-2901));
      Days days1 = days0.minus((-2901));
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Days days0 = Days.ONE;
      int int0 = days0.getDays();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Days days1 = days0.dividedBy(4529);
      Days days2 = days1.minus(6);
      assertEquals(0, days1.getDays());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Days days1 = days0.dividedBy(4529);
      Days days2 = days1.minus(6);
      assertEquals(1, days2.getDays());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
      try { 
        days0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 86400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Hours hours0 = weeks0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      // Undeclared exception!
      try { 
        days0.MIN_VALUE.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 1440
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
      try { 
        days0.plus(days0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
      try { 
        days0.plus(4483);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 4483
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        days0.multipliedBy(902);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 902
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Days days0 = Days.days(957);
      Days days1 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        days0.minus(days1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Days days0 = Days.TWO;
      // Undeclared exception!
      try { 
        days0.MIN_VALUE.minus(1772);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1772
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Days days0 = Days.TWO;
      // Undeclared exception!
      try { 
        days0.MIN_VALUE.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Days", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Instant instant0 = new Instant(1566L);
      Days days0 = Days.daysBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = days0.SEVEN.plus(0);
      assertEquals(0, days1.getDays());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Days days0 = Days.ONE;
      Days days1 = days0.plus(1);
      assertEquals(1, days1.getDays());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Days days0 = Days.days(3);
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Days days0 = Days.days(6);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Days days0 = Days.days(0);
      Hours hours0 = days0.toStandardHours();
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Days days0 = Days.days(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Days days0 = Days.days(1);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.days(5);
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Days days0 = Days.SIX;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertNotNull(durationFieldType0.getName());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      Days days1 = Days.MIN_VALUE;
      boolean boolean0 = days1.isLessThan(days0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      Days days1 = Days.MIN_VALUE;
      boolean boolean0 = days1.isLessThan(days0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      boolean boolean0 = days0.isLessThan((Days) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      boolean boolean0 = days0.isLessThan((Days) null);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      boolean boolean0 = days0.isLessThan((Days) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      boolean boolean0 = days0.isLessThan(days0);
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      boolean boolean0 = days0.isLessThan(days0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      Days days1 = Days.MIN_VALUE;
      boolean boolean0 = days0.isGreaterThan(days1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      Days days1 = Days.MIN_VALUE;
      boolean boolean0 = days0.isGreaterThan(days1);
      assertEquals(1, days0.getDays());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Days days0 = Days.FIVE;
      Days days1 = days0.dividedBy(3519);
      boolean boolean0 = days1.isGreaterThan((Days) null);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Days days0 = Days.FIVE;
      Days days1 = days0.dividedBy(3519);
      boolean boolean0 = days1.isGreaterThan((Days) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Days days0 = Days.FIVE;
      boolean boolean0 = days0.isGreaterThan((Days) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      boolean boolean0 = days0.isGreaterThan(days0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      boolean boolean0 = days0.isGreaterThan(days0);
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Days days0 = Days.ONE;
      Days days1 = days0.FIVE.dividedBy(1);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Days days0 = Days.parseDays((String) null);
      Days days1 = days0.minus((Days) null);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Days days0 = Days.FIVE;
      Days days1 = days0.dividedBy(3519);
      Days days2 = days0.plus(days1);
      assertEquals(0, days2.getDays());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Days days0 = Days.parseDays((String) null);
      Days days1 = days0.THREE.plus((Days) null);
      assertEquals(0, days1.size());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Days days0 = Days.parseDays("P6D");
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Days days0 = Days.ONE;
      Days days1 = days0.MAX_VALUE.negated();
      days1.negated();
      assertEquals(0, days1.getDays());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Days days0 = Days.days(7);
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Days days0 = Days.SIX;
      Seconds seconds0 = days0.toStandardSeconds();
      Days days1 = seconds0.toStandardDays();
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Days days0 = Days.SIX;
      Seconds seconds0 = days0.toStandardSeconds();
      Days days1 = seconds0.toStandardDays();
      assertEquals(0, seconds0.getSeconds());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Days days0 = Days.SIX;
      Days days1 = Days.ONE;
      Days days2 = days0.minus(days1);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Days days0 = Days.days(4);
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Days days0 = Days.days(2);
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Days days1 = days0.FOUR.dividedBy((-233));
      int int0 = days1.getDays();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Days days0 = Days.days(Integer.MIN_VALUE);
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Days days0 = Days.SIX;
      Days days1 = days0.minus(5);
      assertEquals(0, days1.getDays());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      int int0 = days0.getDays();
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Hours hours0 = weeks0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Duration duration0 = days0.THREE.toStandardDuration();
      assertEquals(1, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Hours hours0 = weeks0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Duration duration0 = days0.THREE.toStandardDuration();
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Weeks weeks0 = days0.SEVEN.toStandardWeeks();
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Days days1 = days0.SIX.multipliedBy((-233));
      Days days2 = days1.negated();
      Days days3 = days1.plus(days2);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Days days1 = days0.SIX.multipliedBy((-233));
      Days days2 = days1.negated();
      Days days3 = days1.plus(days2);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        days0.negated();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Days days0 = Days.daysIn((ReadableInterval) null);
      Seconds seconds0 = days0.toStandardSeconds();
      Days days1 = Days.standardDaysIn(seconds0);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Days days0 = Days.daysIn((ReadableInterval) null);
      PeriodType periodType0 = days0.TWO.getPeriodType();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Days days0 = Days.ONE;
      // Undeclared exception!
      try { 
        days0.MIN_VALUE.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 24
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Days days0 = Days.SIX;
      Minutes minutes0 = days0.toStandardMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Days days0 = Days.SIX;
      String string0 = days0.toString();
      ;
}
