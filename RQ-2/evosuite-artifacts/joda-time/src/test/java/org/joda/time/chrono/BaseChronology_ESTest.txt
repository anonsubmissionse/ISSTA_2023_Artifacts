 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      long long0 = buddhistChronology0.add((-36L), (-36L), 0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-3093), 0);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((long) (-1), dateTimeZone0);
      Duration duration0 = mutablePeriod0.toDurationFrom(dateTime0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-542), periodType0, (Chronology) gJChronology0);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(24L, 1);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.years();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = copticChronology0.yearOfEra();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = gregorianChronology0.yearOfCentury();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = islamicChronology0.year();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Chronology chronology0 = buddhistChronology0.withZone(dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      Chronology chronology0 = zonedChronology0.withUTC();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DurationField durationField0 = gJChronology0.weekyears();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = copticChronology0.weekyearOfCentury();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeField dateTimeField0 = ethiopicChronology0.weekyear();
      assertNotNull(dateTimeField0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DurationField durationField0 = gJChronology0.weeks();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      assertNotNull(dateTimeField0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      String string0 = islamicChronology0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      long long0 = buddhistChronology0.set(localTime0, 1L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1073741824, ".");
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      long long0 = buddhistChronology0.set(localTime0, (-48L));
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      DurationField durationField0 = islamicChronology0.seconds();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertNotNull(dateTimeField0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = copticChronology0.secondOfDay();
      assertNotNull(dateTimeField0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DurationField durationField0 = copticChronology0.months();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      assertNotNull(dateTimeField0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2109));
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.minutes();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = gJChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.minuteOfDay();
      assertNotNull(dateTimeField0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = julianChronology0.millisOfSecond();
      assertEquals(0, dateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DurationField durationField0 = gJChronology0.millis();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DurationField durationField0 = copticChronology0.hours();
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = julianChronology0.hourOfHalfday();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = copticChronology0.hourOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      DurationField durationField0 = islamicChronology0.halfdays();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = gregorianChronology0.halfdayOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      long long0 = buddhistChronology0.getDateTimeMillis(1L, 1, 1, 1, 30);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      long long0 = lenientChronology0.getDateTimeMillis((-999999900L), 0, 1, (-883), 11);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      long long0 = ethiopicChronology0.getDateTimeMillis(1, 3, 1, 3);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2400L), 26607895200000L, periodType1, gregorianChronology0);
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) mutablePeriod0, (-444L), 26607895200000L);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1497));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now();
      int[] intArray0 = gJChronology0.get((ReadablePartial) yearMonth0, (long) 1);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1497));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now();
      int[] intArray0 = gJChronology0.get((ReadablePartial) yearMonth0, (long) 1);
      assertEquals(0, yearMonth0.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DurationField durationField0 = gJChronology0.eras();
      assertEquals(0, durationField0.getUnitMillis());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      DateTimeField dateTimeField0 = strictChronology0.era();
      assertEquals(0, dateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DurationField durationField0 = gregorianChronology0.days();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      assertNotNull(dateTimeField0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      CopticChronology copticChronology0 = new CopticChronology(buddhistChronology0, gJChronology0, 1);
      DateTimeField dateTimeField0 = copticChronology0.dayOfWeek();
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = copticChronology0.dayOfMonth();
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = copticChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1943);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      DateTimeField dateTimeField0 = strictChronology0.clockhourOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = iSOChronology0.centuryOfEra();
      assertTrue(dateTimeField0.isSupported());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2109));
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.centuries();
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      long long0 = ethiopicChronology0.add(30585600000L, 30585600000L, (-200));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        ethiopicChronology0.validate((ReadablePartial) null, intArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      CopticChronology copticChronology0 = new CopticChronology(islamicChronology0, "", 1);
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        strictChronology0.validate(localDateTime0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-6), (-6), (-1), (-1), (-1), (-1));
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        islamicChronology0.set(localDateTime0, 41L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -7 for year must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        buddhistChronology0.set((ReadablePartial) null, (-1932L));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      try { 
        julianChronology0.getDateTimeMillis(604800000L, 292272984, 1, 1, 292271022);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 292272984 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      try { 
        julianChronology0.getDateTimeMillis(1, (-3104), 0, 1, 1, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -3104 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      try { 
        gregorianChronology0.getDateTimeMillis((-3894), (-2058), (-1557), 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2058 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Months months0 = Months.FOUR;
      // Undeclared exception!
      try { 
        islamicChronology0.get((ReadablePeriod) months0, (-1960L), (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      // Undeclared exception!
      try { 
        strictChronology0.get((ReadablePeriod) null, (-250L), 0L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Days days0 = Days.MAX_VALUE;
      Weeks weeks0 = days0.toStandardWeeks();
      // Undeclared exception!
      try { 
        islamicChronology0.get((ReadablePeriod) weeks0, 1L, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15250284452
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        gJChronology0.get((ReadablePeriod) null, 623191204L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        copticChronology0.get((ReadablePartial) null, 3L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = Period.days(48);
      // Undeclared exception!
      try { 
        buddhistChronology0.add((ReadablePeriod) period0, (-3093L), (-2146535530));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = Period.weeks(48);
      // Undeclared exception!
      try { 
        buddhistChronology0.add((ReadablePeriod) period0, (-3102L), (-2146535530));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -103033705440 * 604800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        buddhistChronology0.add((-561L), 62633449405800000L, 747);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 62633449405800000 * 747
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Hours hours0 = Hours.parseHours((String) null);
      Duration duration0 = hours0.toStandardDuration();
      Period period0 = duration0.toPeriod((Chronology) buddhistChronology0);
      long long0 = buddhistChronology0.add((ReadablePeriod) period0, (-1L), (-2102744404));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Months months0 = Months.MAX_VALUE;
      int[] intArray0 = julianChronology0.get((ReadablePeriod) months0, 1392063681320L);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Days days0 = Days.MAX_VALUE;
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) days0, 1448L);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Hours hours0 = Hours.ONE;
      // Undeclared exception!
      try { 
        buddhistChronology0.get((ReadablePeriod) hours0, 100000000000000000L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 27777777777
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Years years0 = Years.ONE;
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) years0, 0L);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Months months0 = Months.EIGHT;
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) months0, (-2750L), (-2750L));
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      long long0 = copticChronology0.set(localDateTime0, 2530L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(955, (-1));
      IslamicChronology islamicChronology0 = new IslamicChronology(copticChronology0, copticChronology0, islamicChronology_LeapYearPatternType0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("");
      // Undeclared exception!
      try { 
        islamicChronology0.get((ReadablePartial) localTime0, (-137316816000000L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Partial partial0 = new Partial(buddhistChronology0);
      int[] intArray0 = buddhistChronology0.get((ReadablePartial) partial0, 1037L);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      CopticChronology copticChronology0 = new CopticChronology(islamicChronology0, "", 1);
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      long long0 = strictChronology0.add((long) 1, (long) 1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      long long0 = islamicChronology0.add(0L, 0L, 1);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Object object0 = new Object();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(1, 1);
      IslamicChronology islamicChronology0 = new IslamicChronology(julianChronology0, object0, islamicChronology_LeapYearPatternType0);
      Months months0 = Months.MAX_VALUE;
      // Undeclared exception!
      try { 
        islamicChronology0.add((ReadablePeriod) months0, 5117L, 12);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: 25769803764
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      long long0 = buddhistChronology0.add((ReadablePeriod) null, (long) 1, 1);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(1L, periodType0);
      long long0 = julianChronology0.add((ReadablePeriod) period0, (long) 0, 0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Weeks weeks0 = Weeks.MIN_VALUE;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) weeks0, (long) 1, 31557600000L);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Days days0 = Days.MAX_VALUE;
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) days0, 0L, (long) 1);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay();
      int[] intArray0 = new int[1];
      intArray0[0] = 736;
      // Undeclared exception!
      try { 
        gJChronology0.validate(monthDay0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 736 for monthOfYear must not be larger than 12
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      MonthDay monthDay0 = new MonthDay((long) 1, (Chronology) strictChronology0);
      LocalDate localDate0 = monthDay0.toLocalDate(1);
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        islamicChronology0.validate(localDate0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDate localDate0 = new LocalDate(1, 3, 1, buddhistChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      MonthDay monthDay0 = new MonthDay();
      int[] intArray0 = new int[14];
      intArray0[0] = 12;
      intArray0[1] = 1;
      lenientChronology0.validate(monthDay0, intArray0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      MonthDay monthDay0 = new MonthDay();
      int[] intArray0 = new int[14];
      intArray0[0] = 12;
      intArray0[1] = 1;
      lenientChronology0.validate(monthDay0, intArray0);
      ;
}
