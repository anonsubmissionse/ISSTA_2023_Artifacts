 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPeriodType((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPeriodType(object0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadablePeriod
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPartialValues((ReadablePartial) null, object0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.AbstractConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      // Undeclared exception!
      try { 
        longConverter0.getInstantMillis((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.LongConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      // Undeclared exception!
      try { 
        dateConverter0.getInstantMillis("Converter[java.util.Date]", (Chronology) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Date
         //
         verifyException("org.joda.time.convert.DateConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      // Undeclared exception!
      try { 
        calendarConverter0.getChronology((Object) null, (DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.CalendarConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      // Undeclared exception!
      try { 
        readablePartialConverter0.getChronology((Object) "CLa~<A^<H]lR4]F}p", dateTimeZone0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.joda.time.ReadablePartial
         //
         verifyException("org.joda.time.convert.ReadablePartialConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      // Undeclared exception!
      try { 
        calendarConverter0.getChronology((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.CalendarConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      // Undeclared exception!
      try { 
        calendarConverter0.getChronology((Object) "Converter[java.util.Calendar]", (Chronology) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Calendar
         //
         verifyException("org.joda.time.convert.CalendarConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      long long0 = readablePartialConverter0.getInstantMillis((Object) null, (Chronology) null);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      String string0 = nullConverter0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      String string0 = calendarConverter0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      Object object0 = new Object();
      boolean boolean0 = calendarConverter0.isReadableInterval(object0, (Chronology) null);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPartialValues((ReadablePartial) null, (Object) null, (Chronology) null, (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.AbstractConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      Object object0 = new Object();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-4097));
      Chronology chronology0 = nullConverter0.getChronology(object0, dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      Object object0 = new Object();
      Chronology chronology0 = readableDurationConverter0.getChronology(object0, (Chronology) null);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      Object object0 = new Object();
      PeriodType periodType0 = calendarConverter0.getPeriodType(object0);
      // Undeclared exception!
      try { 
        calendarConverter0.getPartialValues((ReadablePartial) null, (Object) periodType0, (Chronology) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.joda.time.PeriodType cannot be cast to java.util.Calendar
         //
         verifyException("org.joda.time.convert.CalendarConverter", e);
      }
  }
