 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField();
      // Undeclared exception!
      try { 
        dateTimeParserBucket_SavedField0.compareTo(dateTimeParserBucket_SavedField0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserBucket$SavedField", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Integer integer0 = new Integer((-1));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2147483647L, (Chronology) null, locale0, integer0, (-1));
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = DateTimeParserBucket.compareReverse(millisDurationField0, millisDurationField0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = DateTimeParserBucket.compareReverse((DurationField) null, millisDurationField0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      int int0 = DateTimeParserBucket.compareReverse(millisDurationField0, (DurationField) null);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      int int0 = DateTimeParserBucket.compareReverse(unsupportedDurationField0, unsupportedDurationField0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = DateTimeParserBucket.compareReverse((DurationField) null, (DurationField) null);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField();
      // Undeclared exception!
      try { 
        dateTimeParserBucket_SavedField0.set(0L, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserBucket$SavedField", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Integer integer0 = Integer.getInteger("K]nK~r]1fx", 1587);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, (Chronology) null, locale0, integer0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-63L), (Chronology) null, locale0);
      assertNotNull(dateTimeParserBucket0.getPivotYear());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField();
      dateTimeParserBucket_SavedField0.init((DateTimeField) null, (-872));
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField();
      Locale locale0 = Locale.US;
      dateTimeParserBucket_SavedField0.init((DateTimeField) null, "/", locale0);
      // Undeclared exception!
      try { 
        dateTimeParserBucket_SavedField0.set(28L, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserBucket$SavedField", e);
      }
  }
