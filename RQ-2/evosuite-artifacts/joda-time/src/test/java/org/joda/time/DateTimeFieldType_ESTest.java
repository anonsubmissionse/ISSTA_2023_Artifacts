/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:32:41 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeFieldType_ESTest extends DateTimeFieldType_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      dateTimeFieldType0.isSupported(iSOChronology0);
      Hours hours0 = Hours.FOUR;
      Seconds seconds0 = hours0.toStandardSeconds();
      iSOChronology0.get((ReadablePeriod) seconds0, 0L);
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldType1.isSupported(iSOChronology0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFieldType.era();
      dateTimeFieldType0.toString();
      DateTimeFieldType.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.minuteOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Chronology chronology0 = ethiopicChronology0.withUTC();
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.monthOfYear();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.isSupported((Chronology) null);
      DateTimeFieldType.secondOfDay();
      DateTimeFieldType.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType1.isSupported((Chronology) null);
      dateTimeFieldType0.isSupported((Chronology) null);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType2.isSupported((Chronology) null);
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldType3.isSupported((Chronology) null);
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.dayOfMonth();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      dateTimeFieldType4.isSupported(julianChronology0);
      dateTimeFieldType4.getField((Chronology) null);
      DateTimeFieldType.centuryOfEra();
      DateTimeFieldType.dayOfWeek();
      DateTimeFieldType.yearOfEra();
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.hourOfDay();
      DateTimeFieldType.hourOfDay();
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.monthOfYear();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.getName();
      DateTimeFieldType.secondOfMinute();
      DateTimeFieldType.era();
      DateTimeFieldType.minuteOfDay();
      DateTimeFieldType.year();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfHalfday();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      dateTimeFieldType1.getField(copticChronology0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType.dayOfYear();
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getZone((String) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null, 5);
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(julianChronology0);
      assertNotNull(dateTimeField0.getName());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = gJChronology0.withUTC();
      dateTimeFieldType0.isSupported(chronology0);
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType1.toString());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("MWn9t");
      Chronology chronology0 = strictChronology0.withZone((DateTimeZone) null);
      dateTimeFieldType0.isSupported(chronology0);
      String string0 = dateTimeFieldType0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_INDIAN);
      dateTimeFieldType0.getField(islamicChronology0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
      Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone1);
      dateTimeFieldType0.isSupported(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      dateTimeFieldType1.isSupported(islamicChronology0);
      dateTimeFieldType1.toString();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.millisOfSecond();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.weekyear();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      dateTimeFieldType0.getField(buddhistChronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfDay();
      dateTimeFieldType1.isSupported(buddhistChronology0);
      dateTimeFieldType1.getRangeDurationType();
      dateTimeFieldType1.getDurationType();
      DateTimeFieldType.hourOfHalfday();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfEra();
      DateTimeFieldType.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType2.toString();
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.dayOfWeek();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      String string0 = dateTimeFieldType0.getName();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.getField((Chronology) null);
      DateTimeFieldType.year();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldType1.getField((Chronology) null);
      DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.hourOfHalfday();
      DurationFieldType durationFieldType0 = dateTimeFieldType2.getRangeDurationType();
      assertNotNull(durationFieldType0.getName());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeFieldType.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      boolean boolean0 = dateTimeFieldType0.isSupported((Chronology) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      dateTimeFieldType0.isSupported(gJChronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType1.getName());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Chronology chronology0 = islamicChronology0.withUTC();
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.getDurationType();
      dateTimeFieldType0.getDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType1.toString());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFieldType.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFieldType.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0.getName());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeFieldType.dayOfYear();
      DateTimeFieldType.weekOfWeekyear();
      DateTimeFieldType.minuteOfHour();
      DateTimeFieldType.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0.getName());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      dateTimeFieldType0.getField(copticChronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType1.toString());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      dateTimeFieldType0.isSupported(lenientChronology0);
      String string0 = dateTimeFieldType0.getName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      Chronology chronology0 = copticChronology0.withZone(dateTimeZone0);
      dateTimeFieldType0.getDurationType();
      dateTimeFieldType0.isSupported(chronology0);
      dateTimeFieldType0.isSupported(copticChronology0);
      dateTimeFieldType0.getDurationType();
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType.secondOfDay();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType1.getName());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.isSupported((Chronology) null);
      DateTimeFieldType.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      dateTimeFieldType1.getField((Chronology) null);
      dateTimeFieldType1.getName();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType2.getName());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.getName();
      DateTimeFieldType.weekyear();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.weekyear();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.getDurationType();
      DateTimeFieldType.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType1.toString());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      dateTimeFieldType0.getField(islamicChronology0);
      String string0 = dateTimeFieldType0.getName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldType0.getDurationType();
      String string0 = dateTimeFieldType0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType.millisOfDay();
      DateTimeFieldType.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0.getName());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      System.setCurrentTimeMillis((-33L));
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      dateTimeFieldType1.getName();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfMinute();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      dateTimeFieldType2.getField(buddhistChronology0);
      dateTimeFieldType2.getRangeDurationType();
      dateTimeFieldType1.getDurationType();
      DateTimeFieldType.minuteOfHour();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.era();
      dateTimeFieldType3.isSupported(buddhistChronology0);
      dateTimeFieldType1.isSupported((Chronology) null);
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldType4.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.centuryOfEra();
      DateTimeFieldType.millisOfDay();
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.secondOfDay();
      dateTimeFieldType6.isSupported((Chronology) null);
      DurationFieldType durationFieldType1 = dateTimeFieldType5.getDurationType();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      GJChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      IslamicChronology.getInstance();
      uTCDateTimeZone0.getOffset((-1723L));
      IslamicChronology.getInstance();
      dateTimeFieldType0.getField(islamicChronology0);
      DateTimeFieldType.hourOfDay();
      DateTimeFieldType.monthOfYear();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.halfdayOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Chronology chronology0 = ethiopicChronology0.withUTC();
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
      dateTimeFieldType1.getDurationType();
      dateTimeFieldType1.isSupported(chronology0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.millisOfSecond();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.dayOfMonth();
      DateTimeFieldType.yearOfEra();
      DateTimeFieldType.minuteOfDay();
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldType4.isSupported(ethiopicChronology0);
      dateTimeFieldType4.getDurationType();
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.millisOfSecond();
      dateTimeFieldType5.getRangeDurationType();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dateTimeFieldType3.getName();
      DateTimeFieldType.dayOfYear();
      DateTimeFieldType.hourOfHalfday();
      dateTimeFieldType5.isSupported(ethiopicChronology0);
      DateTimeFieldType.secondOfDay();
      DateTimeFieldType.dayOfWeek();
      dateTimeFieldType2.isSupported(chronology0);
      DateTimeFieldType.yearOfCentury();
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.year();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      dateTimeFieldType0.getField(chronology0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType1.isSupported(buddhistChronology0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.millisOfDay();
      dateTimeFieldType2.isSupported(buddhistChronology0);
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType3.getField((Chronology) null);
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.year();
      dateTimeFieldType4.isSupported(buddhistChronology0);
      dateTimeFieldType3.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.getField((Chronology) null);
      dateTimeFieldType5.getDurationType();
      DateTimeFieldType.millisOfDay();
      DateTimeFieldType.millisOfSecond();
      DateTimeFieldType.millisOfSecond();
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType4.getRangeDurationType();
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType6.getField(buddhistChronology0);
      DateTimeFieldType.hourOfHalfday();
      dateTimeFieldType3.getField((Chronology) null);
      dateTimeFieldType5.getRangeDurationType();
      dateTimeFieldType2.toString();
      DateTimeFieldType.halfdayOfDay();
      DateTimeFieldType.weekyear();
      DateTimeFieldType.yearOfEra();
      DateTimeFieldType.weekyear();
      System.setCurrentTimeMillis(1377L);
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        StrictChronology.getInstance((Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
         verifyException("org.joda.time.chrono.StrictChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      PeriodType periodType0 = PeriodType.years();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, periodType1);
      Period period0 = mutablePeriod0.toPeriod();
      copticChronology0.get((ReadablePeriod) period0, 93L);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      copticChronology0.set(localTime0, 0L);
      CopticChronology copticChronology1 = CopticChronology.getInstance();
      copticChronology0.add((-1178L), (-1178L), 0);
      dateTimeFieldType0.getRangeDurationType();
      dateTimeFieldType0.getField(copticChronology0);
      Hours hours0 = Hours.ZERO;
      Integer integer0 = new Integer(2);
      hours0.equals(integer0);
      Integer integer1 = new Integer(0);
      dateTimeFieldType0.getField(copticChronology0);
      dateTimeFieldType0.getDurationType();
      dateTimeFieldType0.getName();
      dateTimeFieldType0.isSupported(copticChronology0);
      DateTimeFieldType.yearOfCentury();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      dateTimeFieldType1.getField(copticChronology1);
      dateTimeFieldType1.isSupported(copticChronology0);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.year();
      dateTimeFieldType2.isSupported(copticChronology0);
      dateTimeFieldType2.isSupported(copticChronology1);
      DateTimeFieldType.weekOfWeekyear();
      DateTimeFieldType.yearOfCentury();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.dayOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType3.getDurationType();
      assertNotNull(durationFieldType0.getName());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldType0.getDurationType();
      dateTimeFieldType0.isSupported((Chronology) null);
      dateTimeFieldType0.isSupported((Chronology) null);
      dateTimeFieldType0.getDurationType();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldType1.getDurationType();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfEra();
      DurationFieldType durationFieldType0 = dateTimeFieldType2.getDurationType();
      dateTimeFieldType2.getRangeDurationType();
      DateTimeFieldType.yearOfEra();
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.dayOfYear();
      dateTimeFieldType3.isSupported((Chronology) null);
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType4.getField((Chronology) null);
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldType5.isSupported((Chronology) null);
      DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeFieldType.dayOfYear();
      DateTimeZone.forOffsetHours(0);
      DateTimeFieldType.dayOfWeek();
      DateTimeFieldType.secondOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldType0.getRangeDurationType();
      DateTimeFieldType.yearOfEra();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfMinute();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      dateTimeFieldType0.isSupported(copticChronology0);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0.getName());
}
}
