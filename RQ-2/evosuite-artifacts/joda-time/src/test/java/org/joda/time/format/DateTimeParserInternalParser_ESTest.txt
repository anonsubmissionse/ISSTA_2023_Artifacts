 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, ethiopicChronology0, locale0, (Integer) 1, 1);
      int int0 = internalParser0.parseInto(dateTimeParserBucket0, "", (-1933));
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(886).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      Integer integer0 = new Integer(1941);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      Locale locale0 = Locale.CANADA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100000L, strictChronology0, locale0, integer0, 2615);
      int int0 = internalParser0.parseInto(dateTimeParserBucket0, "71!|^9Ow=i", 886);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, ethiopicChronology0, locale0, (Integer) 1, 1);
      int int0 = internalParser0.parseInto(dateTimeParserBucket0, "", (-1933));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(dateTimeParser0).estimateParsedLength();
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      int int0 = internalParser0.estimateParsedLength();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-1567)).when(dateTimeParser0).estimateParsedLength();
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      int int0 = internalParser0.estimateParsedLength();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.ITALY;
      Integer integer0 = new Integer((-3459));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, julianChronology0, locale0, integer0, (-1));
      // Undeclared exception!
      try { 
        internalParser0.parseInto(dateTimeParserBucket0, (CharSequence) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserInternalParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InternalParser internalParser0 = DateTimeParserInternalParser.of((DateTimeParser) null);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InternalParser[] internalParserArray0 = new InternalParser[8];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_MatchingParser0);
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeParser0).toString();
      DateTimeParserInternalParser dateTimeParserInternalParser0 = (DateTimeParserInternalParser)DateTimeParserInternalParser.of(dateTimeParser0);
      DateTimeParser dateTimeParser1 = dateTimeParserInternalParser0.getUnderlying();
      ;
}
