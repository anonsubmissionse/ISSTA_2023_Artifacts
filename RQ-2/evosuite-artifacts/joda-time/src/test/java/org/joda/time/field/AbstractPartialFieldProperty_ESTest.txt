 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3, 2806, 3, 4473, 3);
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      MonthDay monthDay1 = new MonthDay();
      MonthDay.Property monthDay_Property1 = monthDay1.dayOfMonth();
      boolean boolean0 = monthDay_Property1.equals(monthDay_Property0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3, 2806, 3, 4473, 3);
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      MonthDay monthDay1 = new MonthDay();
      MonthDay.Property monthDay_Property1 = monthDay1.dayOfMonth();
      boolean boolean0 = monthDay_Property1.equals(monthDay_Property0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Partial partial0 = new Partial(dateTimeFieldType0, 43);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      DurationField durationField0 = partial_Property0.getRangeDurationField();
      assertNotNull(durationField0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Partial partial0 = new Partial(dateTimeFieldType0, 18);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      int int0 = partial_Property0.getMinimumValueOverall();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      int int0 = yearMonth_Property0.getMinimumValueOverall();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Partial partial0 = new Partial(localTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      int int0 = partial_Property0.getMinimumValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      int int0 = yearMonth_Property0.getMinimumValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      DateTimeField dateTimeField0 = monthDay_Property0.getField();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.get();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial0 = new Partial(dateTimeFieldType0, (-623));
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      int int0 = partial_Property0.get();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = yearMonth_Property0.getFieldType();
      assertNotNull(dateTimeFieldType0.getName());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      String string0 = yearMonth_Property0.getName();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      Locale locale0 = Locale.ITALY;
      String string0 = yearMonth_Property0.getAsShortText(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(34L);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      Locale locale0 = Locale.JAPAN;
      String string0 = monthDay_Property0.getAsText(locale0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(58, 58, 58, 58, 58);
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      MonthDay.Property monthDay_Property1 = monthDay0.dayOfMonth();
      boolean boolean0 = monthDay_Property1.equals(monthDay_Property0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      MonthDay.Property monthDay_Property1 = monthDay0.monthOfYear();
      boolean boolean0 = monthDay_Property1.equals(monthDay_Property0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      boolean boolean0 = yearMonth_Property0.equals(ethiopicChronology0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(38, (-14), (-14), 38, 38, (-14));
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      boolean boolean0 = monthDay_Property0.equals(monthDay_Property0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(34L);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      MonthDay.Property monthDay_Property1 = monthDay0.dayOfMonth();
      boolean boolean0 = monthDay_Property0.equals(monthDay_Property1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(38, (-14), (-14), 38, 38, (-14));
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      MonthDay monthDay1 = MonthDay.now();
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      int int0 = monthDay_Property0.compareTo((ReadablePartial) monthDay1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      YearMonth yearMonth1 = yearMonth0.plusMonths(1);
      int int0 = yearMonth_Property0.compareTo((ReadablePartial) yearMonth1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      // Undeclared exception!
      try { 
        monthDay_Property0.compareTo((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The instant must not be null
         //
         verifyException("org.joda.time.field.AbstractPartialFieldProperty", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.compareTo((ReadablePartial) yearMonth0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      Instant instant0 = Instant.ofEpochMilli(1);
      DateTime dateTime0 = instant0.toDateTime();
      int int0 = yearMonth_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(34L);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      Instant instant0 = Instant.now();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = instant0.toDateTime((Chronology) iSOChronology0);
      int int0 = monthDay_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 4079, (Chronology) null);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      // Undeclared exception!
      try { 
        monthDay_Property0.compareTo((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The instant must not be null
         //
         verifyException("org.joda.time.field.AbstractPartialFieldProperty", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      int int0 = yearMonth_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      String string0 = yearMonth_Property0.getAsString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1, 1, (Chronology) null);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      int int0 = monthDay_Property0.getMaximumTextLength((Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.getMaximumValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      int int0 = monthDay_Property0.getMinimumValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      String string0 = monthDay_Property0.getAsShortText();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      yearMonth_Property0.hashCode();
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.getMaximumShortTextLength((Locale) null);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(34L);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      String string0 = monthDay_Property0.getAsText();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.getMinimumValueOverall();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      DurationField durationField0 = monthDay_Property0.getRangeDurationField();
      assertNotNull(durationField0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.getMaximumValueOverall();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      DurationField durationField0 = yearMonth_Property0.getDurationField();
      assertNotNull(durationField0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      String string0 = yearMonth_Property0.toString();
      assertNotNull(string0);
}
