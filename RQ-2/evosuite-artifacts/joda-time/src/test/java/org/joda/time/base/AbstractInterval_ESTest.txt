 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Interval interval0 = new Interval((-2532L), (-2532L));
      interval0.hashCode();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Period period0 = Period.seconds(1733);
      DateTime dateTime0 = new DateTime((long) 1733, (Chronology) null);
      Interval interval0 = new Interval(period0, dateTime0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      boolean boolean0 = interval0.equals(interval1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Period period0 = Period.seconds(1733);
      DateTime dateTime0 = new DateTime((long) 1733, (Chronology) null);
      Interval interval0 = new Interval(period0, dateTime0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      boolean boolean0 = interval0.equals(interval1);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1308L), (Chronology) null);
      Interval interval0 = new Interval(1733, 1733);
      Interval interval1 = interval0.withStart(dateTime0);
      boolean boolean0 = interval1.equals(interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1308L), (Chronology) null);
      Interval interval0 = new Interval(1733, 1733);
      Interval interval1 = interval0.withStart(dateTime0);
      boolean boolean0 = interval1.equals(interval0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Interval interval0 = new Interval(864L, 864L);
      MutableInterval mutableInterval0 = new MutableInterval();
      boolean boolean0 = interval0.isAfter((ReadableInterval) mutableInterval0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval((ReadableInstant) null, months0);
      Interval interval1 = interval0.withEnd((ReadableInstant) null);
      boolean boolean0 = interval0.isEqual(interval1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) null);
      DateTime dateTime0 = localDateTime0.toDateTime();
      Weeks weeks0 = Weeks.ZERO;
      Seconds seconds0 = weeks0.toStandardSeconds();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, seconds0);
      Interval interval0 = new Interval((-469), (-469), (DateTimeZone) null);
      boolean boolean0 = mutableInterval0.isEqual(interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      Weeks weeks0 = Weeks.TWO;
      Seconds seconds0 = weeks0.toStandardSeconds();
      Interval interval1 = interval0.withPeriodAfterStart(seconds0);
      Interval interval2 = interval1.withDurationBeforeEnd((ReadableDuration) null);
      Interval interval3 = interval0.overlap(interval2);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = new MutableInterval((-1263L), (-1263L), iSOChronology0);
      Interval interval0 = new Interval(1, 1);
      boolean boolean0 = interval0.overlaps(mutableInterval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = new Interval(1733, 1733, (Chronology) null);
      Interval interval1 = interval0.gap((ReadableInterval) null);
      boolean boolean0 = interval1.overlaps((ReadableInterval) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(100000000000L, 100000000000L);
      Instant instant0 = Instant.ofEpochSecond(100000000000L);
      mutableInterval0.setInterval((ReadableInstant) instant0, (ReadableInstant) instant0);
      boolean boolean0 = mutableInterval0.overlaps((ReadableInterval) null);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interval interval0 = new Interval((-1747L), (-1747L));
      Weeks weeks0 = Weeks.ONE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      Duration duration0 = minutes0.toStandardDuration();
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      boolean boolean0 = interval1.contains((ReadableInterval) interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Period period0 = Period.seconds(1733);
      DateTime dateTime0 = new DateTime((-1308L), (Chronology) null);
      Interval interval0 = new Interval(period0, dateTime0);
      Interval interval1 = new Interval(1733, 1733);
      boolean boolean0 = interval0.contains((ReadableInterval) interval1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Months months0 = Months.FOUR;
      Interval interval0 = new Interval(0L, 0L, iSOChronology0);
      Interval interval1 = interval0.withPeriodBeforeEnd(months0);
      boolean boolean0 = interval1.contains((ReadableInterval) interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Interval interval0 = new Interval((-3410L), 1688L, dateTimeZone0);
      Interval interval1 = interval0.withEnd((ReadableInstant) null);
      boolean boolean0 = interval1.contains((ReadableInstant) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      boolean boolean0 = interval0.equals(interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 0L, iSOChronology0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      String string0 = mutableInterval0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-4869L));
      Years years0 = Years.ONE;
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, years0);
      Period period0 = mutableInterval0.toPeriod((PeriodType) null);
      assertNotNull(period0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Interval interval0 = new Interval((-347L), 1392883581320L, dateTimeZone0);
      Period period0 = interval0.toPeriod();
      assertNotNull(period0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) julianChronology0);
      MutableInterval mutableInterval0 = new MutableInterval((ReadablePeriod) null, mutableDateTime0);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, (ReadableDuration) null);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      assertEquals(1, mutableInterval1.getEndMillis());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) julianChronology0);
      MutableInterval mutableInterval0 = new MutableInterval((ReadablePeriod) null, mutableDateTime0);
      Interval interval0 = mutableInterval0.toInterval();
      assertEquals(1, interval0.getEndMillis());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Period period0 = Period.ZERO;
      Period period1 = period0.withMillis(405);
      Interval interval1 = interval0.withPeriodAfterStart(period1);
      Interval interval2 = interval1.toInterval();
      assertEquals(1, interval2.getEndMillis());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = new MutableInterval((-1263L), (-1263L), iSOChronology0);
      Interval interval0 = mutableInterval0.toInterval();
      assertEquals(1, interval0.getEndMillis());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Months months0 = Months.FOUR;
      Interval interval0 = new Interval(0L, 0L, iSOChronology0);
      Interval interval1 = interval0.withPeriodBeforeEnd(months0);
      long long0 = interval1.toDurationMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      boolean boolean0 = mutableInterval0.isBeforeNow();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      boolean boolean0 = interval0.isBefore((ReadableInterval) interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Interval interval0 = new Interval((-820L), 100000000000000L);
      boolean boolean0 = interval0.isBefore((ReadableInterval) interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval((ReadableInstant) null, months0);
      boolean boolean0 = interval0.isBefore((ReadableInstant) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      boolean boolean0 = mutableInterval0.isAfterNow();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = Duration.millis(10000000L);
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      boolean boolean0 = interval0.isAfter((ReadableInterval) interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval((ReadableInstant) null, months0);
      DateTime dateTime0 = interval0.getStart();
      DateTime dateTime1 = dateTime0.plusSeconds((-4131));
      boolean boolean0 = interval0.isAfter((ReadableInstant) dateTime1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      DateTime dateTime0 = interval0.getStart();
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Instant instant0 = Instant.now();
      Interval interval0 = new Interval(minutes0, instant0);
      DateTime dateTime0 = interval0.getStart();
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Interval interval0 = new Interval((-820L), 100000000000000L);
      DateTime dateTime0 = interval0.getStart();
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 0L, iSOChronology0);
      DateTime dateTime0 = interval0.getEnd();
      assertEquals(1, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutableInterval mutableInterval0 = new MutableInterval(3L, 3L, iSOChronology0);
      DateTime dateTime0 = mutableInterval0.getEnd();
      assertEquals(1, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Period period0 = Period.minutes(1733);
      DateTime dateTime0 = new DateTime((-1308L), (Chronology) null);
      Interval interval0 = new Interval(period0, dateTime0);
      DateTime dateTime1 = interval0.getEnd();
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval((ReadableInstant) null, months0);
      boolean boolean0 = interval0.containsNow();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval((ReadableInstant) null, months0);
      boolean boolean0 = interval0.contains((ReadableInstant) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval((ReadableInstant) null, months0);
      Days days0 = Days.MIN_VALUE;
      PeriodType periodType0 = days0.getPeriodType();
      // Undeclared exception!
      try { 
        interval0.toPeriod(periodType0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 65362691328
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Interval interval0 = new Interval(0L, 1223L);
      // Undeclared exception!
      try { 
        interval0.isEqual((ReadableInterval) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Instant instant0 = Instant.now();
      Period period0 = new Period(14L, 14L);
      Interval interval0 = new Interval(period0, instant0);
      boolean boolean0 = interval0.isAfter(14L);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      boolean boolean0 = mutableInterval0.isAfter(1L);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      boolean boolean0 = interval0.isBefore(2551440384L);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Interval interval0 = duration0.toIntervalFrom((ReadableInstant) null);
      boolean boolean0 = interval0.isBefore(5315L);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 63072000000L);
      boolean boolean0 = mutableInterval0.overlaps(mutableInterval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Months months0 = Months.FOUR;
      Interval interval0 = new Interval(0L, 0L, iSOChronology0);
      Interval interval1 = interval0.withPeriodBeforeEnd(months0);
      boolean boolean0 = interval1.contains((-1L));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 0L, iSOChronology0);
      boolean boolean0 = interval0.contains(10540800000L);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      boolean boolean0 = mutableInterval0.contains((-347L));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 0L, iSOChronology0);
      long long0 = interval0.toDurationMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Period period0 = Period.seconds(1733);
      DateTime dateTime0 = new DateTime((-1308L), (Chronology) null);
      Interval interval0 = new Interval(period0, dateTime0);
      boolean boolean0 = interval0.containsNow();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      mutableInterval1.setChronology(julianChronology0);
      boolean boolean0 = mutableInterval0.equals(mutableInterval1);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      mutableInterval1.setChronology(julianChronology0);
      boolean boolean0 = mutableInterval0.equals(mutableInterval1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Interval interval0 = new Interval(47, 47);
      Interval interval1 = interval0.gap((ReadableInterval) null);
      boolean boolean0 = interval0.equals(interval1);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Interval interval0 = new Interval(47, 47);
      Interval interval1 = interval0.gap((ReadableInterval) null);
      boolean boolean0 = interval0.equals(interval1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 0L, iSOChronology0);
      Object object0 = new Object();
      boolean boolean0 = interval0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      boolean boolean0 = interval0.equals(mutableInterval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval(0L, 0L, iSOChronology0);
      Interval interval1 = interval0.withPeriodBeforeEnd(months0);
      boolean boolean0 = interval0.equals(interval1);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval(0L, 0L, iSOChronology0);
      Interval interval1 = interval0.withPeriodBeforeEnd(months0);
      boolean boolean0 = interval0.equals(interval1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      Duration duration0 = mutableInterval0.toDuration();
      assertEquals(0, duration0.getStandardMinutes());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval((ReadableInstant) null, months0);
      Duration duration0 = interval0.toDuration();
      assertEquals(0, duration0.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Period period0 = Period.seconds(1733);
      DateTime dateTime0 = new DateTime((long) 1733, (Chronology) null);
      Interval interval0 = new Interval(period0, dateTime0);
      boolean boolean0 = interval0.isAfter((ReadableInterval) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      boolean boolean0 = interval0.isAfter((ReadableInterval) interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval((ReadableInstant) null, months0);
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      boolean boolean0 = interval1.isAfterNow();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Period period0 = Period.seconds(1733);
      DateTime dateTime0 = new DateTime((long) 1733, (Chronology) null);
      Interval interval0 = new Interval(period0, dateTime0);
      boolean boolean0 = interval0.isBefore((ReadableInterval) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Period period0 = Period.seconds(1733);
      DateTime dateTime0 = new DateTime((-1308L), (Chronology) null);
      Interval interval0 = new Interval(period0, dateTime0);
      boolean boolean0 = interval0.isBefore((ReadableInstant) dateTime0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Instant instant0 = new Instant();
      Interval interval0 = new Interval(instant0, (ReadableDuration) null);
      Seconds seconds0 = Seconds.ONE;
      Interval interval1 = interval0.withPeriodAfterStart(seconds0);
      boolean boolean0 = interval0.isEqual(interval1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.isEqual(interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      mutableInterval0.setInterval((long) 1, (long) 1);
      boolean boolean0 = interval0.isEqual(mutableInterval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1308L), (Chronology) null);
      Interval interval0 = new Interval(1733, 1733);
      Interval interval1 = interval0.withStart(dateTime0);
      boolean boolean0 = interval1.overlaps(interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Interval interval0 = yearMonth0.toInterval((DateTimeZone) null);
      boolean boolean0 = interval0.overlaps((ReadableInterval) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Period period0 = Period.seconds(1733);
      DateTime dateTime0 = new DateTime();
      Interval interval0 = new Interval(period0, dateTime0);
      Interval interval1 = interval0.withStart(dateTime0);
      boolean boolean0 = interval1.overlaps((ReadableInterval) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Period period0 = Period.seconds(1733);
      DateTime dateTime0 = new DateTime((long) 1733, (Chronology) null);
      Interval interval0 = new Interval(period0, dateTime0);
      boolean boolean0 = interval0.overlaps((ReadableInterval) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Interval interval0 = new Interval(2147482406, 2147482406, (Chronology) null);
      boolean boolean0 = interval0.overlaps(interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1308L), (Chronology) null);
      Interval interval0 = new Interval(1733, 1733);
      Interval interval1 = interval0.withStart(dateTime0);
      Duration duration0 = Duration.standardSeconds(1733);
      Interval interval2 = interval1.withDurationAfterStart(duration0);
      boolean boolean0 = interval1.contains((ReadableInterval) interval2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1308L), (Chronology) null);
      Interval interval0 = new Interval(1733, 1733);
      Interval interval1 = interval0.withStart(dateTime0);
      boolean boolean0 = interval1.contains((ReadableInterval) interval1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Period period0 = Period.seconds(1733);
      DateTime dateTime0 = new DateTime((long) 1733, (Chronology) null);
      Interval interval0 = new Interval(period0, dateTime0);
      Interval interval1 = interval0.withStart(dateTime0);
      boolean boolean0 = interval1.contains((ReadableInterval) interval0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Interval interval0 = new Interval(2147482406, 2147482406, (Chronology) null);
      boolean boolean0 = interval0.contains((ReadableInterval) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval(0L, 0L, iSOChronology0);
      Interval interval1 = interval0.withPeriodBeforeEnd(months0);
      DateTime dateTime0 = interval1.getStart();
      boolean boolean0 = interval0.contains((ReadableInstant) dateTime0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      // Undeclared exception!
      try { 
        mutableInterval0.setStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval((ReadableInstant) null, months0);
      boolean boolean0 = interval0.isBeforeNow();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      Interval interval0 = new Interval((ReadableInstant) null, months0);
      boolean boolean0 = interval0.isAfter((ReadableInstant) null);
      assertTrue(boolean0);
}
