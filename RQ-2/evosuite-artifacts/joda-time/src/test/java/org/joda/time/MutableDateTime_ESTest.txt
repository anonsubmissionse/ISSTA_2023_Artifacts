 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      mutableDateTime0.addMillis((-2840));
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(3268).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("Illegal rounding mode: ", dateTimeFormatter0);
      mutableDateTime0.addSeconds((-499));
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      mutableDateTime0.addMinutes((-41));
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      mutableDateTime0.addHours((-1190));
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addDays(4);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addWeeks((-23));
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      mutableDateTime0.addMonths((-659));
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
      Locale locale0 = Locale.GERMAN;
      mutableDateTime_Property0.set("1", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      long long0 = mutableDateTime_Property0.getMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      DateTimeField dateTimeField0 = mutableDateTime_Property0.getField();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property(mutableDateTime0, dateTimeField0);
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
      mutableDateTime_Property0.set("70");
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) uTCDateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
      mutableDateTime_Property0.set(5);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setMillisOfDay(0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      mutableDateTime0.setDayOfYear(4);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.setDayOfMonth(4);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(34);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter1);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("2014-02-14T20:21:21.320Z");
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("6");
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      System.setCurrentTimeMillis(0L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(5);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      System.setCurrentTimeMillis((-1750L));
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) ethiopicChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(0L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis((-2532L));
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      mutableDateTime0.setRounding(dateTimeField0);
      int int0 = mutableDateTime0.getRoundingMode();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      mutableDateTime0.setRounding(dateTimeField0);
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Instant instant0 = new Instant(1492L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      mutableDateTime0.setRounding((DateTimeField) remainderDateTimeField0, 5);
      mutableDateTime0.getRoundingField();
      assertEquals(0, mutableDateTime0.getRoundingMode());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setYear((-701));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setWeekyear((-17));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-618L), (DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setWeekOfWeekyear(509);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 509 for weekOfWeekyear must be in the range [1,53]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.setTime((-1076), (-1076), (-2215), 1052);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1076 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      // Undeclared exception!
      try { 
        mutableDateTime0.setSecondOfMinute((-4156));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -4156 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setSecondOfDay((-594));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -594 for secondOfDay must be in the range [0,86399]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1838));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, 3);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000-00:00:01.838 (BuddhistChronology[-00:00:01.838])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setMonthOfYear((-2145));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2145 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.setMinuteOfHour(978);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 978 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setMinuteOfDay((-23));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -23 for minuteOfDay must be in the range [0,1439]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setMillisOfSecond(10000);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 10000 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(92L, (DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setHourOfDay(1161);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 1161 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(22);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, buddhistChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfWeek(22);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 22 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setDateTime((-1677), 435, 96, (-1594), 435, 435, 587);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1594 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(4634L, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        mutableDateTime0.setDate(1251, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Instant instant0 = new Instant();
      Chronology chronology0 = instant0.getChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1613L, chronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      // Undeclared exception!
      try { 
        mutableDateTime0.set(dateTimeFieldType0, (-236));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -236 for weekyearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        MutableDateTime.parse("", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse((String) null, (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.addYears((-2597));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.addWeekyears((-2312));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadablePeriod) years0, (-1671));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 3588445175808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(794L, (Chronology) islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add(durationFieldType0, (-3512));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -349811 for year must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        mutableDateTime0.add(durationFieldType0, (-128));
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(julianChronology0, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.JulianChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime((Object) gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.GregorianChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(5, 100, 1, 100, 5, 157, 0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 100 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime((-1099), 1978, 2448, (-1099), 2448, 2448, 2448);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1099 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.add((ReadablePeriod) null, 1);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(15356250).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("org/joda/time/tz/data");
      DateTime dateTime0 = localDateTime0.toDateTime();
      Duration duration0 = new Duration(mutableDateTime0, dateTime0);
      mutableDateTime0.add((ReadableDuration) duration0, (-3778));
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      mutableDateTime0.setRounding(dateTimeField0);
      mutableDateTime0.setMillis((long) 320);
      assertEquals(0, mutableDateTime0.getRoundingMode());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-609L));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.setMillis(776L);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime mutableDateTime1 = (MutableDateTime)mutableDateTime0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, uTCDateTimeZone0);
      mutableDateTime0.setChronology(zonedChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        MutableDateTime.parse("zmiKo", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"zmiKo\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(2, 2, 3, 4, 1, 1, 1, (Chronology) null);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      mutableDateTime0.add((-507L));
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime0);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      mutableDateTime0.setDate((ReadableInstant) null);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
      mutableDateTime0.addMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      mutableDateTime0.addMillis(0);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) julianChronology0);
      mutableDateTime0.addSeconds(2381);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addSeconds(0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) uTCDateTimeZone0);
      mutableDateTime0.addMinutes(4);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addMinutes(0);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) uTCDateTimeZone0);
      mutableDateTime0.addHours(1);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addDays((-23));
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addDays(0);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addWeeks(1);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addWeeks(0);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addMonths(980);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addMonths(0);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addWeekyears(4);
      assertEquals(1, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addWeekyears(0);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      mutableDateTime0.add(durationFieldType0, 0);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.add((DurationFieldType) null, 4);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      Instant instant0 = Instant.ofEpochSecond((-298L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0, (ReadableInstant) instant0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.set((DateTimeFieldType) null, 5);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-3711L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      mutableDateTime0.set(dateTimeFieldType0, 0);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Chronology chronology0 = julianChronology0.withUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      Hours hours0 = Hours.hours(5);
      Days days0 = hours0.toStandardDays();
      julianChronology0.get((ReadablePeriod) days0, 1L, (-2067L));
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      mutableDateTime1.setHourOfDay(0);
      mutableDateTime0.add(durationFieldType0, 2);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.weekyear();
      mutableDateTime0.setSecondOfMinute(3);
      mutableDateTime1.addHours(0);
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime1.yearOfEra();
      MutableDateTime mutableDateTime2 = mutableDateTime_Property1.roundHalfCeiling();
      MutableDateTime mutableDateTime3 = mutableDateTime_Property1.add(0L);
      mutableDateTime0.addYears(0);
      mutableDateTime2.setDate(3482L);
      mutableDateTime0.setZoneRetainFields((DateTimeZone) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.property(dateTimeFieldType0);
      mutableDateTime1.setTime(3482L);
      mutableDateTime1.minuteOfHour();
      MutableDateTime mutableDateTime4 = mutableDateTime_Property0.addWrapField(3);
      mutableDateTime3.minuteOfDay();
      mutableDateTime_Property2.getMutableDateTime();
      mutableDateTime4.monthOfYear();
      mutableDateTime3.secondOfMinute();
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Chronology chronology0 = julianChronology0.withUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(chronology0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      Hours hours0 = Hours.hours(5);
      Days days0 = hours0.toStandardDays();
      julianChronology0.get((ReadablePeriod) days0, 1L, (-2067L));
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      mutableDateTime1.setHourOfDay(0);
      mutableDateTime0.add(durationFieldType0, 2);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime1.weekyear();
      mutableDateTime0.setSecondOfMinute(3);
      mutableDateTime1.addHours(0);
      MutableDateTime.Property mutableDateTime_Property1 = mutableDateTime1.yearOfEra();
      MutableDateTime mutableDateTime2 = mutableDateTime_Property1.roundHalfCeiling();
      MutableDateTime mutableDateTime3 = mutableDateTime_Property1.add(0L);
      mutableDateTime0.addYears(0);
      mutableDateTime2.setDate(3482L);
      mutableDateTime0.setZoneRetainFields((DateTimeZone) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      MutableDateTime.Property mutableDateTime_Property2 = mutableDateTime0.property(dateTimeFieldType0);
      mutableDateTime1.setTime(3482L);
      mutableDateTime1.minuteOfHour();
      MutableDateTime mutableDateTime4 = mutableDateTime_Property0.addWrapField(3);
      mutableDateTime3.minuteOfDay();
      mutableDateTime_Property2.getMutableDateTime();
      mutableDateTime4.monthOfYear();
      mutableDateTime3.secondOfMinute();
      assertEquals(0, mutableDateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      mutableDateTime0.setZone(uTCDateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) uTCDateTimeZone0);
      Seconds seconds0 = Seconds.MIN_VALUE;
      mutableDateTime0.add((ReadablePeriod) seconds0, (-2082));
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(3346).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("org/joda/time/tz/data");
      DateTime dateTime0 = localDateTime0.toDateTime();
      Duration duration0 = new Duration(mutableDateTime0, dateTime0);
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadableDuration) duration0, (-3778));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -4472453364417320 * -3778
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.add((ReadableDuration) null, 67);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Instant instant0 = new Instant(1492L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2330);
      mutableDateTime0.setRounding((DateTimeField) remainderDateTimeField0, 5);
      mutableDateTime0.setMillis((-2263L));
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      mutableDateTime0.setRounding(dateTimeField0, 4);
      mutableDateTime0.setMillis((-3421L));
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 3);
      mutableDateTime0.setMillis(604800000L);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      mutableDateTime0.setRounding(dateTimeField0, 2);
      mutableDateTime0.setMillis((-1L));
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      mutableDateTime0.setRounding(dateTimeField0, 0);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      mutableDateTime0.setRounding(dateTimeField0, 0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, 1870);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: 1870
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, (-3885));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: -3885
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(16L, dateTimeZone0);
      mutableDateTime0.setRounding((DateTimeField) null, (-3989));
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(16L, dateTimeZone0);
      mutableDateTime0.setRounding((DateTimeField) null, (-3989));
      assertEquals(0, mutableDateTime0.getRoundingMode());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.addYears(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      assertNotNull(mutableDateTime_Property0);
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-3711L));
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      assertNotNull(mutableDateTime_Property0);
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-3711L));
      mutableDateTime0.setMinuteOfHour(0);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(23034375, (-120), 23034375, (-120), (-3637), (-120), (-3637), ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -120 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1L));
      mutableDateTime0.setWeekOfWeekyear(5);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1L));
      mutableDateTime0.setDateTime(5, 3, 1, 4, 3, 5, 1);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1L));
      mutableDateTime0.setMonthOfYear(1);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3216));
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(islamicChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.IslamicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(168L);
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = Duration.millis(5);
      mutableDateTime0.add((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
      assertNotNull(mutableDateTime_Property0);
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      assertNotNull(mutableDateTime_Property0);
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1L));
      mutableDateTime0.setMillisOfSecond(2);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setMillisOfDay((-1249));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1249 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      int int0 = mutableDateTime0.getRoundingMode();
      ;
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setDayOfWeek(2);
      assertEquals(1, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setMinuteOfDay(1);
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) uTCDateTimeZone0);
      mutableDateTime0.setDate(5, 5, 3);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1838));
      MutableDateTime mutableDateTime0 = new MutableDateTime(4, 3, 2, 1, 3, 0, 0, dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertNotNull(mutableDateTime_Property0);
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(4, 2, 4, 2, 0, 4, 2);
      assertEquals(1, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(168L);
      mutableDateTime0.add((ReadablePeriod) null);
      ;
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(30672000000L, (Chronology) copticChronology0);
      mutableDateTime0.setWeekyear(4);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setTime(4, 5, 3, 1);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      assertNotNull(mutableDateTime_Property0);
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(30672000000L, (Chronology) copticChronology0);
      DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();
      assertNotNull(dateTimeField0);
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      mutableDateTime0.setMillis((ReadableInstant) null);
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) julianChronology0);
      mutableDateTime0.setZoneRetainFields((DateTimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-3711L));
      mutableDateTime0.setYear((-23));
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      mutableDateTime0.setRounding(dateTimeField0);
      mutableDateTime0.copy();
      assertEquals(0, mutableDateTime0.getRoundingMode());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setSecondOfDay(1);
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1L));
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
      mutableDateTime_Property0.roundHalfFloor();
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(30672000000L, (Chronology) copticChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.set(5450);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 5450 for yearOfCentury must be in the range [1,100]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      String string0 = mutableDateTime_Property0.getAsShortText();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-3711L));
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
      mutableDateTime_Property0.add((-23));
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1L));
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
      Chronology chronology0 = mutableDateTime_Property0.getChronology();
      assertNotNull(chronology0);
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      mutableDateTime_Property0.roundFloor();
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      mutableDateTime_Property0.roundCeiling();
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) julianChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      mutableDateTime_Property0.roundHalfEven();
      ;
}
