/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 19:41:25 GMT 2022
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.DateTimeZoneBuilder;
import org.joda.time.tz.ZoneInfoCompiler;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZoneInfoCompiler_ESTest extends ZoneInfoCompiler_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = ZoneInfoCompiler.parseOptional("");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      hashMap0.put("Destination directory doesn't exist and cannot be created: ", (DateTimeZone) null);
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      try { 
        ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.test((String) null, dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseYear((String) null, (-2297));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseOptional((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      // Undeclared exception!
      try { 
        zoneInfoCompiler0.parseDataFile((BufferedReader) null, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      try { 
        zoneInfoCompiler0.parseDataFile(bufferedReader0, true);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Chronology chronology0 = ZoneInfoCompiler.getLenientISOChronology();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      MockFile mockFile0 = new MockFile("", "W;1");
      File[] fileArray0 = new File[4];
      fileArray0[0] = (File) mockFile0;
      try { 
        zoneInfoCompiler0.compile(mockFile0, fileArray0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      StringReader stringReader0 = new StringReader("\nUntilYear: ");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1);
      zoneInfoCompiler0.parseDataFile(bufferedReader0, true);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      StringReader stringReader0 = new StringReader("z-)._Cj#+u <{|Nb");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      zoneInfoCompiler0.parseDataFile(bufferedReader0, false);
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      File[] fileArray0 = new File[0];
      Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) null, fileArray0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("g3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      MockFile mockFile0 = new MockFile("g3");
      File[] fileArray0 = new File[1];
      fileArray0[0] = (File) mockFile0;
      try { 
        zoneInfoCompiler0.compile(fileArray0[0], fileArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("g3");
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      MockFile mockFile0 = new MockFile("g3");
      File[] fileArray0 = new File[1];
      fileArray0[0] = (File) mockFile0;
      try { 
        zoneInfoCompiler0.compile(mockFile0, fileArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Destination is not a directory: g3
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      File[] fileArray0 = new File[7];
      // Undeclared exception!
      try { 
        zoneInfoCompiler0.compile((File) null, fileArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("datetimefs$[eld[");
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = null;
      try {
        zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"datetimefs$[eld[\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-src";
      stringArray0[1] = "org.joda.time.field.DecoratedDurationField";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.joda.time.field.DecoratedDurationField/\nUntilYear: ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)28;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[2] = "\nUntilYear: ";
      stringArray0[3] = "Karachi";
      stringArray0[4] = "PeriodFormat.seconds";
      stringArray0[5] = "Karachi";
      stringArray0[6] = "org.joda.time.tz.DateTimeZoneBuilder$OfYear";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Karachi");
      try { 
        ZoneInfoCompiler.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Magnitude of add amount is too large: ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      dataOutputStream0.write(byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Magnitude of add amount is too large: ";
      stringArray0[1] = "Magnitude of add amount is too large: ";
      stringArray0[2] = "Magnitude of add amount is too large: ";
      ZoneInfoCompiler.main(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      StringReader stringReader0 = new StringReader("z-)._Cj#+u <{|Nb");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      char[] charArray0 = new char[7];
      bufferedReader0.read(charArray0);
      zoneInfoCompiler0.parseDataFile(bufferedReader0, false);
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Magnitude of add amount is too large: ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Magnitude of add amount is too large: ";
      stringArray0[1] = "Magnitude of add amount is too large: ";
      stringArray0[2] = "Magnitude of add amount is too large: ";
      ZoneInfoCompiler.main(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Asia");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      MockFile mockFile0 = new MockFile("Asia/Karachi");
      File[] fileArray0 = new File[0];
      try { 
        zoneInfoCompiler0.compile(mockFile0, fileArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Destination directory doesn't exist and cannot be created: Asia/Karachi
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-src";
      stringArray0[1] = "org.joda.time.field.DecoratedDurationField";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.joda.time.field.DecoratedDurationField/\nUntilYear: ");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[2] = "\nUntilYear: ";
      stringArray0[3] = "Karachi";
      stringArray0[4] = "PeriodFormat.seconds";
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[5] = "org.joda.time.chrono.GregorianChronology";
      stringArray0[6] = "org.joda.time.tz.DateTimeZoneBuilder$OfYear";
      try { 
        ZoneInfoCompiler.main(stringArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      File file0 = MockFile.createTempFile("Vq;cG2wJ/p\"<", "Destination is not a directory: ");
      try { 
        zoneInfoCompiler0.compile(file0, (File[]) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Destination is not a directory: /tmp/Vq;cG2wJ/p\"<0Destination is not a directory: 
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-14));
      boolean boolean0 = ZoneInfoCompiler.test("118|?", dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1432));
      boolean boolean0 = ZoneInfoCompiler.test("-00:00:01.432", dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('h');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('z');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('w');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('u');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('s');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('g');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('Z');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('W');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('S');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('U');
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = ZoneInfoCompiler.parseOptional("R** =U/~ 1V");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = ZoneInfoCompiler.parseYear("only", 85);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = ZoneInfoCompiler.parseYear("max", 6);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = ZoneInfoCompiler.parseYear("maximum", (-77));
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = ZoneInfoCompiler.parseYear("min", 6);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseYear("org/joda/time/tz/data", 109);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"org/joda/time/tz/data\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Magnitude of add amount is too large: ");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      hashMap0.put("$z'R6(VaaO", dateTimeZone0);
      hashMap0.put("FoHAP#=got", dateTimeZone0);
      ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.writeZoneInfoMap((DataOutputStream) null, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // DataOutputStream must not be null.
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseTime("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear1 = ZoneInfoCompiler.getStartOfYear();
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-?";
      ZoneInfoCompiler.main(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-verbose";
      try { 
        ZoneInfoCompiler.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseDayOfWeek("8H.;jd");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"8H.;jd\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseMonth("+XG!-");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"+XG!-\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      MockFile mockFile0 = new MockFile("Asia/Karachi");
      File[] fileArray0 = new File[0];
      Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile(mockFile0, fileArray0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ZoneInfoCompiler.main(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("1vgT2y .&EDvlo", "1vgT2y .&EDvlo", false);
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
      String string0 = zoneInfoCompiler_DateTimeOfYear0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      zoneInfoCompiler_DateTimeOfYear0.addRecurring(dateTimeZoneBuilder0, "\nAdvanceDayOfWeek: ", 1, (-383), (-1076));
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      // Undeclared exception!
      try { 
        zoneInfoCompiler_DateTimeOfYear0.addCutover((DateTimeZoneBuilder) null, 1023);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear", e);
      }
  }
}
