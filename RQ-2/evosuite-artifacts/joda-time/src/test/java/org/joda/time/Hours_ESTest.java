/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:09:38 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Hours_ESTest extends Hours_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.minus(34);
      boolean boolean0 = hours0.isLessThan(hours1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.minus(34);
      boolean boolean0 = hours0.isLessThan(hours1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      boolean boolean0 = hours0.isLessThan((Hours) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Seconds seconds0 = Seconds.MIN_VALUE;
      Hours hours1 = seconds0.toStandardHours();
      Hours hours2 = hours0.minus(hours1);
      Hours hours3 = hours2.plus(hours2);
      boolean boolean0 = hours2.isGreaterThan(hours3);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Seconds seconds0 = Seconds.MIN_VALUE;
      Hours hours1 = seconds0.toStandardHours();
      Hours hours2 = hours0.minus(hours1);
      Hours hours3 = hours2.plus(hours2);
      boolean boolean0 = hours2.isGreaterThan(hours3);
      assertEquals(0, hours3.getHours());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      boolean boolean0 = hours0.isGreaterThan((Hours) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(1, weeks0.getWeeks());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Hours hours0 = Hours.hours((-3196));
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Hours hours0 = Hours.hours((-3196));
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Seconds seconds0 = hours0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Hours hours1 = hours0.plus((-767));
      Seconds seconds0 = hours1.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.TWO;
      Hours hours0 = days0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals(1, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.hours((-3196));
      Minutes minutes0 = hours0.toStandardMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hours hours0 = Hours.hours(20503125);
      Duration duration0 = hours0.toStandardDuration();
      assertEquals(1, duration0.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hours hours0 = Hours.hours((-2216));
      Duration duration0 = hours0.toStandardDuration();
      assertEquals(1, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      Days days0 = hours0.toStandardDays();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      Days days0 = hours0.toStandardDays();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Hours hours1 = hours0.negated();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Hours hours1 = hours0.negated();
      hours1.negated();
      assertEquals(1, hours1.getHours());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Hours hours0 = minutes0.toStandardHours();
      Hours hours1 = hours0.multipliedBy(0);
      assertEquals(1, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Hours hours0 = minutes0.toStandardHours();
      Hours hours1 = hours0.multipliedBy(0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Hours hours1 = hours0.multipliedBy(7);
      assertEquals(0, hours1.getHours());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Hours hours1 = hours0.TWO.plus((-13));
      Hours hours2 = hours1.minus(hours0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Hours hours0 = duration0.toStandardHours();
      int int0 = hours0.getHours();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      int int0 = hours0.getHours();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Hours hours0 = minutes0.toStandardHours();
      Hours hours1 = hours0.dividedBy(101);
      assertEquals(0, hours1.getHours());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Hours hours0 = minutes0.toStandardHours();
      Hours hours1 = hours0.dividedBy(101);
      assertEquals(1, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      try { 
        hours0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 3600
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      try { 
        hours0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 60
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Days days0 = Days.TWO;
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = Hours.MAX_VALUE;
      // Undeclared exception!
      try { 
        hours0.plus(hours1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 48 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      try { 
        hours0.plus((-116));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -116
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      try { 
        hours0.negated();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Hours hours1 = Hours.MIN_VALUE;
      Hours hours2 = hours0.plus(hours1);
      // Undeclared exception!
      try { 
        hours0.minus(hours2);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 5 + 2147483643
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      // Undeclared exception!
      try { 
        hours0.MIN_VALUE.minus(1181);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1181
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(6789L);
      Hours hours0 = Hours.hoursBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      // Undeclared exception!
      try { 
        hours0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Hours", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = hours0.plus(0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hours hours0 = Hours.hours(0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.hours(5);
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hours hours0 = Hours.hours(8);
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hours hours0 = Hours.hours(3);
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Hours hours0 = Hours.hours(2);
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hours hours0 = Hours.hours(6);
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Hours hours0 = Hours.hours(1);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Hours hours1 = Hours.ONE;
      boolean boolean0 = hours1.isLessThan(hours0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      boolean boolean0 = hours0.isLessThan((Hours) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Hours hours0 = seconds0.toStandardHours();
      boolean boolean0 = hours0.isLessThan((Hours) null);
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Hours hours0 = seconds0.toStandardHours();
      boolean boolean0 = hours0.isLessThan((Hours) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      boolean boolean0 = hours0.isLessThan(hours0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Hours hours1 = hours0.MAX_VALUE.minus(hours0);
      boolean boolean0 = hours1.isGreaterThan(hours0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Hours hours1 = hours0.MAX_VALUE.minus(hours0);
      boolean boolean0 = hours1.isGreaterThan(hours0);
      assertEquals(0, hours1.getHours());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hours hours0 = Hours.hours(23034375);
      boolean boolean0 = hours0.isGreaterThan((Hours) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hours hours0 = Hours.hours(23034375);
      boolean boolean0 = hours0.isGreaterThan((Hours) null);
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      boolean boolean0 = hours0.isGreaterThan(hours0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Hours hours1 = hours0.dividedBy(1);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      Hours hours1 = hours0.minus((Hours) null);
      assertEquals(0, hours1.getHours());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Hours hours1 = hours0.plus((Hours) null);
      assertEquals(0, hours1.getHours());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Hours hours0 = Hours.hours(23034375);
      Hours hours1 = hours0.minus(23034375);
      hours1.plus(hours1);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Hours hours0 = Hours.parseHours((String) null);
      Duration duration0 = hours0.toStandardDuration();
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      boolean boolean0 = hours0.isGreaterThan((Hours) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Hours hours0 = Hours.hours(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Hours hours0 = Hours.hours(7);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Hours hours1 = hours0.THREE.plus(2);
      Hours hours2 = hours1.minus((-1));
      assertEquals(0, hours2.getHours());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Hours hours0 = Hours.hours(4);
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Hours hours0 = seconds0.toStandardHours();
      Hours hours1 = hours0.ZERO.dividedBy(4);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Hours hours0 = seconds0.toStandardHours();
      Hours hours1 = hours0.ZERO.dividedBy(4);
      assertEquals(1, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Hours hours0 = Hours.hours(Integer.MIN_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Minutes minutes0 = hours0.ZERO.toStandardMinutes();
      assertEquals(1, minutes0.size());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      int int0 = hours0.getHours();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Hours hours1 = hours0.MAX_VALUE.negated();
      // Undeclared exception!
      try { 
        hours1.multipliedBy(505);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483647 * 505
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Weeks weeks0 = hours0.toStandardWeeks();
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      PeriodType periodType0 = hours0.MIN_VALUE.getPeriodType();
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Days days0 = hours0.THREE.toStandardDays();
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Hours hours1 = hours0.multipliedBy((-13));
      assertEquals(0, hours1.getHours());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Hours hours1 = Hours.standardHoursIn(hours0);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      String string0 = hours0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Seconds seconds0 = hours0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
}
}
