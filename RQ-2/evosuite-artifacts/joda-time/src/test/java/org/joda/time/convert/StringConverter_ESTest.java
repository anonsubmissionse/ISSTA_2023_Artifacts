/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 19:58:48 GMT 2022
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritableInterval;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.convert.StringConverter;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringConverter_ESTest extends StringConverter_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("Ptj>e[uK5");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Ptj>e[uK5\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("P3o>e[u#5");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"P3o>e[u#5\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("xZa .$yv~");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"xZa .$yv~\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("4fk{");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4fk{\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      MutableInterval mutableInterval0 = new MutableInterval();
      stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) "5/8", (Chronology) copticChronology0);
      assertEquals(0, mutableInterval0.getStartMillis());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      long long0 = stringConverter0.getInstantMillis("000", (Chronology) null);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) null, (Object) null, (Chronology) lenientChronology0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(6L, 6L, gregorianChronology0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, object0, (Chronology) gregorianChronology0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      MutableInterval mutableInterval0 = new MutableInterval();
      Object object0 = new Object();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, object0, (Chronology) iSOChronology0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial0 = new Partial(dateTimeFieldType0, 1);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) localDateTime0, (Object) "000", (Chronology) ethiopicChronology0, dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"000\": Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      MonthDay monthDay0 = new MonthDay();
      LocalDate localDate0 = monthDay0.toLocalDate((-822));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(27);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) localDate0, (Object) "9~A.%}'9", (Chronology) lenientChronology0, dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      DateTime dateTime0 = new DateTime(0L);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Integer integer0 = new Integer(2599);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) localDateTime0, (Object) integer0, (Chronology) ethiopicChronology0, (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      LocalTime localTime0 = new LocalTime(60L);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Partial partial0 = new Partial(localTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) localTime0, (Object) "org/joda/time/tz/data", (Chronology) islamicChronology0, dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis("000", ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"000\": Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis((Object) null, buddhistChronology0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis("*klVE(?;cA<", iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"*klVE(?;cA<\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis(object0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) null, (Object) "6r HH[0}JNd2YeB}MB/", (Chronology) buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: 6r HH[0}JNd2YeB}MB/
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      Instant instant0 = MockInstant.ofEpochMilli(119L);
      Date date0 = Date.from(instant0);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1360L), (Chronology) iSOChronology0);
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      Duration duration0 = Duration.standardDays(119L);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, duration0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) "/6vmN9]);&", (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: /6vmN9]);&
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      StringConverter stringConverter0 = new StringConverter();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L));
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) "pg", (Chronology) buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pg\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.days();
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      StringConverter stringConverter0 = new StringConverter();
      org.joda.time.Instant instant0 = new org.joda.time.Instant((-1685L));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = instant0.toDateTime((Chronology) islamicChronology0);
      Duration duration0 = Duration.millis(613L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, duration0, periodType0);
      stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) "p", (Chronology) islamicChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-635));
      LocalDate localDate0 = new LocalDate(3600L, dateTimeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) localDate0, (Object) localDate0, (Chronology) islamicChronology0, dateTimeFormatter1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.joda.time.LocalDate cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      Class<?> class0 = stringConverter0.getSupportedType();
      assertTrue(class0.isArray());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) null, (Object) "5/8", (Chronology) strictChronology0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) null, (Object) "5/p", (Chronology) strictChronology0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval("5/8");
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      DateTime dateTime0 = new DateTime(647L);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime(dateTimeZone0);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, dateTime0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) "pB!hv,?'", (Chronology) julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: pB!hv,?'
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) "000", (Chronology) ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"000\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("pu9L X@|w#L");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pu9L X@|w#L\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("pTM;;bc_'V");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pTM;;bc_'V\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("Ptj>eYuKv");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Ptj>eYuKv\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(76, 76).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      int[] intArray0 = stringConverter0.getPartialValues((ReadablePartial) localDate0, (Object) "", (Chronology) gJChronology0, dateTimeFormatter0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis(stringConverter0, buddhistChronology0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.joda.time.convert.StringConverter cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
}
