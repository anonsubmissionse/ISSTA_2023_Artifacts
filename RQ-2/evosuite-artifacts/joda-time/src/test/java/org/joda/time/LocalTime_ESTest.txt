 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) islamicChronology0);
      LocalTime localTime1 = localTime0.minusMillis(1481);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.MIDNIGHT.minusSeconds((-335));
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      LocalTime localTime1 = localTime0.minusHours((-953));
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(9223372036854775807L, (Chronology) ethiopicChronology0);
      LocalTime localTime1 = localTime0.plusMillis((-1));
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = LocalTime.parse("", dateTimeFormatter0);
      LocalTime localTime1 = localTime0.plusSeconds((-2391));
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      Locale locale0 = Locale.ENGLISH;
      LocalTime localTime1 = localTime_Property0.setCopy("57", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Object) null, buddhistChronology0);
      assertEquals(1, localTime0.size());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for minuteOfHour is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = LocalTime.parse("", dateTimeFormatter0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.setCopy(11);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      long long0 = localTime_Property0.getMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 11, 11);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      DateTimeField dateTimeField0 = localTime_Property0.getField();
      assertFalse(dateTimeField0.isLenient());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DurationField durationField0 = buddhistChronology0.millis();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, unsupportedDateTimeField0);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1388));
      LocalTime localTime0 = new LocalTime((Object) null, dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy(623158436);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      LocalTime localTime1 = localTime0.withLocalMillis(1628L);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalTime localTime0 = new LocalTime((-549L), (DateTimeZone) uTCDateTimeZone0);
      Duration duration0 = new Duration((-549L), (-549L));
      Duration duration1 = duration0.withMillis((-549L));
      Period period0 = duration1.toPeriod();
      LocalTime localTime1 = localTime0.minus(period0);
      DateTimeUtils.setCurrentMillisFixed(0);
      DateTime dateTime0 = localTime1.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) islamicChronology0);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
      assertEquals(1, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(14, 14);
      DateTimeUtils.setCurrentMillisFixed(0);
      DateTime dateTime0 = localTime0.MIDNIGHT.toDateTimeToday();
      assertEquals(1, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1763L);
      DateTimeUtils.setCurrentMillisFixed((-1L));
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertEquals(1, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTime localTime0 = LocalTime.parse("5");
      assertEquals(0, localTime0.size());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      LocalTime localTime1 = localTime0.withMillisOfDay(1);
      int int0 = localTime1.getSecondOfMinute();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      LocalTime localTime1 = localTime0.withMillisOfDay(1);
      int int0 = localTime1.getMinuteOfHour();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.now((Chronology) julianChronology0);
      int int0 = localTime0.MIDNIGHT.getMillisOfSecond();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      int int0 = localTime0.getMillisOfDay();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L, (Chronology) islamicChronology0);
      long long0 = localTime0.getLocalMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      long long0 = localTime0.getLocalMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      LocalTime localTime0 = new LocalTime((-1330), 70, 70, 87, lenientChronology0);
      long long0 = localTime0.getLocalMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(9223372036854775807L, (Chronology) ethiopicChronology0);
      int int0 = localTime0.getHourOfDay();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = localTime0.getField(1, (Chronology) copticChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      int int0 = localTime0.get(dateTimeFieldType0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        localTime0.withSecondOfMinute((-3694));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -3694 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Years years0 = Years.ONE;
      // Undeclared exception!
      try { 
        localTime0.withPeriodAdded(years0, 623191204);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 623193174 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-2378L));
      Months months0 = Months.MAX_VALUE;
      // Undeclared exception!
      try { 
        localTime0.withPeriodAdded(months0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: 4611686014132420609
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        localTime0.withPeriodAdded(weeks0, 12);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -25769803776 * 604800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-2233L));
      // Undeclared exception!
      try { 
        localTime0.withMinuteOfHour(2283);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2283 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2145065310, 2145065310, 2145065310, 2145065310, 2145065310, (-2147483619));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond((-2147483619));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483619 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-1059));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1059 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        localTime0.withLocalMillis((-128848944638680L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
      try { 
        localTime0.withHourOfDay(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483647 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((long) 10125013, (Chronology) ethiopicChronology0);
      MonthDay monthDay0 = new MonthDay((long) (-1186));
      // Undeclared exception!
      try { 
        localTime0.withFields(monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for dayOfMonth must be in the range [1,30]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2944L, (Chronology) islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded(durationFieldType0, (-2146973677));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, (-1016));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1016 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2951L, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        localTime0.plusMinutes((-2146973677));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        localTime0.plusHours((-2146973677));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalTime localTime0 = new LocalTime(3, 0, 0, 0, buddhistChronology0);
      Period period0 = Period.weeks(30);
      Period period1 = period0.minusMinutes(2146410442);
      // Undeclared exception!
      try { 
        localTime0.plus(period1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        localTime0.plus(years0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1389 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        LocalTime.parse("&gnH|HskZU>s`E6>", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(9223372036854775807L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalTime localTime0 = new LocalTime(0L, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        localTime0.minusMinutes(2147483617);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalTime localTime0 = new LocalTime(0L, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        localTime0.minusHours(2147474700);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Chronology) copticChronology0);
      Period period0 = Period.weeks(25734375);
      // Undeclared exception!
      try { 
        localTime0.minus(period0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      Period period0 = new Period(1, 2, 241, 2145065310);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Period period1 = period0.withField(durationFieldType0, (-2147483597));
      // Undeclared exception!
      try { 
        localTime0.minus(period1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1970 + 2147483597
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.getField(0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-4212L));
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 3);
      DateTime dateTime0 = new DateTime(86400000L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      LimitChronology limitChronology0 = LimitChronology.getInstance(julianChronology0, dateTime0, mutableDateTime0);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((Object) null, limitChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The instant is above the supported maximum of 2014-02-01T20:21:21.320Z (JulianChronology[UTC,mdfw=3])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-128848944638680L), (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, uTCDateTimeZone0);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(0, 0, 1000, 3268, zonedChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 1000 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-1486), (-1486), (-1486), 2432);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1486 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(2615625, 2615625, 2615625);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2615625 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(1000, 3776);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 1000 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-2892L));
      LocalTime localTime1 = localTime0.withPeriodAdded((ReadablePeriod) null, (-4859));
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      LocalTime localTime1 = localTime0.withSecondOfMinute(0);
      int int0 = localTime0.compareTo((ReadablePartial) localTime1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      LocalTime localTime1 = new LocalTime(0, 0);
      int int0 = localTime1.compareTo((ReadablePartial) localTime0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      LocalTime localTime1 = LocalTime.MIDNIGHT;
      int int0 = localTime0.compareTo((ReadablePartial) localTime1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      int int0 = localTime0.compareTo((ReadablePartial) localTime0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      boolean boolean0 = localTime0.MIDNIGHT.isSupported(durationFieldType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1, 1, 1);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      int int0 = localTime0.MIDNIGHT.get(dateTimeFieldType0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-1L));
      int int0 = localTime0.getValue((byte)3);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      int int0 = localTime0.getValue(2);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(9223372036854775807L, (Chronology) ethiopicChronology0);
      int int0 = localTime0.getValue(1);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalTime localTime0 = new LocalTime(0L, (Chronology) islamicChronology0);
      int int0 = localTime0.getValue(0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(strictChronology0, strictChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.StrictChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = LocalTime.parse("", dateTimeFormatter0);
      String string0 = localTime0.MIDNIGHT.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = LocalTime.parse("", dateTimeFormatter0);
      Chronology chronology0 = localTime0.getChronology();
      // Undeclared exception!
      try { 
        localTime0.getField((-64), chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -64
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      int int0 = localTime0.size();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(11);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) islamicChronology0);
      DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
      assertEquals(1, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalTime.parse("&s^2P=,f8:TgT", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"&s^2P=,f8:TgT\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy((-6));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalTime localTime0 = new LocalTime((-19L), (Chronology) islamicChronology0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.addNoWrapToCopy(0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalTime localTime0 = new LocalTime((-19L), (Chronology) islamicChronology0);
      Locale locale0 = Locale.FRENCH;
      String string0 = localTime0.toString((String) null, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1763L);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      try { 
        localTime0.toString("org/joda/time/tz/data", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Chronology) null);
      // Undeclared exception!
      try { 
        localTime0.toString("P-#cl");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
      try { 
        localTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Chronology) null);
      LocalTime localTime1 = localTime0.minusMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      LocalTime localTime1 = localTime0.minusMillis((-2146973677));
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime1 = localTime0.minusSeconds(0);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalTime localTime1 = localTime0.minusSeconds(4);
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalTime localTime1 = localTime0.minusMinutes(0);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-1L));
      LocalTime localTime1 = localTime0.minusMinutes((-889));
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      Integer integer0 = new Integer(0);
      LocalTime localTime1 = localTime0.MIDNIGHT.plusMillis((int) integer0);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalTime localTime1 = localTime0.plusSeconds(0);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(264L, (Chronology) gregorianChronology0);
      LocalTime localTime1 = localTime0.plusSeconds(878);
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.plusMinutes(0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime1 = localTime0.plusMinutes(1157);
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalTime localTime0 = new LocalTime((-19L), (Chronology) islamicChronology0);
      LocalTime localTime1 = localTime0.plusHours(0);
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      LocalTime localTime1 = localTime0.plusHours(1);
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      Seconds seconds0 = Seconds.ZERO;
      Hours hours0 = seconds0.toStandardHours();
      LocalTime localTime1 = localTime0.withPeriodAdded(hours0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded(durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyears' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 1000);
      LocalTime localTime2 = localTime1.minusMillis((-2146973677));
      boolean boolean0 = localTime1.equals(localTime2);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 1000);
      LocalTime localTime2 = localTime1.minusMillis((-2146973677));
      boolean boolean0 = localTime1.equals(localTime2);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 1000);
      LocalTime localTime2 = localTime1.minusMillis((-2146973677));
      boolean boolean0 = localTime1.equals(localTime2);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, 1000);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(37373648L);
      // Undeclared exception!
      try { 
        localTime0.withField((DateTimeFieldType) null, 623191162);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalTime localTime0 = new LocalTime((-549L), (DateTimeZone) uTCDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      LocalTime localTime1 = localTime0.withField(dateTimeFieldType0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(57602920L, (Chronology) iSOChronology0);
      LocalTime localTime1 = localTime0.withFields((ReadablePartial) null);
      assertEquals(1, localTime1.size());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalTime localTime0 = new LocalTime((-549L), (DateTimeZone) uTCDateTimeZone0);
      Duration duration0 = new Duration((-549L), (-549L));
      Duration duration1 = duration0.withMillis((-549L));
      Period period0 = duration1.toPeriod();
      LocalTime localTime1 = localTime0.minus(period0);
      int int0 = localTime1.compareTo((ReadablePartial) localTime0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockDate mockDate0 = new MockDate(86400L);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone0);
      // Undeclared exception!
      try { 
        localTime0.compareTo((ReadablePartial) localDate0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime1 = localTime0.minusHours(936);
      boolean boolean0 = localTime0.equals(localTime1);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime1 = localTime0.minusHours(936);
      boolean boolean0 = localTime0.equals(localTime1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      LocalTime localTime1 = LocalTime.MIDNIGHT;
      boolean boolean0 = localTime1.equals(localTime0);
      assertEquals(1, localTime1.size());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = new LocalTime(2920L, (Chronology) islamicChronology0);
      LocalTime localTime1 = LocalTime.MIDNIGHT;
      boolean boolean0 = localTime1.equals(localTime0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      boolean boolean0 = localTime0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      boolean boolean0 = localTime0.equals(localTime0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime1 = localTime0.MIDNIGHT.plusMillis(887);
      boolean boolean0 = localTime1.equals(localTime0);
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime1 = localTime0.MIDNIGHT.plusMillis(887);
      boolean boolean0 = localTime1.equals(localTime0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      boolean boolean0 = localTime0.isSupported((DurationFieldType) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      boolean boolean0 = localTime0.MIDNIGHT.isSupported((DateTimeFieldType) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Chronology) gJChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      // Undeclared exception!
      try { 
        localTime0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field 'monthOfYear' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = new LocalTime((-1221L), (DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        localTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalTime localTime0 = new LocalTime((-19L), (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        localTime0.getValue(2147483051);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 2147483051
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      localTime0.hashCode();
  }
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalTime localTime0 = new LocalTime((-549L), (DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime1 = localTime0.withMinuteOfHour(0);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-1L));
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded((DurationFieldType) null, 2147483637);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      int int0 = localTime0.MIDNIGHT.getHourOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      assertNotNull(localTime_Property0);
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      String string0 = localTime0.toString((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalTime localTime1 = localTime0.withMillisOfSecond(4);
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      int int0 = localTime0.getMillisOfSecond();
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = new Object();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(object0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      Seconds seconds0 = Seconds.MIN_VALUE;
      LocalTime localTime1 = localTime0.plus(seconds0);
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      int int0 = localTime0.getSecondOfMinute();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      int int0 = localTime0.getMinuteOfHour();
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      MonthDay monthDay0 = MonthDay.now((Chronology) strictChronology0);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      int int0 = localTime0.getMillisOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      LocalTime localTime1 = localTime0.minusHours(0);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(9223372036854775807L, (Chronology) ethiopicChronology0);
      LocalTime localTime1 = localTime0.withHourOfDay(1);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("\"rr");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"rr\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertEquals(1, localTime0.size());
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      LocalTime localTime1 = localTime_Property0.addWrapFieldToCopy(1000);
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1, 1, 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      LocalTime localTime1 = localTime_Property0.getLocalTime();
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.addCopy((-4628L));
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime(0L, (Chronology) islamicChronology0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.roundHalfCeilingCopy();
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime1 = localTime_Property0.roundHalfEvenCopy();
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime1 = localTime_Property0.roundCeilingCopy();
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.roundHalfFloorCopy();
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.addCopy((-2147483632));
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("]~K_");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"]~K_\" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.withMinimumValue();
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      Chronology chronology0 = localTime_Property0.getChronology();
      assertNotNull(chronology0);
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.withMaximumValue();
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.roundFloorCopy();
      ;
}
