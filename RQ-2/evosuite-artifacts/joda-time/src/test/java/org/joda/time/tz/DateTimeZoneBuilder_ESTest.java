/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 19:50:33 GMT 2022
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.DateTimeZone;
import org.joda.time.PeriodType;
import org.joda.time.tz.DateTimeZoneBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZoneBuilder_ESTest extends DateTimeZoneBuilder_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset((-1723254605));
      dateTimeZoneBuilder1.setFixedSavings("@w|\"wJF", (-1723254605));
      String string0 = "UTC";
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("UTC", (DataOutput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset((-1723254605));
      String string0 = "UTC";
      dateTimeZoneBuilder1.toDateTimeZone("UTC", true);
      dateTimeZoneBuilder1.setFixedSavings("UTC", (-1723254605));
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("UTC", (DataOutput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(12);
      String string0 = "%74|X!\"`2y";
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 12);
      PeriodType.yearMonthDay();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%74|X!\"`2y");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder2.addRecurringSavings("%74|X!\"`2y", 12, 12, 12, 's', 12, 12, 12, true, 12);
      dateTimeZoneBuilder0.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      double double0 = 2654.726558800114;
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 12);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: EOFException");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-82);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-77), 326565);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readMillis(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -77
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 0;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(0);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 0);
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder0.writeTo("%", (DataOutput) objectOutputStream0);
      objectOutputStream0.writeDouble(2654.726558800114);
      dateTimeZoneBuilder1.setFixedSavings("%", 0);
      dateTimeZoneBuilder2.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      char char0 = 'w';
      String string0 = "dp-Y^I%";
      objectOutputStream0.writeUTF("%74|X!\"`2y");
      boolean boolean0 = true;
      dateTimeZoneBuilder1.addCutover(3103, 'w', 12, 0, 3850, true, 445);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.toDateTimeZone("org.joda.time.tz.DateTimeZoneBuilder$Transition", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      dateTimeZoneBuilder0.writeTo("k&Wd'", (OutputStream) mockPrintStream0);
      char char0 = '6';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      byte byte1 = (byte) (-54);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)10;
      byte byte2 = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = "Invalid encoding";
      String string1 = "UTC";
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        dateTimeZoneBuilder0.writeTo("Invalid encoding", (DataOutput) dataOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(20);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 20);
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(20);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder0.writeTo("", (DataOutput) objectOutputStream0);
      objectOutputStream0.writeDouble(2654.726558800114);
      dateTimeZoneBuilder1.setFixedSavings("", 20);
      dateTimeZoneBuilder2.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      String string0 = "dp-Y^I%";
      int int0 = 3103;
      objectOutputStream0.writeUTF("%74|X!\"`2y");
      dateTimeZoneBuilder1.addCutover(3103, 'w', 3198, 20, 3850, true, 445);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.toDateTimeZone("org.joda.time.tz.DateTimeZoneBuilder$Transition", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 3198 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 0;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(0);
      String string0 = "%74|X!\"`2y";
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 0);
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder0.writeTo("", (DataOutput) objectOutputStream0);
      objectOutputStream0.writeDouble(2654.726558800114);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder1.setFixedSavings("", 0);
      dateTimeZoneBuilder2.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      char char0 = 'w';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean0 = true;
      dateTimeZoneBuilder0.addCutover(3198, 'w', 115, 57, 823, false, 3198);
      int int1 = 445;
      dateTimeZoneBuilder1.addCutover(3103, 'w', 3198, 0, 3850, true, 445);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder3.writeTo("dp-Y^I%", (OutputStream) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 115 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      dateTimeZoneBuilder0.setStandardOffset(1417);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        DateTimeZoneBuilder.writeMillis(dataOutputStream0, 1417);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 3250;
      char char0 = '3';
      dateTimeZoneBuilder0.addCutover(3250, '3', 3250, 3250, 3250, false, '3');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      MockFile mockFile0 = new MockFile("");
      MockFile.createTempFile(" to ", "", (File) mockFile0);
      mockFile0.setReadable(false, false);
      mockFile0.delete();
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo((String) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 0;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(0);
      String string0 = "%74|X!\"`2y";
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 0);
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder2.addRecurringSavings("%74|X!\"`2y", Integer.MAX_VALUE, 0, 2144969030, 's', 2144969030, 256, 0, true, 2144969030);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2144969030 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 0;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(0);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 0);
      PeriodType.yearMonthDay();
      String string0 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder0.writeTo("", (DataOutput) objectOutputStream0);
      objectOutputStream0.writeDouble(2654.726558800114);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder1.setFixedSavings("", 0);
      dateTimeZoneBuilder2.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      int int1 = (-899);
      int int2 = 2144969030;
      char char0 = 'w';
      dateTimeZoneBuilder1.addCutover(3103, 'w', 3198, 0, 3850, true, 445);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder3.writeTo("dp-Y^I%", (OutputStream) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 3198 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(15);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 15);
      PeriodType.yearMonthDay();
      String string0 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(15);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder0.writeTo("", (DataOutput) objectOutputStream0);
      objectOutputStream0.writeDouble(2654.726558800114);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder1.setFixedSavings("", 15);
      dateTimeZoneBuilder2.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      int int0 = (-899);
      dateTimeZoneBuilder3.writeTo("dp-Y^I%", (OutputStream) objectOutputStream0);
      int int1 = (-2143247979);
      DateTimeZoneBuilder dateTimeZoneBuilder4 = dateTimeZoneBuilder3.addRecurringSavings("", (-899), 15, 2144969030, 'w', (-2143247979), (-899), 8, false, 15);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder4.writeTo("dp-Y^I%", (OutputStream) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2143247979 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Illegal rounding mode: ");
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      objectOutputStream0.writeDouble(2654.726558800114);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, 2144969030);
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("", 0);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.addRecurringSavings("*dz==", 117, 8, 117, 'w', 960, 58, 960, false, 67);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.toDateTimeZone("Illegal rounding mode: ", false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 960 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset((-1337));
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.addCutover((-1337), 'w', (-1337), 47, (-1337), true, (-1));
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder2.setFixedSavings("sM?{cSp!V] >+(,", (-1337));
      DateTimeZoneBuilder dateTimeZoneBuilder4 = dateTimeZoneBuilder3.setStandardOffset((-1337));
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 0;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(0);
      String string0 = "%74|X!\"`2y";
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 0);
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder2.addRecurringSavings("%74|X!\"`2y", Integer.MAX_VALUE, 0, 2144969030, 'u', 2144969030, 256, 0, true, 2144969030);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2144969030 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(0);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 0);
      PeriodType.yearMonthDay();
      String string0 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder0.writeTo("", (DataOutput) objectOutputStream0);
      objectOutputStream0.writeDouble(2654.726558800114);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder1.setFixedSavings("", 0);
      dateTimeZoneBuilder2.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      int int0 = (-899);
      dateTimeZoneBuilder3.writeTo("dp-Y^I%", (OutputStream) objectOutputStream0);
      int int1 = (-2143247979);
      DateTimeZoneBuilder dateTimeZoneBuilder4 = dateTimeZoneBuilder3.addRecurringSavings("", (-899), 0, 2144969030, 'w', (-2143247979), (-899), 8, false, 0);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder4.writeTo("dp-Y^I%", (OutputStream) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2143247979 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(0);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 0);
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder0.writeTo("", (DataOutput) objectOutputStream0);
      objectOutputStream0.writeDouble(2654.726558800114);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder2.setStandardOffset(2853);
      dateTimeZoneBuilder2.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      dateTimeZoneBuilder3.addRecurringSavings("", (-899), 0, 2144969030, 'w', (-2143247979), (-899), 8, false, 0);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder1.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2143247979 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      String string0 = "[wg@@A";
      int int0 = 0;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("[wg@@A", 0);
      dateTimeZoneBuilder1.setStandardOffset(0);
      PeriodType.yearMonthDay();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\u0006laG", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, 30585600000L);
      int int1 = 119;
      char char0 = 'x';
      int int2 = 0;
      int int3 = 30;
      boolean boolean0 = true;
      int int4 = (-413);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        DateTimeZoneBuilder.readMillis(dataInputStream0);
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      dateTimeZoneBuilder0.addCutover(1130, '', (-374), 255, 1082, false, (-99));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-374), 2168);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) dataInputStream0, "?q[i Zz'fM");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -374
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings("[4", 258, 2, 80, 'w', 80, 2485, 0, false, (-35));
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("[wg@@A", 0);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setStandardOffset(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\u0006laG", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, 30585600000L);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.addRecurringSavings("[wg@@A", 0, 119, 119, 'x', 0, 30, 0, true, (-413));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: x
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = (-3019);
      dateTimeZoneBuilder0.setStandardOffset((-3019));
      String string0 = "F/~s |";
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      dataInputStream0.skip((-2341L));
      try { 
        DateTimeZoneBuilder.readFrom((DataInput) dataInputStream0, "F/~s |");
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings(",b*:5b", 0, 0, 0, 'u', 0, 7678125, 7678125, true, 7678125);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("Un0#Z&g^t~?xSTQ", 0);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.addRecurringSavings("Un0#Z&g^t~?xSTQ", 7678125, (-820), 0, 'E', 1782, 1810, 1810, true, 400);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: E
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) null, "org.joda.time.tz.DateTimeZoneBuilder");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 2485;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(2064, '_', 2485, 2064, 2485, false, 2064);
      String string0 = "";
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("", (-3662));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.writeTo((String) null, (DataOutput) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataInput dataInput0 = null;
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readFrom((DataInput) null, ";H");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("[wg@@A", 0);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setStandardOffset(0);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.addRecurringSavings("[wg@@A", 0, 119, 119, 'x', 0, 30, 0, true, (-413));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: x
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, 60000L);
      objectOutputStream0.writeLong((-1L));
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      PeriodType.yearMonthDay();
      dateTimeZoneBuilder0.writeTo("t91M", (OutputStream) objectOutputStream0);
      dateTimeZoneBuilder0.addCutover(0, 'B', 0, 0, 0, true, 0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        DateTimeZoneBuilder.readFrom((DataInput) dataInputStream0, "T5$q~ww\"~Xam6");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Invalid encoding
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 95;
      char char0 = 'g';
      int int1 = 0;
      dateTimeZoneBuilder0.addRecurringSavings("-r%}UKVarh0d", 0, 0, (-130), 'j', (-1771), 95, 1399, true, 1326);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("lJT1n\\wOpI3v*qvmk", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        DateTimeZoneBuilder.readFrom((DataInput) dataInputStream0, "DayOfMonth: ");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover((-3602), 'H', (-3602), 0, 0, false, 0);
      dateTimeZoneBuilder0.toDateTimeZone("#xK-=h9", false);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setStandardOffset(0);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.toDateTimeZone((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(1655, '~', 1655, 1655, 1655, false, 1655);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setStandardOffset(0);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder2.setFixedSavings("", 1655);
      DateTimeZoneBuilder dateTimeZoneBuilder4 = dateTimeZoneBuilder3.addRecurringSavings("String pool is too large", 0, 1655, 0, 'c', 0, 0, 0, false, 0);
      DateTimeZone dateTimeZone0 = dateTimeZoneBuilder4.toDateTimeZone("String pool is too large", false);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      MockFile mockFile0 = new MockFile("5gU");
      MockFile mockFile1 = new MockFile(mockFile0, "5gU");
      mockFile0.setExecutable(true);
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      dateTimeZoneBuilder0.writeTo("No printer or parser supplied", (OutputStream) mockFileOutputStream0);
      String string0 = null;
      MockFile mockFile2 = new MockFile("No printer or parser supplied", "No printer or parser supplied");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile2, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      String string0 = null;
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.addRecurringSavings((String) null, 4, 0, 1436, ')', 0, (-167), (-167), true, 4);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: )
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      String string0 = "]NVN&e\"UA";
      dateTimeZoneBuilder0.toDateTimeZone("6c:N.?T&<Y<k]-| 8", false);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("]NVN&e\"UA", (DataOutput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2332);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, (-3208L));
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(2332);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.addRecurringSavings("", 2737, 2332, 1871, '7', 2332, 0, 2737, true, 2737);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder2.setFixedSavings("", 2737);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder3.addRecurringSavings("TKM>H^a<kJ9y", 2737, 2332, 2332, '7', 1871, 1871, (-360), true, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: 7
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings((String) null, 67, 2553, 67, '-', 67, 61, 2553, true, (-1));
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.writeMillis((DataOutput) null, (-679L));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(0, 'R', (-1582), (-242), (-242), true, 0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readMillis((DataInput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      String string0 = "";
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-108);
      byteArray0[0] = (byte) (-108);
      int int0 = 1774;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-108), 1774);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1774);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      pushbackInputStream0.unread(byteArray0);
      bufferedInputStream0.available();
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readFrom((DataInput) dataInputStream0, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      dateTimeZoneBuilder0.setStandardOffset((-83));
      char char0 = '(';
      int int0 = (-10);
      boolean boolean0 = false;
      int int1 = 368;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        DateTimeZoneBuilder.readMillis(dataInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 106;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(106);
      int int1 = 2612;
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings((String) null, 2612);
      int int2 = 8;
      int int3 = (-1259);
      boolean boolean0 = true;
      int int4 = 0;
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.addCutover(8, 'C', 8, 8, (-1259), true, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: C
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("No parsers supplied", 644);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      String string0 = "cvSzl_5U:~%0r";
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) mockFileInputStream0, "cvSzl_5U:~%0r");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.writeMillis((DataOutput) null, 0L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      String string0 = null;
      int int0 = 65535;
      boolean boolean0 = false;
      int int1 = (-405);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.addRecurringSavings((String) null, 0, 0, 0, 'A', 0, 0, 65535, false, (-405));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: A
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      dateTimeZoneBuilder0.setStandardOffset((-550));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        dateTimeZoneBuilder0.writeTo("Standard", (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) byteArrayInputStream0, "");
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      String string0 = "B$\"~ywXv>  !5BmzB]k";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.addRecurringSavings("B$\"~ywXv>  !5BmzB]k", 126, 126, 126, 'O', 126, 968, 968, false, 968);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: O
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset((-3039));
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder1.addCutover(0, 'X', 0, 0, 117, false, (-3039));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: X
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings("d60", 1968, 1968, 8, ',', 1968, 8, 3250, false, 8);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.addCutover(3250, '#', 1968, 8, 1968, false, 1626);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.writeTo("b2['TT]j1", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(0);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 0);
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder0.writeTo("", (DataOutput) objectOutputStream0);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder2.setStandardOffset(2853);
      dateTimeZoneBuilder2.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset((-628));
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10125000);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, 12L);
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 12;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(12);
      String string0 = "%74|X!\"`2y";
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 12);
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder2.addRecurringSavings("%74|X!\"`2y", 2147483639, 12, 12, 's', 12, 256, 12, true, 12);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 256 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      dateTimeZoneBuilder0.setStandardOffset((-1723254605));
      String string0 = "UTC";
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("UTC", (DataOutput) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings(",b*:5b", 0, 0, 0, 'u', 0, 7678125, 7678125, true, 7678125);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("Un0#Z&g^t~?xSTQ", 0);
      dateTimeZoneBuilder2.setStandardOffset(1604);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.addRecurringSavings("Un0#Z&g^t~?xSTQ", 7678125, (-820), 0, 'E', 1782, 1810, 1810, true, 400);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: E
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 7678125;
      boolean boolean0 = true;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings(",b*:5b", 0, 0, 0, 'u', 0, 7678125, 7678125, true, 7678125);
      String string0 = "Un0#Z&g^t~?xSTQ";
      dateTimeZoneBuilder1.setFixedSavings("Un0#Z&g^t~?xSTQ", 0);
      int int1 = (-820);
      int int2 = 0;
      char char0 = 'E';
      int int3 = 1782;
      int int4 = 1810;
      MockFile mockFile0 = new MockFile(",b*:5b", ",b*:5b");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      dateTimeZoneBuilder0.addCutover(70, 'u', 491, 1782, 70, true, 491);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      objectOutputStream0.write((-2321));
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo(",b*:5b", (DataOutput) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(20);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 20);
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(20);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder0.writeTo("", (DataOutput) objectOutputStream0);
      objectOutputStream0.writeDouble(2654.726558800114);
      dateTimeZoneBuilder1.setFixedSavings("", 20);
      dateTimeZoneBuilder2.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      int int0 = (-899);
      String string0 = "dp-Y^I%";
      objectOutputStream0.writeUTF("%74|X!\"`2y");
      int int1 = 445;
      dateTimeZoneBuilder1.addCutover(3103, 'w', 3198, 20, 3850, true, 445);
      dateTimeZoneBuilder2.setStandardOffset(3103);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-219));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      dateTimeZoneBuilder0.addCutover(3250, '3', 3250, 3250, 3250, false, '3');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      MockFile mockFile0 = new MockFile("");
      MockFile.createTempFile("Eto ", "", (File) mockFile0);
      mockFile0.setReadable(false, false);
      mockFile0.delete();
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo((String) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("[wg@@A", 0);
      int int0 = 0;
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setStandardOffset(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\u0006laG", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, 30585600000L);
      dateTimeZoneBuilder1.writeTo("\u0006laG", (OutputStream) objectOutputStream0);
      char char0 = 'x';
      dateTimeZoneBuilder1.toDateTimeZone("[wg@@A", true);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, (-1447L));
      int int1 = (-413);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.addRecurringSavings("[wg@@A", 0, 0, 0, 'x', 0, 30, 0, true, (-413));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: x
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      dateTimeZoneBuilder0.addCutover(1130, 'u', (-374), 255, 1082, false, (-99));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-374), 2168);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) dataInputStream0, "?q[i Zz'fM");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -374
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      dateTimeZoneBuilder0.setFixedSavings("k&Wd'", 112);
      boolean boolean0 = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream(112);
      pipedOutputStream0.connect(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      dateTimeZoneBuilder0.writeTo("k&Wd'", (OutputStream) mockPrintStream0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)10;
      DateTimeZoneBuilder.readFrom((InputStream) pipedInputStream0, "\u0006laG");
      byteArray0[6] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) byteArrayInputStream0, "Invalid encoding");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Invalid encoding
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(0);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 0);
      String string0 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder0.writeTo("", (DataOutput) objectOutputStream0);
      objectOutputStream0.writeDouble(2654.726558800114);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder1.setFixedSavings("", 0);
      dateTimeZoneBuilder2.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      int int0 = (-899);
      dateTimeZoneBuilder3.writeTo("dp-Y^I%", (OutputStream) objectOutputStream0);
      int int1 = (-2143247990);
      DateTimeZoneBuilder dateTimeZoneBuilder4 = dateTimeZoneBuilder3.addRecurringSavings("", (-899), 0, 2144969030, 'w', (-2143247990), (-899), 8, false, 0);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder4.writeTo("dp-Y^I%", (OutputStream) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2143247990 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 28;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(28);
      String string0 = "%74|X!\"`2y";
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 28);
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(28);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder0.writeTo("%", (DataOutput) objectOutputStream0);
      dateTimeZoneBuilder1.setFixedSavings("%", 28);
      dateTimeZoneBuilder2.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      char char0 = 'w';
      objectOutputStream0.writeUTF("%74|X!\"`2y");
      boolean boolean0 = true;
      dateTimeZoneBuilder1.addCutover(3076, 'w', 12, 28, 3850, true, 445);
      dateTimeZoneBuilder0.toDateTimeZone("org.joda.time.tz.DateTimeZoneBuilder$Transition", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, (-899));
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      objectOutputStream0.writeChars("org.joda.time.chrono.GJMonthOfYearDateTimeField");
      try { 
        DateTimeZoneBuilder.readFrom((DataInput) dataInputStream0, "?q[i Zz'fM");
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 12;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(12);
      String string0 = "%74|X!\"`2y";
      dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 12);
      PeriodType.yearMonthDay();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder1.addCutover('s', 's', 12, 's', 's', true, 2144969029);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2144969029 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 12;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(12);
      String string0 = "%74|X!\"`2y";
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("%74|X!\"`2y", 12);
      PeriodType.yearMonthDay();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%74|X!\"`2y");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      boolean boolean0 = true;
      dateTimeZoneBuilder2.addRecurringSavings("%74|X!\"`2y", 12, 12, 12, 's', 12, 12, 12, true, 12);
      dateTimeZoneBuilder0.writeTo("%74|X!\"`2y", (DataOutput) objectOutputStream0);
      int int1 = 2853;
      double double0 = 2654.726558800114;
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(enumeration0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(3250, '3', 3250, 3250, 3250, false, '3');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      dateTimeZoneBuilder1.writeTo("", (OutputStream) byteArrayOutputStream0);
      MockFile mockFile0 = new MockFile("");
      MockFile.createTempFile(" to ", "", (File) mockFile0);
      mockFile0.delete();
      dateTimeZoneBuilder1.toDateTimeZone(" using ", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, '3');
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder1.addCutover(0, 'y', 3250, 128, 0, false, 3250);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: y
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
}
