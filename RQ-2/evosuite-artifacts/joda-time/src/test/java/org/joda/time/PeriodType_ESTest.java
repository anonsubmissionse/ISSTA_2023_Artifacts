/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 19:49:57 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodType_ESTest extends PeriodType_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = PeriodType.standard();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      boolean boolean0 = periodType1.isSupported(durationFieldType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertNotNull(periodType1.getName());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      PeriodType periodType2 = periodType1.withSecondsRemoved();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      PeriodType periodType2 = periodType1.withSecondsRemoved();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Months months0 = Months.ONE;
      PeriodType periodType0 = months0.getPeriodType();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertNotNull(periodType1.getName());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertNotNull(periodType1.getName());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      PeriodType periodType2 = periodType1.withWeeksRemoved();
      PeriodType periodType3 = periodType2.withMinutesRemoved();
      assertEquals(0, periodType3.size());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      PeriodType periodType2 = periodType1.withWeeksRemoved();
      PeriodType periodType3 = periodType2.withMinutesRemoved();
      assertNotNull(periodType3.getName());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertNotNull(periodType1.getName());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      int int0 = periodType1.size();
      assertNotNull(periodType1.getName());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      int int0 = periodType1.size();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      periodType0.size();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = Period.millis(0);
      int[] intArray0 = new int[5];
      periodType0.setIndexedField(period0, 0, intArray0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Months months0 = Months.FOUR;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Months months0 = Months.FOUR;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Months months0 = Months.FOUR;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(0, periodType0.size());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      String string0 = periodType0.getName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = Period.seconds(3);
      int int0 = periodType0.getIndexedField(period0, 3);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Years years0 = Years.years((-1));
      PeriodType periodType0 = years0.getPeriodType();
      int int0 = periodType0.getIndexedField(years0, 0);
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Years years0 = Years.years((-1));
      PeriodType periodType0 = years0.getPeriodType();
      int int0 = periodType0.getIndexedField(years0, 0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      periodType0.getFieldType(0);
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("h$8", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withYearsRemoved();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("H87g/lz~IhpO?d<", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withYearsRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[9];
      intArray0[0] = (-1428);
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withYearsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("9^Q)DnX}^d2.w[8U", durationFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("NoMillis", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("org.joda.time.field.PreciseDurationDateTimeField", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMonthsRemoved();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("The offset cannot be zero", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMonthsRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMonthsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMinutesRemoved();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("NoWeeks", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMinutesRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("DateTimeZone.setDefault", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMinutesRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        periodType0.withMillisRemoved();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("YY", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMillisRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("G(o{", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("NoHours", durationFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        periodType0.withDaysRemoved();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("Time", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withDaysRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("ALo+wG6'", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withDaysRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MonthDay monthDay0 = MonthDay.now();
      Days days0 = Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(days0, 0, (int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Days days0 = Days.ONE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(period0, 286, (int[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 286
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("Field is not supported", (DurationFieldType[]) null, intArray0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      // Undeclared exception!
      try { 
        periodType0.indexOf(durationFieldType0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("VkY57.0\"p *`I~HY", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.hashCode();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      // Undeclared exception!
      try { 
        periodType0.getIndexedField((ReadablePeriod) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      Minutes minutes0 = Minutes.MAX_VALUE;
      int[] intArray0 = new int[9];
      intArray0[7] = (-1177);
      PeriodType periodType0 = new PeriodType("li8M+P", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.getIndexedField(minutes0, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // -1177
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      LocalTime localTime0 = new LocalTime(4585L);
      Months months0 = Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      // Undeclared exception!
      try { 
        periodType0.getIndexedField(months0, 3731);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3731
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.getFieldType((-2316));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-243L), periodType0);
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(mutablePeriod0, 6, (int[]) null, 6);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Days days0 = Days.FOUR;
      PeriodType periodType0 = days0.getPeriodType();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(days0, (-107), intArray0, (-2001));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -107
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      periodType0.hashCode();
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      PeriodType periodType1 = PeriodType.weeks();
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      PeriodType periodType1 = PeriodType.weeks();
      periodType1.equals(periodType0);
      assertNotNull(periodType1.getName());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      PeriodType periodType1 = PeriodType.weeks();
      periodType1.equals(periodType0);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      boolean boolean0 = periodType0.equals(periodType0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      boolean boolean0 = periodType0.equals(periodType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      Minutes minutes0 = Minutes.MAX_VALUE;
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("li8M+P", durationFieldTypeArray0, intArray0);
      int int0 = periodType0.getIndexedField(minutes0, 7);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = periodType0.indexOf(durationFieldType0);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = periodType0.indexOf(durationFieldType0);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PeriodType.millis();
      PeriodType periodType0 = PeriodType.millis();
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PeriodType.millis();
      PeriodType periodType0 = PeriodType.millis();
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PeriodType.seconds();
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PeriodType.seconds();
      PeriodType periodType0 = PeriodType.seconds();
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PeriodType.minutes();
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PeriodType.minutes();
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Days days0 = Days.THREE;
      Hours hours0 = days0.toStandardHours();
      hours0.getPeriodType();
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PeriodType.days();
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PeriodType.days();
      PeriodType periodType0 = PeriodType.days();
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PeriodType.weeks();
      PeriodType periodType0 = PeriodType.weeks();
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PeriodType.weeks();
      PeriodType periodType0 = PeriodType.weeks();
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Months months0 = Months.ONE;
      months0.getPeriodType();
      PeriodType periodType0 = PeriodType.months();
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PeriodType.years();
      PeriodType periodType0 = PeriodType.years();
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      PeriodType.time();
      PeriodType periodType0 = PeriodType.time();
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      PeriodType.time();
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      PeriodType.dayTime();
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      PeriodType.dayTime();
      PeriodType periodType0 = PeriodType.dayTime();
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      PeriodType.yearDay();
      PeriodType periodType0 = PeriodType.yearDay();
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      PeriodType.yearDay();
      PeriodType periodType0 = PeriodType.yearDay();
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      PeriodType.yearDay();
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      PeriodType.yearDayTime();
      PeriodType periodType0 = PeriodType.yearDayTime();
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      PeriodType.yearDayTime();
      PeriodType periodType0 = PeriodType.yearDayTime();
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      PeriodType.yearDayTime();
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      PeriodType.yearWeekDay();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      PeriodType.yearWeekDay();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      PeriodType.yearWeekDayTime();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(0, periodType0.size());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      PeriodType.yearWeekDayTime();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodType.yearMonthDay();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodType.yearMonthDay();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodType.yearMonthDay();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodType.yearMonthDayTime();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodType.yearMonthDayTime();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodType.yearMonthDayTime();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodType.standard();
      PeriodType periodType0 = PeriodType.standard();
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodType.standard();
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodType.standard();
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("d{Va?", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withSecondsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      // Undeclared exception!
      try { 
        periodType0.getFieldType(1061);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1061
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("l*&xHc:=SI7Ta:S@^A", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        periodType0.size();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      String string0 = periodType0.getName();
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      String string0 = periodType0.getName();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertNotNull(periodType1.getName());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Integer integer0 = new Integer((-1068));
      boolean boolean0 = periodType0.equals(integer0);
      assertEquals(0, periodType0.size());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Integer integer0 = new Integer((-1068));
      boolean boolean0 = periodType0.equals(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Integer integer0 = new Integer((-1068));
      boolean boolean0 = periodType0.equals(integer0);
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertNotNull(periodType1.getName());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertNotNull(periodType1.getName());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(mutablePeriod0, 6, intArray0, 6);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-286L));
      int[] intArray0 = new int[8];
      boolean boolean0 = periodType0.addIndexedField(mutablePeriod0, 4, intArray0, 8);
      ;
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-286L));
      int[] intArray0 = new int[8];
      boolean boolean0 = periodType0.addIndexedField(mutablePeriod0, 4, intArray0, 8);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Hours hours0 = Hours.TWO;
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(hours0, 0, intArray0, (-1540));
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertNotNull(periodType0.getName());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.HOURS_TYPE;
      durationFieldTypeArray0[1] = durationFieldType1;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [centuries, hours]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      durationFieldTypeArray0[0] = durationFieldType0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [days]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.months();
      durationFieldTypeArray0[3] = durationFieldType1;
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [minutes, minutes, minutes, minutes]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      durationFieldTypeArray0[0] = durationFieldType0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(1251L, 0);
      DurationFieldType durationFieldType1 = mutablePeriod0.getFieldType(0);
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals(0, periodType0.size());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeriodType.forFields((DurationFieldType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Duration duration0 = Duration.standardSeconds(1251L);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      Days days0 = period0.toStandardDays();
      int[] intArray0 = new int[11];
      boolean boolean0 = periodType0.addIndexedField(days0, 5, intArray0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Duration duration0 = Duration.standardSeconds(1251L);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      Days days0 = period0.toStandardDays();
      int[] intArray0 = new int[11];
      boolean boolean0 = periodType0.addIndexedField(days0, 5, intArray0, 0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertNotNull(periodType1.getName());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      String string0 = periodType0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      String string0 = periodType0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldType0;
      durationFieldTypeArray0[6] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [millis, millis, millis, millis, millis, millis]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
}
