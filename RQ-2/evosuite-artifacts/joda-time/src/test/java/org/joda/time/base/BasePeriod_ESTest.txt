 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 2574, 0, 0);
      mutablePeriod0.add((ReadablePeriod) mutablePeriod0);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Period period0 = Period.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
      try { 
        period0.withFieldAdded(durationFieldType0, (-373));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'halfdays'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setWeeks(3267);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period((-1848), 0, 0, (-1848), (-1848), (-1848), 1090, 8, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, 661, (-563), 661, 0);
      mutablePeriod0.setValue(0, (-1));
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(30962844000000L);
      Duration duration0 = mutablePeriod0.toDurationTo((ReadableInstant) null);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTime dateTime0 = new DateTime(282L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      assertEquals(1, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      Period period0 = Period.hours(1);
      Duration duration0 = period0.toDurationTo(dateTime0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutablePeriod mutablePeriod0 = new MutablePeriod(mutableDateTime0, mutableDateTime0);
      Duration duration0 = mutablePeriod0.toDurationFrom(mutableDateTime0);
      assertEquals(1, duration0.getStandardMinutes());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);
      DateTime dateTime0 = new DateTime(1L, dateTimeZone0);
      Duration duration0 = Duration.standardDays(1L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.multipliedBy((-2164));
      Duration duration1 = period1.toDurationFrom(dateTime0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = Period.hours(0);
      int int0 = period0.getValue(0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType periodType0 = period0.getPeriodType();
      assertEquals(0, periodType0.size());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.millis(86399999);
      DateTime dateTime0 = DateTime.now();
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      int int0 = period0.getValue(5);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-2163));
      PeriodType periodType0 = weeks0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2163), (-2163), periodType0);
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
      try { 
        mutablePeriod0.add((ReadablePeriod) months0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2660L, (Chronology) gJChronology0);
      mutablePeriod0.add((ReadablePeriod) null);
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(63071999967L, (Chronology) ethiopicChronology0);
      Days days0 = Days.SEVEN;
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      mutablePeriod0.mergePeriod(days0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.hours(8);
      PeriodType periodType0 = hours0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      mutablePeriod0.addMillis(0);
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Period period0 = Period.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
      try { 
        period0.withFieldAdded(durationFieldType0, 280);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'halfdays'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(2204L);
      Duration duration0 = Duration.standardHours(2204L);
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, duration0, periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.set((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.setMonths((-4860));
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Period period0 = Period.millis(77);
      PeriodType periodType0 = PeriodType.hours();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(period0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'millis'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(gJChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      Partial partial1 = partial0.with(dateTimeFieldType0, 1);
      Period period0 = new Period(partial1, partial1);
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Partial partial0 = new Partial(gJChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Partial partial1 = partial0.with(dateTimeFieldType0, 1);
      Partial partial2 = partial1.without(dateTimeFieldType0);
      Period period0 = null;
      try {
        period0 = new Period(partial2, partial1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      PeriodType periodType0 = PeriodType.days();
      Period period0 = null;
      try {
        period0 = new Period(localDateTime0, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      // Undeclared exception!
      try { 
        mutablePeriod0.setHours((-2600));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("hxw", periodFormatter0);
      mutablePeriod0.setPeriod((-17), (-17), (-17), (-17), (-17), (-17), 8, (-17));
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(63071999967L, (Chronology) ethiopicChronology0);
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      mutablePeriod0.addWeeks(1);
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(63071999967L, (Chronology) ethiopicChronology0);
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = period0.toDurationFrom(dateTime0);
      assertEquals(1, duration0.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2421L);
      mutablePeriod0.mergePeriod((ReadablePeriod) null);
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(2204L);
      Duration duration0 = Duration.standardHours(2204L);
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, duration0, periodType0);
      mutablePeriod0.setMillis(0);
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Period period0 = Period.weeks((-1561));
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0, (PeriodType) null);
      mutablePeriod0.add((ReadablePeriod) period0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Period period0 = Period.weeks((-1561));
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0, (PeriodType) null);
      mutablePeriod0.add((ReadablePeriod) period0);
      assertEquals(0, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 4, 1, 4, 0, 3);
      // Undeclared exception!
      try { 
        mutablePeriod0.add((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Instant instant0 = new Instant();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, instant0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setValue(298, 298);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 298
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-794L));
      Days days0 = Days.TWO;
      Duration duration0 = days0.toStandardDuration();
      Period period0 = new Period(instant0, duration0, (PeriodType) null);
      // Undeclared exception!
      try { 
        period0.getValue(2625);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
