 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("@/VhrYMxJU$h{Z8jn.x");
      Locale locale0 = Locale.ENGLISH;
      long long0 = basicSingleEraDateTimeField0.set(0L, "@/VhrYMxJU$h{Z8jn.x", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField(")rhL)9x?");
      long long0 = basicSingleEraDateTimeField0.set(0L, 1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField((String) null);
      long long0 = basicSingleEraDateTimeField0.set((long) 1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("k");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      int int0 = basicSingleEraDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField((String) null);
      Locale locale0 = Locale.GERMAN;
      String string0 = basicSingleEraDateTimeField0.getAsText(7678125, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("UD.J~u/gOB^$;Z");
      Locale locale0 = Locale.GERMAN;
      String string0 = basicSingleEraDateTimeField0.getAsText(0, locale0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField((String) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set((-9223372036854775808L), "^>d/s4", locale0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set(986L, 103);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 103 for era must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField((String) null);
      Locale locale0 = new Locale("{1GCJ5Gjg(");
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.getMaximumTextLength(locale0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicSingleEraDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      Locale locale0 = Locale.GERMANY;
      String string0 = basicSingleEraDateTimeField0.getAsText((-1308), locale0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      long long0 = basicSingleEraDateTimeField0.roundFloor(1L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      int int0 = basicSingleEraDateTimeField0.get((-9223372036854775808L));
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      Locale locale0 = Locale.ITALIAN;
      int int0 = basicSingleEraDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("9vJ");
      int int0 = basicSingleEraDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("vn+>)M6`$zZ");
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set((long) 1, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
         verifyException("org.joda.time.chrono.BasicSingleEraDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("h;L]\"1Bli%u!$Hz");
      Locale locale0 = Locale.JAPAN;
      long long0 = basicSingleEraDateTimeField0.set(4502L, "1", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("}]!Bw|P;a%YoMk");
      Locale locale0 = Locale.TAIWAN;
      long long0 = basicSingleEraDateTimeField0.set((-3197L), "}]!Bw|P;a%YoMk", locale0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("9vJ");
      long long0 = basicSingleEraDateTimeField0.set((-9223372036854775808L), 1);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("h;L]\"1Bli%u!$Hz");
      long long0 = basicSingleEraDateTimeField0.roundHalfCeiling(1470L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("h;L]\"1Bli%u!$Hz");
      int int0 = basicSingleEraDateTimeField0.getMinimumValue();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField((String) null);
      long long0 = basicSingleEraDateTimeField0.roundHalfEven(0L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("h;L]\"1Bli%u!$Hz");
      DurationField durationField0 = basicSingleEraDateTimeField0.getRangeDurationField();
      assertNotNull(durationField0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("9vJ");
      long long0 = basicSingleEraDateTimeField0.roundCeiling((-9223372036854775808L));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("9vJ");
      long long0 = basicSingleEraDateTimeField0.roundHalfFloor(9223372036854775807L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("h;L]\"1Bli%u!$Hz");
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      assertNotNull(durationField0.getName());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("h;L]\"1Bli%u!$Hz");
      boolean boolean0 = basicSingleEraDateTimeField0.isLenient();
      assertTrue(boolean0);
}
