/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:18:09 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadablePeriod;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class YearMonth_ESTest extends YearMonth_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockDate mockDate0 = new MockDate(978, (-663), (-1), 978, 1);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth yearMonth1 = yearMonth0.minusYears(5407);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockDate mockDate0 = new MockDate(978, (-663), (-1), 978, 1);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth yearMonth1 = yearMonth0.minusYears(5407);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth(1L, (Chronology) gJChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        yearMonth_Property0.setCopy((String) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value null for year is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) copticChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      yearMonth_Property0.getField();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) copticChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.get();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1680L);
      YearMonth yearMonth1 = yearMonth0.withYear(0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.year();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      YearMonth.Property yearMonth_Property0 = yearMonth1.year();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1900, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth yearMonth1 = yearMonth0.withYear(1900);
      assertEquals(0, yearMonth1.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1900, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth yearMonth1 = yearMonth0.withYear(1900);
      assertEquals(0, yearMonth1.getYear());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1900, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth yearMonth1 = yearMonth0.withYear(1900);
      assertEquals(1, yearMonth0.getYear());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(289, 289, 289, 289, 289);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      int[] intArray0 = new int[9];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      yearMonth1.withPeriodAdded((ReadablePeriod) null, 70);
      assertEquals(1, yearMonth0.getYear());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(289, 289, 289, 289, 289);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      int[] intArray0 = new int[9];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      yearMonth1.withPeriodAdded((ReadablePeriod) null, 70);
      assertEquals(1, yearMonth0.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      YearMonth yearMonth2 = yearMonth1.withMonthOfYear(1);
      assertEquals(1, yearMonth2.getYear());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      YearMonth yearMonth2 = yearMonth1.withMonthOfYear(1);
      assertEquals(1, yearMonth2.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      YearMonth yearMonth2 = yearMonth1.withFieldAdded(durationFieldType0, 0);
      assertEquals(1, yearMonth2.getYear());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      YearMonth yearMonth2 = yearMonth1.withFieldAdded(durationFieldType0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth yearMonth1 = yearMonth0.withField(dateTimeFieldType0, 0);
      assertEquals(0, yearMonth1.getYear());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth yearMonth1 = yearMonth0.withField(dateTimeFieldType0, (-3001));
      assertEquals(0, yearMonth1.getYear());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear(0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      YearMonth yearMonth2 = yearMonth1.withChronologyRetainFields(copticChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear(0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      YearMonth yearMonth2 = yearMonth1.withChronologyRetainFields(copticChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      YearMonth yearMonth2 = yearMonth1.withChronologyRetainFields(lenientChronology0);
      assertEquals(0, yearMonth1.getYear());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      YearMonth yearMonth2 = yearMonth1.withChronologyRetainFields(lenientChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth yearMonth1 = yearMonth0.withYear(0);
      YearMonth.Property yearMonth_Property0 = yearMonth1.property(dateTimeFieldType0);
      assertEquals(0, yearMonth_Property0.get());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      YearMonth.Property yearMonth_Property0 = yearMonth0.property(dateTimeFieldType0);
      assertEquals(0, yearMonth_Property0.get());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      YearMonth.Property yearMonth_Property0 = yearMonth1.property(dateTimeFieldType0);
      assertEquals(0, yearMonth_Property0.get());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      Days days0 = Days.FIVE;
      YearMonth yearMonth2 = yearMonth1.plus(days0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      Days days0 = Days.FIVE;
      YearMonth yearMonth2 = yearMonth1.plus(days0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.parse("2014");
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(calendar0);
      int[] intArray0 = new int[4];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      yearMonth1.monthOfYear();
      assertEquals(1, yearMonth0.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(calendar0);
      int[] intArray0 = new int[4];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      yearMonth1.monthOfYear();
      assertEquals(1, yearMonth0.getYear());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      assertEquals(0, yearMonth_Property0.get());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      YearMonth yearMonth1 = yearMonth_Property0.setCopy(0);
      Months months0 = Months.NINE;
      YearMonth yearMonth2 = yearMonth1.minus(months0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      YearMonth yearMonth1 = yearMonth_Property0.setCopy(0);
      Months months0 = Months.NINE;
      YearMonth yearMonth2 = yearMonth1.minus(months0);
      assertEquals(0, yearMonth1.getYear());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      Days days0 = Days.FIVE;
      YearMonth yearMonth2 = yearMonth1.minus(days0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      Days days0 = Days.FIVE;
      YearMonth yearMonth2 = yearMonth1.minus(days0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      int int0 = yearMonth1.getYear();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(696, (-15), (-15), 0, (-1215), 581);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[15];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      yearMonth1.getMonthOfYear();
      assertEquals(0, yearMonth0.getYear());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(696, (-15), (-15), 0, (-1215), 581);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[15];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      yearMonth1.getMonthOfYear();
      assertEquals(0, yearMonth0.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 4345);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      yearMonth0.getFieldType(1);
      assertEquals(0, yearMonth0.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 4345);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      yearMonth0.getFieldType(1);
      assertEquals(0, yearMonth0.getYear());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 2);
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 2);
      DateTimeField dateTimeField0 = yearMonth0.getField(0, (Chronology) ethiopicChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.withYear(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(696, (-15), (-15), 0, (-1215), 581);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[0];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        yearMonth1.withYear(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      YearMonth yearMonth0 = YearMonth.now((Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.withMonthOfYear(1900);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 1900 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      // Undeclared exception!
      try { 
        yearMonth0.withFieldAdded(durationFieldType0, (-1867));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field 'days' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      YearMonth yearMonth0 = new YearMonth((-1927L), (Chronology) strictChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.withField((DateTimeFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field 'null' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      YearMonth yearMonth1 = yearMonth0.withYear((-756));
      // Undeclared exception!
      try { 
        yearMonth1.withChronologyRetainFields(islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -756 for year must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(97, 97, 0, (-4395), 726, 97);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        yearMonth0.toLocalDate(97);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 97 for dayOfMonth must be in the range [1,31]: year: 2004 month: 8
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(696, (-15), (-15), 0, (-1215), 581);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[0];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        yearMonth1.toLocalDate((-1215));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1659L);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (int[]) null);
      // Undeclared exception!
      try { 
        yearMonth1.toInterval((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) ethiopicChronology0);
      TimeZone timeZone0 = TimeZone.getTimeZone("1962-04");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Interval interval0 = yearMonth0.toInterval(dateTimeZone0);
      assertEquals(0, interval0.getEndMillis());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-131L));
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      int[] intArray0 = new int[3];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        yearMonth1.toInterval();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(696, (-15), (-15), 0, (-1215), 581);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[1];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        yearMonth1.toInterval();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        YearMonth.parse("org.joda.time.YearMonth$Property", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        YearMonth.parse("gdL$[6I8IQ", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"gdL$[6I8IQ\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      LimitChronology limitChronology0 = LimitChronology.getInstance(ethiopicChronology0, (ReadableDateTime) null, dateTime0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(limitChronology0);
      // Undeclared exception!
      try { 
        YearMonth.now((Chronology) lenientChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The instant is above the supported maximum of 2006-06-07T20:21:21.320Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      YearMonth yearMonth0 = new YearMonth(2095L, (Chronology) lenientChronology0);
      int[] intArray0 = new int[0];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        yearMonth1.getYear();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(696, (-15), (-15), 0, (-1215), 581);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[0];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        yearMonth1.getMonthOfYear();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
      try { 
        yearMonth0.getField(0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[7];
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((YearMonth) null, intArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((YearMonth) null, (Chronology) strictChronology0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = new Object();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(object0, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(object0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(0, 0, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((-23), 391);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 391 for monthOfYear must not be larger than 12
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) copticChronology0);
      try { 
        yearMonth0.toString("<K{HOwGnI?\",<y", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((-355L), (Chronology) gJChronology0);
      Period period0 = new Period((-3680L), (-3680L));
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded(period0, (-3558));
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      YearMonth yearMonth1 = yearMonth0.withFieldAdded(durationFieldType0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1680L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      YearMonth yearMonth1 = yearMonth0.withFieldAdded(durationFieldType0, 3046);
      assertEquals(1, yearMonth1.getYear());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1, 1);
      assertEquals(0, yearMonth0.size());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-131L));
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (Chronology) julianChronology0);
      assertEquals(0, yearMonth1.getYear());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-131L));
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (Chronology) julianChronology0);
      assertEquals(0, yearMonth1.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockDate mockDate0 = new MockDate(289, 289, 289, 289, 289);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      int[] intArray0 = new int[9];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      yearMonth1.plus((ReadablePeriod) null);
      assertEquals(1, yearMonth0.getYear());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockDate mockDate0 = new MockDate(289, 289, 289, 289, 289);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      int[] intArray0 = new int[9];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      yearMonth1.plus((ReadablePeriod) null);
      assertEquals(1, yearMonth0.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1689, 1689, (-1695));
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth yearMonth1 = yearMonth0.plusMonths((-1695));
      assertEquals(0, yearMonth1.getYear());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1689, 1689, (-1695));
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth yearMonth1 = yearMonth0.plusMonths((-1695));
      assertEquals(0, yearMonth1.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      YearMonth yearMonth0 = new YearMonth((Chronology) strictChronology0);
      assertEquals(1, yearMonth0.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      YearMonth yearMonth0 = new YearMonth((Chronology) strictChronology0);
      yearMonth0.toLocalDate(1);
      assertEquals(1, yearMonth0.getYear());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(696, (-15), (-15), 0, (-1215), 581);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      int int0 = yearMonth0.getMonthOfYear();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(696, (-15), (-15), 0, (-1215), 581);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      int int0 = yearMonth0.getMonthOfYear();
      assertEquals(0, yearMonth0.getYear());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      int int0 = yearMonth0.getYear();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-1356), 1, buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      // Undeclared exception!
      try { 
        yearMonth0.toInterval(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((-355L), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        yearMonth0.getFieldType((-1934));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = yearMonth0.toString((String) null, locale0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        yearMonth0.toString("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((-1000L), (Chronology) islamicChronology0);
      Years years0 = Years.THREE;
      YearMonth yearMonth1 = yearMonth0.plus(years0);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      Days days0 = Days.FIVE;
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded(days0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(163);
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.minusYears(163);
      assertEquals(0, yearMonth1.getYear());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth yearMonth1 = yearMonth0.withField(dateTimeFieldType0, 1970);
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      // Undeclared exception!
      try { 
        yearMonth0.withField(dateTimeFieldType0, 85);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 85 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(gJChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(calendar0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      // Undeclared exception!
      try { 
        yearMonth0.getField((-803), (Chronology) iSOChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -803
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      String string0 = yearMonth0.toString((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      // Undeclared exception!
      try { 
        yearMonth0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field 'halfdayOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(696, (-15), (-15), 0, (-1215), 581);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      yearMonth0.getFieldTypes();
      assertEquals(0, yearMonth0.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(696, (-15), (-15), 0, (-1215), 581);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      yearMonth0.getFieldTypes();
      assertEquals(0, yearMonth0.getYear());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1684L);
      String string0 = yearMonth0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((Object) null, ethiopicChronology0);
      YearMonth yearMonth1 = yearMonth0.withYear((-2229));
      YearMonth yearMonth2 = yearMonth1.withPeriodAdded((ReadablePeriod) null, 1);
      assertEquals(0, yearMonth2.getYear());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth yearMonth1 = yearMonth0.minusYears(2014);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.parse("r}8K6pQWC_^.&");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"r}8K6pQWC_^.&\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Period period0 = Period.ZERO;
      YearMonth yearMonth1 = yearMonth0.minus(period0);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = yearMonth0.plusYears(2);
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      YearMonth yearMonth0 = YearMonth.parse("", dateTimeFormatter0);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-131L));
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth yearMonth1 = yearMonth0.withMonthOfYear(1);
      assertEquals(1, yearMonth0.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-131L));
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth yearMonth1 = yearMonth0.withMonthOfYear(1);
      assertEquals(0, yearMonth1.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-131L));
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth yearMonth1 = yearMonth0.withMonthOfYear(1);
      assertEquals(0, yearMonth1.getYear());
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      YearMonth yearMonth0 = YearMonth.now((DateTimeZone) uTCDateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(0);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      YearMonth yearMonth0 = new YearMonth((Chronology) lenientChronology0);
      Interval interval0 = yearMonth0.toInterval();
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      YearMonth yearMonth0 = new YearMonth((Chronology) lenientChronology0);
      Interval interval0 = yearMonth0.toInterval();
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      YearMonth yearMonth0 = new YearMonth((Chronology) lenientChronology0);
      YearMonth.Property yearMonth_Property0 = new YearMonth.Property(yearMonth0, 1);
      yearMonth_Property0.getReadablePartial();
      assertEquals(1, yearMonth_Property0.get());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = new YearMonth.Property(yearMonth0, 1);
      assertEquals(0, yearMonth0.size());
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = new YearMonth.Property(yearMonth0, 1);
      YearMonth yearMonth1 = yearMonth_Property0.addWrapFieldToCopy(0);
      assertEquals(1, yearMonth_Property0.get());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = new YearMonth.Property(yearMonth0, 1);
      YearMonth yearMonth1 = yearMonth_Property0.addWrapFieldToCopy(0);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      YearMonth yearMonth1 = yearMonth_Property0.addToCopy(0);
      assertEquals(1, yearMonth1.size());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      YearMonth yearMonth1 = yearMonth_Property0.addToCopy(0);
      assertEquals(0, yearMonth1.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      YearMonth yearMonth1 = yearMonth_Property0.addToCopy(0);
      assertEquals(1, yearMonth_Property0.get());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      YearMonth yearMonth1 = yearMonth_Property0.getYearMonth();
      assertEquals(0, yearMonth_Property0.get());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      YearMonth yearMonth1 = yearMonth_Property0.getYearMonth();
      assertEquals(1, yearMonth1.getMonthOfYear());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      YearMonth yearMonth1 = yearMonth_Property0.getYearMonth();
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      // Undeclared exception!
      try { 
        yearMonth_Property0.setCopy("2014-02");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"2014-02\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }
}
