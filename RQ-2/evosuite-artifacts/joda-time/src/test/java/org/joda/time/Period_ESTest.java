/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:04:58 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Period period0 = Period.months((-292269054));
      Period period1 = period0.normalizedStandard();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Period period0 = Period.millis(67);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, (-356));
      Period period2 = period1.normalizedStandard((PeriodType) null);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Period period0 = Period.years(2);
      Period period1 = period0.negated();
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Period period0 = Period.weeks(1000);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Period period0 = new Period(60000L);
      Period period1 = period0.plusDays(2);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(0, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Period period0 = Period.weeks(1000);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Period period0 = Period.hours((-2470));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Period period0 = Period.hours((-2470));
      Period period1 = period0.normalizedStandard();
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Period period0 = Period.seconds((-140));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.plusMillis((-4369));
      Period period2 = period1.normalizedStandard();
      // Undeclared exception!
      try { 
        period2.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -51539607552
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.THREE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusHours((-3654));
      Period period2 = period1.normalizedStandard();
      Days days1 = period2.toStandardDays();
      assertEquals(0, days1.getDays());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Period period0 = new Period(6, 6, (-868), 1248);
      Days days0 = period0.toStandardDays();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = new Duration(604800000L, 123L);
      Period period0 = duration0.toPeriod();
      Days days0 = Days.FOUR;
      Period period1 = period0.plus(days0);
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(1, weeks0.getWeeks());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.millis(31622400000L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.plusMonths((-2418));
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Period period0 = Period.ZERO;
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 1);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Period period0 = Period.ZERO;
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 1);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Period period0 = Period.hours((-2297));
      Weeks weeks0 = period0.toStandardWeeks();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Period period0 = Period.minutes(15271875);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Period period0 = Period.days(4);
      Minutes minutes0 = period0.toStandardMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Period period0 = Period.hours((-2297));
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withMinutes(12825000);
      Duration duration0 = period1.toStandardDuration();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Period period0 = Period.hours((-2470));
      Duration duration0 = period0.toStandardDuration();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Period period0 = Period.seconds(837);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      Duration duration0 = hours0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(3, 3, 3, 3, 3, ethiopicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      Period period0 = duration0.toPeriod((Chronology) gJChronology0);
      Period period1 = period0.negated();
      Duration duration1 = period1.toStandardDuration();
      assertEquals(0, duration1.getMillis());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1807));
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Period period0 = Period.hours((-2470));
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Period period0 = Period.parse("P4D");
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Period period0 = Period.years(58);
      int int0 = period0.getYears();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Period period0 = Period.years(58);
      Period period1 = period0.negated();
      int int0 = period1.getYears();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Period period0 = Period.weeks(1000);
      Period period1 = period0.minusYears(1000);
      PeriodType.WEEK_INDEX = 0;
      int int0 = period1.getWeeks();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Period period0 = Period.seconds(1000);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1218L));
      Period period0 = mutablePeriod0.toPeriod();
      int int0 = period0.getSeconds();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Period period0 = Period.months(1626);
      int int0 = period0.getMonths();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Period period0 = Period.months((-1000));
      int int0 = period0.getMonths();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Period period0 = Period.millis(0);
      int int0 = period0.getMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Period period0 = new Period(6, 6, (-868), 1248);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Period period0 = Period.days((-2830));
      int int0 = period0.getMillis();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Period period0 = new Period(10L, (Chronology) copticChronology0);
      int int0 = period0.getMillis();
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Days days0 = Days.THREE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusHours((-3654));
      int int0 = period1.getHours();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Period period0 = Period.days((-396));
      Period period1 = period0.minusHours(1);
      int int0 = period1.getHours();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Period period0 = Period.minutes(1969);
      Period period1 = period0.normalizedStandard();
      int int0 = period1.getDays();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Period period0 = Period.months((-2297));
      Period period1 = period0.minusDays(400);
      int int0 = period1.getDays();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-1108L));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(0L, (Chronology) copticChronology0);
      Months months0 = Months.NINE;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears(0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(0L, periodType0);
      PeriodType.YEAR_INDEX = 2641;
      // Undeclared exception!
      try { 
        period0.withYears((-2218));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2641
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.withWeeks(422);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Period period0 = Period.minutes(2041);
      PeriodType.WEEK_INDEX = (-2456);
      // Undeclared exception!
      try { 
        period0.withWeeks(1579);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2456
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType periodType0 = PeriodType.years();
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withSeconds(1268);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Period period0 = Period.years(58);
      PeriodType.SECOND_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.ZERO.withSeconds((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Period period0 = Period.years((-1963));
      PeriodType periodType0 = PeriodType.time();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(2236L);
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      Seconds seconds0 = Seconds.secondsIn(interval0);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period((-1242L), 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths(1000);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      PeriodType periodType2 = periodType1.withWeeksRemoved();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType2);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.withMinutes(6);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(0L, periodType0);
      PeriodType.MINUTE_INDEX = 965;
      // Undeclared exception!
      try { 
        period0.withMinutes(965);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 965
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(966);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Period period0 = Period.weeks((-1649));
      PeriodType.MILLI_INDEX = (-2627);
      // Undeclared exception!
      try { 
        period0.withMillis((-1881));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2627
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1088));
      Minutes minutes0 = Minutes.standardMinutesIn(seconds0);
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = new Period(355L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.withHours((-1088));
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Duration duration0 = new Duration(15308640144L, 789L);
      Period period0 = duration0.toPeriod();
      PeriodType.HOUR_INDEX = 2586;
      // Undeclared exception!
      try { 
        period0.ZERO.withHours(1421);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2586
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      Period period0 = new Period(365L, 60000L, periodType0, strictChronology0);
      Hours hours0 = Hours.FIVE;
      // Undeclared exception!
      try { 
        period0.withFields(hours0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Years years0 = Years.ONE;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Period period0 = Period.days(59);
      PeriodType.YEAR_INDEX = 59;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Period period0 = Period.months(25650000);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Period period0 = Period.weeks((-25650000));
      PeriodType.MILLI_INDEX = 2183;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Period period0 = Period.days(86400000);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 7464960000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Period period0 = Period.weeks((-292269054));
      PeriodType.HOUR_INDEX = 1154;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Period period0 = Period.months(11);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 10000;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Period period0 = new Period(1895L, 26607895200000L);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.SECOND_INDEX = 1000;
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Period period0 = Period.months(8);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Period period0 = Period.days(1359);
      PeriodType.MINUTE_INDEX = 1359;
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        period0.plusYears(1000);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Period period0 = Period.millis(6);
      PeriodType.YEAR_INDEX = 1388;
      // Undeclared exception!
      try { 
        period0.plusYears(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1388
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      PeriodType periodType0 = PeriodType.yearDayTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(1221);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Period period0 = Period.millis(2296);
      PeriodType.WEEK_INDEX = 2074;
      // Undeclared exception!
      try { 
        period0.plusWeeks(1194);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2074
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(100000000L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-959));
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Period period0 = Period.days(663);
      PeriodType.SECOND_INDEX = (-86399999);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-86399999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -86399999
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Period period0 = Period.minutes(1010);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMonths(1010);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Period period0 = new Period(60000L);
      PeriodType.MONTH_INDEX = (-1897);
      // Undeclared exception!
      try { 
        period0.plusMonths(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1897
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = new Period(2807L, periodType0, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(690562340);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1403L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      int[] intArray0 = new int[7];
      intArray0[5] = (-231);
      PeriodType periodType0 = new PeriodType("ReadablePartial objects must have the same set of fields", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(3217);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -231
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Period period0 = Period.months((-2297));
      PeriodType.MILLI_INDEX = (-2297);
      // Undeclared exception!
      try { 
        period0.plusMillis(1963);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2297
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = new Period(2807L, periodType0, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        period0.plusHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(100000000L, periodType0);
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.plusHours(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays(2215);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Period period0 = Period.millis((-97));
      PeriodType.DAY_INDEX = 965;
      // Undeclared exception!
      try { 
        period0.plusDays((-2553));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 965
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gJChronology0);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period(mutableDateTime0, (ReadableInstant) null, periodType0);
      Seconds seconds0 = Seconds.ONE;
      // Undeclared exception!
      try { 
        period0.plus(seconds0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = new Period(709L, (Chronology) iSOChronology0);
      PeriodType.MILLI_INDEX = (-3300);
      // Undeclared exception!
      try { 
        period0.ZERO.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3300
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Period period0 = Period.years(1610612736);
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1610612736 + 1610612736
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse(";h[8$K", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("G=I>EO0J/d0oXSuXY2x", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse("ReadablePartial objects must not be null", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"ReadablePartial objects must not...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Period period0 = Period.minutes(2);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Period period0 = Period.days(907);
      PeriodType.HOUR_INDEX = (-2058);
      PeriodType periodType0 = PeriodType.dayTime();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Period period0 = Period.years(6);
      Period period1 = period0.minusWeeks(878);
      Period period2 = period1.withMinutes(878);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period2.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -530961720000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Period period0 = Period.years(58);
      PeriodType.SECOND_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMillis(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.negated();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Period period0 = Period.seconds((-1171));
      // Undeclared exception!
      try { 
        period0.multipliedBy((-292269054));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -1171 * -292269054
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Period period0 = Period.millis(0);
      PeriodType.YEAR_INDEX = 90;
      // Undeclared exception!
      try { 
        period0.minusYears(981);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 90
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period((-1890L), (-609L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(292271022);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = Period.seconds((-3353));
      PeriodType.WEEK_INDEX = (-3353);
      // Undeclared exception!
      try { 
        period0.minusWeeks(336);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3353
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.ZERO.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusSeconds(6);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = Period.years(58);
      PeriodType.SECOND_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.ZERO.minusSeconds((-673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths((-3117));
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = Period.minutes(3120);
      PeriodType.MONTH_INDEX = (-1605);
      // Undeclared exception!
      try { 
        period0.ZERO.minusMonths((-686));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1605
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1071).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Instant instant0 = Instant.parse("", dateTimeFormatter0);
      Duration duration0 = new Duration((-726L), 3600000L);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = instant0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      Period period0 = new Period(dateTime0, duration0, periodType1);
      // Undeclared exception!
      try { 
        period0.minusMinutes(173);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period((-23L), periodType0);
      PeriodType.MINUTE_INDEX = 966;
      // Undeclared exception!
      try { 
        period0.minusMinutes((-2009));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 966
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = new Period(2807L, periodType0, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        period0.minusMillis(690562340);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = Period.weeks((-1649));
      PeriodType.MILLI_INDEX = (-2627);
      // Undeclared exception!
      try { 
        period0.ZERO.minusMillis(1348);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2627
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(0L, 0L, periodType0, gregorianChronology0);
      // Undeclared exception!
      try { 
        period0.minusHours(4966);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(100000000L, periodType0);
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.minusHours(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Instant instant0 = new Instant(0L);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(duration0, instant0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(1);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.millis(8);
      PeriodType.DAY_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.minusDays(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = new Period(67, 67, 67, 67);
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-648L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      Weeks weeks0 = Weeks.THREE;
      // Undeclared exception!
      try { 
        period0.minus(weeks0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(604800000L, 113L, periodType0);
      PeriodType.SECOND_INDEX = 2009;
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = Period.years((-1649));
      PeriodType.MINUTE_INDEX = (-1649);
      // Undeclared exception!
      try { 
        period0.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = Period.weeks(1177);
      PeriodType.MILLI_INDEX = 1177;
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Days days0 = Days.FOUR;
      Period period0 = days0.toPeriod();
      PeriodType.HOUR_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(100000000L, periodType0);
      PeriodType.DAY_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.ZERO.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.Partial", e);
      }
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      PeriodType periodType0 = new PeriodType("org/joda/time/tz/data", (DurationFieldType[]) null, (int[]) null);
      Period period0 = null;
      try {
        period0 = new Period(localDate0, localDate0, periodType0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      Hours hours0 = Hours.THREE;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-353));
      Period period0 = null;
      try {
        period0 = new Period((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period(10000000000000000L, periodType0, (Chronology) ethiopicChronology0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2777777777
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period(636L, 10000000000000000L, periodType0, gJChronology0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 9999999999999364
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = null;
      try {
        period0 = new Period(3L, 1000000000000000000L, periodType0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 11574074074
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period(1000000000000000000L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 277777777777
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.months(0);
      Weeks weeks0 = period0.toStandardWeeks();
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = null;
      try {
        period1 = new Period(0, 0, (-1470), (-849), 0, 4492, 4492, 4492, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Duration duration0 = new Duration(604800000L, 123L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.multipliedBy((-1862));
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(1, weeks0.getWeeks());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = Period.minutes(15271875);
      Period period1 = period0.plusMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1428).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      Date date0 = dateTime0.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      Period period0 = new Period(localDateTime0, localDateTime0);
      Period period1 = period0.plusMillis(1993);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Days days0 = Days.THREE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.ZERO.plusSeconds((-1689));
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours(2855);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = Period.months(8);
      Period period1 = period0.plusHours(0);
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.seconds((-3353));
      Period period1 = period0.ZERO.plusDays(0);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1428).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      Date date0 = dateTime0.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      Period period0 = new Period(localDateTime0, localDateTime0);
      Period period1 = period0.plusWeeks((-271));
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = new Period(709L, (Chronology) iSOChronology0);
      Months months0 = Months.FIVE;
      Period period1 = period0.withFields(months0);
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Days days0 = Days.FOUR;
      Period period0 = days0.toPeriod();
      int int0 = period0.getHours();
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = new Period((Object) null, periodType0, copticChronology0);
      PeriodType.DAY_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.withDays(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Minutes minutes0 = hours0.toStandardMinutes();
      Period period0 = new Period(minutes0);
  }
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Days days0 = Days.THREE;
      Period period0 = days0.toPeriod();
      int int0 = period0.getWeeks();
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Duration duration0 = new Duration((-2770L));
      Period period0 = new Period(duration0, (ReadableInstant) null);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getYears();
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = new Instant();
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = new Period(duration0, instant0, periodType0);
      int int0 = period0.getSeconds();
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getDays();
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = Period.minutes((-1897));
      int int0 = period0.getMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Duration duration0 = Duration.standardHours(12L);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(12L);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, gJChronology0);
  }
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Duration duration0 = new Duration(15308640144L, 789L);
      Period period0 = duration0.toPeriod();
      int int0 = period0.getMillis();
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(instant0, duration0);
  }
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Period period0 = new Period((-412), 332, 332, 609, (-919), 70, 332, (-2215), (PeriodType) null);
  }
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = Period.millis(6);
      Period period1 = period0.plusYears(6);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P6YT0.006S
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = Period.years(2);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((-1390), (-1390), periodType0);
      Period period1 = period0.minus((ReadablePeriod) null);
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = Period.years(2);
      Period period1 = period0.minus(period0);
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = Period.years(2);
      Period period1 = period0.minus(period0);
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.plusSeconds(0);
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period((Object) null, periodType0);
      Period period1 = period0.plusMinutes(0);
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period((Object) null, periodType0);
      Period period1 = period0.plusDays(25650000);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 36936000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.plusMonths(0);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.plusYears(0);
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.seconds((-3353));
      Period period1 = period0.plus((ReadablePeriod) null);
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.months((-2297));
      Months months0 = Months.MAX_VALUE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = Period.minutes((-3919));
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 755);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(4L);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 4);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.seconds((-3353));
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      Period period1 = period0.withField(durationFieldType0, (-3353));
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period((-23L), periodType0);
      Period period1 = period0.withPeriodType(periodType0);
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDate localDate0 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      Integer integer0 = new Integer(0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) integer0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.years((-1649));
      Period period1 = period0.withYears(8);
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.years((-1649));
      Period period1 = period0.minusSeconds(1000);
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.months((-292269054));
      Period period1 = period0.minusWeeks((-292269054));
      int int0 = period1.getWeeks();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period((Object) null, periodType0);
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(1312L, 1312L, (PeriodType) null, islamicChronology0);
      Period period1 = period0.multipliedBy(1);
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = Period.ZERO;
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(30672000000L);
      Seconds seconds0 = Seconds.ONE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(duration0, (ReadableInstant) null, periodType0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 30672000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Period period0 = new Period(10536L, (Chronology) islamicChronology0);
      PeriodType.MONTH_INDEX = (-1622);
      // Undeclared exception!
      try { 
        period0.withMonths(5265);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1622
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period((Object) null, periodType0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      java.time.LocalDate localDate0 = MockLocalDate.ofEpochDay(86400000L);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      Period period0 = null;
      try {
        period0 = new Period(localDate0, periodType0, strictChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.time.LocalDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = Period.minutes(2041);
      Period period1 = period0.withMonths(0);
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(2309L);
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(1082);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(4L);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0);
      Period period1 = period0.withFields((ReadablePeriod) null);
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = Period.months((-2297));
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.millis(2296);
      Period period1 = period0.minusMinutes(5);
      ;
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.minutes(2041);
      Hours hours0 = period0.toStandardHours();
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = new Period(2134776644, 2134776644, 2134776644, 2134776644, 2134776644, 2134776644, (-67), 292271022);
      // Undeclared exception!
      try { 
        period0.plusMinutes(292271022);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2134776644 + 292271022
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusWeeks(0);
      ;
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = Period.years((-1649));
      Period period1 = period0.toPeriod();
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.weeks((-1649));
      Period period1 = period0.ZERO.withMillis((-1649));
      PeriodType.MILLI_INDEX = (-2627);
      // Undeclared exception!
      try { 
        period1.minus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2627
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = new Period(1043L, 1043L, (Chronology) null);
  }
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(355L, 355L, periodType0);
      Period period1 = period0.minusMonths((-959));
      Period period2 = period1.normalizedStandard(periodType0);
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(355L, 355L, periodType0);
      Period period1 = period0.minusMonths((-959));
      Period period2 = period1.normalizedStandard(periodType0);
      ;
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("org.joda.time.DateTimeUtils$SystemMillisProvider", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-1021), (-1021), (-2033), 1162, (-1100), 22, (-1021), 1162, periodType0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears((-2009));
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.chrono.ZonedChrono...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(15356250).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("Days", periodFormatter0);
      ;
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = Period.minutes(2041);
      Period period1 = period0.withSeconds(6);
      ;
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1428).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      Date date0 = dateTime0.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      Period period0 = new Period(localDateTime0, localDateTime0);
      Period period1 = period0.withWeeks(1428);
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1428).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      Date date0 = dateTime0.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      Period period0 = new Period(localDateTime0, localDateTime0);
      Period period1 = period0.withHours(37);
      ;
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1428).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      Date date0 = dateTime0.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      Period period0 = new Period(localDateTime0, localDateTime0);
      Period period1 = period0.withDays(37);
      ;
}
}
