 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime dateTime1 = dateTime0.minusMillis((-2554));
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusSeconds((-1542));
      assertEquals(1, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.minusMinutes((-1282));
      assertEquals(1, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusMonths((-1542));
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.plusMillis((-1));
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.plusSeconds((-1544));
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.plusMinutes(1251);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.plusHours(1);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      DateTime dateTime1 = dateTime0.plusDays(1604);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfDay();
      DateTime dateTime1 = dateTime_Property0.withMinimumValue();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.secondOfMinute();
      DateTime dateTime1 = dateTime_Property0.setCopy("8");
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2636));
      DateTime dateTime0 = new DateTime(558L, dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfDay();
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy("org/joda/time/tz/data", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for minuteOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTime dateTime0 = new DateTime(7L, (DateTimeZone) null);
      DateTime.Property dateTime_Property0 = dateTime0.millisOfSecond();
      DateTime dateTime1 = dateTime_Property0.setCopy(0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      long long0 = dateTime_Property0.getMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      DateTimeField dateTimeField0 = dateTime_Property0.getField();
      assertNotNull(dateTimeField0.getName());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
      DateTime.Property dateTime_Property0 = new DateTime.Property(dateTime0, (DateTimeField) null);
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(5);
      DateTime dateTime2 = dateTime1.withZoneRetainFields(dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime1 = dateTime0.withZone(uTCDateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1677L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-17));
      DateTime dateTime2 = dateTime1.plusDays((-1042));
      DateTime dateTime3 = dateTime2.withZone(dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1677L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-17));
      DateTime dateTime2 = dateTime1.plusDays((-1042));
      DateTime dateTime3 = dateTime2.withZone(dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1L);
      DateTime dateTime2 = dateTime1.withYearOfCentury(17);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withYear(2275);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withWeekyear(3084);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      LocalDate localDate0 = new LocalDate((-71020805015L), (Chronology) strictChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withWeekOfWeekyear(1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = new Instant();
      Instant instant1 = instant0.withMillis(1656L);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = instant1.toDateTime((Chronology) gregorianChronology0);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1220L));
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      MockDate mockDate0 = new MockDate(0, 1, 2145, (-310), 1);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      DateTime dateTime1 = dateTime0.withTime(localTime0);
      assertEquals(1, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1677L);
      DateTime dateTime2 = dateTime1.minusMonths(1);
      DateTime dateTime3 = dateTime2.withTime(0, 0, 0, 0);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1677L);
      DateTime dateTime2 = dateTime1.minusMonths(1);
      DateTime dateTime3 = dateTime2.withTime(0, 0, 0, 0);
      assertEquals(0, dateTime3.getMillis());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.withSecondOfMinute(0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(1);
      DateTime dateTime0 = localDateTime1.toDateTime((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withSecondOfMinute(1);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType0);
      DateTime dateTime1 = dateTime0.withPeriodAdded(mutablePeriod0, 1480);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-3798L), (DateTimeZone) null);
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.withPeriodAdded((ReadablePeriod) null, 0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(1);
      DateTime dateTime0 = localDateTime1.toDateTime((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withMonthOfYear(1);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(365).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("org.joda.time.LocalDate$Property", dateTimeFormatter0);
      DateTime dateTime1 = dateTime0.withMinuteOfHour(0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      DateTime dateTime1 = dateTime0.withMinuteOfHour(1);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.withMillisOfSecond(1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1677L);
      DateTime dateTime2 = dateTime1.withMillisOfDay(0);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.withMillis((-1731));
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);
      DateTime dateTime1 = dateTime0.withLaterOffsetAtOverlap();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((long) 0, dateTimeZone0);
      DateTime dateTime2 = dateTime1.withDate(localDate0);
      DateTime dateTime3 = dateTime2.withHourOfDay(0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((long) 0, dateTimeZone0);
      DateTime dateTime2 = dateTime1.withDate(localDate0);
      DateTime dateTime3 = dateTime2.withHourOfDay(0);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((long) 0, dateTimeZone0);
      DateTime dateTime2 = dateTime1.withDate(localDate0);
      DateTime dateTime3 = dateTime2.withHourOfDay(0);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      LocalDate localDate0 = new LocalDate((-71020805015L), (Chronology) strictChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withHourOfDay(1);
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(5);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(5);
      DateTime dateTime2 = dateTime1.withZoneRetainFields(dateTimeZone0);
      Months months0 = Months.TWO;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      DateTime dateTime3 = dateTime2.withFieldAdded(durationFieldType0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTime dateTime0 = new DateTime(7L, (DateTimeZone) null);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      DateTime dateTime1 = dateTime0.withFieldAdded(durationFieldType0, (-4543));
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1677L);
      DateTime dateTime2 = dateTime1.withTime(0, 0, 0, 0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTime dateTime3 = dateTime2.withField(dateTimeFieldType0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1677L);
      DateTime dateTime2 = dateTime1.withTime(0, 0, 0, 0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTime dateTime3 = dateTime2.withField(dateTimeFieldType0, 0);
      assertEquals(0, dateTime3.getMillis());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1L);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTime dateTime1 = dateTime0.withField(dateTimeFieldType0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withEra(1);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) gregorianChronology0);
      DateTime dateTime1 = dateTime0.withEra(1);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-604800000L));
      DateTime dateTime1 = dateTime0.withEra(0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = dateTimeFormatter0.parseLocalDateTime("");
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withEarlierOffsetAtOverlap();
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((Object) null, iSOChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withEarlierOffsetAtOverlap();
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(365).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("org.joda.time.LocalDate$Property", dateTimeFormatter0);
      Period period0 = new Period(1977L);
      PeriodType periodType0 = PeriodType.hours();
      Period period1 = period0.normalizedStandard(periodType0);
      Duration duration0 = period1.toStandardDuration();
      DateTime dateTime1 = dateTime0.withDurationAdded((ReadableDuration) duration0, (-1));
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      Duration duration0 = new Duration(mutableDateTime0, dateTime0);
      DateTime dateTime1 = dateTime0.withDurationAdded((ReadableDuration) duration0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1L);
      DateTime dateTime2 = dateTime1.withDurationAdded(1L, (-1));
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withDayOfYear(2);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      DateTime dateTime1 = dateTime_Property0.addToCopy(1);
      DateTime dateTime2 = dateTime1.withDayOfWeek(1);
      assertEquals(0, dateTime2.getMillis());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2499L));
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.withDayOfWeek(1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.withDayOfMonth(1);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      LocalDate localDate0 = new LocalDate((-71020805015L), (Chronology) strictChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withDayOfMonth(1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withWeekyear((-1318));
      DateTime dateTime1 = dateTime0.withDate(localDate1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withDate(25650000, (int) (byte)1, (int) (byte)1);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      DateTime dateTime1 = dateTime0.withDate(1, 1, 1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withChronology(islamicChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      DateTime dateTime1 = dateTime0.withCenturyOfEra(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime2 = dateTime1.withChronology(copticChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      DateTime dateTime1 = dateTime0.withCenturyOfEra(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime2 = dateTime1.withChronology(copticChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = new LocalDate((long) 0, (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime2 = dateTime1.withDate(localDate0);
      DateTime dateTime3 = dateTime2.toDateTimeISO();
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = new LocalDate((long) 0, (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime2 = dateTime1.withDate(localDate0);
      DateTime dateTime3 = dateTime2.toDateTimeISO();
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = new LocalDate((long) 0, (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime2 = dateTime1.withDate(localDate0);
      DateTime dateTime3 = dateTime2.toDateTimeISO();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1677L);
      DateTime dateTime2 = dateTime1.minusMonths(1);
      DateTime dateTime3 = dateTime2.toDateTimeISO();
      assertEquals(0, dateTime3.getMillis());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1677L);
      DateTime dateTime2 = dateTime1.minusMonths(1);
      DateTime dateTime3 = dateTime2.toDateTimeISO();
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.plusMonths((-1318));
      DateTime dateTime2 = dateTime1.plusMinutes((-1318));
      DateTime dateTime3 = dateTime2.toDateTime((DateTimeZone) null);
      assertEquals(0, dateTime3.getMillis());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.plusMonths((-1318));
      DateTime dateTime2 = dateTime1.plusMinutes((-1318));
      DateTime dateTime3 = dateTime2.toDateTime((DateTimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      DateTime dateTime1 = dateTime0.minus(414L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime2 = dateTime1.toDateTime((Chronology) ethiopicChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      DateTime dateTime1 = dateTime0.minus(414L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime2 = dateTime1.toDateTime((Chronology) ethiopicChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      DateTime dateTime1 = dateTime0.toDateTime();
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      DateTime dateTime1 = dateTime0.toDateTime();
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.plusWeeks(1);
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      DateTime dateTime1 = dateTime_Property0.roundFloorCopy();
      DateTime dateTime2 = dateTime1.plusSeconds(57);
      assertEquals(0, dateTime2.getMillis());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      DateTime dateTime1 = dateTime0.plusMinutes(0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime dateTime1 = dateTime0.minusHours((-329));
      DateTime dateTime2 = dateTime1.plusHours((-329));
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) null);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      MutableInterval mutableInterval0 = new MutableInterval();
      Weeks weeks0 = Weeks.weeksIn(mutableInterval0);
      Duration duration0 = weeks0.toStandardDuration();
      DateTime dateTime1 = dateTime0.plus((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      DateTime dateTime1 = dateTime0.plus(0L);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      Chronology chronology0 = islamicChronology0.withZone(dateTimeZone0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter1);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      System.setCurrentTimeMillis((-492L));
      DateTime dateTime0 = DateTime.now();
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      LocalDate localDate0 = new LocalDate((-71020805015L), (Chronology) strictChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.minusYears(1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDate localDate0 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      LocalDate localDate1 = localDate0.minusYears(2505);
      DateTime dateTime0 = localDate1.toDateTimeAtCurrentTime();
      DateTime dateTime1 = dateTime0.minusWeeks(1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) null);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Years years0 = Years.TWO;
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) years0);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTime0, gJChronology0);
      Duration duration0 = new Duration(mutableDateTime0, dateTime0);
      DateTime dateTime1 = dateTime0.withMillis(0);
      DateTime dateTime2 = dateTime1.minus((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      LocalDate localDate0 = new LocalDate((-71020805015L), (Chronology) strictChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.minus((ReadableDuration) null);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2636));
      DateTime dateTime0 = new DateTime(558L, dateTimeZone0);
      DateTime dateTime1 = dateTime0.minus(558L);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.minus((long) 1);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTime0.withYearOfEra((-1542));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1542 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        dateTime1.withYear(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        dateTime1.withWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTime0.withWeekOfWeekyear(901);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 901 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTime0.withTime((-24), (-1731), (-1731), (-24));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -24 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        dateTime1.withTime(0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Specified date does not exist
         //
         verifyException("org.joda.time.chrono.GJChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      Duration duration0 = Duration.millis(1);
      Period period0 = new Period(dateTime0, duration0);
      Period period1 = period0.minusMonths((-2911));
      // Undeclared exception!
      try { 
        dateTime0.withPeriodAdded(period1, (-2911));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Months months0 = Months.NINE;
      // Undeclared exception!
      try { 
        dateTime0.withPeriodAdded(months0, (-2145999553));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -19313995977
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
      try { 
        dateTime0.withPeriodAdded(hours0, (-3922));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -8422430863534 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTime0.withMonthOfYear((-1240));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1240 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTime0.withMinuteOfHour(1446);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 1446 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTime0.withMillisOfSecond(1709);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 1709 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      DateTime dateTime0 = localTime0.toDateTimeToday();
      // Undeclared exception!
      try { 
        dateTime0.withHourOfDay((-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      // Undeclared exception!
      try { 
        dateTime0.withFieldAdded(durationFieldType0, (-24));
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        dateTime0.withField(dateTimeFieldType0, (-17));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -17 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      Weeks weeks0 = Weeks.TWO;
      Duration duration0 = weeks0.toStandardDuration();
      Duration duration1 = duration0.withDurationAdded((-68731027205015L), 1723);
      // Undeclared exception!
      try { 
        dateTime0.withDurationAdded((ReadableDuration) duration1, (-1318));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -118423558664640845 * -1318
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
      try { 
        dateTime0.withDurationAdded((-72527443200000L), (-292269337));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -72527443200000 * -292269337
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
      try { 
        dateTime0.withDayOfYear((-1318));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1318 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTime0.withDate((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime(1392409279628L, dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.plusYears((-2137766526));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2137764512 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        dateTime0.plusYears(2147483621);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483621
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        DateTime.parse("u`0z", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateTime.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserInternalParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateTime.parse("org.joda.time.LocalDate$Property", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.LocalDate$Property\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime((-198979200000L), dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.minusYears((-2147382925));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2147384888 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Instant instant0 = new Instant();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = instant0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.minusYears((-2147482256));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147482256
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        dateTime0.minusWeeks(10125000);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Object) null, copticChronology0);
      // Undeclared exception!
      try { 
        dateTime0.minusHours(86399999);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      LocalDate localDate0 = new LocalDate((-71020805015L), (Chronology) strictChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      DateTime.Property dateTime_Property0 = dateTime0.weekyear();
      DateTime dateTime1 = dateTime_Property0.withMaximumValue();
      // Undeclared exception!
      try { 
        dateTime1.minusDays((-1042));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223371995775681320 + 90028800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        dateTime0.minus((ReadablePeriod) years0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481633 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(ethiopicChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.EthiopicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(buddhistChronology0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((Object) lenientChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.LenientChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(348, (-2489), (-75), (-2489), 0, (-822), (-292269054), islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2489 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      Duration duration0 = Duration.standardDays(1);
      Period period0 = duration0.toPeriod((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.withPeriodAdded(period0, 1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Interval interval0 = new Interval((-329), 1L);
      DateTime dateTime0 = interval0.getStart();
      DateTime dateTime1 = dateTime0.withDurationAdded((ReadableDuration) null, 2079);
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1220L));
      Duration duration0 = Duration.standardSeconds((-1220L));
      DateTime dateTime1 = dateTime0.withDurationAdded((ReadableDuration) duration0, 187);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-604800000L));
      DateTime dateTime1 = dateTime0.withDurationAdded(0L, (-377));
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withDurationAdded(1L, (-1));
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.withChronology((Chronology) null);
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1L);
      DateTime dateTime2 = dateTime1.withMillis(1L);
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1L);
      DateTime dateTime2 = dateTime1.withMillis(1L);
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMillis(1677L);
      DateTime dateTime2 = dateTime1.minusHours(83);
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime dateTime1 = dateTime0.withEarlierOffsetAtOverlap();
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      DateTime dateTime0 = new DateTime(600, 445, (-1), 600, 1454, 1454, lenientChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTime dateTime0 = new DateTime(4, 4, 1, 0, 2, (DateTimeZone) null);
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 3, 4, 2, 4, 0, 3, (DateTimeZone) null);
      assertEquals(1, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      LocalDate localDate0 = dateTime0.toLocalDate();
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime1 = dateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTime dateTime0 = new DateTime(8, 8, 8, 8, 22, 22, (DateTimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(0L, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        dateTime0.withCenturyOfEra(236548278);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 236548278 for centuryOfEra must be in the range [1,2922728]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      DateTime dateTime0 = new DateTime((-475), (-500), (-500), (-475), 0, 0, 2529, lenientChronology0);
      Seconds seconds0 = Seconds.TWO;
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) seconds0);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 0, gregorianChronology0);
      assertEquals(1, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.withDate(25650000, (int) (byte) (-47), (int) (byte) (-47));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -47 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      // Undeclared exception!
      try { 
        dateTime_Property0.withMinimumValue();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -292269055 for year is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTime.Property dateTime_Property0 = dateTime0.property(dateTimeFieldType0);
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime dateTime1 = dateTime0.minusMillis(69);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.minusSeconds(0);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime dateTime1 = dateTime0.minusSeconds(6);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.minusMinutes(0);
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      LocalDate localDate0 = new LocalDate((-71020805015L), (Chronology) strictChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.minusMinutes(1);
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusHours(0);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.minusDays(0);
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime dateTime1 = dateTime0.minusDays(6);
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusWeeks(0);
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.minusMonths(0);
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusYears(0);
      ;
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.plusMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      DateTime dateTime1 = dateTime0.plusMillis(59);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DateTime dateTime1 = dateTime0.plusSeconds(0);
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.plusMinutes(0);
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.plusMinutes((-4480));
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.plusHours(0);
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime dateTime1 = dateTime0.plusHours((-329));
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.plusDays(0);
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime dateTime1 = dateTime0.plusWeeks(0);
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime dateTime1 = dateTime0.plusWeeks((-329));
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      DateTime dateTime2 = dateTime1.withTime(localTime0);
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.plusMonths(0);
      ;
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      DateTime dateTime1 = dateTime0.plusMonths(1);
      ;
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.plusYears(0);
      ;
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      DateTime dateTime1 = dateTime0.plusYears((-613));
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Seconds seconds0 = Seconds.TWO;
      DateTime dateTime1 = dateTime0.withPeriodAdded(seconds0, 0);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) null);
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.withDurationAdded(1L, 0);
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      DateTime dateTime1 = dateTime0.withFieldAdded(durationFieldType0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
      try { 
        dateTime0.withFieldAdded((DurationFieldType) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      // Undeclared exception!
      try { 
        dateTime0.withFieldAdded(durationFieldType0, 2086126972);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2086128986 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        dateTime0.withField((DateTimeFieldType) null, 3);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTime dateTime1 = dateTime0.withField(dateTimeFieldType0, 1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      DateTime dateTime1 = dateTime0.withFields((ReadablePartial) null);
      ;
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalTime localTime0 = new LocalTime(dateTime0, uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withFields(localTime0);
      ;
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime1 = dateTime0.withZoneRetainFields(dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) null);
      ;
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      DateTime dateTime1 = dateTime0.toDateTime(dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.toDateTimeISO();
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) gJChronology0);
      DateTime dateTime2 = dateTime1.toDateTimeISO();
      ;
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime.Property dateTime_Property0 = dateTime0.yearOfCentury();
      assertNotNull(dateTime_Property0);
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DateTime.Property dateTime_Property0 = dateTime0.dayOfWeek();
      assertNotNull(dateTime_Property0);
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      DateTime dateTime1 = dateTime0.withHourOfDay(1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withZone((DateTimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime((Object) null, dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.withYearOfCentury((-447));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -447 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      DateTime dateTime1 = dateTime0.withYearOfEra(2018);
      ;
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime dateTime1 = dateTime0.plus(3547L);
      ;
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withYear((-329));
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      DateTime dateTime1 = dateTime0.withMillisOfSecond(1);
      ;
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      ;
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DateTime.Property dateTime_Property0 = dateTime0.millisOfDay();
      assertNotNull(dateTime_Property0);
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withYearOfCentury(0);
      ;
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
      try { 
        dateTime0.withEra(2147447857);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2147447857 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1662), (-1662), 11, (-1662), (-1662), (-1662), iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1662 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1497), 1682, (-1497), (-1708), 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1708 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = new LocalDate((long) 0, (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withDate(localDate0);
      ;
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      LocalTime localTime0 = dateTime0.toLocalTime();
      assertEquals(0, localTime0.size());
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      assertEquals(0, localDateTime0.size());
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 1, 0, 1, 0, 0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]: year: 0 month: 1
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withMillisOfDay(18);
      ;
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime.Property dateTime_Property0 = dateTime0.hourOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, (-999), 0, 1729, 0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 1729 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime dateTime1 = dateTime0.withDayOfYear(6);
      assertEquals(1, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMonthOfYear(1);
      ;
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((long) 0, dateTimeZone0);
      DateTime dateTime2 = dateTime1.withDate(localDate0);
      DateTime dateTime3 = dateTime2.minusYears(0);
      ;
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((long) 0, dateTimeZone0);
      DateTime dateTime2 = dateTime1.withDate(localDate0);
      DateTime dateTime3 = dateTime2.minusYears(0);
      ;
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withYearOfEra(1141);
      DateTime dateTime2 = dateTime1.withMillisOfDay(0);
      ;
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DateTime.Property dateTime_Property0 = dateTime0.secondOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withMinuteOfHour(0);
      ;
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime dateTime1 = dateTime0.withLaterOffsetAtOverlap();
      ;
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, (-1015), 0, 6, 0, 6, (-1), (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      DateTime.Property dateTime_Property0 = dateTime0.era();
      ;
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      DateTime dateTime1 = dateTime0.plus((ReadableDuration) null);
      ;
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse("a7[]j&");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"a7[]j&\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        dateTime0.withDayOfMonth((-2147382925));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2147382925 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Object) null, copticChronology0);
      DateTime dateTime1 = dateTime0.withWeekOfWeekyear(1);
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2925, 2925, 2925, 2925, (-108), (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2925 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTime0, gJChronology0);
      Duration duration0 = new Duration(mutableDateTime0, dateTime0);
      DateTime dateTime1 = dateTime0.minus((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withCenturyOfEra(1470);
      ;
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
      try { 
        dateTime0.withTime((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withTime(0, 0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfHour();
      ;
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      // Undeclared exception!
      try { 
        dateTime0.withDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.toDateTime();
      ;
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(2147481957, 2147481957, 2147481957, 2147481957, (-2138460606), (-2138460606), 2489);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2147481957 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        dateTime0.withSecondOfMinute((-329));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -329 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime dateTime1 = dateTime0.withWeekyear(6);
      ;
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        dateTime0.minus((ReadablePeriod) years0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 0, 0, 0, (-2614), 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2614 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      DateTime dateTime1 = dateTime_Property0.addWrapFieldToCopy((-2178));
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime.Property dateTime_Property0 = dateTime0.dayOfMonth();
      DateTime dateTime1 = dateTime_Property0.addToCopy((-2128L));
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-5015L));
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      DateTime dateTime1 = dateTime_Property0.roundCeilingCopy();
      ;
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.secondOfMinute();
      Chronology chronology0 = dateTime_Property0.getChronology();
      ;
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.secondOfMinute();
      DateTime dateTime1 = dateTime_Property0.roundHalfEvenCopy();
      ;
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.year();
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for year is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      DateTime dateTime1 = dateTime_Property0.roundHalfCeilingCopy();
      assertEquals(0, dateTime1.getMillis());
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      DateTime dateTime1 = dateTime_Property0.roundFloorCopy();
      DateTime dateTime2 = dateTime1.plus(3547L);
      assertEquals(0, dateTime2.getMillis());
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-1668L));
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      DateTime dateTime1 = dateTime_Property0.getDateTime();
      ;
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.centuryOfEra();
      // Undeclared exception!
      try { 
        dateTime_Property0.withMaximumValue();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 292279656 for yearOfEra must be in the range [-292268412,292279635]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-2561L));
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.dayOfYear();
      DateTime dateTime1 = dateTime_Property0.roundHalfFloorCopy();
      ;
}
