 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Locale locale0 = new Locale("?kQofKhe", "~", "~");
      String string0 = mutableDateTime0.toString("~", locale0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      String string0 = dateTime0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      int int0 = mutableDateTime0.getYearOfEra();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      int int0 = dateTime0.getYearOfCentury();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      int int0 = dateTime0.getYear();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
      int int0 = mutableDateTime0.getWeekOfWeekyear();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      int int0 = dateTime0.getSecondOfMinute();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (byte) (-75), (Chronology) gregorianChronology0);
      int int0 = mutableDateTime0.getSecondOfMinute();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = new DateTime(2883L, (Chronology) ethiopicChronology0);
      DateTime dateTime1 = dateTime0.withMillisOfDay(1);
      int int0 = dateTime1.getSecondOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      int int0 = mutableDateTime0.getSecondOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      int int0 = mutableDateTime0.getMonthOfYear();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      LocalDate localDate0 = new LocalDate(mutableDateTime0);
      DateTime dateTime0 = localDate0.toDateTime(mutableDateTime0);
      int int0 = dateTime0.getMinuteOfHour();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Interval interval0 = new Interval(1720L, 1720L, dateTimeZone0);
      DateTime dateTime0 = interval0.getEnd();
      int int0 = dateTime0.getMinuteOfDay();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      int int0 = mutableDateTime0.getMinuteOfDay();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      int int0 = dateTime0.getMillisOfSecond();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1816));
      DateTime dateTime0 = new DateTime(1209600000L, dateTimeZone0);
      int int0 = dateTime0.getMillisOfSecond();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      int int0 = dateTime0.getMillisOfDay();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(4193L, (Chronology) strictChronology0);
      int int0 = mutableDateTime0.getHourOfDay();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(86399999L);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.plus((-1441L));
      int int0 = dateTime1.getHourOfDay();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0, 1, 1, 1, 1, 0, 1, (DateTimeZone) null);
      int int0 = dateTime0.getEra();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      int int0 = mutableDateTime0.getDayOfWeek();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = new DateTime(2883L, (Chronology) ethiopicChronology0);
      int int0 = dateTime0.getDayOfMonth();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = new DateTime(2883L, (Chronology) ethiopicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      int int0 = dateTime0.get(dateTimeFieldType0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) null);
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime((Chronology) ethiopicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      int int0 = dateTime0.get(dateTimeFieldType0);
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      try { 
        mutableDateTime0.toString("", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.toString("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      Locale locale0 = Locale.FRANCE;
      String string0 = dateTime0.toString((String) null, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      String string0 = mutableDateTime0.toString("~");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = new DateTime(2883L, (Chronology) ethiopicChronology0);
      Calendar calendar0 = dateTime0.toCalendar((Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = new DateTime(2883L, (Chronology) ethiopicChronology0);
      Locale locale0 = Locale.JAPAN;
      Calendar calendar0 = dateTime0.toCalendar(locale0);
      assertEquals(0, calendar0.getFirstDayOfWeek());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      // Undeclared exception!
      try { 
        dateTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.base.AbstractDateTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      int int0 = dateTime0.getDayOfYear();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      int int0 = mutableDateTime0.getWeekyear();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = new DateTime(2883L, (Chronology) ethiopicChronology0);
      int int0 = dateTime0.getMillisOfDay();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = new DateTime(2883L, (Chronology) ethiopicChronology0);
      String string0 = dateTime0.toString((String) null);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(4169L, (Chronology) strictChronology0);
      int int0 = mutableDateTime0.getCenturyOfEra();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(4169L, (Chronology) strictChronology0);
      int int0 = mutableDateTime0.getMinuteOfHour();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = new DateTime(2883L, (Chronology) ethiopicChronology0);
      int int0 = dateTime0.getEra();
      assertEquals(1, int0);
}
