/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:27:48 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Instant_ESTest extends Instant_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withMillis((-2324L));
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Instant instant0 = Instant.parse("2");
      instant0.EPOCH.toMutableDateTimeISO();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-1L));
      instant0.EPOCH.toMutableDateTime();
      assertEquals(0, instant0.getMillis());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertEquals(0, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.toInstant();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-2875L));
      Instant instant1 = instant0.toInstant();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(0L);
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-1206L));
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      Duration duration0 = mutablePeriod0.toDurationTo(mutableDateTime0);
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-1L));
      Duration duration0 = new Duration(86400L);
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      Instant instant2 = instant1.plus((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-1L));
      Duration duration0 = new Duration(86400L);
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      Instant instant2 = instant1.plus((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(0L);
      Instant instant1 = instant0.plus(0L);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      Instant instant1 = instant0.plus(772L);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Instant instant0 = Instant.parse("", dateTimeFormatter0);
      assertEquals(0, instant0.getMillis());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2395));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      Instant instant0 = Instant.parse("", dateTimeFormatter1);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 2);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
      Instant instant0 = Instant.parse("", dateTimeFormatter1);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = Instant.parse("1970-01-01T00:00:00.000Z");
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = Instant.parse("1970-01-01T00:00:03.000Z");
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(2);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(0L);
      Duration duration0 = Duration.standardMinutes(86400L);
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, (-1561));
      MutableDateTime mutableDateTime0 = instant1.toMutableDateTimeISO();
      assertEquals(1, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      Instant instant0 = Instant.now();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed((-1L));
      Instant instant0 = Instant.now();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = Instant.now();
      Duration duration0 = new Duration(695L, (-1L));
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(0L);
      Instant instant1 = instant0.minus(0L);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-1206L));
      Instant instant1 = instant0.minus((-1206L));
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(1968);
      long long0 = instant0.getMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withMillis(799);
      Instant instant2 = instant1.withDurationAdded((-2574L), 10);
      long long0 = instant2.getMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-12219292800000L));
      Duration duration0 = Duration.standardSeconds((-12219292800000L));
      // Undeclared exception!
      try { 
        instant0.withDurationAdded((ReadableDuration) duration0, (-2914));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -12219292800000000 * -2914
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Instant instant0 = Instant.now();
      // Undeclared exception!
      try { 
        instant0.withDurationAdded(5705860843080L, 2146996026);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 5705860843080 * 2146996026
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        Instant.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-2147483646)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      // Undeclared exception!
      try { 
        Instant.parse("-", dateTimeFormatter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse(" ", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Instant", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.ofEpochSecond(100000000000000000L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 100000000000000000 * 1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      // Undeclared exception!
      try { 
        instant0.EPOCH.minus((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      Instant instant0 = null;
      try {
        instant0 = new Instant(object0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      Duration duration0 = mutablePeriod0.toDurationTo(mutableDateTime0);
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 2);
      assertEquals(0, instant1.getMillis());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) null, 0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withDurationAdded((-2574L), 10);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.withDurationAdded(0L, 1968);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Instant instant0 = new Instant();
      assertEquals(0, instant0.getMillis());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Instant instant0 = Instant.parse("2");
      instant0.getChronology();
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Instant instant0 = Instant.parse("2");
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      long long0 = instant0.getMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Instant instant0 = Instant.parse("2");
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertEquals(1, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        Instant.parse("Field '", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Field '\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Instant instant0 = Instant.now();
      Duration duration0 = Duration.ZERO;
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withDurationAdded((long) 5, 0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Duration duration0 = Duration.ZERO;
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(0L);
      Instant instant1 = instant0.withMillis(0L);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.minus((long) 2);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.toInstant();
      assertEquals(0, instant1.getMillis());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.plus((long) 0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertEquals(1, mutableDateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.plus((ReadableDuration) null);
      ;
}
}
