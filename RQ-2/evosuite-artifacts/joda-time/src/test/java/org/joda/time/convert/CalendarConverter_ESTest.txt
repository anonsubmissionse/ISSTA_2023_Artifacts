 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      Chronology chronology0 = calendarConverter0.getChronology((Object) calendar0, (Chronology) null);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 0, 4, 0, 4);
      long long0 = calendarConverter0.getInstantMillis(mockGregorianCalendar0, (Chronology) null);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      long long0 = calendarConverter0.getInstantMillis(mockGregorianCalendar0, (Chronology) null);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      // Undeclared exception!
      try { 
        calendarConverter0.getInstantMillis((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.CalendarConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      // Undeclared exception!
      try { 
        calendarConverter0.getChronology((Object) null, (DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.CalendarConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      // Undeclared exception!
      try { 
        calendarConverter0.getChronology((Object) "", (Chronology) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Calendar
         //
         verifyException("org.joda.time.convert.CalendarConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      Locale locale0 = new Locale("Omb3c{d;GUq/#(-", "Omb3c{d;GUq/#(-");
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(842);
      Chronology chronology0 = calendarConverter0.getChronology((Object) calendar0, dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      Class<?> class0 = calendarConverter0.getSupportedType();
      assertTrue(class0.isPrimitive());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      Chronology chronology0 = calendarConverter0.getChronology((Object) gregorianCalendar0, (DateTimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = calendarConverter0.getChronology((Object) dateTimeZone0, dateTimeZone0);
      assertNotNull(chronology0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Chronology chronology0 = calendarConverter0.getChronology((Object) mockGregorianCalendar0, (Chronology) null);
      assertNotNull(chronology0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      // Undeclared exception!
      try { 
        calendarConverter0.getChronology((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.CalendarConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        calendarConverter0.getInstantMillis(integer0, (Chronology) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.util.Calendar
         //
         verifyException("org.joda.time.convert.CalendarConverter", e);
      }
  }
