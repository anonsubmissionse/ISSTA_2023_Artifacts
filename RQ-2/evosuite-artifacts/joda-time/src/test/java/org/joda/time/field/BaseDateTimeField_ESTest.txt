 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2147483597));
      dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.roundHalfEven((-2147483597));
      Locale locale0 = Locale.GERMAN;
      offsetDateTimeField0.getAsText(3159, locale0);
      offsetDateTimeField0.getMinimumValue((long) (-2147483597));
      dateTimeFieldType0.getField(buddhistChronology0);
      offsetDateTimeField0.getDifferenceAsLong((-2147483597L), (-1106L));
      offsetDateTimeField0.getDifference(531L, (-1106L));
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.util.Locale
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Months months0 = Months.SIX;
      buddhistChronology0.get((ReadablePeriod) months0, 0L, (-4588L));
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, (-655));
      offsetDateTimeField0.roundHalfFloor((-655));
      System.setCurrentTimeMillis(1551L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add((-1747L), (-1628));
      zeroIsMaxDateTimeField0.addWrapField(1237L, (-1628));
      offsetDateTimeField0.roundCeiling(7503L);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, (-1168));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-2102704779));
      offsetDateTimeField0.isLeap((-1350));
      offsetDateTimeField0.get(1);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      buddhistChronology0.dayOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(3062L, dateTimeZone0);
      Partial partial0 = new Partial(localDate0);
      Months months0 = Months.MAX_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, (-2102744404));
      offsetDateTimeField0.getMaximumValue((ReadablePartial) partial1);
      offsetDateTimeField0.getMaximumValue();
      offsetDateTimeField0.getDifference(292279537, 4975L);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2147483597));
      dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.roundHalfEven((-2147483597));
      Locale locale0 = Locale.GERMAN;
      offsetDateTimeField0.getAsText(3159, locale0);
      offsetDateTimeField0.getMinimumValue((long) (-2147483597));
      offsetDateTimeField0.getDifferenceAsLong(12L, (-1085L));
      offsetDateTimeField0.getDifference((-2147483597L), (-1085L));
      dateTimeFieldType0.getRangeDurationType();
      offsetDateTimeField0.getMinimumValue();
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1920);
      Integer integer0 = new Integer(1920);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getLeapAmount(1920);
      zeroIsMaxDateTimeField0.add((long) 1, (long) 0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dividedDateTimeField0, 1);
      offsetDateTimeField0.isLeap(30617280319L);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.roundCeiling(30617280319L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      buddhistChronology0.millisOfSecond();
      int int0 = 1962;
      buddhistChronology0.add(1990L, (long) 1900, 1962);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1962);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = locale0.stripExtensions();
      offsetDateTimeField0.getMaximumShortTextLength(locale1);
      offsetDateTimeField0.roundHalfCeiling(21600000L);
      offsetDateTimeField0.toString();
      Integer integer0 = new Integer(1962);
      offsetDateTimeField0.addWrapField((long) 1900, 1900);
      int int1 = (-232);
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, (-232));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -232
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.addWrapField((long) 1, 1);
      LocalDateTime localDateTime0 = new LocalDateTime(806L);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-593);
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 776;
      int int0 = 366;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.add((ReadablePartial) localDateTime0, 1, intArray0, 366);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      yearMonth0.minusMonths(65);
      System.setCurrentTimeMillis(65);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      buddhistChronology0.minuteOfHour();
      int[] intArray0 = new int[7];
      intArray0[0] = 65;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      zeroIsMaxDateTimeField0.roundHalfFloor(0);
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapPartial(yearMonth0, 1, intArray0, (-2102704419));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-2102704779));
      offsetDateTimeField0.isLeap((-1350));
      offsetDateTimeField0.set(3611L, (-2102704779));
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.toString();
      offsetDateTimeField0.roundHalfFloor(1);
      offsetDateTimeField0.remainder(1);
      ReadablePartial readablePartial0 = null;
      int[] intArray0 = new int[8];
      intArray0[0] = (-972);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[4] = 1002;
      intArray0[5] = 1;
      intArray0[6] = 2425;
      offsetDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.getAsShortText((ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      yearMonth0.minusMonths(60);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1);
      System.setCurrentTimeMillis((-23L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfHour();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, (DurationField) null, dateTimeFieldType0, 1163);
      dividedDateTimeField0.getMaximumValue();
      dividedDateTimeField0.getMinimumValue((ReadablePartial) yearMonth1);
      dividedDateTimeField0.roundCeiling((-2102704574L));
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology1.weekyears();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType0, 86400);
      remainderDateTimeField0.getAsText((long) 86400);
      remainderDateTimeField0.roundHalfCeiling(86400);
      Locale locale0 = Locale.CHINESE;
      Locale.getISOLanguages();
      int int0 = new Integer(86400);
      MonthDay monthDay0 = new MonthDay((long) 86400);
      int[] intArray0 = new int[9];
      intArray0[0] = 58;
      intArray0[1] = 1;
      intArray0[2] = 86400;
      intArray0[3] = 1385;
      intArray0[4] = 391;
      intArray0[5] = 86400;
      intArray0[6] = 86400;
      intArray0[7] = 0;
      intArray0[8] = 1;
      // Undeclared exception!
      try { 
        remainderDateTimeField0.set((ReadablePartial) monthDay0, (-341), intArray0, 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.roundHalfEven(3062L);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      offsetDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      offsetDateTimeField0.getLeapAmount(0L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifferenceAsLong(7L, 3062L);
      zeroIsMaxDateTimeField0.roundFloor(0L);
      zeroIsMaxDateTimeField0.getDifference(3062L, 0);
      zeroIsMaxDateTimeField0.get(2140L);
      offsetDateTimeField0.getMinimumValue();
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-12219292800000L));
      LocalTime.fromMillisOfDay((-12219292800000L), (Chronology) buddhistChronology0);
      int[] intArray0 = null;
      PeriodType.dayTime();
      int int0 = 0;
      localTime0.toDateTimeToday();
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((ReadablePartial) localDateTime0, 0, (int[]) null, 3);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      String string0 = offsetDateTimeField0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      String string0 = offsetDateTimeField0.toString();
      long long0 = offsetDateTimeField0.roundHalfFloor(1);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      String string0 = offsetDateTimeField0.toString();
      long long0 = offsetDateTimeField0.roundHalfFloor(1);
      long long1 = offsetDateTimeField0.remainder(1);
      assertEquals(1, long1);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      String string0 = offsetDateTimeField0.toString();
      long long0 = offsetDateTimeField0.roundHalfFloor(1);
      long long1 = offsetDateTimeField0.remainder(1);
      int[] intArray0 = new int[8];
      intArray0[0] = (-972);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[4] = 1002;
      intArray0[5] = 1;
      intArray0[6] = 2425;
      offsetDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      intArray0[7] = 1;
      offsetDateTimeField0.addWrapPartial((ReadablePartial) null, 1, intArray0, 0);
      long long2 = offsetDateTimeField0.add(3056L, 999);
      assertEquals(1, long2);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = (-1L);
      Instant instant0 = Instant.ofEpochSecond((-1L));
      Chronology chronology0 = instant0.getChronology();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0);
      int int0 = (-381);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, dateTimeFieldType0, (-381), (-381), (-381));
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((-1L), (-2102704547));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -359 for weekOfWeekyear must be in the range [-380,-381]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      int[] intArray0 = new int[8];
      intArray0[0] = (-972);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[4] = 1002;
      intArray0[5] = 1;
      intArray0[6] = 2425;
      intArray0[7] = 1;
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(lenientDateTimeField0, (DurationField) null, dateTimeFieldType0, 86400000);
      // Undeclared exception!
      try { 
        remainderDateTimeField0.getAsText((ReadablePartial) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1920);
      Integer integer0 = new Integer(1920);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getLeapAmount(1920);
      zeroIsMaxDateTimeField0.add((long) 1, (long) 0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dividedDateTimeField0, 1);
      offsetDateTimeField0.isLeap(30617280288L);
      dividedDateTimeField0.get(30617280288L);
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      Locale locale0 = Locale.KOREA;
      DateTimeZone.getProvider();
      Locale.getISOLanguages();
      LocalTime.now();
      int[] intArray0 = new int[9];
      intArray0[1] = 1;
      intArray0[3] = 15356267;
      intArray0[4] = 15356267;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.addWrapField((long) 15356267, 1213);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, 15356267);
      DurationField durationField0 = buddhistChronology0.hours();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        remainderDateTimeField0.addWrapField(2556L, (-466));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 15355861 for yearOfEra must be in the range [1,60]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-2102704779));
      offsetDateTimeField0.getMaximumValue();
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      yearMonth0.minusMonths(60);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1);
      System.setCurrentTimeMillis((-23L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfHour();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, (DurationField) null, dateTimeFieldType0, 1163);
      dividedDateTimeField0.getMaximumValue();
      dividedDateTimeField0.getMinimumValue((ReadablePartial) yearMonth1);
      zeroIsMaxDateTimeField0.get((-1353L));
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      int int0 = 2846;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2846);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.isLeap(2846);
      int int1 = (-34);
      durationFieldType0.getField(buddhistChronology0);
      Locale locale0 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      Set<String> set0 = zoneInfoProvider0.getAvailableIDs();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      offsetDateTimeField0.getAsText((-34), locale0);
      offsetDateTimeField0.getMaximumTextLength(locale0);
      DurationField durationField0 = durationFieldType0.getField(buddhistChronology0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(offsetDateTimeField0, delegatedDurationField0, dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(60);
      yearMonth1.withYear(1);
      System.setCurrentTimeMillis(60);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      buddhistChronology0.minuteOfHour();
      int[] intArray0 = new int[7];
      intArray0[0] = 60;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapPartial(yearMonth0, (-2147483613), intArray0, (-2102704419));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1920);
      Integer integer0 = new Integer(1920);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getLeapAmount(1920);
      zeroIsMaxDateTimeField0.add((long) 1, (long) 0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.roundHalfFloor(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      yearMonth0.minusMonths(60);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1);
      System.setCurrentTimeMillis((-1L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      Integer integer0 = new Integer(1);
      yearMonth1.equals(integer0);
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfHour();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, (DurationField) null, dateTimeFieldType0, 1163);
      dividedDateTimeField0.roundHalfFloor((-2102704479L));
      dividedDateTimeField0.getMaximumValue();
      dividedDateTimeField0.getMinimumValue((ReadablePartial) yearMonth1);
      zeroIsMaxDateTimeField0.getRangeDurationField();
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(3062L, dateTimeZone0);
      Partial partial0 = new Partial(localDate0);
      Months months0 = Months.MAX_VALUE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 1);
      offsetDateTimeField0.getMaximumValue((ReadablePartial) partial1);
      offsetDateTimeField0.getMaximumValue();
      offsetDateTimeField0.getDifference(292279537, 4975L);
      Locale locale0 = Locale.ITALY;
      offsetDateTimeField0.getAsShortText(93, locale0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField((DateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Object object0 = new Object();
      iSOChronology0.equals(object0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, dateTimeField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, 1);
      offsetDateTimeField0.getMinimumValue();
      Locale locale0 = Locale.CANADA_FRENCH;
      skipUndoDateTimeField0.getAsShortText(2591, locale0);
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1260);
      dividedDateTimeField0.add(0L, 1);
      dividedDateTimeField0.convertText("2591", locale0);
      LocalDate localDate0 = new LocalDate((-2554L));
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1260;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1411;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(localDate0, 1, intArray0, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.roundHalfEven(1);
      Locale locale0 = Locale.KOREA;
      offsetDateTimeField0.getAsText(3159, locale0);
      offsetDateTimeField0.getMinimumValue((long) 1);
      dateTimeFieldType0.getField(buddhistChronology0);
      int int0 = new Integer(1);
      offsetDateTimeField0.getDifferenceAsLong(12L, (-1085L));
      Locale locale1 = Locale.TAIWAN;
      locale0.getDisplayCountry(locale1);
      offsetDateTimeField0.getDifference(531L, (-1085L));
      dateTimeFieldType0.getRangeDurationType();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.util.Locale
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(1, 10, 10, buddhistChronology0);
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 10;
      intArray0[6] = 1;
      intArray0[7] = (-34);
      intArray0[8] = (-2061584301);
      offsetDateTimeField0.getMinimumValue((ReadablePartial) localDate0, intArray0);
      LocalDate localDate1 = new LocalDate(3062L, dateTimeZone0);
      Partial partial0 = new Partial(localDate1);
      offsetDateTimeField0.getMaximumValue();
      offsetDateTimeField0.getDifference(292279537, 4975L);
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(3062L, dateTimeZone0);
      Partial partial0 = new Partial(localDate0);
      Months months0 = Months.MAX_VALUE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 1);
      offsetDateTimeField0.getMaximumValue((ReadablePartial) partial1);
      offsetDateTimeField0.getMaximumValue();
      offsetDateTimeField0.getDifference(292279537, 4975L);
      offsetDateTimeField0.isLeap(292279537);
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 292279537);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 65);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
      remainderDateTimeField0.getName();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(remainderDateTimeField0, (-1022));
      offsetDateTimeField0.isLeap(1);
      int[] intArray0 = new int[1];
      intArray0[0] = 65;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add((ReadablePartial) null, 1383, intArray0, (-447));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1383
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      dateTimeFieldType0.getDurationType();
      zeroIsMaxDateTimeField0.getMinimumValue(0L);
      zeroIsMaxDateTimeField0.addWrapField((-12L), 0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      dateTimeFieldType0.isSupported(buddhistChronology1);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.GERMANY;
      locale0.getDisplayCountry(locale1);
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology1);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 693;
      intArray0[6] = 1;
      intArray0[7] = 0;
      intArray0[8] = 693;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set((ReadablePartial) localDateTime0, 693, intArray0, "Fields invalid for add", locale1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"Fields invalid for add\" for clockhourOfHalfday is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2147483597));
      Locale locale0 = Locale.KOREA;
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.roundHalfEven((-2147483597));
      offsetDateTimeField0.getMinimumValue((long) (-2147483597));
      dateTimeFieldType0.getField(buddhistChronology0);
      offsetDateTimeField0.getDifferenceAsLong(12L, (-1085L));
      offsetDateTimeField0.getDifference(531L, (-1085L));
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology1.weekyears();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      buddhistChronology1.add((long) 1, (-2102704635L), 1);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType0, 86400);
      remainderDateTimeField0.getAsText((long) 86400);
      Locale locale0 = Locale.CHINESE;
      Locale.getISOLanguages();
      remainderDateTimeField0.getMaximumShortTextLength(locale0);
      remainderDateTimeField0.getDurationField();
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2147483597));
      dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.roundHalfEven((-2147483597));
      offsetDateTimeField0.getMinimumValue((long) (-2147483597));
      dateTimeFieldType0.getField(buddhistChronology0);
      LocalTime localTime0 = new LocalTime((-646L));
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 3159;
      offsetDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      offsetDateTimeField0.getDifferenceAsLong(12L, (-1085L));
      offsetDateTimeField0.getDifference(531L, (-1085L));
      offsetDateTimeField0.roundHalfCeiling(1097L);
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(iSOChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0, durationFieldType0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, delegatedDurationField0, dateTimeFieldType0, 1379);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(remainderDateTimeField0, dateTimeFieldType0, 1379);
      offsetDateTimeField0.remainder(1379);
      Locale locale0 = new Locale("-VBk]ojky>)96nS");
      offsetDateTimeField0.addWrapField(1000L, 1379);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      offsetDateTimeField0.getMaximumValue((ReadablePartial) monthDay0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getAsText(1000L);
      dateTimeFieldType0.getRangeDurationType();
      preciseDurationField0.add(0L, 1000L);
      zeroIsMaxDateTimeField0.roundHalfFloor(1);
      int[] intArray0 = new int[5];
      intArray0[0] = 2757;
      intArray0[1] = 0;
      intArray0[2] = 1379;
      intArray0[3] = 1;
      intArray0[4] = 2757;
      zeroIsMaxDateTimeField0.getMaximumValue((ReadablePartial) monthDay0, intArray0);
      remainderDateTimeField0.remainder(2822L);
      offsetDateTimeField0.roundHalfFloor(1L);
      remainderDateTimeField0.roundCeiling((-1360L));
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      Locale locale0 = Locale.KOREA;
      DateTimeZone.getProvider();
      Locale.getISOLanguages();
      LocalTime.now();
      int[] intArray0 = new int[6];
      intArray0[1] = 1;
      intArray0[3] = 15356267;
      intArray0[4] = 15356267;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.addWrapField((long) 15356267, 1213);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, 15356267);
      remainderDateTimeField0.isLeap(1213);
      // Undeclared exception!
      try { 
        remainderDateTimeField0.set(1320L, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(60);
      YearMonth yearMonth2 = yearMonth0.plusMonths(1);
      System.setCurrentTimeMillis((-1L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfHour();
      yearMonth0.compareTo(yearMonth1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, (DurationField) null, dateTimeFieldType0, 1163);
      dividedDateTimeField0.getMaximumValue();
      dividedDateTimeField0.getMinimumValue((ReadablePartial) yearMonth2);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 86399;
      intArray0[4] = 0;
      intArray0[5] = (-2102704659);
      // Undeclared exception!
      dividedDateTimeField0.addWrapPartial(yearMonth2, 0, intArray0, 86399);
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Object object0 = new Object();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1260);
      LocalDate localDate0 = new LocalDate((-2554L));
      int[] intArray0 = new int[5];
      intArray0[1] = 1260;
      intArray0[4] = 1411;
      dividedDateTimeField0.addWrapPartial(localDate0, 1, intArray0, 0);
      dividedDateTimeField0.toString();
      dividedDateTimeField0.getMaximumValue((ReadablePartial) localDate0);
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.roundHalfEven(3062L);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      offsetDateTimeField0.getLeapAmount(0L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifferenceAsLong(7L, 3062L);
      zeroIsMaxDateTimeField0.roundFloor(0L);
      zeroIsMaxDateTimeField0.getDifference(3062L, 0);
      zeroIsMaxDateTimeField0.get(2140L);
      offsetDateTimeField0.getMinimumValue();
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-12219292800000L));
      PeriodType.dayTime();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) localTime0, (-2102704551), (int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2147483597));
      dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.roundHalfEven((-2147483597));
      Locale locale0 = Locale.GERMAN;
      offsetDateTimeField0.getAsText(3159, locale0);
      offsetDateTimeField0.getMinimumValue((long) (-2147483597));
      dateTimeFieldType0.getField(buddhistChronology0);
      offsetDateTimeField0.getDifferenceAsLong(12L, (-1085L));
      offsetDateTimeField0.getDifference((-2147483597), (-1085L));
      dateTimeFieldType0.getRangeDurationType();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.util.Locale
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      LocalDateTime localDateTime1 = localDateTime0.withField(dateTimeFieldType0, 1);
      localDateTime0.toDate();
      buddhistChronology0.set(localDateTime1, (-1355L));
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
      zeroIsMaxDateTimeField0.add((long) 1, (long) 1);
      zeroIsMaxDateTimeField0.getMaximumValue((long) 1);
      zeroIsMaxDateTimeField0.roundCeiling(0L);
      dateTimeFieldType1.getField(buddhistChronology0);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      int int0 = (-2102704491);
      int[] intArray0 = new int[3];
      intArray0[0] = (-2102704491);
      int int1 = 842;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set((ReadablePartial) localDateTime1, 842, intArray0, (-2102704491));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -2102704491 for weekyear must be in the range [1,1000]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-2087831323));
      LocalDateTime localDateTime0 = new LocalDateTime();
      offsetDateTimeField0.getMaximumValue((ReadablePartial) localDateTime0);
      offsetDateTimeField0.roundHalfEven(916L);
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(3062L, dateTimeZone0);
      Partial partial0 = new Partial(localDate0);
      Months months0 = Months.MAX_VALUE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      // Undeclared exception!
      partial0.withFieldAddWrapped(durationFieldType0, (-2102744404));
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.roundHalfEven(3062L);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      offsetDateTimeField0.getLeapAmount(0L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundFloor(0L);
      zeroIsMaxDateTimeField0.getDifference(3062L, 0);
      zeroIsMaxDateTimeField0.getLeapAmount(0L);
      zeroIsMaxDateTimeField0.get(2140L);
      offsetDateTimeField0.getMinimumValue();
      LocalTime.fromMillisOfDay((-12219292800000L));
      PeriodType.dayTime();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      offsetDateTimeField0.addWrapField((long) 3, 0);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(2123L, (String) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value null for era is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1952257861);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add(223L, (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 1952260375 for secondOfMinute must be in the range [1659989350,-2050429899]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.set((-467L), 1);
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      long long0 = 3062L;
      buddhistChronology0.add(3062L, 3062L, 3022);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.getDifference((-9223372036854775808L), 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      yearMonth0.minusMonths(60);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1);
      System.setCurrentTimeMillis((-1L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      yearMonth0.getField(1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfHour();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, (DurationField) null, dateTimeFieldType0, 1163);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapField((ReadablePartial) yearMonth1, 0, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2147483597));
      dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.roundHalfEven((-2147483597));
      Locale locale0 = Locale.GERMAN;
      offsetDateTimeField0.getAsText(3159, locale0);
      offsetDateTimeField0.getMinimumValue((long) (-2147483597));
      dateTimeFieldType0.getField(buddhistChronology0);
      offsetDateTimeField0.getDifferenceAsLong(12L, (-2147483597L));
      // Undeclared exception!
      try { 
        offsetDateTimeField0.getDifference(531L, (-2147483597L));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147484128
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2147483597));
      dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.roundHalfEven((-2147483597));
      Locale locale0 = Locale.GERMAN;
      offsetDateTimeField0.getAsText(3159, locale0);
      offsetDateTimeField0.getMinimumValue((long) (-2147483597));
      dateTimeFieldType0.getField(buddhistChronology0);
      offsetDateTimeField0.getMaximumValue((long) (-2147483597));
      offsetDateTimeField0.getDifferenceAsLong(12L, (-1085L));
      Locale locale1 = Locale.TAIWAN;
      locale0.getDisplayCountry(locale1);
      offsetDateTimeField0.getDifference(531L, (-1085L));
      dateTimeFieldType0.getRangeDurationType();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.util.Locale
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      buddhistChronology0.add(1990L, (long) 1900, 1962);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1900);
      Locale locale0 = Locale.JAPANESE;
      locale0.getExtension('I');
      Locale locale1 = locale0.stripExtensions();
      offsetDateTimeField0.getMaximumShortTextLength(locale1);
      offsetDateTimeField0.roundHalfCeiling(21600000L);
      offsetDateTimeField0.toString();
      offsetDateTimeField0.getMinimumValue(3729790L);
      offsetDateTimeField0.addWrapField((long) 1900, 1900);
      offsetDateTimeField0.roundHalfFloor(1);
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, (-232));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -232
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      Partial partial0 = new Partial(dateTimeFieldType0, 1, buddhistChronology0);
      Partial partial1 = partial0.withChronologyRetainFields(buddhistChronology0);
      Period period0 = new Period((-4482L));
      Partial partial2 = partial1.plus(period0);
      Partial partial3 = partial2.without(dateTimeFieldType0);
      Partial partial4 = partial3.minus(period0);
      buddhistChronology0.get((ReadablePartial) partial4, (-4482L));
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      // Undeclared exception!
      try { 
        UnsupportedDateTimeField.getInstance(dateTimeFieldType1, (DurationField) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.roundHalfEven(3069L);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      offsetDateTimeField0.getLeapAmount(0L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, buddhistChronology0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2087831323);
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 0;
      zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) localDateTime0, 0, intArray0, (-2087831323));
      zeroIsMaxDateTimeField0.roundFloor(0L);
      zeroIsMaxDateTimeField0.getDifference(3069L, 0);
      zeroIsMaxDateTimeField0.getLeapAmount(0L);
      zeroIsMaxDateTimeField0.get(2140L);
      offsetDateTimeField0.getMinimumValue();
      LocalTime localTime0 = new LocalTime(1, 0, 1);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Values array must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      dateTimeFieldType0.getField(buddhistChronology0);
      dateTimeFieldType0.getDurationType();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 167, 0, (-1937));
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((long) 167, (-1937));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1937 for weekyear must be in the range [168,-1937]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      buddhistChronology0.add(1990L, (long) 1900, 1962);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1900);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = locale0.stripExtensions();
      offsetDateTimeField0.getMaximumShortTextLength(locale1);
      offsetDateTimeField0.roundHalfFloor(4);
      offsetDateTimeField0.toString();
      offsetDateTimeField0.getMinimumValue(3729790L);
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, (-232));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -232
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      yearMonth0.minusMonths(60);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1);
      System.setCurrentTimeMillis((-1L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfHour();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, (DurationField) null, dateTimeFieldType0, 1163);
      dividedDateTimeField0.getMaximumShortTextLength(locale0);
      dividedDateTimeField0.getMaximumValue();
      dividedDateTimeField0.getMinimumValue((ReadablePartial) yearMonth1);
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Object object0 = new Object();
      iSOChronology0.equals(object0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, dateTimeField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, 1);
      offsetDateTimeField0.getMinimumValue();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1260);
      dividedDateTimeField0.add(0L, 1);
      LocalDate localDate0 = new LocalDate((-2554L));
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1260;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1411;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(localDate0, 1, intArray0, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(60);
      yearMonth1.withYear(1);
      System.setCurrentTimeMillis((-1L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfHour();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, (DurationField) null, dateTimeFieldType0, 1163);
      dividedDateTimeField0.roundHalfCeiling(2);
      dividedDateTimeField0.getMaximumValue();
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      int int0 = (-2147483597);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2147483597));
      dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.roundHalfEven((-1L));
      int int1 = 3159;
      Locale locale0 = Locale.GERMAN;
      offsetDateTimeField0.getAsText(3159, locale0);
      offsetDateTimeField0.getMinimumValue((long) (-2147483597));
      dateTimeFieldType0.getField(buddhistChronology0);
      offsetDateTimeField0.getDifferenceAsLong(12L, (-1085L));
      offsetDateTimeField0.getDifference(531L, (-1085L));
      dateTimeFieldType0.getRangeDurationType();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.util.Locale
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology1.weekyears();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType0, 86400);
      Locale locale0 = Locale.CHINESE;
      remainderDateTimeField0.getMaximumShortTextLength(locale0);
      remainderDateTimeField0.roundFloor(2819L);
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Object object0 = new Object();
      iSOChronology0.equals(object0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1260);
      LocalDate localDate0 = new LocalDate((-2553L));
      int[] intArray0 = new int[5];
      intArray0[1] = 1260;
      intArray0[4] = 1411;
      dividedDateTimeField0.addWrapPartial(localDate0, (-300), intArray0, 0);
      dividedDateTimeField0.toString();
      Locale locale0 = Locale.CANADA_FRENCH;
      dividedDateTimeField0.getAsShortText((ReadablePartial) localDate0, locale0);
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(60);
      yearMonth1.withYear(1);
      System.setCurrentTimeMillis((-1L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfHour();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, (DurationField) null, dateTimeFieldType0, 1163);
      dividedDateTimeField0.getMaximumValue();
      dividedDateTimeField0.getMaximumValue(10L);
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Object object0 = new Object();
      iSOChronology0.equals(object0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, dateTimeField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, 1);
      Integer integer0 = new Integer(1);
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Integer.toUnsignedLong(2458);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 361);
      dividedDateTimeField0.add(0L, (int) integer0);
      dividedDateTimeField0.getLeapAmount(2678399999L);
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(60);
      yearMonth1.withYear(1);
      System.setCurrentTimeMillis((-1L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfHour();
      yearMonth1.withMonthOfYear(1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, (DurationField) null, dateTimeFieldType0, 1163);
      dividedDateTimeField0.getMaximumValue();
      zeroIsMaxDateTimeField0.getMaximumValue((long) 0);
      dividedDateTimeField0.getAsShortText(1440L);
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.hourOfDay();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(60);
      yearMonth1.withYear(1);
      System.setCurrentTimeMillis((-1L));
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 23);
      dividedDateTimeField0.roundHalfEven(0);
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      int int0 = 543;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 543);
      offsetDateTimeField0.getDifferenceAsLong(1, 102L);
      DurationField durationField0 = buddhistChronology0.months();
      buddhistChronology0.toString();
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, durationField0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Unit duration field must be precise
         //
         verifyException("org.joda.time.field.PreciseDurationDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      yearMonth0.minusMonths(60);
      YearMonth yearMonth1 = yearMonth0.plusMonths(1);
      System.setCurrentTimeMillis((-1L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfHour();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField1, (DurationField) null, dateTimeFieldType0, 1163);
      dividedDateTimeField0.getMaximumValue();
      dividedDateTimeField0.getMinimumValue((ReadablePartial) yearMonth1);
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Object object0 = new Object();
      iSOChronology0.equals(object0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, dateTimeField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, 1);
      offsetDateTimeField0.getMinimumValue();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1260);
      dividedDateTimeField0.add(0L, 1);
      dividedDateTimeField0.roundHalfEven((-60L));
      dividedDateTimeField0.add((-43200000L), 1);
      offsetDateTimeField0.roundHalfEven(0L);
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology1.weekyears();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType0, 86400);
      remainderDateTimeField0.addWrapField((long) 1, (-1790));
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, unsupportedDurationField0, dateTimeFieldType0, 507);
      dividedDateTimeField0.remainder(8L);
      dividedDateTimeField0.getMinimumValue();
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Object object0 = new Object();
      iSOChronology0.equals(object0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, dateTimeField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, 1);
      offsetDateTimeField0.getMinimumValue();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1260);
      dividedDateTimeField0.add(0L, 1);
      LocalDate localDate0 = new LocalDate((-2554L));
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1260;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1411;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(localDate0, (-300), intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfEven(1);
      MonthDay monthDay0 = new MonthDay(1, 1);
      MonthDay monthDay1 = monthDay0.plusDays((-1247));
      buddhistChronology0.set(monthDay1, 26607895200000L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, 1398);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      remainderDateTimeField0.roundFloor(0);
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Object object0 = new Object();
      iSOChronology0.equals(object0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, dateTimeField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, 1);
      offsetDateTimeField0.getMinimumValue();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1260);
      dividedDateTimeField0.getMinimumValue(2939L);
      dividedDateTimeField0.add(0L, 1);
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType0, 1000);
      offsetDateTimeField0.isLeap(2554L);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 355);
      remainderDateTimeField0.getMinimumValue();
      offsetDateTimeField0.getLeapAmount(0);
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, (DurationField) null, (DurationField) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.PreciseDurationDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Object object0 = new Object();
      iSOChronology0.equals(object0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, dateTimeField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, 1);
      offsetDateTimeField0.getMinimumValue();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1260);
      dividedDateTimeField0.getAsText(2632L);
      dividedDateTimeField0.add(0L, 1);
      dividedDateTimeField0.add((-58L), 1);
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Object object0 = new Object();
      iSOChronology0.equals(object0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, dateTimeField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, 1);
      offsetDateTimeField0.getMinimumValue();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1260);
      dividedDateTimeField0.add(0L, 1);
      dividedDateTimeField0.getName();
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology1.weekyears();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType0, 86400);
      remainderDateTimeField0.getLeapDurationField();
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(60);
      yearMonth1.withYear(47);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-3830));
      offsetDateTimeField0.roundHalfCeiling(1000000000000000000L);
      DurationField durationField0 = buddhistChronology0.centuries();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0, 47);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      dividedDateTimeField0.getDurationField();
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.toString();
      offsetDateTimeField0.roundHalfFloor((-1003L));
      offsetDateTimeField0.remainder((-1003L));
      int[] intArray0 = new int[8];
      intArray0[0] = (-972);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[4] = 1002;
      intArray0[5] = 1;
      intArray0[6] = 2425;
      intArray0[7] = 1;
      offsetDateTimeField0.addWrapPartial((ReadablePartial) null, 1, intArray0, 0);
      offsetDateTimeField0.add(3056L, 999);
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 3);
      offsetDateTimeField0.getLeapDurationField();
      long long0 = (-776L);
      Locale locale0 = Locale.CANADA;
      offsetDateTimeField0.getAsText((-776L), locale0);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.convertText("org/joda/time/tz/data", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for hourOfHalfday is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType0);
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      int[] intArray0 = new int[0];
      int int0 = (-959);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) localTime0, 1, intArray0, (-959));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      offsetDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      offsetDateTimeField0.isLeap(1);
      offsetDateTimeField0.roundFloor((-594L));
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2147483640);
      DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(delegatedDateTimeField0, delegatedDurationField0, dateTimeFieldType0, 2147483640);
      MonthDay monthDay0 = new MonthDay((Object) null, buddhistChronology0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Instant instant0 = Instant.parse("", dateTimeFormatter0);
      Years years0 = Years.yearsBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      MonthDay monthDay1 = monthDay0.plus(years0);
      Locale locale0 = Locale.KOREAN;
      remainderDateTimeField0.getAsShortText((ReadablePartial) monthDay1, 1, locale0);
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      int int0 = 4978125;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0, 4978125);
      dividedDateTimeField0.toString();
      dividedDateTimeField0.roundCeiling((-1861L));
      long long0 = 1366L;
      java.time.Instant instant0 = MockInstant.ofEpochSecond((long) 4978125, (long) 4978125);
      java.time.Instant instant1 = MockInstant.plusMillis(instant0, 0L);
      // Undeclared exception!
      try { 
        MockJapaneseDate.from(instant1);
        fail("Expecting exception: DateTimeException");
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDate from TemporalAccessor: 1970-02-27T14:48:45.004978125Z of type java.time.Instant
         //
         verifyException("java.time.LocalDate", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 2147483349);
      offsetDateTimeField0.roundFloor(1L);
      offsetDateTimeField0.getAsShortText(3599337L, (Locale) null);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, (DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Object object0 = new Object();
      buddhistChronology0.equals(object0);
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.getMinimumValue();
      offsetDateTimeField0.add(1L, 932L);
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology1.weekyears();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType0, 86400);
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology1);
      remainderDateTimeField0.getMaximumValue((ReadablePartial) yearMonth0, (int[]) null);
      // Undeclared exception!
      try { 
        remainderDateTimeField0.add((ReadablePartial) yearMonth0, (-34), (int[]) null, 86399);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 347);
      remainderDateTimeField0.getMaximumValue();
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, unsupportedDurationField0, dateTimeFieldType0, 507);
      dividedDateTimeField0.remainder(0L);
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Locale locale0 = Locale.ITALIAN;
      offsetDateTimeField0.getAsText((ReadablePartial) localTime0, locale0);
      offsetDateTimeField0.add((-2189L), (-2189L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1853);
      DateTimeFieldType dateTimeFieldType0 = offsetDateTimeField0.getType();
      offsetDateTimeField0.roundFloor(1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.minusMonths(0);
      buddhistChronology0.get((ReadablePartial) localDate1, 2354L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.remainder(1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add(1L, 0L);
      Locale locale0 = Locale.ITALIAN;
      zeroIsMaxDateTimeField0.getAsText((ReadablePartial) localDate0, 1, locale0);
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.remainder(1);
      offsetDateTimeField0.roundHalfCeiling(1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(julianChronology0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(strictDateTimeField0, dateTimeFieldType0, 46);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Locale locale0 = Locale.FRENCH;
      offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, locale0);
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.toString();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      buddhistChronology0.add(63072000000L, (-2143L), 429);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfCeiling((-2143L));
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      dateTimeZone0.convertLocalToUTC(0L, true);
      dateTimeZone0.isFixed();
      buddhistChronology0.withZone(dateTimeZone0);
      zeroIsMaxDateTimeField0.getLeapAmount(1);
      zeroIsMaxDateTimeField0.remainder(31557600000L);
      DurationField durationField0 = buddhistChronology0.months();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      ScaledDurationField scaledDurationField0 = null;
      try {
        scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The scalar must not be 0 or 1
         //
         verifyException("org.joda.time.field.ScaledDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(delegatedDateTimeField0, 1);
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(60);
      YearMonth yearMonth2 = yearMonth1.withYear(47);
      offsetDateTimeField0.getMaximumValue((ReadablePartial) yearMonth2);
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.getMaximumValue();
      offsetDateTimeField0.getDifference(292279537, 4980L);
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.getLeapDurationField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType0.getRangeDurationType();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.roundHalfEven(3062L);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      offsetDateTimeField0.getLeapAmount(0L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundFloor(0L);
      zeroIsMaxDateTimeField0.getDifference(0L, 0);
      zeroIsMaxDateTimeField0.getLeapAmount(0L);
      zeroIsMaxDateTimeField0.get(2140L);
      offsetDateTimeField0.getMinimumValue();
      LocalTime.fromMillisOfDay((-12219292800000L));
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Values array must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1920);
      dividedDateTimeField0.getDifference(1920, 0L);
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2170));
      offsetDateTimeField0.isSupported();
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      buddhistChronology0.get((ReadablePeriod) mutablePeriod0, (-22L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDurationField();
      zeroIsMaxDateTimeField0.getDifferenceAsLong(1, 1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, 1);
      dateTimeFieldType0.getField(buddhistChronology0);
      Locale locale0 = Locale.PRC;
      offsetDateTimeField0.getAsText(0L, locale0);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((-3712L), 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for weekyearOfCentury must be in the range [2,61]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 0, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      LocalTime localTime0 = new LocalTime(1, 0, 0, 0, chronology0);
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.getAsShortText((ReadablePartial) localTime0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field 'yearOfCentury' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 0, 1);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      LocalTime localTime0 = new LocalTime(1, 0, 0, 0, lenientChronology0);
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.getAsShortText((ReadablePartial) localTime0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Field 'yearOfCentury' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      int int0 = 2;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, delegatedDurationField0, dateTimeFieldType0);
      remainderDateTimeField0.getRangeDurationField();
      // Undeclared exception!
      try { 
        remainderDateTimeField0.set((long) 2, "99jAa<$'");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"99jAa<$'\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      int int0 = (-450);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, (-450));
      dateTimeFieldType0.getRangeDurationType();
      offsetDateTimeField0.roundHalfFloor((-1940L));
      int int1 = 4978125;
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(1, 1, 0, 1, (-450), 195, 4978125);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -450 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      int int0 = 0;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, 1, 0, 1);
      offsetDateTimeField0.getMinimumValue();
      zeroIsMaxDateTimeField0.getLeapAmount(0L);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set(0L, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for minuteOfHour must be in the range [2,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1452);
      offsetDateTimeField0.getRangeDurationField();
      offsetDateTimeField0.roundHalfEven((-1L));
      offsetDateTimeField0.addWrapField(0L, 1452);
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1624);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      LocalDate localDate0 = new LocalDate((long) 1, dateTimeZone1);
      LocalDate localDate1 = localDate0.withYearOfEra(2123);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1153);
      intArray0[1] = 1624;
      intArray0[2] = 2123;
      intArray0[3] = 3811;
      intArray0[4] = 1624;
      intArray0[5] = 2123;
      intArray0[6] = 1624;
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set((ReadablePartial) localDate1, (-1153), intArray0, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for clockhourOfHalfday is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      dateTimeFieldType0.getDurationType();
      zeroIsMaxDateTimeField0.getMinimumValue(0L);
      zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      dateTimeFieldType0.isSupported(buddhistChronology1);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.GERMANY;
      locale0.getDisplayCountry(locale1);
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology1);
      LocalDateTime localDateTime1 = localDateTime0.plusHours(693);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 693;
      intArray0[6] = 1;
      intArray0[7] = 0;
      intArray0[8] = 693;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set((ReadablePartial) localDateTime1, 693, intArray0, "Fields invalid for add", locale1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"Fields invalid for add\" for clockhourOfHalfday is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DurationField durationField0 = null;
      DateTimeFieldType dateTimeFieldType0 = null;
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, (DurationField) null, (DateTimeFieldType) null, 1943);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      buddhistChronology0.add(1990L, (long) 1900, 1962);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1900);
      offsetDateTimeField0.roundHalfCeiling(21600000L);
      offsetDateTimeField0.toString();
      offsetDateTimeField0.getLeapDurationField();
      offsetDateTimeField0.getMinimumValue(3729790L);
      offsetDateTimeField0.addWrapField((long) 1900, 1900);
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, (-232));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -232
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 32);
      remainderDateTimeField0.remainder(1);
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(11, 0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 0, 53);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      offsetDateTimeField0.getMinimumValue((ReadablePartial) monthDay0);
      offsetDateTimeField0.roundHalfCeiling(2649L);
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1132);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2301);
      remainderDateTimeField0.getDurationField();
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.add((long) 1, 1);
  }
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField((DateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 93;
      try { 
        DateTimeZone.forOffsetHoursMinutes(93, (-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 93
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      Months months0 = Months.THREE;
      buddhistChronology0.get((ReadablePeriod) months0, (long) 3137);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 3137);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      remainderDateTimeField0.getMaximumShortTextLength(locale0);
      remainderDateTimeField0.roundHalfFloor(3137);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(remainderDateTimeField0, 1);
      offsetDateTimeField0.getMaximumValue();
      offsetDateTimeField0.roundHalfEven(7543L);
      remainderDateTimeField0.getAsShortText(2102644804, locale0);
      remainderDateTimeField0.getMaximumTextLength(locale0);
      DateTimeZone.forOffsetMillis(2);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(2699, 4, (-4118), 2102644924, (-4118), 3137, 6479);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 2102644924 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.toString();
      offsetDateTimeField0.roundHalfFloor(1);
      offsetDateTimeField0.remainder(1);
      int[] intArray0 = new int[8];
      intArray0[0] = (-972);
      intArray0[1] = 1;
      buddhistChronology0.equals(dateTimeField0);
      intArray0[2] = 1;
      intArray0[4] = 1002;
      intArray0[5] = 1;
      Integer integer0 = new Integer(1002);
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial((ReadablePartial) null, 1, intArray0, 21);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.getField(buddhistChronology0);
      dateTimeFieldType0.getField(buddhistChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(3062L, dateTimeZone0);
      Partial partial0 = new Partial(localDate0);
      Months months0 = Months.MAX_VALUE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      partial0.withFieldAddWrapped(durationFieldType0, 1);
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DurationField durationField0 = buddhistChronology0.months();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, (DateTimeFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1920);
      dividedDateTimeField0.getMaximumTextLength((Locale) null);
      Integer integer0 = new Integer(1920);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getLeapAmount(1920);
      zeroIsMaxDateTimeField0.add((long) 1, (long) 0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dividedDateTimeField0, 1);
      offsetDateTimeField0.isLeap(30617280288L);
      zeroIsMaxDateTimeField0.getLeapDurationField();
      Hours hours0 = Hours.MAX_VALUE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      ScaledDurationField scaledDurationField0 = null;
      try {
        scaledDurationField0 = new ScaledDurationField((DurationField) null, durationFieldType0, 1247);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      yearMonth0.minusMonths(60);
      yearMonth0.plusMonths(1);
      System.setCurrentTimeMillis((-1L));
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getAsShortText((long) 0);
      Locale locale0 = new Locale("24", "24");
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfEven((-1L));
      zeroIsMaxDateTimeField0.roundCeiling(1);
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.minusMinutes(1);
      LocalTime localTime2 = localTime1.withSecondOfMinute(1);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      zeroIsMaxDateTimeField0.toString();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      localTime2.isSupported(dateTimeFieldType1);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 518;
      intArray0[5] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) localTime2, 1, intArray0, 518);
      zeroIsMaxDateTimeField0.getMinimumValue((long) 1);
      zeroIsMaxDateTimeField0.getName();
      Integer integer0 = new Integer(1);
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType1, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      dateTimeFieldType0.getDurationType();
      zeroIsMaxDateTimeField0.addWrapField(0L, 0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      dateTimeFieldType0.isSupported(buddhistChronology1);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.GERMANY;
      locale0.getDisplayCountry(locale1);
      zeroIsMaxDateTimeField0.getMaximumTextLength(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology1);
      LocalDateTime localDateTime1 = localDateTime0.plusHours(1);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[8] = 1;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set((ReadablePartial) localDateTime1, 2, intArray0, "Fields invalid for add", locale1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"Fields invalid for add\" for clockhourOfHalfday is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(60);
      yearMonth1.withYear(1);
      System.setCurrentTimeMillis(60);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      buddhistChronology0.minuteOfHour();
      int[] intArray0 = new int[7];
      intArray0[0] = 60;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      zeroIsMaxDateTimeField0.roundHalfFloor(0);
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapPartial(yearMonth0, (-2147483613), intArray0, (-2102704419));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      Locale locale0 = Locale.JAPANESE;
      offsetDateTimeField0.getAsText((ReadablePartial) localDate0, 1, locale0);
      intArray0[4] = 3170;
      intArray0[5] = 1;
      YearMonth yearMonth0 = new YearMonth(70L, (Chronology) buddhistChronology0);
      // Undeclared exception!
      yearMonth0.minusMonths((-2102704455));
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(3062L, dateTimeZone0);
      Partial partial0 = new Partial(localDate0);
      Months months0 = Months.MAX_VALUE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      // Undeclared exception!
      partial0.withFieldAddWrapped(durationFieldType0, (-2102744404));
  }
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2147483597));
      dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.roundHalfEven((-2147483597));
      Locale locale0 = Locale.GERMAN;
      offsetDateTimeField0.getAsText(3159, locale0);
      offsetDateTimeField0.getMinimumValue((long) (-2147483597));
      dateTimeFieldType0.getField(buddhistChronology0);
      offsetDateTimeField0.getDifferenceAsLong(12L, (-1106L));
      offsetDateTimeField0.getDifference(531L, (-1106L));
      dateTimeFieldType0.getRangeDurationType();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(locale0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.util.Locale
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1900);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      buddhistChronology0.add(1990L, (long) 1900, 1962);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1900);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = locale0.stripExtensions();
      offsetDateTimeField0.getMaximumShortTextLength(locale1);
      offsetDateTimeField0.roundHalfCeiling(21600000L);
      offsetDateTimeField0.toString();
      Integer integer0 = new Integer(1962);
      offsetDateTimeField0.addWrapField((long) 1900, 1900);
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, (-232));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -232
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.roundHalfEven(3062L);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      offsetDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      offsetDateTimeField0.getLeapAmount(0L);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifferenceAsLong(7L, 3062L);
      zeroIsMaxDateTimeField0.roundFloor(0L);
      zeroIsMaxDateTimeField0.getDifference(3062L, 0);
      zeroIsMaxDateTimeField0.get(2140L);
      offsetDateTimeField0.getMinimumValue();
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-12219292800000L));
      LocalTime.fromMillisOfDay((-12219292800000L), (Chronology) buddhistChronology0);
      int[] intArray0 = null;
      PeriodType.dayTime();
      int int0 = 0;
      localTime0.toDateTimeToday();
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((ReadablePartial) localDateTime0, 0, (int[]) null, 10);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrictDateTimeField.getInstance((DateTimeField) null);
      DateTimeFieldType.secondOfMinute();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(597);
      ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
      iSOChronology0.withZone(dateTimeZone0);
      iSOChronology0.withUTC();
      try { 
        DateTimeZone.forOffsetHoursMinutes((-685), 5);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -685
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      Locale locale0 = Locale.KOREA;
      DateTimeZone.getProvider();
      Locale.getISOLanguages();
      LocalTime.now();
      int[] intArray0 = new int[6];
      intArray0[1] = 1;
      intArray0[3] = 15356267;
      intArray0[4] = 15356267;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.addWrapField((long) 15356267, 1213);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, 15356267);
      // Undeclared exception!
      try { 
        remainderDateTimeField0.set(1320L, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeZone.getDefault();
      DateTimeFieldType.dayOfMonth();
      Locale locale0 = Locale.ITALY;
      DateTimeZone.getProvider();
      Locale.getISOLanguages();
      LocalTime.now();
      int[] intArray0 = new int[6];
      intArray0[4] = 15356250;
  }
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.hourOfDay();
      DateTimeFieldType.yearOfEra();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      // Undeclared exception!
      yearMonth0.minusMonths((-2102704683));
  }
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeZone dateTimeZone0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DurationField durationField0 = buddhistChronology0.halfdays();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfEven(1);
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, durationField0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The effective range must be at least 2
         //
         verifyException("org.joda.time.field.PreciseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology1.weekyears();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      int int0 = 86400;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(delegatedDateTimeField0, durationField0, dateTimeFieldType0, 86400);
      remainderDateTimeField0.getAsText((long) 86400);
      remainderDateTimeField0.roundHalfCeiling(86400);
      Locale locale0 = Locale.CHINESE;
      Locale.getISOLanguages();
      remainderDateTimeField0.getMaximumShortTextLength(locale0);
      MonthDay monthDay0 = null;
      try {
        monthDay0 = new MonthDay(dateTimeFieldType0, buddhistChronology1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Object object0 = new Object();
      iSOChronology0.equals(object0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, dateTimeField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, 1);
      offsetDateTimeField0.getMinimumValue();
      Locale locale0 = Locale.CANADA_FRENCH;
      skipUndoDateTimeField0.getAsShortText(2591, locale0);
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1260);
      dividedDateTimeField0.add(0L, 1);
      LocalDate localDate0 = new LocalDate((-2554L));
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1260;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1411;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(localDate0, 1, intArray0, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
