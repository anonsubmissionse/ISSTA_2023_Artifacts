 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Period period0 = Period.hours(2277);
      period0.hashCode();
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Period period0 = new Period((-822), (-822), 1903, (-822));
      Period period1 = period0.minusWeeks((-822));
      boolean boolean0 = period0.equals(period1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Period period0 = new Period((-822), (-822), 1903, (-822));
      Period period1 = period0.minusWeeks((-822));
      boolean boolean0 = period0.equals(period1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period1 = period0.withPeriodType(periodType0);
      boolean boolean0 = period1.equals(period0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Period period0 = new Period(duration0, (ReadableInstant) null);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      boolean boolean0 = period0.isSupported(durationFieldType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((Chronology) gregorianChronology0);
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Duration duration0 = period0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period1 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      DurationFieldType durationFieldType0 = period1.getFieldType(0);
      boolean boolean0 = period0.isSupported(durationFieldType0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Period period0 = Period.months(3213);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = period0.indexOf(durationFieldType0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Period period0 = new Period(0L, (-1170L));
      int int0 = period0.indexOf((DurationFieldType) null);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 614, 614, 614, 0, 0, 17);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = new Period(604800000L, 604800000L);
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      // Undeclared exception!
      try { 
        period0.toString(periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2904L, periodType0);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn((-816)).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        mutablePeriod0.toString(periodFormatter0);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3959L), periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        mutablePeriod0.getFieldType(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2150), 304, 304, (-2150));
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      Period period0 = mutablePeriod0.toPeriod();
      int[] intArray0 = period0.getValues();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1712L);
      Instant instant0 = Instant.ofEpochMilli((-641L));
      Period period0 = duration0.toPeriodTo((ReadableInstant) instant0);
      int int0 = period0.size();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 27, 27, 27);
      String string0 = mutablePeriod0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(30962844000000L, 30962844000000L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      int int0 = mutablePeriod0.indexOf(durationFieldType0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Period period0 = Period.months(0);
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(164).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(164).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("i6K}RH", periodFormatter0);
      String string0 = mutablePeriod0.toString(periodFormatter0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Period period0 = new Period(16, 16, 16, 16, 16, 16, 16, 16);
      Period period1 = period0.withMonths(16);
      boolean boolean0 = period1.equals(period0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Period period0 = Period.ZERO;
      Days days0 = Days.ZERO;
      boolean boolean0 = period0.equals(days0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Period period0 = Period.ZERO;
      Object object0 = new Object();
      boolean boolean0 = period0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Period period0 = new Period(16, 16, 16, 16, 16, 16, 16, 16);
      boolean boolean0 = period0.equals(period0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Period period0 = new Period((-38), (-38), (-38), (-38));
      Period period1 = period0.minusMillis((-38));
      boolean boolean0 = period1.equals(period0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Period period0 = new Period((-38), (-38), (-38), (-38));
      Period period1 = period0.minusMillis((-38));
      boolean boolean0 = period1.equals(period0);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(167, 167, 167, 167, 167, 167, 167, 167);
      DurationFieldType[] durationFieldTypeArray0 = mutablePeriod0.getFieldTypes();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      String string0 = mutablePeriod0.toString((PeriodFormatter) null);
      ;
}
