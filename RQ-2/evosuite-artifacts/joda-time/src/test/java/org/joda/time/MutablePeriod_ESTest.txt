 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      mutablePeriod0.setValue(0, 0);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 0, 1, 3600000, (-184), 3600000, (-847), 80);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      mutablePeriod0.set(durationFieldType0, 80);
      assertNotNull(durationFieldType0.toString());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      mutablePeriod0.add(durationFieldType0, 1838);
      assertNotNull(durationFieldType0.toString());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      mutablePeriod0.clear();
      int int0 = mutablePeriod0.getYears();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      mutablePeriod0.clear();
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-630), (-630), (-1), (-630), (-1420), (-1420), (-1), 157, periodType0);
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      mutablePeriod0.clear();
      int int0 = mutablePeriod0.getSeconds();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, 0, (-512), 2095, 0);
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, 0, 2, 2, 0, (PeriodType) null);
      int int0 = mutablePeriod0.getMonths();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      mutablePeriod0.clear();
      mutablePeriod0.addMonths((-1208));
      int int0 = mutablePeriod0.getMonths();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      int int0 = mutablePeriod0.getMinutes();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1643), 0, (-1643), (-1643));
      mutablePeriod0.setMinutes(1716);
      int int0 = mutablePeriod0.getMinutes();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), 0, 2380, (-1010), 0, 0, 0, 0);
      int int0 = mutablePeriod0.getMillis();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 0, 1, 3600000, (-184), 3600000, (-847), 80);
      int int0 = mutablePeriod0.getMillis();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 0, 1, 3600000, (-184), 3600000, (-847), 80);
      int int0 = mutablePeriod0.getHours();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 0, 1, 0, (-154), 0, (-847), 80);
      int int0 = mutablePeriod0.getDays();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 0, 1, 3600000, (-184), 3600000, (-847), 80);
      mutablePeriod0.setDays((-1));
      int int0 = mutablePeriod0.getDays();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("F!guGgF7z=*HxE", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("2K{!qSjh0SOQ_D`:B", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2K{!qSjh0SOQ_D`:B\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(80, 80, 80, 80, (-896), 80, (-896), (-896));
      PeriodType.DAY_INDEX = (-896);
      // Undeclared exception!
      try { 
        mutablePeriod0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -896
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.millis();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, (Chronology) null);
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("{O]A'@", (DurationFieldType[]) null, intArray0);
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(0, 0, (-2202), 65533, (-1043), 0, 65533, 2615625, periodType0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(2065, 2065, 0, 0, 1952, 1, 1455, 1952, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(12740625, 12740625, 0, 0, 12740625, 12740625, 12740625, 0);
      int int0 = mutablePeriod0.getHours();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      Object object0 = mutablePeriod0.clone();
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("R7$ggZw%,", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MutablePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      int int0 = mutablePeriod0.getYears();
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(12740625, 12740625, 0, 0, 0, 12740625, 0, 0);
      Duration duration0 = Duration.standardHours(12740625);
      mutablePeriod0.setPeriod((ReadableDuration) duration0, (Chronology) null);
      assertEquals(0, duration0.getStandardMinutes());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1643), 0, (-1643), (-1643));
      int int0 = mutablePeriod0.getMillis();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, (-3709), (-195), 0, (-2281));
      mutablePeriod0.setPeriod((long) 2, (Chronology) null);
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, 0, (-512), 2095, 0);
      int int0 = mutablePeriod0.getMinutes();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), 0, 2380, (-1010), 0, 0, 0, 0);
      mutablePeriod0.setPeriod(0, 0, (-2577), (-1010), 0, 2380, 0, 0);
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(80, 80, 80, 80, (-896), 80, (-896), (-896));
      int int0 = mutablePeriod0.getDays();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      int int0 = mutablePeriod0.getMonths();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1643), 0, (-1643), (-1643));
      Days days0 = Days.MIN_VALUE;
      Duration duration0 = days0.toStandardDuration();
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(0, duration0.getStandardDays());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      mutablePeriod0.setPeriod((ReadableInstant) null, (ReadableInstant) null);
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      mutablePeriod0.addHours(0);
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.TWO;
      PeriodType periodType0 = months0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1429L), (-1772L), periodType0, (Chronology) null);
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Duration duration0 = Duration.standardSeconds((-2272L));
      Days days0 = Days.FIVE;
      Minutes minutes0 = days0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, duration0, periodType0);
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod((Object) integer0, periodType0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      mutablePeriod0.clear();
      int int0 = mutablePeriod0.getHours();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      mutablePeriod0.add(585L, (Chronology) null);
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1458L, (PeriodType) null);
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L, (Chronology) null);
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, 3382, 3382, 3382, 3382);
      mutablePeriod0.setHours(1);
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 0, 1, 3600000, (-184), 3600000, (-847), 80);
      mutablePeriod0.setMonths((-184));
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(352831696, 4, 2260, 4);
      mutablePeriod0.add((-243L));
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 784, 784, 3600000, (-184), 3600000, (-1), 80);
      Months months0 = Months.MIN_VALUE;
      mutablePeriod0.add((ReadablePeriod) months0);
      assertEquals(0, months0.getMonths());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      mutablePeriod0.addSeconds(1);
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      // Undeclared exception!
      try { 
        mutablePeriod0.setValue(3382, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3382
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 784, 784, 3600000, (-184), 3600000, (-1), 80);
      mutablePeriod0.addMillis((-225));
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      mutablePeriod0.setYears((-896));
      int int0 = mutablePeriod0.getYears();
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 0, 1, 3600000, (-184), 3600000, (-847), 80);
      mutablePeriod0.setSeconds(1297);
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 0, 1, 3600000, (-184), 3600000, (-847), 80);
      mutablePeriod0.setWeeks(0);
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      mutablePeriod0.addYears(178);
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, 0, 2, 2, 0, (PeriodType) null);
      mutablePeriod0.setPeriod((long) 0, (long) 0);
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L), (-431L));
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        mutablePeriod0.mergePeriod(seconds0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1643), 0, (-1643), (-1643));
      mutablePeriod0.setPeriod(1644L, 2629800000L, (Chronology) null);
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((PeriodType) null);
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      mutablePeriod0.mergePeriod(mutablePeriod0);
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      mutablePeriod0.addWeeks(1);
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2584L), periodType0, (Chronology) null);
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (-773L), (Chronology) null);
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("m`");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"m`\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Duration duration0 = Duration.millis(1757L);
      Instant instant0 = Instant.now();
      Days days0 = duration0.toStandardDays();
      PeriodType periodType0 = days0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, instant0, periodType0);
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Days days0 = Days.SIX;
      Duration duration0 = days0.toStandardDuration();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, (ReadableInstant) null);
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 0, 1, 3600000, (-184), 3600000, (-847), 80);
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      // Undeclared exception!
      try { 
        mutablePeriod0.set(durationFieldType0, 80);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'eras'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-2053), 0, 0, (-3709), (-195), 0, (-2281));
      mutablePeriod0.add((-2053), 0, 0, (-2053), 0, (-3709), 0, (-2281));
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Days days0 = Days.FOUR;
      PeriodType periodType0 = days0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, periodType0);
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-2053), 0, 0, (-3709), (-195), 0, (-2281));
      mutablePeriod0.setPeriod(553L);
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1154L), (-1154L), periodType0);
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(784, 0, 1, 3600000, (-184), 3600000, (-847), 80);
      mutablePeriod0.addMinutes(0);
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      mutablePeriod0.addDays(0);
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(26607895200000L);
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3382, 3382, 3382, 3382, (-896), 3382, (-896), (-896));
      mutablePeriod0.setPeriod((ReadablePeriod) mutablePeriod0);
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(2710L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1643), 0, (-1643), (-1643));
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
      try { 
        mutablePeriod0.add(durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'halfdays'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Object object0 = new Object();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-2053), 0, 0, (-3709), (-195), 0, (-2281));
      mutablePeriod0.setMillis((-195));
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1643), 0, (-1643), (-1643));
      Duration duration0 = Duration.standardMinutes(0L);
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(0, duration0.getStandardSeconds());
}
