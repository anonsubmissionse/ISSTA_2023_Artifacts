/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:31:07 GMT 2022
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Partial;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.ISOYearOfEraDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ISOYearOfEraDateTimeField_ESTest extends ISOYearOfEraDateTimeField_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.set((-62135596800001L), 1072);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.set(0L, 1970);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.set((-2303L), 1970);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.roundFloor(62035200000L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.roundFloor((-347L));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.roundCeiling(43200000L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.roundCeiling((-31536000000L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.remainder(1103L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.getDifferenceAsLong(19218211200609L, 609L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.getDifferenceAsLong((-62135596802575L), 63072000000L);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      int int0 = iSOYearOfEraDateTimeField0.getDifference(1483228800000L, 0L);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      int int0 = iSOYearOfEraDateTimeField0.getDifference((-31535999209L), 10000L);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      int int0 = iSOYearOfEraDateTimeField0.get((-62167219199505L));
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      int[] intArray0 = new int[6];
      int[] intArray1 = iSOYearOfEraDateTimeField0.addWrapField((ReadablePartial) yearMonth0, 1, intArray0, 32);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.addWrapField(0L, 0);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.addWrapField(0L, 153692453);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.add(0L, 0L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.add((long) (-1), 0L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.add(0L, 0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.add((-1550L), 1072);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      // Undeclared exception!
      try { 
        iSOYearOfEraDateTimeField0.set((-953L), (-1561));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -1561 for yearOfEra must be in the range [0,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        iSOYearOfEraDateTimeField0.addWrapField((ReadablePartial) null, 1, intArray0, 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      // Undeclared exception!
      try { 
        iSOYearOfEraDateTimeField0.add((long) 0, (long) 292278993);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 292280963 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      // Undeclared exception!
      try { 
        iSOYearOfEraDateTimeField0.add(1109L, 31535999433L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 31535999433
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      // Undeclared exception!
      try { 
        iSOYearOfEraDateTimeField0.add((long) 292278993, 292278993);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 292280963 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.roundFloor(2406L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      int int0 = iSOYearOfEraDateTimeField0.getMaximumValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.roundCeiling((-20L));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      int int0 = iSOYearOfEraDateTimeField0.get((-9223372036854775808L));
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      int int0 = iSOYearOfEraDateTimeField0.get(5191L);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.remainder(30988915200000L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      int int0 = iSOYearOfEraDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.set((-9223372036854775808L), 0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.add(780L, (long) 0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.add((-62155408375808L), 0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.getDifferenceAsLong((-953L), 100L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      int int0 = iSOYearOfEraDateTimeField0.getDifference(292278993, 292278993);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      long long0 = iSOYearOfEraDateTimeField0.addWrapField((-953L), (-1561));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      DurationField durationField0 = iSOYearOfEraDateTimeField0.getRangeDurationField();
      assertFalse(durationField0.isPrecise());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 2846);
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        iSOYearOfEraDateTimeField0.addWrapField((ReadablePartial) partial0, 2846, intArray0, 2846);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2846
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
}
