 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Interval interval0 = new Interval(minutes0, (ReadableInstant) null);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-835));
      Interval interval0 = null;
      try {
        interval0 = new Interval((ReadableInstant) null, minutes0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(0, interval0.getStartMillis());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, instant0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, instant0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(171L);
      Interval interval0 = duration0.toIntervalFrom((ReadableInstant) null);
      assertEquals(0, interval0.getStartMillis());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      assertEquals(0, interval0.getStartMillis());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-1430L));
      Interval interval0 = null;
      try {
        interval0 = new Interval(duration0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      assertEquals(0, mutableInterval0.getStartMillis());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      assertEquals(0, mutableInterval0.getEndMillis());
}
