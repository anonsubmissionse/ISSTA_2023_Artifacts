/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:15:04 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minutes_ESTest extends Minutes_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      Minutes minutes1 = minutes0.multipliedBy((-3016));
      boolean boolean0 = minutes0.isLessThan(minutes1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      Minutes minutes1 = minutes0.multipliedBy((-3016));
      boolean boolean0 = minutes0.isLessThan(minutes1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      Minutes minutes1 = minutes0.multipliedBy((-3016));
      boolean boolean0 = minutes0.isLessThan(minutes1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      boolean boolean0 = minutes0.isLessThan((Minutes) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2624));
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = Minutes.MAX_VALUE;
      boolean boolean0 = minutes0.isGreaterThan(minutes1);
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2624));
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = Minutes.MAX_VALUE;
      boolean boolean0 = minutes0.isGreaterThan(minutes1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      boolean boolean0 = minutes0.isGreaterThan((Minutes) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Weeks weeks0 = minutes0.toStandardWeeks();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      Weeks weeks0 = minutes0.MIN_VALUE.toStandardWeeks();
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      Weeks weeks0 = minutes0.MIN_VALUE.toStandardWeeks();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.minutesIn((ReadableInterval) null);
      Seconds seconds0 = minutes0.toStandardSeconds();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-791));
      Seconds seconds0 = minutes0.toStandardSeconds();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Hours hours0 = minutes0.MIN_VALUE.toStandardHours();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      assertEquals(1, duration0.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Minutes minutes0 = Minutes.minutesIn((ReadableInterval) null);
      Duration duration0 = minutes0.MIN_VALUE.toStandardDuration();
      assertEquals(0, duration0.getStandardHours());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      Duration duration0 = minutes0.toStandardDuration();
      assertEquals(0, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Minutes minutes1 = minutes0.negated();
      Duration duration0 = minutes1.toStandardDuration();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Days days0 = minutes0.MAX_VALUE.toStandardDays();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      Minutes minutes1 = minutes0.multipliedBy((-3016));
      Days days1 = minutes1.toStandardDays();
      assertEquals(0, days1.getDays());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      Minutes minutes1 = minutes0.multipliedBy((-3016));
      Days days1 = minutes1.toStandardDays();
      assertEquals(1, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2624));
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = minutes0.MAX_VALUE.plus((-4026));
      assertEquals(0, minutes1.getMinutes());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Minutes minutes1 = minutes0.negated();
      minutes1.negated();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Minutes minutes1 = minutes0.negated();
      Minutes minutes2 = minutes1.multipliedBy((-1193));
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Minutes minutes1 = minutes0.negated();
      Minutes minutes2 = minutes1.multipliedBy((-1193));
      assertEquals(1, minutes2.getMinutes());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      Minutes minutes1 = minutes0.multipliedBy((-3016));
      Minutes minutes2 = minutes0.minus(minutes1);
      assertEquals(1, minutes2.getMinutes());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = Minutes.ZERO;
      Minutes minutes2 = minutes1.minus(minutes0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      Minutes minutes1 = minutes0.minus(0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = minutes0.MIN_VALUE.plus(minutes0);
      Minutes minutes2 = minutes1.minus(0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = minutes0.MIN_VALUE.plus(minutes0);
      Minutes minutes2 = minutes1.minus(0);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      int int0 = minutes0.getMinutes();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      int int0 = minutes0.getMinutes();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Minutes minutes1 = minutes0.dividedBy(1);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        minutes0.MIN_VALUE.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 60
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        minutes0.MAX_VALUE.plus(minutes0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        minutes0.negated();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Days days0 = Days.ONE;
      Minutes minutes0 = days0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.THREE.multipliedBy(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 3 * 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      // Undeclared exception!
      try { 
        minutes0.MIN_VALUE.minus(minutes0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -3
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      // Undeclared exception!
      try { 
        minutes0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Minutes", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      Minutes minutes1 = minutes0.ZERO.plus(0);
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      Minutes minutes1 = minutes0.ZERO.plus(0);
      assertEquals(0, minutes1.getMinutes());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(2);
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3);
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      // Undeclared exception!
      try { 
        minutes0.MAX_VALUE.plus(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(1);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = days0.toStandardMinutes();
      minutes0.getFieldType();
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2624));
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = minutes0.plus((-2624));
      boolean boolean0 = minutes1.isLessThan(minutes0);
      assertEquals(0, minutes1.getMinutes());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2624));
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = minutes0.plus((-2624));
      boolean boolean0 = minutes1.isLessThan(minutes0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      boolean boolean0 = minutes0.isLessThan((Minutes) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      boolean boolean0 = minutes0.isLessThan((Minutes) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2624));
      Minutes minutes0 = seconds0.toStandardMinutes();
      boolean boolean0 = minutes0.isLessThan(minutes0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2624));
      Minutes minutes0 = seconds0.toStandardMinutes();
      boolean boolean0 = minutes0.isLessThan(minutes0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2624));
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = minutes0.plus((-2624));
      boolean boolean0 = minutes0.isGreaterThan(minutes1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2624));
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = minutes0.plus((-2624));
      boolean boolean0 = minutes0.isGreaterThan(minutes1);
      assertEquals(0, minutes1.getMinutes());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      boolean boolean0 = minutes0.isGreaterThan((Minutes) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Duration duration0 = Duration.millis((-516L));
      Minutes minutes0 = duration0.toStandardMinutes();
      boolean boolean0 = minutes0.isGreaterThan((Minutes) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Duration duration0 = Duration.millis((-516L));
      Minutes minutes0 = duration0.toStandardMinutes();
      boolean boolean0 = minutes0.isGreaterThan((Minutes) null);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2624));
      Minutes minutes0 = seconds0.toStandardMinutes();
      boolean boolean0 = minutes0.isGreaterThan(minutes0);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2624));
      Minutes minutes0 = seconds0.toStandardMinutes();
      boolean boolean0 = minutes0.isGreaterThan(minutes0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = minutes0.dividedBy(1);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1280));
      Minutes minutes1 = minutes0.THREE.dividedBy(5062500);
      assertEquals(0, minutes1.getMinutes());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1280));
      Minutes minutes1 = minutes0.THREE.dividedBy(5062500);
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Minutes minutes0 = Minutes.minutesIn((ReadableInterval) null);
      Minutes minutes1 = minutes0.ZERO.minus((Minutes) null);
      assertEquals(0, minutes1.getMinutes());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Minutes minutes1 = minutes0.plus((Minutes) null);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Minutes minutes0 = Minutes.minutesIn((ReadableInterval) null);
      Minutes minutes1 = minutes0.plus(minutes0);
      assertEquals(0, minutes1.getMinutes());
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      // Undeclared exception!
      try { 
        minutes0.MIN_VALUE.minus(3082);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -3082
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.parseMinutes("t");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"t\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(Integer.MAX_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Seconds seconds0 = minutes0.THREE.toStandardSeconds();
      Minutes minutes1 = seconds0.toStandardMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Seconds seconds0 = minutes0.THREE.toStandardSeconds();
      Minutes minutes1 = seconds0.toStandardMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(Integer.MIN_VALUE);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1280));
      Minutes minutes1 = minutes0.multipliedBy(0);
      Minutes minutes2 = minutes1.negated();
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1280));
      Minutes minutes1 = minutes0.multipliedBy(0);
      Minutes minutes2 = minutes1.negated();
      assertEquals(0, minutes2.getMinutes());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = minutes0.minus(1);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Duration duration0 = hours0.toStandardDuration();
      Minutes minutes0 = duration0.toStandardMinutes();
      Hours hours1 = minutes0.TWO.toStandardHours();
      assertEquals(1, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Duration duration0 = hours0.toStandardDuration();
      Minutes minutes0 = duration0.toStandardMinutes();
      Hours hours1 = minutes0.TWO.toStandardHours();
      assertEquals(0, hours1.getHours());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Duration duration0 = hours0.toStandardDuration();
      Minutes minutes0 = duration0.toStandardMinutes();
      String string0 = minutes0.MAX_VALUE.toString();
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Duration duration0 = hours0.toStandardDuration();
      Minutes minutes0 = duration0.toStandardMinutes();
      String string0 = minutes0.MAX_VALUE.toString();
      ;
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      Days days0 = hours0.toStandardDays();
      // Undeclared exception!
      try { 
        Minutes.standardMinutesIn(days0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -128849018400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Instant instant0 = Instant.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-830));
      int int0 = minutes0.getMinutes();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Duration duration0 = hours0.toStandardDuration();
      Minutes minutes0 = duration0.toStandardMinutes();
      minutes0.THREE.getPeriodType();
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Days days0 = minutes0.toStandardDays();
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Weeks weeks0 = minutes0.ONE.toStandardWeeks();
      ;
}
}
