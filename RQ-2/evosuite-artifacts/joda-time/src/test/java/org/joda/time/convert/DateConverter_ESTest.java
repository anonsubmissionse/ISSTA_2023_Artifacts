/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:32:41 GMT 2022
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.PeriodType;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.convert.DateConverter;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateConverter_ESTest extends DateConverter_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = LocalDateTime.parse("", dateTimeFormatter0);
      Date date0 = localDateTime0.toDate();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      long long0 = dateConverter0.getInstantMillis(date0, strictChronology0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      MockDate mockDate0 = new MockDate();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      long long0 = dateConverter0.getInstantMillis(mockDate0, buddhistChronology0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      long long0 = dateConverter0.getInstantMillis(date0, ethiopicChronology0);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        dateConverter0.getInstantMillis((Object) null, julianChronology0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.DateConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      Class<?> class0 = dateConverter0.getSupportedType();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateConverter dateConverter0 = DateConverter.INSTANCE;
      PeriodType periodType0 = dateConverter0.getPeriodType("Converter[java.util.Date]");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      Chronology chronology0 = dateConverter0.getChronology((Object) periodType0, dateTimeZone0);
      // Undeclared exception!
      try { 
        dateConverter0.getInstantMillis(periodType0, chronology0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.joda.time.PeriodType cannot be cast to java.util.Date
         //
         verifyException("org.joda.time.convert.DateConverter", e);
      }
  }
}
