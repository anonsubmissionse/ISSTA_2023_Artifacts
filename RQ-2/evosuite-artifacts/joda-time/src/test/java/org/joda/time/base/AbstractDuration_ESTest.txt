 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Duration duration0 = minutes0.toStandardDuration();
      String string0 = duration0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Duration duration0 = new Duration(0L, 2726L);
      String string0 = duration0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Duration duration1 = Duration.standardSeconds((-1021L));
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      boolean boolean0 = duration2.equals(duration0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Duration duration1 = Duration.standardSeconds((-1021L));
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      boolean boolean0 = duration2.equals(duration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Duration duration0 = new Duration(2037L, 2037L);
      Duration duration1 = Duration.standardHours(229L);
      boolean boolean0 = duration1.isShorterThan(duration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Duration duration0 = new Duration((-1146L));
      boolean boolean0 = duration0.isLongerThan((ReadableDuration) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-6132L));
      Duration duration1 = Duration.standardMinutes((-6132L));
      boolean boolean0 = duration0.isEqual(duration1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-31L));
      Duration duration1 = duration0.toDuration();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      Duration duration0 = seconds0.toStandardDuration();
      Duration duration1 = duration0.toDuration();
      assertEquals(0, duration1.getStandardHours());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1161L);
      Duration duration1 = new Duration((-1434L));
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      Duration duration3 = duration2.toDuration();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      boolean boolean0 = duration0.isEqual(duration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.standardHours(918518400000L);
      // Undeclared exception!
      try { 
        duration0.toPeriod();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 918518400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = new Duration(451L);
      // Undeclared exception!
      try { 
        duration0.compareTo((ReadableDuration) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractDuration", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period((-31L), (Chronology) buddhistChronology0);
      Duration duration0 = period0.toStandardDuration();
      Duration duration1 = Duration.standardDays((-31L));
      int int0 = duration0.compareTo((ReadableDuration) duration1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-223L));
      Duration duration1 = new Duration(0L, 2726L);
      int int0 = duration0.compareTo((ReadableDuration) duration1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period((-31L), (Chronology) buddhistChronology0);
      Duration duration0 = period0.toStandardDuration();
      int int0 = duration0.compareTo((ReadableDuration) duration0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period((-31L), (Chronology) buddhistChronology0);
      Duration duration0 = period0.toStandardDuration();
      String string0 = duration0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = new Duration(2037L, 2037L);
      String string0 = duration0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = new Duration((-10L));
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      Duration duration1 = duration0.dividedBy((-924L), roundingMode0);
      boolean boolean0 = duration0.equals(duration1);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = new Duration((-10L));
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      Duration duration1 = duration0.dividedBy((-924L), roundingMode0);
      boolean boolean0 = duration0.equals(duration1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = new Duration((-20L), (-20L));
      Duration duration1 = duration0.multipliedBy((-20L));
      boolean boolean0 = duration0.equals(duration1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = new Duration((-20L), (-20L));
      boolean boolean0 = duration0.equals(duration0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = new Duration(2037L, 2037L);
      boolean boolean0 = duration0.equals("PT0S");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withDurationAdded((long) 2174, 2174);
      boolean boolean0 = duration0.isShorterThan(duration1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = duration0.isShorterThan((ReadableDuration) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      boolean boolean0 = duration0.isLongerThan((ReadableDuration) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2059L));
      boolean boolean0 = duration0.isEqual((ReadableDuration) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-586L));
      Duration duration1 = duration0.plus((-586L));
      boolean boolean0 = duration0.isLongerThan(duration1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = new Duration(451L);
      Duration duration1 = Duration.standardSeconds(3);
      boolean boolean0 = duration0.isEqual(duration1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-586L));
      Period period0 = duration0.toPeriod();
      assertNotNull(period0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Duration duration0 = new Duration((-10L));
      duration0.hashCode();
  }
