 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte) (-96);
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-21L));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 7L);
      int int0 = 25;
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 147L, 25);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter0, (long) (byte)0, (int) (byte)0);
      StringWriter stringWriter1 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, Integer.MIN_VALUE, (int) (byte)0);
      String string0 = "";
      MockFile mockFile0 = new MockFile((File) null, "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, (-1265), (-1265));
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[6] = (byte)10;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-21L));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter1, 7L);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 147L, 25);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, (long) (byte)10, (int) (byte)10);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, Integer.MIN_VALUE);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, (long) Integer.MIN_VALUE, 0);
      FormatUtils.calculateDigitCount(25);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FormatUtils.createErrorMessage("", 22);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Invalid format: \"\" is too short");
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 1L, (-1));
        fail("Expecting exception: ReadOnlyBufferException");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FormatUtils.calculateDigitCount(9223372036854775800L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 19);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2265), 3597);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2115431679), 2758);
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, 9223372036854775800L, 19);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 20);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      stringBuffer0.chars();
      FormatUtils.appendPaddedInteger(stringBuffer0, 22, 3597);
      objectOutputStream0.writeShort(3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, (-9223372036854775808L), 10000);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 20, 20);
      objectOutputStream0.flush();
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, (-9223372036854775798L));
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), 20);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.appendPaddedInteger((Appendable) pipedWriter0, (-96L), 3597);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FormatUtils.calculateDigitCount((-6045L));
      FormatUtils.calculateDigitCount((-9223372036854775791L));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, Integer.MIN_VALUE);
      charArrayWriter0.append('C');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Y');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (-9223372036854775791L));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 25L, (-1));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, (long) Integer.MIN_VALUE, 51);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (long) 20, 51);
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter1, Integer.MIN_VALUE, 1101);
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charset0);
      FormatUtils.appendUnpaddedInteger((Appendable) outputStreamWriter0, 1764L);
      FormatUtils.writePaddedInteger((Writer) outputStreamWriter0, 41, 41);
      FormatUtils.appendPaddedInteger((Appendable) outputStreamWriter0, 1764L, 10000);
      FormatUtils.appendUnpaddedInteger((Appendable) outputStreamWriter0, (-125));
      StringBuffer stringBuffer0 = new StringBuffer("9X]|*r O~xNs##9cm");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)25;
      byteArray0[4] = (byte)4;
      bufferedOutputStream0.write(byteArray0);
      stringBuffer0.append((float) 10000);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1054L), 4);
      FormatUtils.appendUnpaddedInteger((Appendable) outputStreamWriter0, 4);
      FormatUtils.writeUnpaddedInteger((Writer) outputStreamWriter0, (long) 41);
      FormatUtils.writePaddedInteger((Writer) outputStreamWriter0, (long) 4, 34);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (long) 41, 26);
      FormatUtils.calculateDigitCount(34);
      FormatUtils.createErrorMessage("9X]|*r O~xNs##9cm", (-18));
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) pipedWriter0, 35);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.appendPaddedInteger((Appendable) pipedWriter0, (-1336), (-1336));
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FormatUtils.calculateDigitCount((-6045L));
      FormatUtils.calculateDigitCount(1L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, Integer.MIN_VALUE);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Y');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (-9223372036854775808L));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (long) Integer.MIN_VALUE, (-1));
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 20);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      stringBuffer0.chars();
      FormatUtils.appendPaddedInteger(stringBuffer0, 22, 3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, (-9223372036854775808L), 10000);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 20, 20);
      objectOutputStream0.flush();
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, (-9223372036854775798L));
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), 20);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('P');
      StringBuffer stringBuffer1 = stringWriter1.getBuffer();
      // Undeclared exception!
      FormatUtils.appendPaddedInteger(stringBuffer1, 5, 10000);
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = 9223372036854775802L;
      FormatUtils.calculateDigitCount(9223372036854775802L);
      String string0 = "'<L73LNs) },";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 19);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      stringBuffer0.chars();
      FormatUtils.appendPaddedInteger(stringBuffer0, 22, 3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, 9223372036854775802L, 10000);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("'<L73LNs) },", "Invalid format: \"'<L73LNs) },\" is too short");
        fail("Expecting exception: UnsupportedEncodingException");
      } catch(Throwable e) {
         //
         // Invalid format: \"'<L73LNs) },\" is too short
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",k/(Ozh3qPO9UeLw&hL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ",k/(Ozh3qPO9UeLw&hL");
      printWriter0.print((Object) ",k/(Ozh3qPO9UeLw&hL");
      printWriter0.checkError();
      FormatUtils.writePaddedInteger((Writer) printWriter0, 2126221443, (-575));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 394);
      FormatUtils.createErrorMessage(",k/(Ozh3qPO9UeLw&hL", 1267);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 75L, (-575));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-575));
      FormatUtils.appendUnpaddedInteger((Appendable) printWriter0, Integer.MIN_VALUE);
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 9223372036854775803L, 19);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 3105;
      CharBuffer charBuffer0 = CharBuffer.allocate(3105);
      charBuffer0.flip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 3105, 3105);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, (-441L), 3105);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FormatUtils.calculateDigitCount((-6045L));
      FormatUtils.calculateDigitCount(1L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, Integer.MIN_VALUE);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Y');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (-9223372036854775808L));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 25L, (-1));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, (long) Integer.MIN_VALUE, 51);
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, 9223372036854775803L, 939);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'Z';
      StringWriter stringWriter1 = stringWriter0.append('Z');
      int int0 = 1;
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer1);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) charBuffer0, 1, 1);
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      stringBuffer0.appendCodePoint(1);
      stringBuffer0.reverse();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 1);
      int int1 = 2720;
      FormatUtils.writePaddedInteger((Writer) stringWriter2, 3337L, 2720);
      String string0 = "~e.,-~5jY\\9";
      stringWriter1.write("~e.,-~5jY9");
      MockFileWriter mockFileWriter0 = new MockFileWriter("~e.,-~5jY9", true);
      int int2 = 4197;
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 40, 4197);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 2720, 4197);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      long long0 = 9223372036854775804L;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 9223372036854775804L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockFile0.delete();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1727L);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 43, 1197);
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("Invalid format: \".xOx@zNmA<T]\" is too short", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.createErrorMessage("Invalid format: \"/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-tim...\" is malformed at \"023/toga-eval/artifacts/joda-tim...\"", 1);
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-9223372036854775808L), 1197);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 3);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 9223372036854775800L);
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockFile0.delete();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3446L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("Invalid format: \".xOx@zNmA<T]\" is too short", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.createErrorMessage("Invalid format: \"/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-tim...\" is malformed at \"023/toga-eval/artifacts/joda-tim...\"", 1);
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-9223372036854775808L), 1197);
      FormatUtils.calculateDigitCount(1724L);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-9223372036854775808L), (-1089));
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FormatUtils.calculateDigitCount((-6045L));
      FormatUtils.calculateDigitCount(1L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, Integer.MIN_VALUE);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Y');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (-9223372036854775808L));
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockFile0.delete();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3446L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("Invalid format: \".xOx@zNmA<T]\" is too short", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.createErrorMessage("Invalid format: \"/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-tim...\" is malformed at \"023/toga-eval/artifacts/joda-tim...\"", 1);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 9223372036854775757L, 1197);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 5);
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 20);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      FormatUtils.appendPaddedInteger(stringBuffer0, 22, 3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, (-9223372036854775808L), 10000);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 20, 20);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, (-9223372036854775798L));
      FormatUtils.appendPaddedInteger(stringBuffer0, (-96L), 20);
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",k/(Ozh3qPO9UeLw&hL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ",k/(Ozh3qPO9UeLw&hL");
      FormatUtils.writePaddedInteger((Writer) printWriter0, 2126221446, (-575));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 373);
      mockPrintStream0.println(",k/(Ozh3qPO9UeLw&hL");
      FormatUtils.createErrorMessage(",k/(Ozh3qPO9UeLw&hL", 1267);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 75L, (-575));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-575));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(373);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) ",k/(Ozh3qPO9UeLw&hL");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('%');
      // Undeclared exception!
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter2, 2126221446, 2126221446);
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 9223372036854775803L, 36);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockPrintWriter0.println();
      mockFile0.delete();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1727L);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 43, 1197);
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("KBD5&Bfp[)-:7 ", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.createErrorMessage("Invalid format: \"/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-tim...\" is malformed at \"023/toga-eval/artifacts/joda-tim...\"", 1);
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-9223372036854775808L), 1197);
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 20);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2267), 3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, (-9223372036854775808L), 10000);
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)0;
      byteArray0[1] = (byte) (-96);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (byte)0, 1870);
      stringWriter0.write("");
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-8L));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter1, 7L);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 114L, 25);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, 10000, (-916));
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(926);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      byteArrayOutputStream0.reset();
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 926, 926);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 3022);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, 3533);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 100, 3022);
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '\"';
      charArray0[2] = 'J';
      charArray0[3] = '@';
      charArray0[4] = 'c';
      charArray0[5] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 3022);
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      stringWriter0.append('L');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      stringBuffer0.insert(0, "");
      charArrayWriter0.write(">rL'`h?7");
      int int0 = 676;
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 676);
      int int1 = (-11);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-11), (-882));
      int int2 = 10000;
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), 10000);
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FormatUtils.createErrorMessage("WG#", 3);
      FormatUtils.parseTwoDigits("Invalid format: \"WG#\" is too short", 3);
      FormatUtils.createErrorMessage("Invalid format: \"WG#\" is too short", 3);
      StringBuffer stringBuffer0 = new StringBuffer("Invalid format: \"WG#\" is too short");
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) "WG#");
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1), (-1));
      int int0 = 4;
      FormatUtils.appendPaddedInteger(stringBuffer1, (long) (-1), 4);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 550, 4);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2524));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FormatUtils.calculateDigitCount(9223372036854775795L);
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'<L73LNs) },");
          FormatUtils.createErrorMessage("'<L73LNs) },", (-8));
          ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
          ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
          objectOutputStream0.writeShort((-8));
          MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
          FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 19);
          StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'<L73LNs) },");
          int int0 = (-2267);
          FormatUtils.appendPaddedInteger(stringBuffer0, (-2267), 3597);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockPrintWriter0.println();
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 3, 4);
      mockFile0.delete();
      mockFile0.toURI();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1727L);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 43, 1197);
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("KBD5&Bfp[)-:7 ", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockPrintWriter0.println();
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 3, 4);
      mockFile0.delete();
      mockFile0.toURI();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1748L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 4);
      FormatUtils.createErrorMessage("/.xOx@zNmA<T]", 43);
      FormatUtils.createErrorMessage("KBD5&Bfp[)-:7 ", 5);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.appendPaddedInteger((Appendable) printWriter1, 22, 1197);
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer0 = null;
      long long0 = 9223372036854775804L;
      int int0 = 1;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 9223372036854775804L, 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)45;
      byteArray0[6] = (byte) (-96);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (byte) (-96), 1870);
      StringBuffer stringBuffer0 = null;
      int int0 = 10000;
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) (byte)10);
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 10000);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      StringBuffer stringBuffer0 = null;
      int int0 = 2177;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, (-9223372036854775808L), 2177);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FormatUtils.createErrorMessage("'<L73LNs) },", 22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 20);
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "2147483648";
      MockFileWriter mockFileWriter0 = new MockFileWriter("2147483648", true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[1] = '1';
      charArray0[2] = 's';
      mockFileWriter0.write(charArray0);
      FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, 1409L);
      int int0 = 3;
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      charBuffer0.clear();
      FormatUtils.appendUnpaddedInteger((Appendable) charBuffer0, 0L);
      FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, 3);
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) charBuffer0, 2721);
        fail("Expecting exception: BufferOverflowException");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 427);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 427, (-297));
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter0, (-9223372036854775808L), (-1556));
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) pipedWriter0, 676L);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockPrintWriter0.println();
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 3, 4);
      mockFile0.delete();
      mockFile0.toURI();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1764L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1727L);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 43, 1197);
      FormatUtils.createErrorMessage("/.xOx@zNmA<T]", 43);
      StringBuffer stringBuffer1 = new StringBuffer("");
      FormatUtils.appendUnpaddedInteger(stringBuffer1, 100L);
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, 43);
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockPrintWriter0.println();
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 3, (int) 'Z');
      mockFile0.delete();
      mockFile0.toURI();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 'Z');
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3470L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 100L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 1727L);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 43, 1197);
      FormatUtils.createErrorMessage("/.xOx@zNmA<T]", 43);
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charset0);
      FormatUtils.appendUnpaddedInteger((Appendable) outputStreamWriter0, 1764L);
      int int0 = 52;
      FormatUtils.writePaddedInteger((Writer) outputStreamWriter0, 41, 52);
      int int1 = 10015;
      // Undeclared exception!
      FormatUtils.appendPaddedInteger((Appendable) outputStreamWriter0, 1764L, 10015);
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.write((int) (byte)0);
      stringWriter0.write("");
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-1L));
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 114L, 2146915229);
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\" is too short");
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 2820L, 3248);
      FormatUtils.parseTwoDigits("\" is too short", 1);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, 3421L);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 3248, (-103));
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~;7%HPu|");
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (byte)10, 1870);
      stringWriter0.write(1);
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, 15);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 114L, 25);
      FormatUtils.createErrorMessage("", 0);
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits((CharSequence) null, 41);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 0);
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, 13421772, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~;7%pP$|");
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter((byte)16);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (byte) (-96), 1870);
      StringBuffer stringBuffer0 = new StringBuffer("t\"#f0<~804");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (int) (byte)0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (int) (byte)16);
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, 908L);
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-1071);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) null, (-1071));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('P');
      stringWriter0.getBuffer();
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 676);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1), (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (long) 0, 312);
      FormatUtils.calculateDigitCount(676);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 10L);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, (-16L), 26);
      FormatUtils.calculateDigitCount(10L);
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      StringWriter stringWriter1 = stringWriter0.append('6');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      stringBuffer0.insert(0, "");
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (-29), 639);
      FormatUtils.appendPaddedInteger(stringBuffer0, 312, (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1510L, 312);
      FormatUtils.calculateDigitCount(639);
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter1, 0);
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      stringWriter0.append('6');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, "");
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 671);
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      charArrayWriter0.close();
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1510L, 312);
      FormatUtils.calculateDigitCount(671);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 27);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, 0);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 68L);
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Writer writer0 = null;
      int int0 = (-1944);
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (-1944), (-1944));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) "\" is malformed at \"");
      stringBuffer0.append(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c-8MN^(z#Y");
      stringBuffer0.append(2);
      FormatUtils.appendPaddedInteger(stringBuffer0, 995L, 19);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (long) 19);
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      stringWriter0.append('6');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, "");
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 676);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1), (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1510L, 312);
      FormatUtils.calculateDigitCount(676);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer1, 27, 0);
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      stringWriter0.append((CharSequence) "Invalid format: \"\"");
      stringBuffer0.insert(0, "");
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 676);
      FormatUtils.appendPaddedInteger(stringBuffer0, 2143761839, (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1510L, 312);
      FormatUtils.calculateDigitCount(676);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 2);
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 10L, 3);
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      StringWriter stringWriter1 = stringWriter0.append('6');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"\"", 0);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      stringBuffer0.insert(0, "");
      charArrayWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 676);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1), (-882));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.appendPaddedInteger(stringBuffer0, 1000L, 2);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1510L, 312);
      FormatUtils.calculateDigitCount(676);
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter1, 28);
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.createErrorMessage("", 34);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Invalid format: \"\" is too short");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      StringBuffer stringBuffer1 = stringWriter1.getBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer1, 39);
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]#o6C<:3x");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]#o6C<:3x";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "]#o6C<:3x";
      objectArray0[4] = (Object) "";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "]#o6C<:3x";
      Object object2 = new Object();
      objectArray0[8] = object2;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      mockPrintWriter0.println('k');
      int int0 = (-2965);
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-16L), (-2965));
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-16L), (-5510));
      StringBuffer stringBuffer0 = new StringBuffer("");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-5510));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-3238L));
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits("]#o6C<:3x", (-2965));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.calculateDigitCount(10000L);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("_ $EI3yCc0\"", false);
      FormatUtils.appendUnpaddedInteger((Appendable) mockFileWriter0, (-2119L));
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '<';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = 'g';
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, 0L, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 0);
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, (-2121), 20);
      FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, 20);
      StringBuffer stringBuffer0 = new StringBuffer(416);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 0);
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      long long0 = 31L;
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) pipedWriter0, 31L);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "";
      FormatUtils.createErrorMessage("", 3);
      FormatUtils.parseTwoDigits("Invalid format: \"\" is too short", 3);
      FormatUtils.createErrorMessage("Invalid format: \"\" is too short", 3);
      int int0 = (-1);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1));
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      StringBuffer stringBuffer1 = stringBuffer0.append(false);
      int int1 = 637;
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 637);
      stringBuffer1.append(stringBuffer0);
      StringWriter stringWriter0 = new StringWriter(637);
      stringWriter0.append('e');
      stringWriter0.close();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) 0);
      stringBuffer0.append(stringBuffer1);
      FormatUtils.parseTwoDigits(stringBuffer0, 637);
      stringBuffer0.append(false);
      int int2 = (-1);
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(stringBuffer0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      long long0 = (-1L);
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) pipedWriter0, (-1L));
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Appendable appendable0 = null;
      long long0 = 1854L;
      int int0 = 0;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, 1854L, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      char char0 = '.';
      PrintWriter printWriter0 = mockPrintWriter0.append('.');
      FormatUtils.writePaddedInteger((Writer) printWriter0, 796, 796);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)127;
      try { 
        dataOutputStream0.write(byteArray0, (int) (byte)45, (int) (byte)101);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = (-641);
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("", (-641));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      long long0 = 3702L;
      FormatUtils.calculateDigitCount(3702L);
      int int0 = (-374);
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("", (-374));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, 100L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 246;
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage((String) null, 246);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      String string0 = "<fSUg8bF'P_=dU>y83";
      FormatUtils.createErrorMessage("<fSUg8bF'P_=dU>y83", 1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Invalid format: \"<fSUg8bF'P_=dU>y83\" is malformed at \"fSUg8bF'P_=dU>y83\"", 1, 1);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, 10000L);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (-1747L));
      int int0 = (-2415);
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(stringBuffer1, (-2415));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "u6JY2NT";
      int int0 = 0;
      FormatUtils.createErrorMessage("u6JY2NT", 0);
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Writer writer0 = null;
      int int0 = (-1684);
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, (-1684));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      File file0 = MockFile.createTempFile("Invalid format: \"", "Invalid format: \"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      FormatUtils.writeUnpaddedInteger((Writer) outputStreamWriter0, (-414));
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 1L);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.codePoints();
      Object object0 = new Object();
      stringBuffer0.insert(0, ')');
      stringBuffer0.append(object0);
      stringBuffer0.append((float) 0);
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(0);
      String string0 = "";
      stringBuffer1.insert(0, "");
      stringBuffer1.append((long) 0);
      stringBuffer0.insert(0, false);
      stringBuffer0.insert(0, false);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0);
      stringBuffer1.deleteCharAt(0);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (long) 0, 0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FormatUtils.createErrorMessage("", (-1));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('p');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "");
      // Undeclared exception!
      try { 
        charArrayWriter2.append((CharSequence) "", (-1), 258);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "q";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 32, (-1508));
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{HK|2c)ey%z]b-=n");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "{HK|2c)ey%z]b-=n";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "Invalid format: \"");
      objectArray0[4] = (Object) "{HK|2c)ey%z]b-=n";
      PrintWriter printWriter1 = mockPrintWriter0.format("Invalid format: \"", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter1);
      mockPrintWriter1.println(1L);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter1, 1241);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Invalid format: \"");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      mockPrintStream0.checkError();
      dataOutputStream0.writeBoolean(false);
      PrintStream printStream0 = mockPrintStream0.append('|');
      FormatUtils.appendUnpaddedInteger((Appendable) printStream0, 1241);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, 0, (-1));
      FormatUtils.calculateDigitCount(68L);
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, (-484), (-1));
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter1, 386L, (-736));
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.charAt(0);
      FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 0, (-1));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 0);
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FormatUtils.calculateDigitCount(39L);
      FormatUtils.calculateDigitCount(39L);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      String string0 = "E]GE`6-^";
      bufferedWriter0.write("E]GE`6-^");
      String string1 = "";
      bufferedWriter0.write("");
      int int0 = (-1674);
      FormatUtils.appendPaddedInteger((Appendable) bufferedWriter0, 39L, (-1674));
      FormatUtils.calculateDigitCount(0L);
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) pipedWriter0, 0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("bY6zw?}<TpFUv>A/Ga");
      int int0 = 0;
      mockFileWriter0.append((CharSequence) "bY6zw?}<TpFUv>A/Ga", 0, 0);
      mockFileWriter0.append((CharSequence) "bY6zw?}<TpFUv>A/Ga");
      mockFileWriter0.flush();
      FormatUtils.appendUnpaddedInteger((Appendable) mockFileWriter0, (-812));
      MockFile mockFile0 = new MockFile("bY6zw?}<TpFUv>A/Ga");
      mockFile0.toURI();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print(4711);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, (-812));
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, (long) (-812), (-812));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("2Zw#i.U Ejl*v#", 881);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("2Zw#i.U Ejl*v#", 881);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("2Zw#i.U Ejl*v#", 881);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ev\"+8s;mPf]1hA{YV7");
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("2Zw#i.U Ejl*v#", 881);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ev\"+8s;mPf]1hA{YV7");
      mockPrintWriter0.println((long) 881);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 881);
      StringBuffer stringBuffer0 = new StringBuffer("`%l");
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("2Zw#i.U Ejl*v#", 881);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ev\"+8s;mPf]1hA{YV7");
      mockPrintWriter0.println((long) 881);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 881);
      StringBuffer stringBuffer0 = new StringBuffer("`%l");
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("2Zw#i.U Ejl*v#", 881);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ev\"+8s;mPf]1hA{YV7");
      mockPrintWriter0.println((long) 881);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 881);
      StringBuffer stringBuffer0 = new StringBuffer("`%l");
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("2Zw#i.U Ejl*v#", 881);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ev\"+8s;mPf]1hA{YV7");
      mockPrintWriter0.println((long) 881);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 881);
      StringBuffer stringBuffer0 = new StringBuffer("`%l");
      FormatUtils.appendPaddedInteger(stringBuffer0, 881, 881);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("2Zw#i.U Ejl*v#", 881);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ev\"+8s;mPf]1hA{YV7");
      mockPrintWriter0.println((long) 881);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 881);
      StringBuffer stringBuffer0 = new StringBuffer("`%l");
      FormatUtils.appendPaddedInteger(stringBuffer0, 881, 881);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("2Zw#i.U Ejl*v#", 881);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ev\"+8s;mPf]1hA{YV7");
      mockPrintWriter0.println((long) 881);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 881);
      StringBuffer stringBuffer0 = new StringBuffer("`%l");
      FormatUtils.appendPaddedInteger(stringBuffer0, 881, 881);
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = ':';
      charArray0[2] = 'S';
      charArray0[3] = 'v';
      charArray0[4] = 'q';
      charArray0[5] = ' ';
      charArray0[6] = 'N';
      charArray0[7] = 'S';
      mockPrintWriter0.print(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("2Zw#i.U Ejl*v#", 881);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ev\"+8s;mPf]1hA{YV7");
      mockPrintWriter0.println((long) 881);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 881);
      StringBuffer stringBuffer0 = new StringBuffer("`%l");
      FormatUtils.appendPaddedInteger(stringBuffer0, 881, 881);
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = ':';
      charArray0[2] = 'S';
      charArray0[3] = 'v';
      charArray0[4] = 'q';
      charArray0[5] = ' ';
      charArray0[6] = 'N';
      charArray0[7] = 'S';
      mockPrintWriter0.print(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      ;
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 10);
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 10);
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 10);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 10);
      ;
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 10);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 0L, 10);
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 10);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 0L, 10);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 10);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 0L, 10);
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 10);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 0L, 10);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      StringBuffer stringBuffer1 = stringBuffer0.append("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 10);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 0L, 10);
      PipedWriter pipedWriter0 = new PipedWriter();
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 13421772;
      String string0 = FormatUtils.createErrorMessage("=x)x*|8[I8cz!&v", 13421772);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 13421772;
      String string0 = FormatUtils.createErrorMessage("=x)x*|8[I8cz!&v", 13421772);
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 13421772;
      String string0 = FormatUtils.createErrorMessage("=x)x*|8[I8cz!&v", 13421772);
      int int1 = 0;
      int int2 = FormatUtils.parseTwoDigits("Invalid format: \"=x)x*|8[I8cz!&v\" is too short", 0);
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 13421772;
      String string0 = FormatUtils.createErrorMessage("=x)x*|8[I8cz!&v", 13421772);
      int int1 = 0;
      int int2 = FormatUtils.parseTwoDigits("Invalid format: \"=x)x*|8[I8cz!&v\" is too short", 0);
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 13421772;
      String string0 = FormatUtils.createErrorMessage("=x)x*|8[I8cz!&v", 13421772);
      int int1 = 0;
      int int2 = FormatUtils.parseTwoDigits("Invalid format: \"=x)x*|8[I8cz!&v\" is too short", 0);
      assertEquals(0, int2);
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(781L);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      StringBuffer stringBuffer0 = new StringBuffer("*");
      assertEquals(0, stringBuffer0);
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      StringBuffer stringBuffer0 = new StringBuffer("*");
      ;
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      StringBuffer stringBuffer0 = new StringBuffer("*");
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      StringBuffer stringBuffer0 = new StringBuffer("*");
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (CharSequence) "*");
      assertEquals(0, stringBuffer1);
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      StringBuffer stringBuffer0 = new StringBuffer("*");
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (CharSequence) "*");
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      StringBuffer stringBuffer0 = new StringBuffer("*");
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (CharSequence) "*");
      ;
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      StringBuffer stringBuffer0 = new StringBuffer("*");
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (CharSequence) "*");
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      StringBuffer stringBuffer0 = new StringBuffer("*");
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (CharSequence) "*");
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      StringBuffer stringBuffer0 = new StringBuffer("*");
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (CharSequence) "*");
      assertEquals(0, stringBuffer1.length());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-773L));
      StringBuffer stringBuffer0 = new StringBuffer("*");
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (CharSequence) "*");
      assertNotNull(stringBuffer1.toString());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ;
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      ;
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      ;
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      ;
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertNotNull(stringWriter0.toString());
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      ;
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertEquals(1, charBuffer0.limit());
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertEquals(1, charBuffer0.length());
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertEquals(1, charBuffer0.capacity());
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertTrue(charBuffer0.isDirect());
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertEquals(1, charBuffer0.arrayOffset());
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertNotNull(charBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      ;
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertFalse(charBuffer0.hasArray());
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertFalse(charBuffer0.hasRemaining());
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertEquals(1, charBuffer0.remaining());
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertNotNull(stringWriter1.toString());
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      ;
}
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      ;
}
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      ;
}
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      assertFalse(charBuffer1.hasRemaining());
}
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      assertEquals(1, charBuffer1.limit());
}
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      assertFalse(charBuffer1.hasArray());
}
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      assertEquals(0, charBuffer1.arrayOffset());
}
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      assertEquals(0, charBuffer1.remaining());
}
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      assertEquals(1, charBuffer1.length());
}
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      assertEquals(1, charBuffer1.capacity());
}
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      ;
}
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      assertEquals(1, charBuffer1.position());
}
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'N';
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringWriter0.write("");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0, 0, 0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 0L, 0);
      CharBuffer charBuffer1 = CharBuffer.allocate(13421772);
      ;
}
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1L), (-1));
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1L), (-1));
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      ;
}
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      ;
}
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      ;
}
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      ;
}
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      ;
}
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      ;
}
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      ;
}
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, 0, 34);
      ;
}
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, 0, 34);
      ;
}
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, 0, 34);
      ;
}
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, 0, 34);
      ;
}
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, 0, 34);
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, (-1980L));
      ;
}
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      stringWriter1.write("i3(NQ1lNu(+sew,", 0, 0);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, 0, 34);
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, (-1980L));
      ;
}
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ;
}
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ;
}
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ;
}
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter0, 0L, 0);
      assertNotNull(charArrayWriter0.toString());
}
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter0, 0L, 0);
      ;
}
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter0, 0L, 0);
      FormatUtils.appendUnpaddedInteger((Appendable) charArrayWriter0, 777);
      assertEquals(0, charArrayWriter0.size());
}
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter0, 0L, 0);
      FormatUtils.appendUnpaddedInteger((Appendable) charArrayWriter0, 777);
      assertNotNull(charArrayWriter0.toString());
}
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Appendable appendable0 = null;
      int int0 = 2698;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, 2698, 2698);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-3470L));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      StringBuffer stringBuffer0 = null;
      int int0 = 2167;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 2167, 2167);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 1879L, (-1265));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("QfT9B;H[JX");
      ;
}
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("QfT9B;H[JX");
      ;
}
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("QfT9B;H[JX");
      ;
}
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("QfT9B;H[JX");
      FormatUtils.appendPaddedInteger(stringBuffer0, 4, 4);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("QfT9B;H[JX");
      FormatUtils.appendPaddedInteger(stringBuffer0, 4, 4);
      ;
}
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("\" is malformed at \"");
      ;
}
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("\" is malformed at \"");
      ;
}
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("\" is malformed at \"");
      ;
}
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("\" is malformed at \"");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0L);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("\" is malformed at \"");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0L);
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("\" is malformed at \"");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0L);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 0L);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("\" is malformed at \"");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0L);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 0L);
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-3690L));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(1000L);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      ;
}
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      ;
}
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      ;
}
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (long) 1339);
      assertNotNull(byteArrayOutputStream0.toString());
}
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (long) 1339);
      assertEquals(0, byteArrayOutputStream0.size());
}
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (long) 1339);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-997L));
      assertNotNull(byteArrayOutputStream0.toString());
}
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (long) 1339);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-997L));
      assertEquals(0, byteArrayOutputStream0.size());
}
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (long) 1339);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-997L));
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 1339, 1339);
      ;
}
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (long) 1339);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-997L));
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 1339, 1339);
      ;
}
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (long) 1339);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-997L));
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 1339, 1339);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 1339);
      ;
}
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      int int0 = 1339;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1339);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (long) 1339);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, (-997L));
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (long) 1339, 1339);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, 1339);
      ;
}
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      ;
}
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      ;
}
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      ;
}
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      ;
}
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      ;
}
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      ;
}
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      ;
}
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      ;
}
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      ;
}
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      ;
}
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 642L);
      ;
}
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 642L);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 642L);
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 642L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ;
}
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 642L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
}
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 642L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0.toString());
}
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 642L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int int0 = (-1791);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (-1791), (-1791));
      ;
}
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 642L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int int0 = (-1791);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (-1791), (-1791));
      ;
}
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 642L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int int0 = (-1791);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (-1791), (-1791));
      StringWriter stringWriter0 = new StringWriter();
      ;
}
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("wdoA|Q%oB;Y;-S<^)r");
      StringBuffer stringBuffer1 = stringBuffer0.append(1994.72);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 642L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int int0 = (-1791);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (-1791), (-1791));
      StringWriter stringWriter0 = new StringWriter();
      ;
}
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      int int0 = (-2510);
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (-12L), (-2510));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      ;
}
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ;
}
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ;
}
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 0L);
      assertNotNull(stringWriter0.toString());
}
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 0L);
      assertEquals(1, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 0L);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-2244));
      ;
}
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-2244));
      ;
}
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      ;
}
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      ;
}
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      ;
}
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      ;
}
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wjtq&I('PI+;(");
      ;
}
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wjtq&I('PI+;(");
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 9223372036854775803L, (-3));
      StringBuffer stringBuffer0 = new StringBuffer("wjtq&I('PI+;(");
      ;
}
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wjtq&I('PI+;(");
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 9223372036854775803L, (-3));
      StringBuffer stringBuffer0 = new StringBuffer("wjtq&I('PI+;(");
      ;
}
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wjtq&I('PI+;(");
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 9223372036854775803L, (-3));
      StringBuffer stringBuffer0 = new StringBuffer("wjtq&I('PI+;(");
      ;
}
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wjtq&I('PI+;(");
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 9223372036854775803L, (-3));
      StringBuffer stringBuffer0 = new StringBuffer("wjtq&I('PI+;(");
      FormatUtils.appendPaddedInteger(stringBuffer0, 44, 1336);
      assertEquals(0, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(485);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 485);
      FormatUtils.appendPaddedInteger(stringBuffer0, 9223372036854775784L, 485);
      ;
}
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(485);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 485);
      FormatUtils.appendPaddedInteger(stringBuffer0, 9223372036854775784L, 485);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(",k/(Ozh3qPO9UeLw&hL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",k/(Ozh3qPO9UeLw&hL");
      mockPrintWriter0.checkError();
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 2126221443, (-575));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-575));
      FormatUtils.createErrorMessage(",k/(Ozh3qPO9UeLw&hL", 1267);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-575));
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintWriter0, Integer.MIN_VALUE);
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, 2126221443);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter0, 10L, (-1));
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (-474));
  }
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FormatUtils.createErrorMessage("", 15);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      stringBuffer0.chars();
      FormatUtils.appendPaddedInteger(stringBuffer0, 15, 3597);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintStream0, (-9223372036854775808L), 10000);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 20, 20);
      objectOutputStream0.flush();
      FormatUtils.appendUnpaddedInteger((Appendable) mockPrintStream0, (-9223372036854775798L));
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), 20);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-9223372036854775808L), 20);
      ;
}
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FormatUtils.calculateDigitCount(9223372036854775800L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
  }
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 10);
      ;
}
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, 10);
      ;
}
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      MockFile mockFile0 = new MockFile("VJ", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      PrintWriter printWriter1 = mockPrintWriter0.append('Z');
      mockFile0.getCanonicalPath();
      mockFile0.delete();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (-3793L));
      FormatUtils.writeUnpaddedInteger((Writer) printWriter1, (long) 4);
      mockFile0.mkdirs();
      FormatUtils.calculateDigitCount((-3473L));
      FormatUtils.createErrorMessage("/media/ISSTA_USER/extradrive1/toga-eval-issta-2023/toga-eval/artifacts/joda-time/VJ/.xOx@zNmA<T]", 4);
      FormatUtils.writePaddedInteger((Writer) printWriter0, 1000L, 4);
      FormatUtils.createErrorMessage("Invalid format: \"/media/ISSTA_USER/extradrive1/toga-eval-...\" is malformed at \"ia/ISSTA_USER/extradrive1/toga-eval-...\"", 1);
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-9223372036854775764L), 1197);
      ;
}
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      StringBuffer stringBuffer0 = null;
      int int0 = 18;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, (-9223372036854775808L), 18);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775791L));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, Integer.MIN_VALUE);
      charArrayWriter0.append('C');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Y');
      charArrayWriter1.append('C');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (-9223372036854775791L));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 25L, (-1));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, (long) Integer.MIN_VALUE, 51);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (long) 20, 51);
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter1, Integer.MIN_VALUE, 1101);
      assertEquals(0, charArrayWriter1.size());
}
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      FormatUtils.calculateDigitCount((-9223372036854775791L));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, Integer.MIN_VALUE);
      charArrayWriter0.append('C');
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Y');
      charArrayWriter1.append('C');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (-9223372036854775791L));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, 25L, (-1));
      FormatUtils.writePaddedInteger((Writer) charArrayWriter1, (long) Integer.MIN_VALUE, 51);
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, (long) 20, 51);
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter1, Integer.MIN_VALUE, 1101);
      assertEquals(1, charArrayWriter0.size());
}
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      MockFile mockFile0 = new MockFile("", ".xOx@zNmA<T]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      mockPrintWriter0.println();
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 3, 3);
      mockFile0.toURI();
      FormatUtils.writeUnpaddedInteger((Writer) printWriter0, (long) 3);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 'Z');
      FormatUtils.createErrorMessage(".xOx@zNmA<T]", 43);
      FormatUtils.calculateDigitCount((-3473L));
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, 1764L, 22);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 22);
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, (-150), (-150));
      ;
}
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(10000);
      stringBuffer0.append((float) 10000);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 10000, 4);
      assertEquals(0, stringBuffer0.length());
}
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(10000);
      stringBuffer0.append((float) 10000);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 10000, 4);
      assertNotNull(stringBuffer0.toString());
}
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)10;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "CG");
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (byte)10, (int) (byte)10);
      stringWriter0.write("CG");
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, (int) (byte)10);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[6] = (byte) (-96);
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 7L);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 147L, 25);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter0, (long) (byte)0, (int) (byte)0);
      StringWriter stringWriter1 = new StringWriter();
      FormatUtils.writePaddedInteger((Writer) stringWriter0, Integer.MIN_VALUE, (int) (byte)0);
      ;
}
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('7');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("&<;&u`z?h/A8", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"&<;&u`z?h/A8\"", 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      charArrayWriter0.write("&<;&u`z?h/A8");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, (int) '7');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter1, (-11));
      assertNotNull(stringWriter1.toString());
}
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('7');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 2491L, 0);
      FormatUtils.createErrorMessage("&<;&u`z?h/A8", 0);
      FormatUtils.parseTwoDigits("Invalid format: \"&<;&u`z?h/A8\"", 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      charArrayWriter0.write("&<;&u`z?h/A8");
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, (int) '7');
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2), (-1783));
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter1, (-11));
      FormatUtils.appendUnpaddedInteger((Appendable) charArrayWriter0, 0);
      int int0 = FormatUtils.calculateDigitCount((-11));
      assertEquals(1, int0);
}
