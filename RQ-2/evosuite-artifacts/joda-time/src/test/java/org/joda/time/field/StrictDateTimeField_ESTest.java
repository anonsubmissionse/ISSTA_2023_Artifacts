/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:29:43 GMT 2022
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrictDateTimeField_ESTest extends StrictDateTimeField_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      long long0 = strictDateTimeField0.set(0L, 1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      long long0 = strictDateTimeField0.set(15L, 1);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-934));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(lenientChronology0, dateTimeField0, 4917);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(skipUndoDateTimeField0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set(117L, 4917);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 4917 for era must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(unsupportedDateTimeField0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((-1892L), 1);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // clockhourOfHalfday field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StrictDateTimeField strictDateTimeField0 = null;
      try {
        strictDateTimeField0 = new StrictDateTimeField((DateTimeField) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(iSOChronology0);
      DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, iSOChronology0);
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField1, iSOChronology0);
      DateTimeField dateTimeField2 = StrictDateTimeField.getInstance(lenientDateTimeField0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(iSOChronology0);
      DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, iSOChronology0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField1);
      DateTimeField dateTimeField2 = StrictDateTimeField.getInstance(strictDateTimeField0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTimeField dateTimeField0 = StrictDateTimeField.getInstance((DateTimeField) null);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-934));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(lenientChronology0, dateTimeField0, 4917);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(skipUndoDateTimeField0);
      boolean boolean0 = strictDateTimeField0.isLenient();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      long long0 = strictDateTimeField0.set((long) 1, 1);
      ;
}
}
