/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:19:15 GMT 2022
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JulianChronology_ESTest extends JulianChronology_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      boolean boolean0 = julianChronology0.isLeapYear(25650000);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      boolean boolean0 = julianChronology0.isLeapYear((-2013));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = new JulianChronology(buddhistChronology0, dateTimeZone0, 1);
      int int0 = julianChronology0.getMinYear();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = new JulianChronology(buddhistChronology0, dateTimeZone0, 1);
      int int0 = julianChronology0.getMaxYear();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      long long0 = julianChronology0.getDateMidnightMillis(1, 1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      long long0 = julianChronology0.getAverageMillisPerYearDividedByTwo();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      long long0 = julianChronology0.getAverageMillisPerYear();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = new JulianChronology(buddhistChronology0, dateTimeZone0, 1);
      long long0 = julianChronology0.getAverageMillisPerMonth();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      long long0 = julianChronology0.getApproxMillisAtEpochDividedByTwo();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      int int0 = JulianChronology.adjustYearForSet((-1));
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = JulianChronology.adjustYearForSet((-4311));
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        julianChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        JulianChronology.adjustYearForSet(0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      JulianChronology julianChronology0 = null;
      try {
        julianChronology0 = new JulianChronology((Chronology) null, object0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = new JulianChronology(buddhistChronology0, dateTimeZone0, 1);
      int int0 = julianChronology0.getDayOfMonth(0L, 292272992, 1);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(47);
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone0, 153692453);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 153692453
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      Chronology chronology0 = julianChronology0.withUTC();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      long long0 = julianChronology0.calculateFirstDayOfYearMillis(1);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-21), (-21));
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      long long0 = julianChronology0.getDateMidnightMillis(292272992, (byte)1, (byte)1);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone1);
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null, 1);
      Chronology chronology0 = julianChronology0.withZone((DateTimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = JulianChronology.adjustYearForSet(1);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      try { 
        julianChronology0.getDateMidnightMillis((-292269054), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      long long0 = julianChronology0.calculateFirstDayOfYearMillis(292272992);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      julianChronology0.assemble(assembledChronology_Fields0);
  }
}
