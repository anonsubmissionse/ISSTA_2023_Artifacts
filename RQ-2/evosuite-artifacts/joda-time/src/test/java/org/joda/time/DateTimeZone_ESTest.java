/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 19:41:59 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertNotNull(dateTimeZone0.getID());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(23, 23);
      assertNotNull(dateTimeZone0.toString());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 57);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      uTCDateTimeZone0.hashCode();
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1363);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1363);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-592));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-592));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      long long0 = uTCDateTimeZone0.previousTransition(0L);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2868);
      dateTimeZone0.previousTransition(2868);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      long long0 = dateTimeZone0.previousTransition((-3150L));
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      long long0 = uTCDateTimeZone0.nextTransition(0L);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      long long0 = dateTimeZone0.nextTransition(1593L);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      long long0 = dateTimeZone0.UTC.nextTransition((-12219292800000L));
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(564);
      int int0 = dateTimeZone0.getStandardOffset(1453L);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(564);
      int int0 = dateTimeZone0.getStandardOffset(1453L);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2208));
      int int0 = dateTimeZone0.getStandardOffset(241L);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2208));
      int int0 = dateTimeZone0.getStandardOffset(241L);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2611);
      int int0 = dateTimeZone0.getOffsetFromLocal(2611);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2611);
      int int0 = dateTimeZone0.getOffsetFromLocal(2611);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(292271022, "CST", 292271022, 0, (-904), 0, (-265), 0, 1713, 2274, 10);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(23, 0, 3600000, 0, 10);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(0, dateTime0.getMillis());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(292271022, "CST", 292271022, 0, (-904), 0, (-265), 0, 1713, 2274, 10);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(23, 0, 3600000, 0, 10);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1678));
      int int0 = dateTimeZone0.getOffset((long) 0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1678));
      int int0 = dateTimeZone0.getOffset((long) 0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      String string0 = dateTimeZone0.getNameKey(309L);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      String string0 = dateTimeZone0.getNameKey(309L);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      String string0 = dateTimeZone0.UTC.getNameKey(100L);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      long long0 = uTCDateTimeZone0.getMillisKeepLocal(uTCDateTimeZone0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1);
      assertNotNull(dateTimeZone1.toString());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      boolean boolean0 = uTCDateTimeZone0.UTC.equals(uTCDateTimeZone0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      Object object0 = new Object();
      boolean boolean0 = uTCDateTimeZone0.equals(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      long long0 = uTCDateTimeZone0.convertUTCToLocal(0L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1363);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 1363, true, 0L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1363);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 1363, true, 0L);
      assertNotNull(dateTimeZone0.getID());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      long long0 = dateTimeZone0.UTC.convertLocalToUTC((-1721L), false, 10800000L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1919));
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-1919), false);
      assertNotNull(dateTimeZone0.getID());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1919));
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-1919), false);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      long long0 = dateTimeZone0.adjustOffset(0, true);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(564);
      long long0 = dateTimeZone0.UTC.adjustOffset(564, true);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(564);
      long long0 = dateTimeZone0.UTC.adjustOffset(564, true);
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(292271022, "CST", 292271022, 0, (-904), 0, 0, 0, 1713, 1713, 10);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(292271022, "CST", 292271022, 0, (-904), 0, (-265), 0, 1713, 2274, 10);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(1226L);
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("org/joda/time/tz/data");
      uTCDateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 2110L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.joda.time.DateTimeZone.NameProvider");
      DateTimeZone.setNameProvider((NameProvider) null);
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      long long0 = dateTimeZone0.UTC.convertLocalToUTC(314L, true);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      long long0 = dateTimeZone0.UTC.convertLocalToUTC(314L, true);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      long long0 = dateTimeZone0.UTC.convertLocalToUTC(2108L, false, 2470L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      long long0 = uTCDateTimeZone0.convertUTCToLocal(1);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(292271022, "CST", 292271022, 0, (-904), 0, (-265), 0, 1713, 2274, 10);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      dateTimeZone0.getOffsetFromLocal(0);
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      boolean boolean0 = dateTimeZone0.isStandardOffset(0L);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone.forID("America/Anchorage");
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1.toString());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-23), (-23));
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-556), (-556));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -556
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      String string0 = dateTimeZone0.getID();
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      long long0 = dateTimeZone0.adjustOffset((-23), true);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      long long0 = dateTimeZone0.adjustOffset((-23), true);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      boolean boolean0 = uTCDateTimeZone0.UTC.isLocalDateTimeGap((LocalDateTime) null);
      assertFalse(boolean0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-592));
      // Undeclared exception!
      try { 
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(59999);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 0, false);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(59999);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 0, false);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(59999);
      // Undeclared exception!
      try { 
        dateTimeZone1.getMillisKeepLocal(dateTimeZone0, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      long long0 = dateTimeZone0.convertUTCToLocal(0);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      long long0 = dateTimeZone0.convertUTCToLocal(0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(564);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) julianChronology0);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(564);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) julianChronology0);
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(43);
      String string0 = dateTimeZone0.getName((long) 43, (Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      Locale locale0 = Locale.forLanguageTag("org/joda/time/tz/data");
      String string0 = uTCDateTimeZone0.getName(118977408L, locale0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      Locale locale0 = Locale.GERMAN;
      String string0 = dateTimeZone0.getShortName(188L, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      Locale locale0 = Locale.ITALY;
      String string0 = uTCDateTimeZone0.getShortName(24L, locale0);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      DateTimeZone.setProvider(provider0);
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = DateTimeZone.DEFAULT_TZ_DATA_PATH;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      int int0 = dateTimeZone0.getOffsetFromLocal(2551440384L);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(23, "GMT+<HH$lBO=xY,");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+<HH$lBO=xY,\" is malformed at \"<HH$lBO=xY,\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "GMT+");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(326565, "org/joda/time/tz/data");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'org/joda/time/tz/data' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      String string0 = dateTimeZone0.getShortName((-3150L), (Locale) null);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(292272984);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 292272984
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-292269053));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -292269053
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(1, (-51));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Positive hours must not have negative minutes: -51
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      dateTimeZone0.UTC.getOffset((ReadableInstant) null);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      dateTimeZone0.UTC.getOffset((ReadableInstant) null);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-23), 1678);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 1678
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(292271022, (-23));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 292271022
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours((-122));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -122
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-2379));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -2379
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.forOffsetHours(0);
      uTCDateTimeZone0.isFixed();
      uTCDateTimeZone0.writeReplace();
      uTCDateTimeZone0.writeReplace();
      uTCDateTimeZone0.getOffsetFromLocal(0);
      uTCDateTimeZone0.toString();
      UTCDateTimeZone uTCDateTimeZone1 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime(9223372036854775807L, (DateTimeZone) uTCDateTimeZone0);
      dateTime0.millisOfDay();
      ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
      assertNotNull(zoneInfoProvider0);
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-00:00:01.209");
      assertNotNull(dateTimeZone0.getID());
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("j_J[L&1tItgg");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'j_J[L&1tItgg' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00:01.363");
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      dateTimeZone0.isFixed();
      DateTimeUtils.setCurrentMillisOffset(1L);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      dateTimeZone1.UTC.getShortName((-229L), locale0);
      dateTimeZone0.convertUTCToLocal(30585600000L);
      int int0 = dateTimeZone0.getOffset(0L);
      int int1 = dateTimeZone0.getStandardOffset((-1947L));
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      DateTimeZone.getProvider();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone.setDefault(dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      DateTimeZone.LazyInit dateTimeZone_LazyInit0 = new DateTimeZone.LazyInit();
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(0L);
      DateTimeFormatter dateTimeFormatter0 = DateTimeZone.LazyInit.OFFSET_FORMATTER;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      // Undeclared exception!
      try { 
        instant0.toString(dateTimeFormatter1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      String string0 = uTCDateTimeZone0.getName((long) 43);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Africa/Addis_Ababa");
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0.getID());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      int int0 = dateTimeZone0.getOffset((-1194L));
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      int int0 = dateTimeZone0.getOffset((-1194L));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeZone.getAvailableIDs();
      TimeZone timeZone0 = TimeZone.getTimeZone("PRT");
      DateTimeZone.forTimeZone(timeZone0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      boolean boolean0 = uTCDateTimeZone0.equals(defaultNameProvider0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      String string0 = uTCDateTimeZone0.UTC.getShortName(10000L);
      ;
}
}
