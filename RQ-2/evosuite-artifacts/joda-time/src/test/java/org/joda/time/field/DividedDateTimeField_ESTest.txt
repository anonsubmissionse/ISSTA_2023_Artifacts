 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      long long0 = dividedDateTimeField0.set((long) 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      long long0 = dividedDateTimeField0.set((long) 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      long long0 = dividedDateTimeField0.set((long) 0, 0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0, 1269);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, millisDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.set((-1L), 0);
      assertEquals(1, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0, 1269);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, millisDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.set((-1L), 0);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0, 1269);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, millisDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.set((-1L), 0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0, 1269);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, millisDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.set((-1L), 0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 156);
      long long0 = dividedDateTimeField0.roundFloor(156);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 156);
      long long0 = dividedDateTimeField0.roundFloor(156);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 156);
      long long0 = dividedDateTimeField0.roundFloor(156);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 156);
      long long0 = dividedDateTimeField0.roundFloor(156);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 292278993);
      long long0 = dividedDateTimeField0.roundFloor(292278993);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 292278993);
      long long0 = dividedDateTimeField0.roundFloor(292278993);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 292278993);
      long long0 = dividedDateTimeField0.roundFloor(292278993);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DurationField durationField0 = buddhistChronology0.hours();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 292278993);
      long long0 = dividedDateTimeField0.roundFloor(292278993);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 2502);
      long long0 = dividedDateTimeField0.remainder(0L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 2502);
      long long0 = dividedDateTimeField0.remainder(0L);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 2502);
      long long0 = dividedDateTimeField0.remainder(0L);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.remainder((-533L));
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.remainder((-533L));
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.remainder((-533L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 2502);
      dividedDateTimeField0.getRangeDurationField();
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 2502);
      dividedDateTimeField0.getRangeDurationField();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1695L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getMinimumValue();
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1695L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1910);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, (DurationField) null, dateTimeFieldType0, 156);
      int int0 = dividedDateTimeField0.getMinimumValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1910);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, (DurationField) null, dateTimeFieldType0, 156);
      int int0 = dividedDateTimeField0.getMinimumValue();
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1910);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, (DurationField) null, dateTimeFieldType0, 156);
      int int0 = dividedDateTimeField0.getMinimumValue();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(islamicChronology0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2502);
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(islamicChronology0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2502);
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(islamicChronology0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2502);
      int int0 = dividedDateTimeField0.getMaximumValue();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275054));
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587500);
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals(1, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275054));
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587500);
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275054));
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587500);
      int int0 = dividedDateTimeField0.getMaximumValue();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(buddhistChronology0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 4642);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, (DurationField) null, dateTimeFieldType0);
      dividedDateTimeField0.getDurationField();
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(buddhistChronology0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 4642);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, (DurationField) null, dateTimeFieldType0);
      dividedDateTimeField0.getDurationField();
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(buddhistChronology0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 4642);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, (DurationField) null, dateTimeFieldType0);
      dividedDateTimeField0.getDurationField();
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.getDifferenceAsLong(58317235201848L, 0L);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.getDifferenceAsLong(58317235201848L, 0L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.getDifferenceAsLong(58317235201848L, 0L);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1910);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, (DurationField) null, dateTimeFieldType0, 156);
      long long0 = dividedDateTimeField0.getDifferenceAsLong(333L, 1209600000L);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1910);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, (DurationField) null, dateTimeFieldType0, 156);
      long long0 = dividedDateTimeField0.getDifferenceAsLong(333L, 1209600000L);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1910);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, (DurationField) null, dateTimeFieldType0, 156);
      long long0 = dividedDateTimeField0.getDifferenceAsLong(333L, 1209600000L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 920);
      int int0 = dividedDateTimeField0.getDifference(15778800000L, 0L);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 920);
      int int0 = dividedDateTimeField0.getDifference(15778800000L, 0L);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 920);
      int int0 = dividedDateTimeField0.getDifference(15778800000L, 0L);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 920);
      int int0 = dividedDateTimeField0.getDifference(15778800000L, 0L);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0, 1269);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, millisDurationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getDifference(0L, 5797299600000L);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0, 1269);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, millisDurationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getDifference(0L, 5797299600000L);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0, 1269);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, millisDurationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getDifference(0L, 5797299600000L);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.get(1);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.get(1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.get(1);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.addWrapField(0L, 0);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.addWrapField(0L, 0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.addWrapField(0L, 0);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1695L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.addWrapField(1695L, 2);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1695L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.addWrapField(1695L, 2);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1695L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.addWrapField(1695L, 2);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1695L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.addWrapField((-222L), 0);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1695L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.addWrapField((-222L), 0);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1695L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.addWrapField((-222L), 0);
      assertEquals(1, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 25734375);
      long long0 = dividedDateTimeField0.add(0L, 0L);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 25734375);
      long long0 = dividedDateTimeField0.add(0L, 0L);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 25734375);
      long long0 = dividedDateTimeField0.add(0L, 0L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 25734375);
      long long0 = dividedDateTimeField0.add(0L, 0L);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1893);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      long long0 = dividedDateTimeField0.add(393L, (-1L));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1893);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      long long0 = dividedDateTimeField0.add(393L, (-1L));
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1893);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      long long0 = dividedDateTimeField0.add(393L, (-1L));
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 1958);
      long long0 = dividedDateTimeField0.add(0L, 0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 1958);
      long long0 = dividedDateTimeField0.add(0L, 0);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 1958);
      long long0 = dividedDateTimeField0.add(0L, 0);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 1958);
      long long0 = dividedDateTimeField0.add(0L, 0);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1825);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 1825, 695);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1825);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 1825, 695);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1825);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 1825, 695);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1825);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 1825, 695);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 1848, (-1));
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 1848, (-1));
      assertEquals(1, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 1848, (-1));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275042), (-292275042), 1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587438);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.roundFloor(1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value -308811570 for clockhourOfHalfday must be in the range [-292275041,-292275030]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 20587500, 1, (-292275054));
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587500);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.remainder(1L);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for clockhourOfDay must be in the range [1,-15]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 1838);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.getDifferenceAsLong(1, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The subtrahend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1838);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.getDifferenceAsLong(1838, 1838);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, (DurationField) null, dateTimeFieldType0, 1663);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapField(1L, (-2071));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(lenientDateTimeField0, unsupportedDurationField0, dateTimeFieldType0, 33078993);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapField((-42521587200000L), 33078993);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -3307899300
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1873);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add((long) 1873, (-16L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add((long) 1848, (long) 1848);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0, 10209375);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, millisDurationField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add(0L, (long) 10209375);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 104231337890625 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1825);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add((-906L), (-2853));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, durationField0, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2);
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, (DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, (DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((DateTimeField) null, dateTimeFieldType0, (-282));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275054));
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587500);
      int int0 = dividedDateTimeField0.get(1042L);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275054));
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587500);
      int int0 = dividedDateTimeField0.get(1042L);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275054));
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587500);
      int int0 = dividedDateTimeField0.get(1042L);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275054));
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587500);
      int int0 = dividedDateTimeField0.get(1042L);
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      int int0 = dividedDateTimeField0.get(136);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      int int0 = dividedDateTimeField0.get(136);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      int int0 = dividedDateTimeField0.get(136);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1825);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      DurationField durationField1 = dividedDateTimeField0.getRangeDurationField();
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1825);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      DurationField durationField1 = dividedDateTimeField0.getRangeDurationField();
      assertEquals(durationField0, durationField1);
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1825);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      DurationField durationField1 = dividedDateTimeField0.getRangeDurationField();
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DurationField durationField0 = buddhistChronology0.months();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1825);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      DurationField durationField1 = dividedDateTimeField0.getRangeDurationField();
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1695L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, preciseDurationField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set((long) 1, 7678125);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 7678125 for weekyearOfCentury must be in the range [0,11]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275054));
      DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0, 20587500);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275054));
      DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0, 20587500);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20587500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275054));
      DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0, 20587500);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1910);
      DurationField durationField0 = offsetDateTimeField0.getDurationField();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      ScaledDurationField scaledDurationField0 = (ScaledDurationField)dividedDateTimeField0.getDurationField();
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      ScaledDurationField scaledDurationField0 = (ScaledDurationField)dividedDateTimeField0.getDurationField();
      assertEquals(0, scaledDurationField0.getScalar());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      ScaledDurationField scaledDurationField0 = (ScaledDurationField)dividedDateTimeField0.getDurationField();
      assertNotNull(scaledDurationField0);
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      ScaledDurationField scaledDurationField0 = (ScaledDurationField)dividedDateTimeField0.getDurationField();
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      long long0 = dividedDateTimeField0.set((long) 1, 1);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      long long0 = dividedDateTimeField0.set((long) 1, 1);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      long long0 = dividedDateTimeField0.set((long) 1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      dividedDateTimeField0.getRangeDurationField();
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 136);
      dividedDateTimeField0.getRangeDurationField();
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275066));
      DurationField durationField0 = buddhistChronology0.halfdays();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0, 20587497);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275066));
      DurationField durationField0 = buddhistChronology0.halfdays();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0, 20587497);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275066));
      DurationField durationField0 = buddhistChronology0.halfdays();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0, 20587497);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      assertEquals(0, dividedDateTimeField0.getDivisor());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275042), (-292275042), 1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587438);
      int int0 = dividedDateTimeField0.getDifference(1, 1);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275042), (-292275042), 1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587438);
      int int0 = dividedDateTimeField0.getDifference(1, 1);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275042), (-292275042), 1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587438);
      int int0 = dividedDateTimeField0.getDifference(1, 1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275042), (-292275042), 1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587438);
      int int0 = dividedDateTimeField0.getDifference(1, 1);
      ;
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.getDifferenceAsLong(0L, 0L);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.getDifferenceAsLong(0L, 0L);
      assertEquals(1, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.getDifferenceAsLong(0L, 0L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapField(0L, (-1442));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getDivisor();
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getDivisor();
      assertEquals(1, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getDivisor();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getMinimumValue();
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275042), (-292275042), 1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587438);
      long long0 = dividedDateTimeField0.remainder(20587438);
      assertEquals(0, dividedDateTimeField0.getDivisor());
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275042), (-292275042), 1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587438);
      long long0 = dividedDateTimeField0.remainder(20587438);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275042), (-292275042), 1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587438);
      long long0 = dividedDateTimeField0.remainder(20587438);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-292275042), (-292275042), 1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 20587438);
      long long0 = dividedDateTimeField0.remainder(20587438);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      int int0 = dividedDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 1848, 1L);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 1848, 1L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.add((long) 1848, 1L);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.roundFloor(0L);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.roundFloor(0L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1848);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      long long0 = dividedDateTimeField0.roundFloor(0L);
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      DurationField durationField0 = buddhistChronology0.minutes();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 1838);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add((long) 1, 1);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
