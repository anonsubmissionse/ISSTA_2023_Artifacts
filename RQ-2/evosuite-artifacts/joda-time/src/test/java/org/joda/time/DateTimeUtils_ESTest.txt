 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(1766L);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider(1216L);
      long long0 = dateTimeUtils_OffsetMillisProvider0.getMillis();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider(1636L);
      long long0 = dateTimeUtils_FixedMillisProvider0.getMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Map<String, DateTimeZone> map0 = DateTimeUtils.getDefaultTimeZoneNames();
      DateTimeUtils.setDefaultTimeZoneNames(map0);
      assertTrue(map0.isEmpty());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long long0 = DateTimeUtils.toJulianDayNumber((-9223372036854775808L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = DateTimeUtils.toJulianDay((-210866760000000L));
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = DateTimeUtils.toJulianDay((-210955452191999L));
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      PeriodType periodType2 = DateTimeUtils.getPeriodType(periodType1);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(0L);
      long long0 = DateTimeUtils.getInstantMillis((ReadableInstant) null);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      System.setCurrentTimeMillis((-2552L));
      long long0 = DateTimeUtils.getInstantMillis((ReadableInstant) null);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      Minutes minutes0 = hours0.toStandardMinutes();
      Duration duration0 = minutes0.toStandardDuration();
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.millis((-3045L));
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(2440587.5);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(0L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(0L);
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-1697L));
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        DateTimeUtils.isContiguous(partial0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.getDateFormatSymbols((Locale) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getChronology((Chronology) null);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Chronology chronology0 = DateTimeUtils.getInstantChronology(instant0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = Instant.now();
      long long0 = DateTimeUtils.getInstantMillis(instant0);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeUtils.getDefaultTimeZoneNames();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[2];
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        DateTimeUtils.isContiguous(partial0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.isContiguous((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Partial must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = DateTimeUtils.getDurationMillis((ReadableDuration) null);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodType periodType0 = DateTimeUtils.getPeriodType((PeriodType) null);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeUtils.getZone((DateTimeZone) null);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeUtils.getZone(dateTimeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval((ReadableInterval) null);
      assertEquals(1, readableInterval0.getStartMillis());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval((ReadableInterval) null);
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInterval) null);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Instant instant0 = Instant.now();
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) null, (ReadableInstant) instant0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-4039L));
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) instant0, (ReadableInstant) instant0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) null, (ReadableInstant) null);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getInstantChronology((ReadableInstant) null);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.setCurrentMillisProvider((DateTimeUtils.MillisProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The MillisProvider must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(0L);
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset((-1L));
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider(2478L);
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_OffsetMillisProvider0);
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeUtils.SystemMillisProvider dateTimeUtils_SystemMillisProvider0 = new DateTimeUtils.SystemMillisProvider();
      long long0 = dateTimeUtils_SystemMillisProvider0.getMillis();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.UK;
      DateFormatSymbols dateFormatSymbols0 = DateTimeUtils.getDateFormatSymbols(locale0);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeUtils dateTimeUtils0 = new DateTimeUtils();
      assertEquals(0, dateTimeUtils0.currentTimeMillis());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = DateTimeUtils.toJulianDayNumber(604800L);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = DateTimeUtils.toJulianDay((-2148L));
      ;
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.setDefaultTimeZoneNames((Map<String, DateTimeZone>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(30962844000000L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeUtils.setCurrentMillisSystem();
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider(30962844000000L);
      long long0 = dateTimeUtils_FixedMillisProvider0.getMillis();
      assertEquals(1, long0);
}
