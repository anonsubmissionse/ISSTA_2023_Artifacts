 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = Years.ZERO;
      boolean boolean0 = years0.isLessThan(years1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Years years0 = Years.TWO;
      boolean boolean0 = years0.isLessThan((Years) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Years years0 = Years.years(Integer.MIN_VALUE);
      Years years1 = Years.ZERO;
      boolean boolean0 = years0.isGreaterThan(years1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Years years0 = Years.years(Integer.MIN_VALUE);
      Years years1 = Years.ZERO;
      boolean boolean0 = years0.isGreaterThan(years1);
      assertEquals(1, years0.getYears());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Years years0 = Years.ZERO;
      boolean boolean0 = years0.isGreaterThan((Years) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Years years0 = Years.yearsIn((ReadableInterval) null);
      Years years1 = years0.ZERO.plus(years0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Years years0 = Years.THREE;
      Years years1 = years0.multipliedBy(0);
      Years years2 = years1.plus(0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.plus(1407);
      assertEquals(1, years1.getYears());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Years years1 = years0.ZERO.negated();
      assertEquals(0, years1.getYears());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.TWO.plus((-5380));
      years1.negated();
      assertEquals(0, years1.getYears());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.multipliedBy(2);
      assertEquals(1, years1.getYears());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.ONE.multipliedBy((-687));
      assertEquals(1, years1.getYears());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Years years0 = Years.THREE;
      Years years1 = years0.ONE.minus((Years) null);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Years years1 = years0.minus((-1540));
      assertEquals(0, years1.getYears());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Years years0 = Years.years(2341);
      int int0 = years0.getYears();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      int int0 = years0.getYears();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Years years1 = years0.MAX_VALUE.dividedBy((-1540));
      assertEquals(0, years1.getYears());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.MAX_VALUE.minus(0);
      // Undeclared exception!
      try { 
        years1.plus(years1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        years0.plus((-199));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -199
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Years years0 = Years.years(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        years0.multipliedBy(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Years years0 = Years.ONE;
      // Undeclared exception!
      try { 
        years0.MIN_VALUE.minus(years0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        years0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Years", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Years years0 = Years.years(0);
      Years years1 = years0.minus(0);
      assertEquals(0, years1.getYears());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Years years0 = Years.years(Integer.MAX_VALUE);
      assertEquals(0, years0.getYears());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Years years0 = Years.yearsIn((ReadableInterval) null);
      // Undeclared exception!
      try { 
        years0.MIN_VALUE.minus(1585);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1585
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      boolean boolean0 = years0.isLessThan((Years) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Years years0 = Years.ZERO;
      boolean boolean0 = years0.isLessThan((Years) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Years years0 = Years.ZERO;
      boolean boolean0 = years0.isLessThan(years0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Years years0 = Years.TWO;
      Years years1 = Years.ZERO;
      boolean boolean0 = years0.isGreaterThan(years1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Years years0 = Years.ONE;
      boolean boolean0 = years0.isGreaterThan((Years) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      boolean boolean0 = years0.isGreaterThan((Years) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Years years0 = Years.years(Integer.MIN_VALUE);
      boolean boolean0 = years0.isGreaterThan(years0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Years years0 = Years.years(Integer.MIN_VALUE);
      boolean boolean0 = years0.isGreaterThan(years0);
      assertEquals(0, years0.getYears());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Years years0 = Years.ZERO;
      Years years1 = years0.dividedBy(1);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Years years0 = Years.ZERO;
      Years years1 = years0.THREE.dividedBy(2);
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Years years1 = years0.minus((Years) null);
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Years years1 = years0.plus((Years) null);
      assertEquals(0, years1.getYears());
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Years years0 = Years.parseYears((String) null);
      assertEquals(0, years0.size());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Years.parseYears("O#'>i9?^XC");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"O#'>i9?^XC\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Partial partial0 = new Partial((Chronology) null, (DateTimeFieldType[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Years years0 = Years.ZERO;
      Years years1 = years0.MIN_VALUE.plus(1);
      boolean boolean0 = years1.isLessThan(years0);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Years years0 = Years.ZERO;
      Years years1 = years0.MIN_VALUE.plus(1);
      boolean boolean0 = years1.isLessThan(years0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Years years0 = Years.yearsIn((ReadableInterval) null);
      Years years1 = Years.MAX_VALUE;
      Years years2 = years0.ZERO.plus(years1);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Years years0 = Years.years(3);
      assertEquals(0, years0.getYears());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Years years0 = Years.years(2);
      assertEquals(0, years0.getYears());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Years years0 = Years.yearsIn((ReadableInterval) null);
      Years years1 = years0.ZERO.minus(years0);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        years0.MIN_VALUE.negated();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(1751L);
      Years years0 = Years.yearsBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0, years0.getYears());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Years years0 = Years.ZERO;
      int int0 = years0.getYears();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Years years0 = Years.years(1);
      years0.getPeriodType();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      assertNotNull(durationFieldType0.getName());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Years years0 = Years.ZERO;
      String string0 = years0.ONE.toString();
      ;
}
