/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:17:14 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Duration_ESTest extends Duration_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1L);
      Duration duration1 = duration0.abs();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1L);
      Duration duration1 = duration0.abs();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(95L);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      Duration duration1 = duration0.dividedBy(95L, roundingMode0);
      assertEquals(0, duration1.getMillis());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(2608L);
      Duration duration1 = duration0.dividedBy(2607L);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Duration duration0 = new Duration(147L);
      Duration duration1 = duration0.withMillis((-9223372036854775808L));
      assertEquals(0, duration1.getMillis());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(0, seconds0.size());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1L);
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals(0, duration0.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals(0, duration0.getStandardMinutes());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2595L);
      Hours hours0 = duration0.toStandardHours();
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2595L);
      Hours hours0 = duration0.toStandardHours();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1606L));
      Hours hours0 = duration0.toStandardHours();
      assertEquals(1, duration0.getStandardHours());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1606L));
      Hours hours0 = duration0.toStandardHours();
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1606L));
      Hours hours0 = duration0.toStandardHours();
      assertEquals(0, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Days days0 = duration0.toStandardDays();
      assertEquals(0, days0.size());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1281L);
      Days days0 = duration0.toStandardDays();
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1281L);
      Days days0 = duration0.toStandardDays();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = new Duration((-2024000L));
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, (-2146766384));
      Duration duration2 = duration1.toDuration();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Duration duration1 = duration0.toDuration();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(62035200000L);
      assertEquals(0, duration0.getStandardMinutes());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-604800000L));
      assertEquals(0, duration0.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-3022L));
      assertEquals(0, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withMillis(31449600000L);
      Duration duration2 = duration1.ZERO.plus((ReadableDuration) duration1);
      assertEquals(0, duration2.getStandardHours());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Duration duration1 = duration0.plus(0L);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.parse("PT6350401.764S");
      assertEquals(0, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.parse("PT-2024S");
      assertEquals(0, duration0.getStandardHours());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.negated();
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3190, 3190, 3190, 3190);
      mutablePeriod0.setWeeks((-3566));
      Duration duration0 = mutablePeriod0.toDurationTo((ReadableInstant) null);
      Duration duration1 = duration0.multipliedBy(1888L);
      assertEquals(1, duration1.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Days days0 = Days.SIX;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.multipliedBy(3049L);
      assertEquals(0, duration1.getMillis());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      Duration duration1 = duration0.minus((ReadableDuration) null);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1524L);
      Duration duration1 = duration0.negated();
      Duration duration2 = duration1.minus((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1764L);
      Duration duration1 = duration0.plus(1764L);
      Duration duration2 = duration1.minus((ReadableDuration) duration0);
      assertEquals(0, duration1.getStandardDays());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1764L);
      Duration duration1 = duration0.plus(1764L);
      Duration duration2 = duration1.minus((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Period period0 = new Period(918518400000L);
      Duration duration0 = period0.toStandardDuration();
      Duration duration1 = duration0.withDurationAdded((-604800000L), 3600000);
      Duration duration2 = duration1.minus(0L);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Period period0 = new Period(918518400000L);
      Duration duration0 = period0.toStandardDuration();
      Duration duration1 = duration0.withDurationAdded((-604800000L), 3600000);
      Duration duration2 = duration1.minus(0L);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1524L);
      Duration duration1 = duration0.minus((-8L));
      ;
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = Duration.millis(259200000L);
      assertEquals(0, duration0.getStandardHours());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      long long0 = duration0.getStandardSeconds();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(95L);
      long long0 = duration0.getStandardSeconds();
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(95L);
      long long0 = duration0.getStandardSeconds();
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Duration duration0 = Duration.millis((-2434L));
      long long0 = duration0.getStandardMinutes();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Duration duration0 = Duration.millis((-2434L));
      long long0 = duration0.getStandardMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      long long0 = duration0.getStandardMinutes();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Duration duration0 = Duration.millis((-2434L));
      long long0 = duration0.getStandardHours();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Duration duration0 = Duration.millis((-2434L));
      long long0 = duration0.getStandardHours();
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(2608L);
      long long0 = duration0.getStandardHours();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(2608L);
      long long0 = duration0.getStandardHours();
      assertEquals(0, duration0.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(63072000000L);
      long long0 = duration0.getStandardDays();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withMillis(31449600000L);
      Duration duration2 = duration1.withDurationAdded((ReadableDuration) duration1, (-1992));
      long long0 = duration2.getStandardDays();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1524L);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      Duration duration1 = duration0.dividedBy((-8L), roundingMode0);
      assertEquals(0, duration0.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1524L);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      Duration duration1 = duration0.dividedBy((-8L), roundingMode0);
      assertEquals(0, duration1.getStandardHours());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1813L));
      Duration duration1 = duration0.negated();
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      Duration duration2 = duration1.dividedBy((-1813L), roundingMode0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1285L));
      Duration duration1 = duration0.dividedBy((-1285L));
      Minutes minutes0 = duration1.toStandardMinutes();
      assertEquals(0, duration1.getMillis());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1285L));
      Duration duration1 = duration0.dividedBy((-1285L));
      Minutes minutes0 = duration1.toStandardMinutes();
      assertEquals(0, duration0.getStandardMinutes());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1285L));
      Duration duration1 = duration0.dividedBy((-1285L));
      Minutes minutes0 = duration1.toStandardMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1165L));
      Duration duration1 = duration0.withMillis((-1165L));
      Duration duration2 = duration1.dividedBy((-604800000L));
      assertEquals(0, duration2.getMillis());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1165L));
      Duration duration1 = duration0.withMillis((-1165L));
      Duration duration2 = duration1.dividedBy((-604800000L));
      assertEquals(0, duration1.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1165L));
      Duration duration1 = duration0.withMillis((-1165L));
      Duration duration2 = duration1.dividedBy((-604800000L));
      assertEquals(0, duration0.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Duration duration0 = Duration.standardDays(2595L);
      Duration duration1 = duration0.dividedBy((-1L));
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Duration duration0 = new Duration((-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration0.withDurationAdded((ReadableDuration) duration0, 1052);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 1052
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Duration duration0 = new Duration(945L, 529L);
      // Undeclared exception!
      try { 
        duration0.withDurationAdded((-9223372036854775808L), (-1));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      // Undeclared exception!
      try { 
        duration0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -1298798110310400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Duration duration0 = days0.toStandardDuration();
      // Undeclared exception!
      try { 
        duration0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -3092376453120
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Duration duration0 = days0.toStandardDuration();
      // Undeclared exception!
      try { 
        duration0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 51539607528
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      // Undeclared exception!
      try { 
        duration0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -15032385536
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardSeconds(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 9223372036854775807 * 1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardMinutes((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 60000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardHours((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.standardDays(100000000000000L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 100000000000000 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Duration duration0 = Duration.millis((-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration0.plus((ReadableDuration) duration0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 + -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-4917L));
      // Undeclared exception!
      try { 
        duration0.plus((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -424828800000 + -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        Duration.parse("G");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"G\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Duration duration0 = new Duration(147L);
      // Undeclared exception!
      try { 
        duration0.multipliedBy((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 147 * -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      Instant instant0 = Instant.EPOCH;
      Duration duration0 = mutablePeriod0.toDurationTo(instant0);
      Duration duration1 = duration0.withDurationAdded(105L, 2146807062);
      Duration duration2 = duration0.plus((-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration2.minus((ReadableDuration) duration1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 + -225414741510
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Duration duration0 = new Duration(1185L, (-628L));
      // Undeclared exception!
      try { 
        duration0.minus((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2004L));
      // Undeclared exception!
      try { 
        duration0.dividedBy((-2004L), (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1524L);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        duration0.dividedBy(0L, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Duration duration0 = Duration.millis((-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration0.dividedBy((-1L));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 / -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Duration duration0 = Duration.millis((-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration0.abs();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Negation of this duration would overflow
         //
         verifyException("org.joda.time.Duration", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Object object0 = new Object();
      Duration duration0 = null;
      try {
        duration0 = new Duration(object0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // No duration converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Duration duration0 = null;
      try {
        duration0 = new Duration((-9223372036854775808L), 1429L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1429 - -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1198L));
      Duration duration1 = duration0.withDurationAdded(0L, 0);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      assertEquals(0, duration0.getStandardHours());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      long long0 = duration0.getStandardDays();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(95L);
      long long0 = duration0.getStandardMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(95L);
      long long0 = duration0.getStandardMinutes();
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      long long0 = duration0.getStandardSeconds();
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Duration duration1 = duration0.abs();
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Duration duration1 = duration0.abs();
      assertEquals(1, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1606L));
      Duration duration1 = duration0.ZERO.abs();
      assertEquals(1, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1606L));
      Duration duration1 = duration0.ZERO.abs();
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Duration duration0 = Duration.millis((-9223372036854775808L));
      // Undeclared exception!
      try { 
        duration0.negated();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Negation of this duration would overflow
         //
         verifyException("org.joda.time.Duration", e);
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1L);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      Duration duration1 = duration0.ZERO.dividedBy(1L, roundingMode0);
      assertEquals(0, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1L);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      Duration duration1 = duration0.ZERO.dividedBy(1L, roundingMode0);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      RoundingMode roundingMode0 = RoundingMode.UP;
      Duration duration1 = duration0.dividedBy((-12L), roundingMode0);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1L);
      Duration duration1 = duration0.dividedBy(1L);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1L);
      Duration duration1 = duration0.dividedBy(1L);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      // Undeclared exception!
      try { 
        duration0.dividedBy(0L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Duration duration0 = new Duration(829L, 829L);
      Duration duration1 = duration0.multipliedBy(1);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Duration duration1 = duration0.plus((ReadableDuration) duration0);
      assertEquals(0, duration1.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Duration duration0 = new Duration(2188L);
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(0, duration1.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Duration duration0 = new Duration(147L);
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 1);
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) null, 976);
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-49L));
      Duration duration1 = duration0.withDurationAdded((-49L), 0);
      ;
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-49L));
      Duration duration1 = duration0.withDurationAdded((-49L), 0);
      ;
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Duration duration0 = Duration.millis((-1192L));
      Duration duration1 = duration0.withMillis((-1192L));
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Duration duration0 = new Duration(945L, 529L);
      Duration duration1 = duration0.withMillis(0L);
      ;
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0);
      assertEquals(0, duration0.getMillis());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Duration duration1 = duration0.withDurationAdded(0L, 0);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Duration duration1 = duration0.minus((ReadableDuration) duration0);
      ;
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Duration duration1 = duration0.ZERO.plus((ReadableDuration) null);
      ;
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Duration duration0 = new Duration(945L, 529L);
      Minutes minutes0 = duration0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Duration duration0 = new Duration(945L, 529L);
      Hours hours0 = duration0.toStandardHours();
      assertEquals(0, hours0.getHours());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(829L);
      Duration duration0 = new Duration(instant0, instant0);
      ;
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Days days0 = duration0.toStandardDays();
      ;
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Days days0 = duration0.toStandardDays();
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Days days0 = duration0.toStandardDays();
      assertEquals(0, days0.getDays());
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Duration duration1 = duration0.toDuration();
      assertEquals(0, duration1.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Duration duration0 = new Duration(945L, 529L);
      Duration duration1 = duration0.minus(30L);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Duration duration1 = duration0.minus(0L);
      ;
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      long long0 = duration0.getStandardHours();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      long long0 = duration0.getStandardHours();
      ;
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(0, duration0.getStandardSeconds());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1987L));
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
}
}
