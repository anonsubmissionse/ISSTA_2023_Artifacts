/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 20:29:58 GMT 2022
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.ReadablePartial;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.DelegatedDurationField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.UnsupportedDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DelegatedDurationField_ESTest extends DelegatedDurationField_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      boolean boolean0 = delegatedDurationField0.isSupported();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.hours();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      boolean boolean0 = delegatedDurationField0.isPrecise();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.days();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getValueAsLong(2592000000L, (long) (-2026));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getValueAsLong((-1745L), (-1745L));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, (DurationFieldType) null);
      long long0 = delegatedDurationField0.getValueAsLong(3155695200000L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getValueAsLong((-1L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.days();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      int int0 = delegatedDurationField0.getValue(86400000L, 21600000L);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      int int0 = delegatedDurationField0.getValue((-2L), (-2L));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, (DurationFieldType) null);
      int int0 = delegatedDurationField0.getValue(9334546444800000L);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      int int0 = delegatedDurationField0.getValue((-1422L));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.eras();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getUnitMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(1839);
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-2767L));
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0, durationFieldType0);
      long long0 = delegatedDurationField0.getUnitMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance((DurationFieldType) null);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      DurationFieldType durationFieldType0 = delegatedDurationField0.getType();
      assertNotNull(durationFieldType0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.hours();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis(0L, 1425L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, (DurationFieldType) null);
      long long0 = delegatedDurationField0.getMillis((-478L), 0L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.months();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      long long0 = delegatedDurationField0.getMillis(0L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, (DurationFieldType) null);
      long long0 = delegatedDurationField0.getMillis((long) 1);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis(0, (-2259L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis(25734375, 3948L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis(1);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis((-3282));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getDifferenceAsLong(1, (-1092L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.millis();
      LocalTime localTime0 = new LocalTime(1, 0, 1, 1, buddhistChronology0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      long long0 = delegatedDurationField0.getDifferenceAsLong((-1848L), 2629746000L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.hours();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      int int0 = delegatedDurationField0.getDifference(21859200000L, (-1L));
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0, (DurationFieldType) null);
      int int0 = delegatedDurationField0.getDifference(714L, 1921L);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-544));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DurationField durationField1 = durationFieldType0.getField(strictChronology0);
      int int0 = delegatedDurationField0.compareTo(durationField1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.hours();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      DurationField durationField1 = buddhistChronology0.years();
      int int0 = delegatedDurationField0.compareTo(durationField1);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.weeks();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.add(0L, 0L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.hours();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.add(0L, 3600000L);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.weeks();
      Months months0 = Months.SEVEN;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      long long0 = delegatedDurationField0.add((-3683L), (-1L));
      ;
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0, durationFieldType0);
      long long0 = delegatedDurationField0.add(0L, 0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.days();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.add(21600000L, (-2026));
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-569));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValueAsLong(0L, (-1795590547200000L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000-00:00:00.569 (BuddhistChronology[-00:00:00.569])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.eras();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValueAsLong((-729L), 2614L);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValueAsLong(675L, (-1386L));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValueAsLong(1620L);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // weekyears field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValueAsLong(0L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.eras();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValue(2655L, 0L);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValue((-12219292800000L), (-824L));
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -12219292800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.eras();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValue(0L);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getValue(15308640144L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15308640144
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance((DurationFieldType) null);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0, (DurationFieldType) null);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getName();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DelegatedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(7678125);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis((long) 7678125, (long) 7678125);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Value 767814470 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis((long) 1, (long) 1);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      Weeks weeks0 = Weeks.MAX_VALUE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(3155695200000L, 167L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 315569520000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(3600L);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // days field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(604800000L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 604800000 * 31556952000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(0, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(1, 31622400000L);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // halfdays field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(25734375, (long) 327);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2573437500
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getMillis(0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // weekyears field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-569));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getDifferenceAsLong((-1795590547200000L), 1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000-00:00:00.569 (BuddhistChronology[-00:00:00.569])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.eras();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getDifferenceAsLong(1, 2793L);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-569));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getDifference(0L, (-1795590547200000L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The subtrahend instant is below the supported minimum of 0001-01-01T00:00:00.000-00:00:00.569 (BuddhistChronology[-00:00:00.569])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getDifference(1, 1);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.millis();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.getDifference(0L, 31449600000L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -31449600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.weeks();
      Months months0 = Months.SEVEN;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.compareTo((DurationField) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.add((-1997L), (-2012L));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.add((-1L), (-1L));
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // hours field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-544));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.add(0L, (-544));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000-00:00:00.544 (BuddhistChronology[-00:00:00.544])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.add(0L, 1194);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = null;
      try {
        delegatedDurationField0 = new DelegatedDurationField((DurationField) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.add((-3029L), 5143824000000L);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 5143824000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-544));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      long long0 = delegatedDurationField0.add((-675L), 1);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance((DurationFieldType) null);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      // Undeclared exception!
      try { 
        delegatedDurationField0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-544));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      String string0 = delegatedDurationField0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      boolean boolean0 = delegatedDurationField0.equals(delegatedDurationField0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      boolean boolean0 = delegatedDurationField0.equals(buddhistChronology0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DelegatedDurationField delegatedDurationField0 = null;
      try {
        delegatedDurationField0 = new DelegatedDurationField((DurationField) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDurationField", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      boolean boolean0 = delegatedDurationField0.isSupported();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      int int0 = delegatedDurationField0.getDifference(2660L, 0L);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getUnitMillis();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      boolean boolean0 = delegatedDurationField0.isPrecise();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getValueAsLong(0L, 0L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      int int0 = delegatedDurationField0.getValue(43200000L);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      int int0 = delegatedDurationField0.getValue(3948L, 3948L);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis(2660L, 434L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      long long0 = delegatedDurationField0.getMillis((-1), (long) 355);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-544));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      long long0 = delegatedDurationField0.getMillis((-675L));
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      long long0 = delegatedDurationField0.getMillis(0);
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      int int0 = delegatedDurationField0.compareTo((DurationField) millisDurationField0);
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      DurationField durationField1 = delegatedDurationField0.getWrappedField();
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-569));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.minutes();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      long long0 = delegatedDurationField0.getValueAsLong((long) 1);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-544));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0, durationFieldType0);
      long long0 = delegatedDurationField0.getDifferenceAsLong((-1000L), 0L);
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(355);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weekyears();
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField0);
      DurationFieldType durationFieldType0 = delegatedDurationField0.getType();
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      delegatedDurationField0.hashCode();
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      String string0 = delegatedDurationField0.getName();
      ;
}
}
