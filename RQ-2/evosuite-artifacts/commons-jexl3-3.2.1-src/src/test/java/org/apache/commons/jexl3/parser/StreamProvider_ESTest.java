/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:14:45 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import org.apache.commons.jexl3.parser.StreamProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StreamProvider_ESTest extends StreamProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vA6[V!Z&8&4");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      char[] charArray0 = new char[3];
      int int0 = streamProvider0.read(charArray0, 1, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      char[] charArray0 = new char[7];
      int int0 = streamProvider0.read(charArray0, 1, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StreamProvider streamProvider0 = new StreamProvider((Reader) null);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        streamProvider0.read(charArray0, 194, 4515);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.StreamProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      StreamProvider streamProvider0 = new StreamProvider(pipedInputStream0, charset0);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        streamProvider0.read(charArray0, (-460), (-1509));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      StreamProvider streamProvider0 = new StreamProvider(dataInputStream0, charset0);
      char[] charArray0 = new char[2];
      streamProvider0.close();
      try { 
        streamProvider0.read(charArray0, (-1592), (-1592));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      StreamProvider streamProvider0 = null;
      try {
        streamProvider0 = new StreamProvider(dataInputStream0, "l@.El@b");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StreamProvider streamProvider0 = new StreamProvider((Reader) null);
      streamProvider0.close();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jexl3.parser.StreamProvider");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      char[] charArray0 = new char[0];
      int int0 = streamProvider0.read(charArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">}B^q!@zckHv");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      char[] charArray0 = new char[17];
      int int0 = streamProvider0.read(charArray0, 1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StreamProvider streamProvider0 = null;
      try {
        streamProvider0 = new StreamProvider((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Charset charset0 = Charset.defaultCharset();
      StreamProvider streamProvider0 = new StreamProvider(dataInputStream0, charset0);
      // Undeclared exception!
      try { 
        streamProvider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StreamProvider streamProvider0 = null;
      try {
        streamProvider0 = new StreamProvider((InputStream) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
}
