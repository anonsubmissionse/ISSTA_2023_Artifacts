/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:01:21 GMT 2022
 */

package org.apache.commons.jexl3.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.jexl3.internal.IntegerRange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntegerRange_ESTest extends IntegerRange_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1462, 1462);
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = integerRange0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1462, 1462);
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = integerRange0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1426, 1426);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1426, 1842);
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1426, 1426);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1426, 1842);
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1426, 1426);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1426, 1842);
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
      assertEquals(0, integerRange_Descending1.size());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2408, (-1218));
      IntegerRange.Ascending integerRange_Ascending1 = new IntegerRange.Ascending(2042, (-1218));
      boolean boolean0 = integerRange_Ascending0.equals(integerRange_Ascending1);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2408, (-1218));
      IntegerRange.Ascending integerRange_Ascending1 = new IntegerRange.Ascending(2042, (-1218));
      boolean boolean0 = integerRange_Ascending0.equals(integerRange_Ascending1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2408, (-1218));
      IntegerRange.Ascending integerRange_Ascending1 = new IntegerRange.Ascending(2042, (-1218));
      boolean boolean0 = integerRange_Ascending0.equals(integerRange_Ascending1);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-900), 1);
      integerRange0.hashCode();
      assertEquals(1, integerRange0.size());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-584), (-1));
      int int0 = integerRange0.getMin();
      assertEquals(1, integerRange0.size());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-584), (-1));
      int int0 = integerRange0.getMin();
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending((-967), 1);
      integerRange_Ascending0.iterator();
      assertEquals(1, integerRange_Ascending0.size());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending((-5), (-5));
      Object[] objectArray0 = integerRange_Ascending0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending((-5), (-5));
      Object[] objectArray0 = integerRange_Ascending0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 0);
      Object[] objectArray0 = integerRange_Descending0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 0);
      Object[] objectArray0 = integerRange_Descending0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 1);
      int int0 = integerRange_Descending0.size();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(1, (-1939));
      int int0 = integerRange_Ascending0.size();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      int int0 = integerRange0.getMin();
      assertEquals(0, integerRange0.size());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      int int0 = integerRange0.getMin();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      int int0 = integerRange0.getMax();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      int int0 = integerRange0.getMax();
      assertEquals(0, integerRange0.size());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2294, (-553));
      int int0 = integerRange_Ascending0.getMax();
      assertEquals(0, integerRange_Ascending0.size());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2294, (-553));
      int int0 = integerRange_Ascending0.getMax();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending((-1465), 1);
      // Undeclared exception!
      try { 
        integerRange_Descending0.toArray((String[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, (-1490));
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        integerRange_Descending0.toArray(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(1, (-1));
      // Undeclared exception!
      try { 
        integerRange_Ascending0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.IntegerRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending((-403), (-403));
      // Undeclared exception!
      try { 
        integerRange_Ascending0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.IntegerRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 1);
      Short short0 = new Short((short)13);
      boolean boolean0 = integerRange_Descending0.contains(short0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 1);
      Short short0 = new Short((short)13);
      boolean boolean0 = integerRange_Descending0.contains(short0);
      assertEquals(0, integerRange_Descending0.size());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 536);
      Short short0 = new Short((short)13);
      boolean boolean0 = integerRange_Descending0.contains(short0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 536);
      Short short0 = new Short((short)13);
      boolean boolean0 = integerRange_Descending0.contains(short0);
      assertEquals(0, integerRange_Descending0.size());
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      boolean boolean0 = integerRange0.contains((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      boolean boolean0 = integerRange0.contains((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(1924, 1923);
      int int0 = integerRange_Ascending0.size();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending((-1465), 1);
      Integer[] integerArray0 = new Integer[13];
      Integer[] integerArray1 = integerRange_Descending0.toArray(integerArray0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending((-1465), 1);
      Integer[] integerArray0 = new Integer[13];
      Integer[] integerArray1 = integerRange_Descending0.toArray(integerArray0);
      assertEquals(0, integerRange_Descending0.size());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(3506, 3506);
      IntegerRange[] integerRangeArray0 = new IntegerRange[4];
      // Undeclared exception!
      try { 
        integerRange_Ascending0.toArray(integerRangeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.IntegerRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = linkedList0.addAll((Collection<?>) integerRange0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = linkedList0.addAll((Collection<?>) integerRange0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(0, 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1445);
      linkedList0.push(integer0);
      boolean boolean0 = integerRange_Ascending0.containsAll(linkedList0);
      assertEquals(0, integerRange_Ascending0.size());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(0, 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1445);
      linkedList0.push(integer0);
      boolean boolean0 = integerRange_Ascending0.containsAll(linkedList0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-17), (-17));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-17));
      linkedList0.add(double0);
      boolean boolean0 = integerRange0.containsAll(linkedList0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-17), (-17));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-17));
      linkedList0.add(double0);
      boolean boolean0 = integerRange0.containsAll(linkedList0);
      assertEquals(0, integerRange0.size());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      Float float0 = new Float(636.4452);
      boolean boolean0 = integerRange0.contains(float0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      Float float0 = new Float(636.4452);
      boolean boolean0 = integerRange0.contains(float0);
      assertEquals(0, integerRange0.size());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, 1435);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1387, (-1490));
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
      assertEquals(0, integerRange_Descending1.size());
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, 1435);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1387, (-1490));
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, 1435);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1387, (-1490));
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
      ;
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-1215), 2408);
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2042, (-1215));
      boolean boolean0 = integerRange0.equals(integerRange_Ascending0);
      assertEquals(0, integerRange0.size());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-1215), 2408);
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2042, (-1215));
      boolean boolean0 = integerRange0.equals(integerRange_Ascending0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, 1435);
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, 1435);
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(18, 18);
      boolean boolean0 = integerRange_Ascending0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(18, 18);
      boolean boolean0 = integerRange_Ascending0.equals((Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      Float float0 = new Float(636.4452);
      boolean boolean0 = integerRange0.equals(float0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      Float float0 = new Float(636.4452);
      boolean boolean0 = integerRange0.equals(float0);
      assertEquals(0, integerRange0.size());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending((-1465), 1);
      integerRange_Descending0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(5, 5);
      integerRange_Ascending0.iterator();
      assertEquals(0, integerRange_Ascending0.size());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1975, 1975);
      // Undeclared exception!
      try { 
        integerRange0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.IntegerRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending((-1), (-1));
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        integerRange_Ascending0.remove(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.IntegerRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(5, 5);
      boolean boolean0 = integerRange_Ascending0.isEmpty();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(5, 5);
      boolean boolean0 = integerRange_Ascending0.isEmpty();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(5, 5);
      int int0 = integerRange_Ascending0.getMax();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(5, 5);
      int int0 = integerRange_Ascending0.getMax();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(0, 0);
      Integer integer0 = new Integer(1445);
      // Undeclared exception!
      try { 
        integerRange_Ascending0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.IntegerRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1975, 1975);
      int int0 = integerRange0.getMin();
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1975, 1975);
      int int0 = integerRange0.getMin();
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-17), (-17));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        integerRange0.addAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.IntegerRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      // Undeclared exception!
      try { 
        integerRange0.retainAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.IntegerRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(13, (-1014));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        integerRange_Ascending0.removeAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.IntegerRange", e);
      }
  }
}
