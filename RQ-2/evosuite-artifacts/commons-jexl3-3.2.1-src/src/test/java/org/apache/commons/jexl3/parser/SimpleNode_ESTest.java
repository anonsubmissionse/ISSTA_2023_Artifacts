/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:11:55 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.parser.ASTAmbiguous;
import org.apache.commons.jexl3.parser.ASTAnnotation;
import org.apache.commons.jexl3.parser.ASTAssignment;
import org.apache.commons.jexl3.parser.ASTBitwiseAndNode;
import org.apache.commons.jexl3.parser.ASTBitwiseComplNode;
import org.apache.commons.jexl3.parser.ASTConstructorNode;
import org.apache.commons.jexl3.parser.ASTDivNode;
import org.apache.commons.jexl3.parser.ASTEQNode;
import org.apache.commons.jexl3.parser.ASTEmptyFunction;
import org.apache.commons.jexl3.parser.ASTExtendedLiteral;
import org.apache.commons.jexl3.parser.ASTIdentifierAccess;
import org.apache.commons.jexl3.parser.ASTIdentifierAccessJxlt;
import org.apache.commons.jexl3.parser.ASTJexlLambda;
import org.apache.commons.jexl3.parser.ASTJexlScript;
import org.apache.commons.jexl3.parser.ASTModNode;
import org.apache.commons.jexl3.parser.ASTMulNode;
import org.apache.commons.jexl3.parser.ASTNSWNode;
import org.apache.commons.jexl3.parser.ASTNullLiteral;
import org.apache.commons.jexl3.parser.ASTNumberLiteral;
import org.apache.commons.jexl3.parser.ASTRangeNode;
import org.apache.commons.jexl3.parser.ASTReferenceExpression;
import org.apache.commons.jexl3.parser.ASTRegexLiteral;
import org.apache.commons.jexl3.parser.ASTSetAndNode;
import org.apache.commons.jexl3.parser.ASTSetDivNode;
import org.apache.commons.jexl3.parser.ASTSetLiteral;
import org.apache.commons.jexl3.parser.ASTSetModNode;
import org.apache.commons.jexl3.parser.ASTSubNode;
import org.apache.commons.jexl3.parser.ASTUnaryMinusNode;
import org.apache.commons.jexl3.parser.FeatureController;
import org.apache.commons.jexl3.parser.JexlNode;
import org.apache.commons.jexl3.parser.Node;
import org.apache.commons.jexl3.parser.OperatorController;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.ParserVisitor;
import org.apache.commons.jexl3.parser.SimpleNode;
import org.apache.commons.jexl3.parser.StreamProvider;
import org.apache.commons.jexl3.parser.StringProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      aSTNSWNode0.jjtAddChild(aSTNSWNode0, 0);
      aSTNSWNode0.jjtAddChild(aSTNSWNode0, 1);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      aSTIdentifierAccessJxlt0.setIdentifier("");
      aSTIdentifierAccessJxlt0.toString("");
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      aSTIdentifierAccessJxlt0.toString();
      assertEquals(0, aSTIdentifierAccessJxlt0.getId());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      aSTIdentifierAccessJxlt0.setIdentifier("");
      aSTIdentifierAccessJxlt0.toString();
      assertEquals(0, aSTIdentifierAccessJxlt0.getId());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      aSTNSWNode0.jjtSetValue(aSTNSWNode0);
      ASTNSWNode aSTNSWNode1 = (ASTNSWNode)aSTNSWNode0.jjtGetValue();
      assertEquals(0, aSTNSWNode1.getId());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser("*D");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTIdentifierAccessJxlt0.jjtAddChild(aSTJexlScript0, 627);
      aSTJexlScript0.jjtSetParent(aSTIdentifierAccessJxlt0);
      assertEquals(1, aSTIdentifierAccessJxlt0.jjtGetNumChildren());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser("*D");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTIdentifierAccessJxlt0.jjtAddChild(aSTJexlScript0, 627);
      aSTJexlScript0.jjtSetParent(aSTIdentifierAccessJxlt0);
      JexlNode jexlNode0 = aSTJexlScript0.jjtGetParent();
      assertEquals(1, jexlNode0.jjtGetNumChildren());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser("*D");
      ASTDivNode aSTDivNode0 = new ASTDivNode(parser0, 8);
      aSTIdentifierAccessJxlt0.jjtSetParent(aSTDivNode0);
      JexlNode jexlNode0 = aSTIdentifierAccessJxlt0.jjtGetParent();
      assertEquals(1, jexlNode0.getId());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction((-160));
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode((-160));
      aSTEmptyFunction0.jjtSetParent(aSTSetDivNode0);
      JexlNode jexlNode0 = aSTEmptyFunction0.jjtGetParent();
      assertEquals(0, jexlNode0.getId());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTIdentifierAccessJxlt0.jjtSetFirstToken(parser0.jj_nt);
      aSTJexlScript0.jjtSetParent(aSTIdentifierAccessJxlt0);
      JexlNode jexlNode0 = aSTJexlScript0.jjtGetParent();
      assertEquals(0, jexlNode0.getId());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser("*D");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTIdentifierAccessJxlt0.jjtAddChild(aSTJexlScript0, 627);
      aSTIdentifierAccessJxlt0.jjtGetChild(0);
      assertEquals(0, aSTIdentifierAccessJxlt0.jjtGetNumChildren());
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(831);
      Parser parser0 = new Parser("[?v9)Hf(y3");
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 141);
      aSTUnaryMinusNode0.jjtAddChild(aSTBitwiseComplNode0, 141);
      aSTUnaryMinusNode0.jjtGetChild(141);
      assertEquals(0, aSTUnaryMinusNode0.jjtGetNumChildren());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parser parser0 = new Parser("");
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(parser0, (-2670));
      JexlNode[] jexlNodeArray0 = new JexlNode[4];
      jexlNodeArray0[0] = (JexlNode) aSTRegexLiteral0;
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(parser0, 0);
      aSTUnaryMinusNode0.jjtSetChildren(jexlNodeArray0);
      JexlNode jexlNode0 = aSTUnaryMinusNode0.jjtGetChild(0);
      assertEquals(0, jexlNode0.getId());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      aSTNSWNode0.jjtAddChild(aSTNSWNode0, 0);
      aSTNSWNode0.jjtGetChild(0);
      assertEquals(0, aSTNSWNode0.jjtGetNumChildren());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASTReferenceExpression aSTReferenceExpression0 = new ASTReferenceExpression(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      aSTReferenceExpression0.jjtAccept(featureController0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(0);
      OperatorController operatorController0 = OperatorController.INSTANCE;
      aSTConstructorNode0.jjtAccept(operatorController0, operatorController0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASTModNode aSTModNode0 = new ASTModNode(40);
      int int0 = aSTModNode0.getId();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ASTIdentifierAccess aSTIdentifierAccess0 = new ASTIdentifierAccess((Parser) null, (-1811));
      int int0 = aSTIdentifierAccess0.getId();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASTAmbiguous aSTAmbiguous0 = new ASTAmbiguous(1397);
      aSTAmbiguous0.childrenAccept((ParserVisitor) null, (Object) null);
      assertEquals(0, aSTAmbiguous0.getId());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-553));
      // Undeclared exception!
      try { 
        aSTJexlLambda0.toString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -553
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(0);
      aSTSetLiteral0.jjtAddChild((Node) null, 1);
      // Undeclared exception!
      try { 
        aSTSetLiteral0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Debugger", e);
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("\"do\"");
      Parser parser0 = new Parser(stringProvider0);
      ASTAssignment aSTAssignment0 = new ASTAssignment(parser0, 3024);
      // Undeclared exception!
      try { 
        aSTAssignment0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3024
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(82);
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        aSTBitwiseAndNode0.jjtSetParent(simpleNode0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jexl3.parser.SimpleNode cannot be cast to org.apache.commons.jexl3.parser.JexlNode
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ASTRangeNode aSTRangeNode0 = new ASTRangeNode(1261);
      JexlNode[] jexlNodeArray0 = new JexlNode[4];
      jexlNodeArray0[0] = (JexlNode) aSTRangeNode0;
      aSTRangeNode0.jjtSetChildren(jexlNodeArray0);
      // Undeclared exception!
      try { 
        jexlNodeArray0[0].jjtGetChild(1677);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X&xasWaGE-c6F>)#1Gv");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTSetAndNode aSTSetAndNode0 = new ASTSetAndNode(parser0, (-367));
      ASTSubNode aSTSubNode0 = new ASTSubNode(123);
      // Undeclared exception!
      try { 
        aSTSetAndNode0.jjtAddChild(aSTSubNode0, (-367));
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ASTMulNode aSTMulNode0 = new ASTMulNode((Parser) null, 2798);
      SimpleNode simpleNode0 = new SimpleNode((Parser) null, 2798);
      // Undeclared exception!
      try { 
        aSTMulNode0.jjtAddChild(simpleNode0, 2798);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jexl3.parser.SimpleNode cannot be cast to org.apache.commons.jexl3.parser.JexlNode
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ASTDivNode aSTDivNode0 = new ASTDivNode(0);
      Parser parser0 = new Parser(":.=Qf.w81C-K,{p");
      ASTEQNode aSTEQNode0 = new ASTEQNode(parser0, 0);
      // Undeclared exception!
      try { 
        aSTDivNode0.jjtAddChild(aSTEQNode0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode((-1871));
      // Undeclared exception!
      try { 
        aSTSetModNode0.dump("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1871
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(0);
      aSTConstructorNode0.dump("");
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTJexlScript0.jjtGetParent();
      assertEquals(0, aSTJexlScript0.getId());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      aSTNSWNode0.jjtGetValue();
      assertEquals(0, aSTNSWNode0.getId());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      String string0 = aSTNSWNode0.toString("JexlScript");
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      String string0 = aSTNSWNode0.toString();
      assertEquals(0, aSTNSWNode0.getId());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      String string0 = aSTNSWNode0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      JexlNode[] jexlNodeArray0 = new JexlNode[2];
      jexlNodeArray0[0] = (JexlNode) aSTNSWNode0;
      jexlNodeArray0[1] = (JexlNode) aSTNSWNode0;
      aSTNSWNode0.jjtSetChildren(jexlNodeArray0);
      OperatorController operatorController0 = new OperatorController();
      ASTNSWNode aSTNSWNode1 = (ASTNSWNode)aSTNSWNode0.childrenAccept(operatorController0, aSTNSWNode0);
      assertEquals(0, aSTNSWNode1.getId());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Parser parser0 = new Parser("*D");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      int int0 = aSTJexlScript0.jjtGetNumChildren();
      assertEquals(0, aSTJexlScript0.getId());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Parser parser0 = new Parser("*D");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      int int0 = aSTJexlScript0.jjtGetNumChildren();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      JexlNode[] jexlNodeArray0 = new JexlNode[2];
      jexlNodeArray0[0] = (JexlNode) aSTNSWNode0;
      aSTNSWNode0.jjtSetChildren(jexlNodeArray0);
      assertEquals(1, aSTNSWNode0.jjtGetNumChildren());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      JexlNode[] jexlNodeArray0 = new JexlNode[2];
      jexlNodeArray0[0] = (JexlNode) aSTNSWNode0;
      aSTNSWNode0.jjtSetChildren(jexlNodeArray0);
      int int0 = jexlNodeArray0[0].jjtGetNumChildren();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ASTNullLiteral aSTNullLiteral0 = new ASTNullLiteral((-1));
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(830);
      aSTNullLiteral0.jjtAddChild(aSTAnnotation0, 830);
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral((-1));
      aSTNullLiteral0.jjtAddChild(aSTNumberLiteral0, 57);
      assertEquals(1, aSTNullLiteral0.jjtGetNumChildren());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      JexlNode[] jexlNodeArray0 = new JexlNode[2];
      jexlNodeArray0[1] = (JexlNode) aSTNSWNode0;
      aSTNSWNode0.jjtSetChildren(jexlNodeArray0);
      jexlNodeArray0[1].jjtAddChild(jexlNodeArray0[0], 22);
      ;
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Parser parser0 = new Parser("*D");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      int int0 = aSTJexlScript0.getId();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Parser parser0 = new Parser("*D");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      // Undeclared exception!
      try { 
        aSTJexlScript0.jjtGetChild(14);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      aSTNSWNode0.jjtClose();
      assertEquals(0, aSTNSWNode0.getId());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral((Parser) null, 0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAccept(operatorController0, aSTExtendedLiteral0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // SimpleNode : not supported yet.
         //
         verifyException("org.apache.commons.jexl3.parser.ParserVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      aSTNSWNode0.jjtOpen();
      assertEquals(0, aSTNSWNode0.getId());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      JexlNode[] jexlNodeArray0 = new JexlNode[2];
      aSTNSWNode0.jjtSetChildren(jexlNodeArray0);
      OperatorController operatorController0 = new OperatorController();
      // Undeclared exception!
      try { 
        aSTNSWNode0.childrenAccept(operatorController0, aSTNSWNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser("*D");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTIdentifierAccessJxlt0.jjtAddChild(aSTJexlScript0, 627);
      aSTIdentifierAccessJxlt0.dump("*D");
      assertEquals(0, aSTIdentifierAccessJxlt0.jjtGetNumChildren());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ASTAmbiguous aSTAmbiguous0 = new ASTAmbiguous(1397);
      ASTAssignment aSTAssignment0 = new ASTAssignment((-603));
      // Undeclared exception!
      try { 
        aSTAmbiguous0.jjtAccept((ParserVisitor) null, aSTAssignment0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.ASTAmbiguous", e);
      }
  }
}
