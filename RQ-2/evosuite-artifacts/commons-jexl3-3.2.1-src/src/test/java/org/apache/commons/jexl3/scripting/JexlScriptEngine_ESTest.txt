 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine(jexlScriptEngineFactory0);
      ScriptContext scriptContext0 = jexlScriptEngine0.getContext();
      Object object0 = jexlScriptEngine0.eval("", scriptContext0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      StringReader stringReader0 = new StringReader("JEXL");
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      Object object0 = jexlScriptEngine0.eval((Reader) stringReader0, (ScriptContext) simpleScriptContext0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine(jexlScriptEngineFactory0);
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      Reader reader0 = simpleScriptContext0.getReader();
      jexlScriptEngine0.compile(reader0);
      try { 
        jexlScriptEngine0.eval(reader0, (ScriptContext) simpleScriptContext0);
        fail("Expecting exception: ScriptException");
      } catch(ScriptException e) {
         //
         // java.io.IOException: Simulated exception in System.in
         //
         verifyException("org.apache.commons.jexl3.scripting.JexlScriptEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      try { 
        jexlScriptEngine0.compile("Log4J 1.2 not available");
        fail("Expecting exception: ScriptException");
      } catch(ScriptException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Log4J 1.2 not available
         //
         verifyException("org.apache.commons.jexl3.scripting.JexlScriptEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      StringReader stringReader0 = new StringReader("nPbXY<\be[");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      try { 
        jexlScriptEngine0.compile((Reader) bufferedReader0);
        fail("Expecting exception: ScriptException");
      } catch(ScriptException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: 
         //
         verifyException("org.apache.commons.jexl3.scripting.JexlScriptEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      CompiledScript compiledScript0 = jexlScriptEngine0.compile("JEXL");
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      jexlScriptEngine0.eval("GA=7");
      ScriptContext scriptContext0 = jexlScriptEngine0.getContext();
      Object object0 = jexlScriptEngine0.eval("GA=7", scriptContext0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine(jexlScriptEngineFactory0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      SimpleBindings simpleBindings0 = new SimpleBindings();
      simpleBindings0.put("JEXL", (Object) jexlScriptEngine_JexlScriptObject0);
      Object object0 = jexlScriptEngine0.eval("JEXL", (Bindings) simpleBindings0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine(jexlScriptEngineFactory0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      SimpleBindings simpleBindings0 = new SimpleBindings();
      simpleBindings0.put("JEXL", (Object) jexlScriptEngine_JexlScriptObject0);
      Object object0 = jexlScriptEngine0.eval("JEXL", (Bindings) simpleBindings0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      // Undeclared exception!
      try { 
        jexlScriptEngine0.compile((Reader) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // script must be non-null
         //
         verifyException("org.apache.commons.jexl3.scripting.JexlScriptEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      // Undeclared exception!
      try { 
        jexlScriptEngine0.compile((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // script must be non-null
         //
         verifyException("org.apache.commons.jexl3.scripting.JexlScriptEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      // Undeclared exception!
      try { 
        jexlScriptEngine0.eval("\"and\"", (ScriptContext) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // script and context must be non-null
         //
         verifyException("org.apache.commons.jexl3.scripting.JexlScriptEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      ScriptContext scriptContext0 = jexlScriptEngine0.getContext();
      // Undeclared exception!
      try { 
        jexlScriptEngine0.eval((String) null, scriptContext0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // script and context must be non-null
         //
         verifyException("org.apache.commons.jexl3.scripting.JexlScriptEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      StringReader stringReader0 = new StringReader("context");
      // Undeclared exception!
      try { 
        jexlScriptEngine0.eval((Reader) stringReader0, (ScriptContext) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // script and context must be non-null
         //
         verifyException("org.apache.commons.jexl3.scripting.JexlScriptEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      ScriptContext scriptContext0 = jexlScriptEngine0.getContext();
      // Undeclared exception!
      try { 
        jexlScriptEngine0.eval((Reader) null, scriptContext0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // script and context must be non-null
         //
         verifyException("org.apache.commons.jexl3.scripting.JexlScriptEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = null;
      try {
        jexlScriptEngine0 = new JexlScriptEngine((ScriptEngineFactory) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // ScriptEngineFactory must not be null
         //
         verifyException("org.apache.commons.jexl3.scripting.JexlScriptEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      StringWriter stringWriter0 = new StringWriter();
      simpleScriptContext0.setErrorWriter(stringWriter0);
      jexlScriptEngine0.setContext(simpleScriptContext0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getErr();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getErr();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      simpleScriptContext0.setErrorWriter((Writer) null);
      jexlScriptEngine0.setContext(simpleScriptContext0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getErr();
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      StringWriter stringWriter0 = new StringWriter();
      simpleScriptContext0.setWriter(stringWriter0);
      jexlScriptEngine0.setContext(simpleScriptContext0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getOut();
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getOut();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      simpleScriptContext0.setWriter((Writer) null);
      jexlScriptEngine0.setContext(simpleScriptContext0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getOut();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      Log log0 = jexlScriptEngine_JexlScriptObject0.getLogger();
      assertEquals(jexlScriptEngine0, log0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      Class<System> class0 = jexlScriptEngine_JexlScriptObject0.getSystem();
      assertTrue(class0.isEnum());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      Reader reader0 = jexlScriptEngine_JexlScriptObject0.getIn();
      ScriptContext scriptContext0 = jexlScriptEngine0.getContext();
      Object object0 = jexlScriptEngine0.eval(reader0, scriptContext0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine(jexlScriptEngineFactory0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      JexlEngine jexlEngine0 = jexlScriptEngine_JexlScriptObject0.getEngine();
      assertTrue(jexlEngine0.isSilent());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      try { 
        jexlScriptEngine0.eval("ZADD", (ScriptContext) simpleScriptContext0);
        fail("Expecting exception: ScriptException");
      } catch(ScriptException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: ZADD
         //
         verifyException("org.apache.commons.jexl3.scripting.JexlScriptEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      ScriptEngineFactory scriptEngineFactory0 = jexlScriptEngine0.getFactory();
      assertNotNull(scriptEngineFactory0.getEngineVersion());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      Bindings bindings0 = jexlScriptEngine0.createBindings();
      assertNotNull(bindings0);
}
