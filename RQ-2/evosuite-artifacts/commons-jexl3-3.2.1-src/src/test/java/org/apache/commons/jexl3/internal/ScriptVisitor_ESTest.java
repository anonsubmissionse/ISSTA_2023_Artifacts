/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:17:12 GMT 2022
 */

package org.apache.commons.jexl3.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import org.apache.commons.jexl3.JexlBuilder;
import org.apache.commons.jexl3.JexlEngine;
import org.apache.commons.jexl3.JexlExpression;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.JexlInfo;
import org.apache.commons.jexl3.JexlScript;
import org.apache.commons.jexl3.internal.Closure;
import org.apache.commons.jexl3.internal.Engine;
import org.apache.commons.jexl3.internal.Frame;
import org.apache.commons.jexl3.internal.Scope;
import org.apache.commons.jexl3.internal.Script;
import org.apache.commons.jexl3.internal.ScriptVisitor;
import org.apache.commons.jexl3.internal.TemplateEngine;
import org.apache.commons.jexl3.parser.ASTAddNode;
import org.apache.commons.jexl3.parser.ASTAndNode;
import org.apache.commons.jexl3.parser.ASTAnnotatedStatement;
import org.apache.commons.jexl3.parser.ASTAnnotation;
import org.apache.commons.jexl3.parser.ASTArguments;
import org.apache.commons.jexl3.parser.ASTArrayAccess;
import org.apache.commons.jexl3.parser.ASTArrayLiteral;
import org.apache.commons.jexl3.parser.ASTAssignment;
import org.apache.commons.jexl3.parser.ASTBitwiseAndNode;
import org.apache.commons.jexl3.parser.ASTBitwiseComplNode;
import org.apache.commons.jexl3.parser.ASTBitwiseOrNode;
import org.apache.commons.jexl3.parser.ASTBitwiseXorNode;
import org.apache.commons.jexl3.parser.ASTBlock;
import org.apache.commons.jexl3.parser.ASTBreak;
import org.apache.commons.jexl3.parser.ASTConstructorNode;
import org.apache.commons.jexl3.parser.ASTContinue;
import org.apache.commons.jexl3.parser.ASTDivNode;
import org.apache.commons.jexl3.parser.ASTDoWhileStatement;
import org.apache.commons.jexl3.parser.ASTEQNode;
import org.apache.commons.jexl3.parser.ASTERNode;
import org.apache.commons.jexl3.parser.ASTEWNode;
import org.apache.commons.jexl3.parser.ASTEmptyFunction;
import org.apache.commons.jexl3.parser.ASTExtendedLiteral;
import org.apache.commons.jexl3.parser.ASTFalseNode;
import org.apache.commons.jexl3.parser.ASTForeachStatement;
import org.apache.commons.jexl3.parser.ASTFunctionNode;
import org.apache.commons.jexl3.parser.ASTGENode;
import org.apache.commons.jexl3.parser.ASTGTNode;
import org.apache.commons.jexl3.parser.ASTIdentifierAccess;
import org.apache.commons.jexl3.parser.ASTIfStatement;
import org.apache.commons.jexl3.parser.ASTJexlScript;
import org.apache.commons.jexl3.parser.ASTJxltLiteral;
import org.apache.commons.jexl3.parser.ASTLENode;
import org.apache.commons.jexl3.parser.ASTLTNode;
import org.apache.commons.jexl3.parser.ASTMapEntry;
import org.apache.commons.jexl3.parser.ASTMapLiteral;
import org.apache.commons.jexl3.parser.ASTMethodNode;
import org.apache.commons.jexl3.parser.ASTModNode;
import org.apache.commons.jexl3.parser.ASTMulNode;
import org.apache.commons.jexl3.parser.ASTNENode;
import org.apache.commons.jexl3.parser.ASTNEWNode;
import org.apache.commons.jexl3.parser.ASTNRNode;
import org.apache.commons.jexl3.parser.ASTNSWNode;
import org.apache.commons.jexl3.parser.ASTNamespaceIdentifier;
import org.apache.commons.jexl3.parser.ASTNotNode;
import org.apache.commons.jexl3.parser.ASTNullLiteral;
import org.apache.commons.jexl3.parser.ASTNullpNode;
import org.apache.commons.jexl3.parser.ASTNumberLiteral;
import org.apache.commons.jexl3.parser.ASTOrNode;
import org.apache.commons.jexl3.parser.ASTRangeNode;
import org.apache.commons.jexl3.parser.ASTReference;
import org.apache.commons.jexl3.parser.ASTReferenceExpression;
import org.apache.commons.jexl3.parser.ASTRegexLiteral;
import org.apache.commons.jexl3.parser.ASTReturnStatement;
import org.apache.commons.jexl3.parser.ASTSWNode;
import org.apache.commons.jexl3.parser.ASTSetAddNode;
import org.apache.commons.jexl3.parser.ASTSetAndNode;
import org.apache.commons.jexl3.parser.ASTSetDivNode;
import org.apache.commons.jexl3.parser.ASTSetLiteral;
import org.apache.commons.jexl3.parser.ASTSetModNode;
import org.apache.commons.jexl3.parser.ASTSetMultNode;
import org.apache.commons.jexl3.parser.ASTSetOrNode;
import org.apache.commons.jexl3.parser.ASTSetSubNode;
import org.apache.commons.jexl3.parser.ASTSetXorNode;
import org.apache.commons.jexl3.parser.ASTSizeFunction;
import org.apache.commons.jexl3.parser.ASTStringLiteral;
import org.apache.commons.jexl3.parser.ASTSubNode;
import org.apache.commons.jexl3.parser.ASTTernaryNode;
import org.apache.commons.jexl3.parser.ASTTrueNode;
import org.apache.commons.jexl3.parser.ASTUnaryMinusNode;
import org.apache.commons.jexl3.parser.ASTUnaryPlusNode;
import org.apache.commons.jexl3.parser.ASTVar;
import org.apache.commons.jexl3.parser.ASTWhileStatement;
import org.apache.commons.jexl3.parser.FeatureController;
import org.apache.commons.jexl3.parser.JexlLexicalNode;
import org.apache.commons.jexl3.parser.Node;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.ParserTokenManager;
import org.apache.commons.jexl3.parser.SimpleCharStream;
import org.apache.commons.jexl3.parser.StreamProvider;
import org.apache.commons.jexl3.parser.StringProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScriptVisitor_ESTest extends ScriptVisitor_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement((-2047));
      Object object0 = scriptVisitor0.visitNode(aSTWhileStatement0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      ASTNRNode aSTNRNode1 = (ASTNRNode)scriptVisitor0.visitNode(aSTNRNode0, aSTNRNode0);
      assertFalse(aSTNRNode1.isGlobalVar());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo();
      String[] stringArray0 = new String[0];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, "", stringArray0);
      Closure closure0 = new Closure(script0, stringArray0);
      Object object0 = scriptVisitor0.visitExpression(closure0, closure0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement((-2047));
      Object object0 = scriptVisitor0.visit(aSTWhileStatement0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTVar aSTVar0 = new ASTVar(31);
      Object object0 = scriptVisitor0.visit(aSTVar0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("tVGb");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-896));
      Object object0 = scriptVisitor0.visit(aSTUnaryPlusNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode((-478));
      Integer integer0 = new Integer((-478));
      Object object0 = scriptVisitor0.visit(aSTUnaryPlusNode0, integer0);
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(0);
      Object object0 = scriptVisitor0.visit(aSTUnaryMinusNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode((-287));
      Object object0 = scriptVisitor0.visit(aSTTrueNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("");
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode(parser0, 3947);
      Object object0 = scriptVisitor0.visit(aSTTernaryNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSubNode aSTSubNode0 = new ASTSubNode(0);
      Object object0 = scriptVisitor0.visit(aSTSubNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTStringLiteral aSTStringLiteral0 = mock(ASTStringLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTStringLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTStringLiteral0, engine0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSizeFunction aSTSizeFunction0 = new ASTSizeFunction(0);
      ASTSizeFunction aSTSizeFunction1 = (ASTSizeFunction)scriptVisitor0.visit(aSTSizeFunction0, aSTSizeFunction0);
      assertEquals(0, aSTSizeFunction1.getLine());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode((Parser) null, (-2524));
      Object object0 = scriptVisitor0.visit(aSTSetXorNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode(parser0, 1540);
      Object object0 = scriptVisitor0.visit(aSTSetSubNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("t5=I*`jf");
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode(parser0, 72);
      Object object0 = scriptVisitor0.visit(aSTSetOrNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(17);
      Object object0 = scriptVisitor0.visit(aSTSetMultNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(1948);
      Object object0 = scriptVisitor0.visit(aSTSetModNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer(611);
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTSetLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTSetLiteral0, integer0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Parser parser0 = engine0.parser;
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(parser0, 102);
      Object object0 = scriptVisitor0.visit(aSTSetDivNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("2LYmwns?1z=-]nN?");
      ASTSetAndNode aSTSetAndNode0 = new ASTSetAndNode(parser0, 77);
      Object object0 = scriptVisitor0.visit(aSTSetAndNode0, "2LYmwns?1z=-]nN?");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode((-2289));
      Object object0 = scriptVisitor0.visit(aSTSetAddNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSWNode aSTSWNode0 = new ASTSWNode((-3833));
      Object object0 = scriptVisitor0.visit(aSTSWNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTReturnStatement aSTReturnStatement0 = new ASTReturnStatement((-2147483647));
      Object object0 = scriptVisitor0.visit(aSTReturnStatement0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringReader stringReader0 = new StringReader("");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTReturnStatement aSTReturnStatement0 = new ASTReturnStatement(parser0, (-825));
      Object object0 = scriptVisitor0.visit(aSTReturnStatement0, streamProvider0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = Integer.valueOf(38);
      ASTRegexLiteral aSTRegexLiteral0 = mock(ASTRegexLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTRegexLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTRegexLiteral0, integer0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTReferenceExpression aSTReferenceExpression0 = mock(ASTReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTReferenceExpression0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTReferenceExpression0, "B");
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTReference aSTReference0 = new ASTReference(0);
      Object object0 = scriptVisitor0.visit(aSTReference0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTReference aSTReference0 = new ASTReference(0);
      ASTReference aSTReference1 = (ASTReference)scriptVisitor0.visit(aSTReference0, aSTReference0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTRangeNode aSTRangeNode0 = new ASTRangeNode(2051);
      Object object0 = scriptVisitor0.visit(aSTRangeNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("t5=I*`jf");
      ASTOrNode aSTOrNode0 = new ASTOrNode(parser0, 72);
      Object object0 = scriptVisitor0.visit(aSTOrNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 332);
      ASTOrNode aSTOrNode0 = new ASTOrNode(parser0, (-1));
      ASTSetMultNode aSTSetMultNode1 = (ASTSetMultNode)scriptVisitor0.visit(aSTOrNode0, aSTSetMultNode0);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTNumberLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Integer integer0 = new Integer(0);
      Object object0 = scriptVisitor0.visit(aSTNumberLiteral0, integer0);
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringProvider stringProvider0 = new StringProvider("B");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(simpleCharStream0.DEFAULT_BUF_SIZE).when(aSTNumberLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTNumberLiteral0, "ibx^%?%Gs|GxJcImH");
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode(parser0, 1);
      Object object0 = scriptVisitor0.visit(aSTNullpNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNullLiteral aSTNullLiteral0 = new ASTNullLiteral(7);
      Object object0 = scriptVisitor0.visit(aSTNullLiteral0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNotNode aSTNotNode0 = new ASTNotNode((Parser) null, 2608);
      Object object0 = scriptVisitor0.visit(aSTNotNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode((-2374));
      ASTNSWNode aSTNSWNode1 = (ASTNSWNode)scriptVisitor0.visit(aSTNSWNode0, aSTNSWNode0);
      assertEquals(1, aSTNSWNode1.getLine());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      Object object0 = scriptVisitor0.visit(aSTNRNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNEWNode aSTNEWNode0 = new ASTNEWNode(0);
      Object object0 = scriptVisitor0.visit(aSTNEWNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNENode aSTNENode0 = new ASTNENode((-1));
      Object object0 = scriptVisitor0.visit(aSTNENode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMulNode aSTMulNode0 = new ASTMulNode(10);
      Object object0 = scriptVisitor0.visit(aSTMulNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTModNode aSTModNode0 = new ASTModNode((-2173));
      Object object0 = scriptVisitor0.visit(aSTModNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTModNode aSTModNode0 = new ASTModNode((-1));
      ASTModNode aSTModNode1 = (ASTModNode)scriptVisitor0.visit(aSTModNode0, aSTModNode0);
      assertFalse(aSTModNode1.isLocalVar());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("tVGb");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-896));
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode(parser0, 767);
      ASTUnaryPlusNode aSTUnaryPlusNode1 = (ASTUnaryPlusNode)scriptVisitor0.visit(aSTMethodNode0, aSTUnaryPlusNode0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMapLiteral aSTMapLiteral0 = mock(ASTMapLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(scriptVisitor0).when(aSTMapLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTMapLiteral0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("tVGb");
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(parser0, 425);
      Object object0 = scriptVisitor0.visit(aSTMapEntry0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTLTNode aSTLTNode0 = new ASTLTNode(943);
      Object object0 = scriptVisitor0.visit(aSTLTNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-41), (byte) (-41));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      StreamProvider streamProvider0 = new StreamProvider(dataInputStream0, charset0);
      Parser parser0 = new Parser(streamProvider0);
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, (byte)101);
      Parser parser1 = (Parser)scriptVisitor0.visit(aSTLTNode0, parser0);
      assertTrue(parser1.trace_enabled());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDivNode aSTDivNode0 = new ASTDivNode(346);
      ASTLENode aSTLENode0 = new ASTLENode(346);
      ASTDivNode aSTDivNode1 = (ASTDivNode)scriptVisitor0.visit(aSTLENode0, aSTDivNode0);
      assertFalse(aSTDivNode1.isConstant());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(scriptVisitor0).when(aSTJxltLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTJxltLiteral0, aSTJxltLiteral0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("sO<0%+@");
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.parse((JexlInfo) null, jexlFeatures0, "sO<0%+@", scope1);
      Object object0 = scriptVisitor0.visit(aSTJexlScript0, stringArray0[4]);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("sO<0%+@");
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.parse((JexlInfo) null, jexlFeatures0, "sO<0%+@", scope1);
      Object object0 = scriptVisitor0.visit(aSTJexlScript0, "sO<0%+@");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("t5=I*`jf");
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(parser0, 0);
      Object object0 = scriptVisitor0.visit(aSTIfStatement0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 332);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(parser0, 332);
      ASTSetMultNode aSTSetMultNode1 = (ASTSetMultNode)scriptVisitor0.visit(aSTIfStatement0, aSTSetMultNode0);
      assertFalse(aSTSetMultNode1.isConstant());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTIdentifierAccess0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTIdentifierAccess0, aSTIdentifierAccess0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTVar aSTVar0 = new ASTVar(0);
      Object object0 = scriptVisitor0.visit(aSTVar0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(1005);
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "tjZr");
      Object[] objectArray0 = new Object[0];
      Closure closure0 = new Closure(script0, objectArray0);
      Object object0 = scriptVisitor0.visit(aSTNamespaceIdentifier0, closure0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTGTNode aSTGTNode0 = new ASTGTNode((Parser) null, (-2870));
      Object object0 = scriptVisitor0.visit(aSTGTNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTGENode aSTGENode0 = new ASTGENode(parser0, (-2289));
      Object object0 = scriptVisitor0.visit(aSTGENode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(parser0, (-2439));
      Object object0 = scriptVisitor0.visit(aSTFunctionNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode((-2454));
      Object object0 = scriptVisitor0.visit(aSTFunctionNode0, "' is undefined");
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement((-1));
      Object object0 = scriptVisitor0.visit(aSTForeachStatement0, "!@9K");
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode((Parser) null, (-1631));
      Object object0 = scriptVisitor0.visit(aSTFalseNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("t5=I*`jf");
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode(parser0, 72);
      JexlBuilder jexlBuilder1 = (JexlBuilder)scriptVisitor0.visit(aSTFalseNode0, jexlBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(834);
      Object object0 = scriptVisitor0.visit(aSTExtendedLiteral0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction((-2047));
      Object object0 = scriptVisitor0.visit(aSTEmptyFunction0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Object object0 = new Object();
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction((-2047));
      Object object1 = scriptVisitor0.visit(aSTEmptyFunction0, object0);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringReader stringReader0 = new StringReader("");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTEWNode aSTEWNode0 = new ASTEWNode(parser0, (-1289));
      Object object0 = scriptVisitor0.visit(aSTEWNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTEWNode aSTEWNode0 = new ASTEWNode(68);
      Object object0 = scriptVisitor0.visit(aSTEWNode0, "?N;t\"c_`)\"a3");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTERNode aSTERNode0 = new ASTERNode((-2439));
      Object object0 = scriptVisitor0.visit(aSTERNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTERNode aSTERNode0 = new ASTERNode(2252);
      ASTERNode aSTERNode1 = (ASTERNode)scriptVisitor0.visit(aSTERNode0, aSTERNode0);
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTEQNode aSTEQNode0 = new ASTEQNode((-1));
      Object object0 = scriptVisitor0.visit(aSTEQNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(36);
      Object object0 = new Object();
      Object object1 = scriptVisitor0.visit(aSTDoWhileStatement0, object0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDivNode aSTDivNode0 = new ASTDivNode(0);
      ASTDivNode aSTDivNode1 = (ASTDivNode)scriptVisitor0.visit(aSTDivNode0, aSTDivNode0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTContinue aSTContinue0 = new ASTContinue(parser0, 1123);
      Object object0 = scriptVisitor0.visit(aSTContinue0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode((-2289));
      Object object0 = scriptVisitor0.visit(aSTConstructorNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBreak aSTBreak0 = new ASTBreak((-1));
      Object object0 = scriptVisitor0.visit(aSTBreak0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringProvider stringProvider0 = new StringProvider("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTBlock aSTBlock0 = new ASTBlock(parser0, (-620));
      Object object0 = scriptVisitor0.visit(aSTBlock0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(1);
      Object object0 = scriptVisitor0.visit(aSTBitwiseXorNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseOrNode aSTBitwiseOrNode0 = new ASTBitwiseOrNode((-431));
      Object object0 = scriptVisitor0.visit(aSTBitwiseOrNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      ASTBitwiseOrNode aSTBitwiseOrNode0 = new ASTBitwiseOrNode((-1));
      Object object0 = scriptVisitor0.visit(aSTBitwiseOrNode0, jexlFeatures0.NEW_INSTANCE);
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode((Parser) null, 0);
      Object object0 = scriptVisitor0.visit(aSTBitwiseComplNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(555);
      Object object0 = scriptVisitor0.visit(aSTBitwiseAndNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("");
      ASTAssignment aSTAssignment0 = new ASTAssignment(parser0, 5);
      ASTAssignment aSTAssignment1 = (ASTAssignment)scriptVisitor0.visit(aSTAssignment0, aSTAssignment0);
      assertEquals(1, aSTAssignment1.getColumn());
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTArrayLiteral aSTArrayLiteral0 = mock(ASTArrayLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(scriptVisitor0).when(aSTArrayLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Integer integer0 = Integer.valueOf(38);
      Object object0 = scriptVisitor0.visit(aSTArrayLiteral0, integer0);
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Parser parser0 = engine0.parser;
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 103);
      Object object0 = scriptVisitor0.visit(aSTArrayAccess0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("sO<0%+@");
      ASTArguments aSTArguments0 = new ASTArguments(parser0, 2387);
      Object object0 = scriptVisitor0.visit(aSTArguments0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTArguments aSTArguments0 = new ASTArguments(1540);
      Object object0 = scriptVisitor0.visit(aSTArguments0, "Ko?r>)5>vIF Ve");
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      ASTAnnotation aSTAnnotation0 = mock(ASTAnnotation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTAnnotation0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTAnnotation0, engine0);
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(0);
      Object object0 = scriptVisitor0.visit(aSTAnnotatedStatement0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTAndNode aSTAndNode0 = new ASTAndNode(parser0, 0);
      Object object0 = scriptVisitor0.visit(aSTAndNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAddNode aSTAddNode0 = new ASTAddNode(1);
      Object object0 = scriptVisitor0.visit(aSTAddNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("t:");
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement(parser0, 1675);
      aSTWhileStatement0.jjtAddChild((Node) null, 53);
      // Undeclared exception!
      try { 
        scriptVisitor0.visitNode(aSTWhileStatement0, parser0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Engine engine0 = new Engine();
      Script script0 = new Script(engine0, "5XPjIIopt)%+/5Hg", (ASTJexlScript) null);
      // Undeclared exception!
      try { 
        featureController0.visitExpression(script0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTWhileStatement) null, jexlFeatures0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer((-2537));
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTVar) null, integer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTUnaryPlusNode) null, aSTUnaryMinusNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTUnaryMinusNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement((-1));
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode((-287));
      aSTTrueNode0.jjtAddChild(aSTForeachStatement0, 38);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTTrueNode0, aSTTrueNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer(611);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTTernaryNode) null, integer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTOrNode aSTOrNode0 = new ASTOrNode(0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTStringLiteral) null, aSTOrNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetXorNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetSubNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetOrNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = Integer.valueOf(38);
      StringReader stringReader0 = new StringReader("A~+-<M5J`|cE$Lh");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(parser0, 103);
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 103);
      aSTSetMultNode0.jjtAddChild(aSTSWNode0, 2677);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTSetMultNode0, integer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetModNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetLiteral) null, "//f");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetDivNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode((Parser) null, 1);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetAndNode) null, aSTSetSubNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetAddNode) null, aSTNumberLiteral0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode((-287));
      StringReader stringReader0 = new StringReader("A~+-<M5J`|cE$Lh");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(parser0, 103);
      aSTSWNode0.jjtAddChild(aSTTrueNode0, 38);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTSWNode0, stringReader0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTRegexLiteral) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTReferenceExpression) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(38);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTRangeNode) null, aSTArrayAccess0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringReader stringReader0 = new StringReader("A~+-<M5J`|cE$Lh");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(parser0, 103);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNumberLiteral) null, aSTSWNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("");
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(parser0, 69);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNullpNode) null, aSTSetModNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNullLiteral) null, "t5=I*`jf");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNotNode) null, scriptVisitor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNSWNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNRNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNEWNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAddNode aSTAddNode0 = new ASTAddNode(0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNENode) null, aSTAddNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDivNode aSTDivNode0 = new ASTDivNode(346);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTMulNode) null, aSTDivNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTModNode) null, integer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTMethodNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 332);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(parser0, 332);
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(parser0, 1);
      aSTMapEntry0.jjtAddChild(aSTIfStatement0, 1);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTMapEntry0, aSTSetMultNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTLTNode) null, "EmFHp}f!xoY{2!8&");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode(0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTLENode) null, aSTTernaryNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTJxltLiteral) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTJexlScript) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseOrNode aSTBitwiseOrNode0 = new ASTBitwiseOrNode(67);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTIdentifierAccess) null, aSTBitwiseOrNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTVar aSTVar0 = new ASTVar((-422));
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(666);
      aSTVar0.jjtAddChild(aSTAnnotatedStatement0, 1);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTVar0, aSTVar0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTGTNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Script script0 = engine0.createExpression((JexlInfo) null, "");
      Closure closure0 = new Closure(script0, (Object[]) null);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTGENode) null, closure0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("tVGb");
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTFunctionNode) null, parser0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTForeachStatement) null, jexlFeatures0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      String[] stringArray0 = new String[8];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, "org.apache.commons.jexl3.internal.ScriptVisitor", stringArray0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTExtendedLiteral) null, script0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Object object0 = new Object();
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction((-2047));
      Parser parser0 = new Parser("org.apache.commons.jexl3.parser.Parser$LookaheadSuccess");
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode(parser0, (-2047));
      aSTEmptyFunction0.jjtAddChild(jexlLexicalNode0, 0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTEmptyFunction0, object0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // JexlLexicalNode : not supported yet.
         //
         verifyException("org.apache.commons.jexl3.parser.ParserVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAssignment aSTAssignment0 = new ASTAssignment((Parser) null, 0);
      ASTERNode aSTERNode0 = new ASTERNode(2252);
      aSTERNode0.jjtAddChild(aSTAssignment0, 123);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTERNode0, aSTERNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode((-2289));
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      StringProvider stringProvider0 = new StringProvider("B");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ASTEQNode aSTEQNode0 = new ASTEQNode(parser0, (-2289));
      aSTEQNode0.jjtAddChild(aSTConstructorNode0, 122);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTEQNode0, simpleCharStream0.DEFAULT_BUF_SIZE);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTDoWhileStatement) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTDivNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTContinue) null, "2");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTConstructorNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAddNode aSTAddNode0 = new ASTAddNode((-2289));
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      StringProvider stringProvider0 = new StringProvider("B");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ASTBreak aSTBreak0 = new ASTBreak(parser0, 1356);
      aSTBreak0.jjtAddChild(aSTAddNode0, 834);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTBreak0, simpleCharStream0.DEFAULT_BUF_SIZE);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTBlock) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTRegexLiteral aSTRegexLiteral0 = mock(ASTRegexLiteral.class, new ViolatedAssumptionAnswer());
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(99);
      aSTBitwiseXorNode0.jjtAddChild(aSTRegexLiteral0, 99);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTBitwiseXorNode0, engine0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTBitwiseComplNode) null, "|`f;%$/_CXR");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(487);
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode((-2756));
      aSTBitwiseAndNode0.jjtAddChild(aSTDoWhileStatement0, 487);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTBitwiseAndNode0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode((-2575));
      ASTAssignment aSTAssignment0 = new ASTAssignment((Parser) null, 888);
      aSTAssignment0.jjtAddChild(aSTFalseNode0, 91);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTAssignment0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTArrayLiteral) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("");
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 2);
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode((-1));
      aSTArrayAccess0.jjtAddChild(jexlLexicalNode0, 13);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTArrayAccess0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTArguments) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTAddNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = (Script)engine0.createExpression(jexlInfo0, "");
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 13, 'j', 'j');
      ASTLTNode aSTLTNode0 = new ASTLTNode(13);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = (TemplateEngine.ConstantExpression)templateEngine0.parseExpression(jexlInfo0, "J%>440LbXJ==[Sb", scope1);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression("U", aSTLTNode0, templateEngine_ConstantExpression0);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression1 = (TemplateEngine.DeferredExpression)featureController0.visitScript(script0, templateEngine_DeferredExpression0);
      assertTrue(templateEngine_DeferredExpression1.isImmediate());
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Object object0 = scriptVisitor0.visitScript((JexlScript) null, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      JexlExpression jexlExpression0 = engine0.createExpression(jexlInfo0, "");
      Object object0 = featureController0.visitExpression(jexlExpression0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = featureController0.visitExpression((JexlExpression) null, jexlFeatures0);
      ;
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode(0);
      Integer integer0 = new Integer(611);
      Object object0 = scriptVisitor0.visit(aSTTernaryNode0, integer0);
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(834);
      Object object0 = scriptVisitor0.visit(aSTExtendedLiteral0, "rjVe2]98Pt[W?o");
      ;
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAddNode aSTAddNode0 = new ASTAddNode((-2289));
      ASTAddNode aSTAddNode1 = (ASTAddNode)scriptVisitor0.visit(aSTAddNode0, aSTAddNode0);
      assertTrue(aSTAddNode1.isLeftValue());
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(aSTJxltLiteral0).toString();
      doReturn((Object) null).when(aSTJxltLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      ASTBlock aSTBlock0 = new ASTBlock(3384);
      Object object0 = scriptVisitor0.visit(aSTBlock0, aSTJxltLiteral0);
      Object object1 = scriptVisitor0.visit(aSTJxltLiteral0, object0);
      ;
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(0);
      ASTUnaryMinusNode aSTUnaryMinusNode1 = (ASTUnaryMinusNode)scriptVisitor0.visit(aSTUnaryMinusNode0, aSTUnaryMinusNode0);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement((-1));
      Object object0 = scriptVisitor0.visit(aSTForeachStatement0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("tVGb");
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement(parser0, 767);
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(566);
      ASTWhileStatement aSTWhileStatement1 = (ASTWhileStatement)scriptVisitor0.visit(aSTSetModNode0, aSTWhileStatement0);
      assertTrue(aSTWhileStatement1.isTernaryProtected());
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("tVGb");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-896));
      ASTRangeNode aSTRangeNode0 = new ASTRangeNode(parser0, (-1800));
      ASTUnaryPlusNode aSTUnaryPlusNode1 = (ASTUnaryPlusNode)scriptVisitor0.visit(aSTRangeNode0, aSTUnaryPlusNode0);
      ;
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode((-2870));
      Object object0 = scriptVisitor0.visit(aSTNullpNode0, "5ketx&q>?E");
      ;
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode((-287));
      Object object0 = scriptVisitor0.visit(aSTTrueNode0, aSTTrueNode0);
      ;
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("tVGb");
      ASTAndNode aSTAndNode0 = new ASTAndNode(parser0, 425);
      ASTAndNode aSTAndNode1 = (ASTAndNode)scriptVisitor0.visit(aSTAndNode0, aSTAndNode0);
      assertFalse(aSTAndNode1.isConstant());
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTStringLiteral aSTStringLiteral0 = mock(ASTStringLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(scriptVisitor0).when(aSTStringLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTStringLiteral0, scriptVisitor0);
      ;
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      ASTAnnotation aSTAnnotation0 = mock(ASTAnnotation.class, new ViolatedAssumptionAnswer());
      doReturn("rjVe2]98Pt[W?o").when(aSTAnnotation0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTAnnotation0, engine0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTGENode aSTGENode0 = new ASTGENode((-2289));
      Object object0 = scriptVisitor0.visit(aSTGENode0, "rjVe2]98Pt[W?o");
      ;
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTReferenceExpression aSTReferenceExpression0 = mock(ASTReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn("rjVe2]98Pt[W?o").when(aSTReferenceExpression0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTReferenceExpression0, "B");
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTArrayLiteral aSTArrayLiteral0 = mock(ASTArrayLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTArrayLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Integer integer0 = new Integer(3384);
      Object object0 = scriptVisitor0.visit(aSTArrayLiteral0, integer0);
      ;
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 332);
      Object object0 = scriptVisitor0.visit(aSTSetMultNode0, aSTSetMultNode0);
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      StringProvider stringProvider0 = new StringProvider("B");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ASTEQNode aSTEQNode0 = new ASTEQNode(parser0, (-2289));
      Object object0 = scriptVisitor0.visit(aSTEQNode0, simpleCharStream0.DEFAULT_BUF_SIZE);
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNotNode aSTNotNode0 = new ASTNotNode(2960);
      Integer integer0 = Integer.valueOf(0);
      Object object0 = scriptVisitor0.visit(aSTNotNode0, integer0);
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSubNode aSTSubNode0 = new ASTSubNode((-1));
      JexlFeatures jexlFeatures1 = (JexlFeatures)scriptVisitor0.visit(aSTSubNode0, jexlFeatures0);
      assertFalse(jexlFeatures1.supportsPragma());
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-3078), ':', ':');
      ArrayList<TemplateEngine.TemplateExpression> arrayList0 = new ArrayList<TemplateEngine.TemplateExpression>();
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(arrayList0, (TemplateEngine.TemplateExpression) null);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTOrNode) null, templateEngine_ConstantExpression0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode((Parser) null, 2960);
      Object object0 = scriptVisitor0.visit(aSTNSWNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode((Parser) null, 2960);
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode(0);
      ASTMethodNode aSTMethodNode1 = (ASTMethodNode)scriptVisitor0.visit(aSTSetSubNode0, aSTMethodNode0);
      assertFalse(aSTMethodNode1.isConstant());
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode((-2289));
      Object object0 = scriptVisitor0.visit(aSTConstructorNode0, "rjVe2]98Pt[W?o");
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement((-2047));
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(0);
      ASTWhileStatement aSTWhileStatement1 = (ASTWhileStatement)scriptVisitor0.visit(aSTSetDivNode0, aSTWhileStatement0);
      ;
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("tVGb");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-896));
      ASTNullLiteral aSTNullLiteral0 = new ASTNullLiteral(parser0, (-1800));
      ASTUnaryPlusNode aSTUnaryPlusNode1 = (ASTUnaryPlusNode)scriptVisitor0.visit(aSTNullLiteral0, aSTUnaryPlusNode0);
      assertTrue(aSTUnaryPlusNode1.isLocalVar());
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDivNode aSTDivNode0 = new ASTDivNode(346);
      Object object0 = scriptVisitor0.visit(aSTDivNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTVar aSTVar0 = new ASTVar((-422));
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(666);
      ASTVar aSTVar1 = (ASTVar)scriptVisitor0.visit(aSTAnnotatedStatement0, aSTVar0);
      assertFalse(aSTVar1.isGlobalVar());
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode((-2289));
      Object object0 = scriptVisitor0.visit(aSTSetAddNode0, "rjVe2]98Pt[W?o");
      ;
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(487);
      Object object0 = scriptVisitor0.visit(aSTDoWhileStatement0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTEWNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTGTNode aSTGTNode0 = new ASTGTNode(0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 2142);
      Script script0 = new Script(engine0, "[]", aSTJexlScript0);
      Script script1 = (Script)scriptVisitor0.visit(aSTGTNode0, script0);
      ;
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer(611);
      Parser parser0 = new Parser("org.apache.commons.logging.impl.LogKitLogger");
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(parser0, (-2870));
      Object object0 = scriptVisitor0.visit(aSTBitwiseAndNode0, integer0);
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      StringProvider stringProvider0 = new StringProvider("B");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ASTBreak aSTBreak0 = new ASTBreak(parser0, 1356);
      Object object0 = scriptVisitor0.visit(aSTBreak0, simpleCharStream0.DEFAULT_BUF_SIZE);
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 346);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTReturnStatement) null, frame0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode((-2870));
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      ASTNullpNode aSTNullpNode1 = (ASTNullpNode)scriptVisitor0.visit(aSTNRNode0, aSTNullpNode0);
      assertEquals(1, aSTNullpNode1.getId());
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("");
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 2);
      Object object0 = scriptVisitor0.visit(aSTArrayAccess0, "");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn(scriptVisitor0).when(aSTIdentifierAccess0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTIdentifierAccess0, aSTIdentifierAccess0);
      ;
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode((-2289));
      ASTBitwiseComplNode aSTBitwiseComplNode1 = (ASTBitwiseComplNode)scriptVisitor0.visit(aSTBitwiseComplNode0, aSTBitwiseComplNode0);
      ;
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetAndNode aSTSetAndNode0 = new ASTSetAndNode(425);
      Object object0 = scriptVisitor0.visit(aSTSetAndNode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTEmptyFunction) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("tVGb");
      ASTNENode aSTNENode0 = new ASTNENode(parser0, 0);
      ASTNENode aSTNENode1 = (ASTNENode)scriptVisitor0.visit(aSTNENode0, aSTNENode0);
      assertFalse(aSTNENode1.isLocalVar());
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("sO<0%+@");
      String[] stringArray0 = new String[9];
      ASTSizeFunction aSTSizeFunction0 = new ASTSizeFunction(parser0, 13);
      Object object0 = scriptVisitor0.visit(aSTSizeFunction0, stringArray0[3]);
      ;
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMapLiteral aSTMapLiteral0 = mock(ASTMapLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTMapLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTMapLiteral0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(parser0, 332);
      ASTSetXorNode aSTSetXorNode1 = (ASTSetXorNode)scriptVisitor0.visit(aSTSetXorNode0, aSTSetXorNode0);
      ;
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode((Parser) null, 2960);
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode(0);
      ASTMethodNode aSTMethodNode1 = (ASTMethodNode)scriptVisitor0.visit(aSTSetOrNode0, aSTMethodNode0);
      assertFalse(aSTMethodNode1.isConstant());
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("org.apache.commons.logging.impl.LogKitLogger");
      ASTMulNode aSTMulNode0 = new ASTMulNode(parser0, 0);
      Object object0 = scriptVisitor0.visit(aSTMulNode0, "W3d(=C<e{^3");
      ;
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode((Parser) null, 2960);
      Object object0 = scriptVisitor0.visit(aSTMethodNode0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 332);
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(parser0, (-6));
      Object object0 = scriptVisitor0.visit(aSTMapEntry0, aSTSetMultNode0);
      ;
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("tVGb");
      ASTLENode aSTLENode0 = new ASTLENode(parser0, 425);
      Object object0 = scriptVisitor0.visit(aSTLENode0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTContinue aSTContinue0 = new ASTContinue((Parser) null, (-2173));
      Object object0 = scriptVisitor0.visit(aSTContinue0, "5ketx&q>?E");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("tVGb");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-896));
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement(parser0, 767);
      ASTUnaryPlusNode aSTUnaryPlusNode1 = (ASTUnaryPlusNode)scriptVisitor0.visit(aSTWhileStatement0, aSTUnaryPlusNode0);
      assertEquals(1, aSTUnaryPlusNode1.getLine());
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer(611);
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(0);
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(aSTUnaryMinusNode0).when(aSTSetLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      ASTUnaryMinusNode aSTUnaryMinusNode1 = (ASTUnaryMinusNode)scriptVisitor0.visit(aSTSetLiteral0, integer0);
      ;
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringReader stringReader0 = new StringReader("A~+-<M5J`|cE$Lh");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(parser0, 103);
      Object object0 = scriptVisitor0.visit(aSTSWNode0, stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAssignment aSTAssignment0 = new ASTAssignment((Parser) null, 888);
      Object object0 = scriptVisitor0.visit(aSTAssignment0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode(79);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTIfStatement) null, aSTNullpNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNEWNode aSTNEWNode0 = new ASTNEWNode(1);
      Object object0 = scriptVisitor0.visit(aSTNEWNode0, jexlFeatures0);
      ;
}
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTFalseNode) null, jexlBuilder0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(72);
      Engine engine1 = (Engine)scriptVisitor0.visit(aSTBitwiseXorNode0, engine0);
      ;
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTBitwiseOrNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ScriptVisitor", e);
      }
  }
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode((Parser) null, 2960);
      ASTVar aSTVar0 = new ASTVar(1857);
      Object object0 = scriptVisitor0.visit(aSTVar0, aSTMethodNode0);
      ;
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = Integer.valueOf(38);
      ASTRegexLiteral aSTRegexLiteral0 = mock(ASTRegexLiteral.class, new ViolatedAssumptionAnswer());
      doReturn("!@9K").when(aSTRegexLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTRegexLiteral0, integer0);
      ;
}
}
