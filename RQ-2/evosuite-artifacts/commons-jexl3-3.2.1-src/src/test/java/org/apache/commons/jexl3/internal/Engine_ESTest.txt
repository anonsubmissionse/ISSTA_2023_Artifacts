 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      String[] stringArray0 = new String[1];
      jexlBuilder0.cacheThreshold(9);
      Engine engine0 = new Engine(jexlBuilder0);
      // Undeclared exception!
      try { 
        engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, ">wWy|([]t)$", stringArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Hsm";
      Scope scope1 = new Scope(scope0, stringArray0);
      JexlInfo jexlInfo0 = engine0.createInfo("uberspect can not be null", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, "Hsm", scope1);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(91);
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Hsm";
      Scope scope1 = new Scope(scope0, stringArray0);
      JexlInfo jexlInfo0 = engine0.createInfo("uberspect can not be null", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, "Hsm", scope1);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(91);
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
      assertFalse(aSTJexlScript0.isGlobalVar());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Engine engine0 = new Engine();
      Class<JexlEngine> class0 = JexlEngine.class;
      // Undeclared exception!
      try { 
        engine0.newInstance((Class<? extends JexlEngine>) class0, (Object[]) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, "", (Scope) null);
      Parser parser0 = engine0.parser;
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) jexlOptions0, " !~ ", (Object) parser0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, (JexlOptions) null);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, (JexlOptions) null);
      assertTrue(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createJxltEngine(false, 1433, 'M', 'M');
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createJxltEngine(false, 1433, 'M', 'M');
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      int int0 = (-2985);
      Frame frame0 = new Frame(scope1, (Object[]) null, (-2985));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Map) null).when(aSTJexlLambda0).getPragmas();
      doReturn((JexlNode) null).when(aSTJexlLambda0).jjtGetChild(anyInt());
      doReturn(0).when(aSTJexlLambda0).jjtGetNumChildren();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      // Undeclared exception!
      try { 
        closure0.execute(engine0.EMPTY_CONTEXT);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(true);
      JexlBuilder jexlBuilder2 = jexlBuilder1.strict(false);
      Engine engine0 = new Engine(jexlBuilder2);
      boolean boolean0 = engine0.isCancellable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(true);
      JexlBuilder jexlBuilder2 = jexlBuilder1.strict(false);
      Engine engine0 = new Engine(jexlBuilder2);
      boolean boolean0 = engine0.isCancellable();
      assertTrue(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isStrict();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isStrict();
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isStrict();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, "", (Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      engine0.processPragmas(aSTJexlScript0, engine0.EMPTY_CONTEXT, jexlOptions0);
      assertTrue(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, "", (Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      engine0.processPragmas(aSTJexlScript0, engine0.EMPTY_CONTEXT, jexlOptions0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, "", (Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      engine0.processPragmas(aSTJexlScript0, engine0.EMPTY_CONTEXT, jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Engine engine0 = new Engine();
      MapContext mapContext0 = new MapContext();
      engine0.setProperty((JexlContext) mapContext0, (Object) mapContext0, "MapEntry", (Object) "MapEntry");
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      engine0.setProperty((Object) "8syx", "5MFzI", (Object) "5MFzI");
      assertFalse(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.trimSource((CharSequence) null);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.trimSource((CharSequence) null);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Engine engine0 = new Engine();
      String string0 = engine0.trimSource("?");
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Engine engine0 = new Engine();
      String string0 = engine0.trimSource("?");
      assertFalse(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.trimSource("");
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.trimSource("");
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.safe(false);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      JexlBuilder jexlBuilder2 = jexlBuilder1.strategy(jexlUberspect_ResolverStrategy0);
      Charset charset0 = Charset.defaultCharset();
      JexlBuilder jexlBuilder3 = jexlBuilder2.charset(charset0);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "");
      engine0.getLocalVariables(script0);
      Closure closure0 = new Closure(script0, (Object[]) null);
      JexlEngine jexlEngine0 = closure0.getEngine();
      JexlEngine jexlEngine1 = engine0.putThreadEngine(jexlEngine0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.safe(false);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      JexlBuilder jexlBuilder2 = jexlBuilder1.strategy(jexlUberspect_ResolverStrategy0);
      Charset charset0 = Charset.defaultCharset();
      JexlBuilder jexlBuilder3 = jexlBuilder2.charset(charset0);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "");
      engine0.getLocalVariables(script0);
      Closure closure0 = new Closure(script0, (Object[]) null);
      JexlEngine jexlEngine0 = closure0.getEngine();
      JexlEngine jexlEngine1 = engine0.putThreadEngine(jexlEngine0);
      engine0.createExpression(jexlInfo0, "");
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      Parser parser0 = engine0.parser;
      ASTSWNode aSTSWNode0 = new ASTSWNode(parser0, 0);
      engine_VarCollector0.collect(aSTSWNode0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, "add", (Scope) null);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, "add", (Scope) null);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, "", scope1);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, "", scope1);
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, "", scope1);
      assertTrue(aSTJexlScript0.isGlobalVar());
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options;
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options;
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
      assertTrue(jexlOptions0.isSafe());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      assertFalse(jexlOptions1.isCancellable());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 2);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      assertTrue(jexlOptions1.isCancellable());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 2);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      assertTrue(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, objectContext0);
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, objectContext0);
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Boolean boolean0 = jexlBuilder0.safe();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = engine0.options((ASTJexlScript) null, objectContext0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Boolean boolean0 = jexlBuilder0.safe();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = engine0.options((ASTJexlScript) null, objectContext0);
      assertFalse(jexlOptions1.isCancellable());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, objectContext0);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, objectContext0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      Engine engine0 = new Engine(jexlBuilder1);
      Parser parser0 = new Parser("C9Mx&DD-$");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Map) null).when(aSTJexlLambda0).getPragmas();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      Map<String, Object> map0 = closure0.getPragmas();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      assertTrue(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      Engine engine0 = new Engine(jexlBuilder1);
      Parser parser0 = new Parser("C9Mx&DD-$");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Map) null).when(aSTJexlLambda0).getPragmas();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      Map<String, Object> map0 = closure0.getPragmas();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(3270);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, jexlEngine_EmptyContext0);
      assertTrue(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(3270);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, jexlEngine_EmptyContext0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = (Engine)jexlBuilder1.create();
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, (JexlContext) null);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = (Engine)jexlBuilder1.create();
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, (JexlContext) null);
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(82, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 82);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(19);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, jexlEngine_EmptyContext0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(82, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 82);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(19);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, jexlEngine_EmptyContext0);
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder0);
      Boolean boolean0 = Boolean.valueOf("");
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options(objectContext0);
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder0);
      Boolean boolean0 = Boolean.valueOf("");
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options(objectContext0);
      ;
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions1 = engine0.options(mapContext0);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions1 = engine0.options(mapContext0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      Class<ASTArrayAccess> class0 = ASTArrayAccess.class;
      Object[] objectArray0 = new Object[5];
      engine0.newInstance((Class<? extends ASTArrayAccess>) class0, objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      Class<ASTArrayAccess> class0 = ASTArrayAccess.class;
      Object[] objectArray0 = new Object[5];
      engine0.newInstance((Class<? extends ASTArrayAccess>) class0, objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isStrict();
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isStrict();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isStrict();
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isSilent();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isSilent();
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isSilent();
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isDebug();
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isDebug();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      JexlInfo jexlInfo0 = new JexlInfo("V_g^f", 15, 1);
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, "V_g^f", (String[]) null);
      Closure closure0 = new Closure(script0, objectArray0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      JexlInfo jexlInfo0 = new JexlInfo("V_g^f", 15, 1);
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, "V_g^f", (String[]) null);
      Closure closure0 = new Closure(script0, objectArray0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
      ;
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      JexlInfo jexlInfo0 = new JexlInfo("V_g^f", 15, 1);
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, "V_g^f", (String[]) null);
      Closure closure0 = new Closure(script0, objectArray0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
      assertNotNull(closure0.getSourceText());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      JexlInfo jexlInfo0 = new JexlInfo("V_g^f", 15, 1);
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, "V_g^f", (String[]) null);
      Closure closure0 = new Closure(script0, objectArray0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
      assertEquals(0, set0.size());
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("j~rnUt_");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) simpleLog0, jexlUberspect_ResolverStrategy0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getUberspect();
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog("j~rnUt_");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) simpleLog0, jexlUberspect_ResolverStrategy0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getUberspect();
      assertTrue(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlScript jexlScript0 = engine0.createScript("");
      engine0.getParameters(jexlScript0);
      assertNotNull(jexlScript0.getSourceText());
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlScript jexlScript0 = engine0.createScript("");
      engine0.getParameters(jexlScript0);
      assertFalse(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlScript jexlScript0 = engine0.createScript("");
      engine0.getParameters(jexlScript0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, stringArray0);
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 3298);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn(frame0).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(stringArray0).when(aSTJexlLambda0).getLocalVariables();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      engine0.getLocalVariables(closure0);
      ;
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, stringArray0);
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 3298);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn(frame0).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(stringArray0).when(aSTJexlLambda0).getLocalVariables();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      engine0.getLocalVariables(closure0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.charset((Charset) null);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getCharset();
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.charset((Charset) null);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getCharset();
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getArithmetic();
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getArithmetic();
      ;
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.doCreateInstance(engine0, (Object[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.doCreateInstance(engine0, (Object[]) null);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      // Undeclared exception!
      try { 
        engine0.setProperty((JexlContext) null, (Object) jexlBuilder0, "org.apache.commons.jexl3.internal.Engine$UberspectHolder", (Object) jexlBuilder0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      // Undeclared exception!
      try { 
        engine0.setProperty(engine0.EMPTY_CONTEXT, (Object) parser0, (String) null, (Object) "T'iH.vSdu");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, "", (Scope) null);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) null, "", (Object) aSTJexlScript0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 47, '{', '{');
      StringBuilder stringBuilder0 = new StringBuilder("3lW0xjk/y");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "3lW0xjk/y", scope1);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(stringBuilder0, (JexlNode) null, templateEngine_TemplateExpression0);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) templateEngine_ImmediateExpression0, (String) null, (Object) "3lW0xjk/y");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Boolean boolean0 = jexlBuilder0.safe();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      // Undeclared exception!
      try { 
        engine0.processPragmas((ASTJexlScript) null, objectContext0, jexlOptions0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL32;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo("", 91, 24);
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, false, "s 5`?Z<^\"!o}i", scope0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      JexlInfo jexlInfo0 = engine0.createInfo("uberspect can not be null", 91, 91);
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, false, "uberspect can not be null", scope1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // @1:11 ambiguous statement error in 'uberspect can not be null'
         //
         verifyException("org.apache.commons.jexl3.parser.JexlParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, true, (String) null, scope1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      JexlBuilder jexlBuilder2 = jexlBuilder1.debug(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      JexlBuilder jexlBuilder3 = jexlBuilder2.sandbox(jexlSandbox1);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlContext.ThreadLocal jexlContext_ThreadLocal0 = JexlEngine.getThreadContext();
      engine0.putThreadLocal((JexlContext.ThreadLocal) null);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(scope0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Hsm";
      Scope scope1 = new Scope(scope0, stringArray0);
      int int0 = 91;
      Frame frame0 = new Frame(scope1, stringArray0, 91);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame1, jexlOptions1);
      Jdk14Logger jdk14Logger0 = (Jdk14Logger)interpreter0.logger;
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) jdk14Logger0, jexlUberspect_ResolverStrategy0);
      assertEquals(1, uberspect0.getVersion());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      JexlBuilder jexlBuilder2 = jexlBuilder1.debug(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      JexlBuilder jexlBuilder3 = jexlBuilder2.sandbox(jexlSandbox1);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlContext.ThreadLocal jexlContext_ThreadLocal0 = JexlEngine.getThreadContext();
      engine0.putThreadLocal((JexlContext.ThreadLocal) null);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(scope0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Hsm";
      Scope scope1 = new Scope(scope0, stringArray0);
      int int0 = 91;
      Frame frame0 = new Frame(scope1, stringArray0, 91);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame1, jexlOptions1);
      Jdk14Logger jdk14Logger0 = (Jdk14Logger)interpreter0.logger;
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Engine engine1 = new Engine();
      String string0 = "uberspect can not be null";
      JexlInfo jexlInfo0 = engine1.createInfo("uberspect can not be null", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine1.parse(jexlInfo0, engine1.DEFAULT_FEATURES, "Hsm", scope0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame2 = aSTJexlScript0.createFrame((Object[]) stringArray0);
      engine0.createInterpreter(jexlContext_ThreadLocal0, frame2, jexlOptions0);
      assertTrue(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      JexlBuilder jexlBuilder2 = jexlBuilder1.debug(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      JexlBuilder jexlBuilder3 = jexlBuilder2.sandbox(jexlSandbox1);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlContext.ThreadLocal jexlContext_ThreadLocal0 = JexlEngine.getThreadContext();
      engine0.putThreadLocal((JexlContext.ThreadLocal) null);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(scope0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Hsm";
      Scope scope1 = new Scope(scope0, stringArray0);
      int int0 = 91;
      Frame frame0 = new Frame(scope1, stringArray0, 91);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame1, jexlOptions1);
      Jdk14Logger jdk14Logger0 = (Jdk14Logger)interpreter0.logger;
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Engine engine1 = new Engine();
      String string0 = "uberspect can not be null";
      JexlInfo jexlInfo0 = engine1.createInfo("uberspect can not be null", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine1.parse(jexlInfo0, engine1.DEFAULT_FEATURES, "Hsm", scope0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame2 = aSTJexlScript0.createFrame((Object[]) stringArray0);
      engine0.createInterpreter(jexlContext_ThreadLocal0, frame2, jexlOptions0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      JexlBuilder jexlBuilder2 = jexlBuilder1.debug(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      JexlBuilder jexlBuilder3 = jexlBuilder2.sandbox(jexlSandbox1);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlContext.ThreadLocal jexlContext_ThreadLocal0 = JexlEngine.getThreadContext();
      engine0.putThreadLocal((JexlContext.ThreadLocal) null);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(scope0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Hsm";
      Scope scope1 = new Scope(scope0, stringArray0);
      int int0 = 91;
      Frame frame0 = new Frame(scope1, stringArray0, 91);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame1, jexlOptions1);
      Jdk14Logger jdk14Logger0 = (Jdk14Logger)interpreter0.logger;
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Engine engine1 = new Engine();
      String string0 = "uberspect can not be null";
      JexlInfo jexlInfo0 = engine1.createInfo("uberspect can not be null", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine1.parse(jexlInfo0, engine1.DEFAULT_FEATURES, "Hsm", scope0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame2 = aSTJexlScript0.createFrame((Object[]) stringArray0);
      engine0.createInterpreter(jexlContext_ThreadLocal0, frame2, jexlOptions0);
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(string0);
      Engine.getUberspect((Log) jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(int0);
      engine1.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
      assertFalse(engine1.isDebug());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(36, 1262, 624, 624, Integer.MAX_VALUE).when(scope0).getArgCount();
      JexlInfo jexlInfo0 = engine0.createInfo("uberspect can not be null", 54, 54);
      // Undeclared exception!
      engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, "Hsm", scope0);
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, "Not supported in void context.", scope1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // @1:5 ambiguous statement error in 'Not supported in void context.'
         //
         verifyException("org.apache.commons.jexl3.parser.JexlParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, ",SF|K*d", scope1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo();
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, (String) null, (Scope) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        engine0.newInstance((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        engine0.invokeMethod(jexlBuilder0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(6);
      // Undeclared exception!
      try { 
        engine0.getVariables((ASTJexlScript) null, (JexlNode) null, engine_VarCollector0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getVariables((ASTJexlScript) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) jexlEngine_EmptyContext0, (Object) jexlEngine_EmptyContext0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, (Boolean) null);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) objectContext0, (Object) null, "jexl.options");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.Uberspect", e);
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Engine engine0 = new Engine();
      SoftCache<ASTIdentifierAccess, ASTIdentifier> softCache0 = new SoftCache<ASTIdentifierAccess, ASTIdentifier>(1190);
      Map<String, Object> map0 = softCache0.createCache(1190);
      MapContext mapContext0 = new MapContext(map0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(1190);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) mapContext0, (Object) aSTJexlScript0, ".S.jh");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1190
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getProperty((Object) "", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getParameters((JexlScript) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getLocalVariables((JexlScript) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        engine0.doCreateInstance(objectArray0[3], objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        engine0.createScript((JexlFeatures) null, (JexlInfo) null, "x~C1c", stringArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // @1:2 ambiguous statement error in 'x~C1c'
         //
         verifyException("org.apache.commons.jexl3.parser.JexlParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.createExpression((JexlInfo) null, "cY+{pt{r:\"hJJWIj");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = new JexlInfo();
      // Undeclared exception!
      try { 
        engine0.createExpression(jexlInfo0, (String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // source is null
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Engine engine0 = null;
      try {
        engine0 = new Engine((JexlBuilder) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Integer integer0 = new Integer(36);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(36, 106, 167, 16, (-454)).when(scope0).getArgCount();
      doReturn(integer0, integer0, integer0, integer0, integer0).when(scope0).getSymbol(anyString());
      doReturn(true, true).when(scope0).isCapturedSymbol(anyInt());
      JexlInfo jexlInfo0 = engine0.createInfo("uberspect can not be null", 54, 54);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, "Hsm", scope0);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(54);
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Integer integer0 = new Integer(36);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(36, 106, 167, 16, (-454)).when(scope0).getArgCount();
      doReturn(integer0, integer0, integer0, integer0, integer0).when(scope0).getSymbol(anyString());
      doReturn(true, true).when(scope0).isCapturedSymbol(anyInt());
      JexlInfo jexlInfo0 = engine0.createInfo("uberspect can not be null", 54, 54);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, "Hsm", scope0);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(54);
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Engine engine0 = new Engine();
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      engine_VarCollector0.add("VEE\"w*I");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(35);
      engine_VarCollector0.collect(aSTUnaryPlusNode0);
      assertTrue(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Engine engine0 = new Engine();
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      engine_VarCollector0.add("VEE\"w*I");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(35);
      engine_VarCollector0.collect(aSTUnaryPlusNode0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.setProperty((JexlContext) null, (Object) null, "/vn|Co", (Object) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(parser0, (-1781));
      // Undeclared exception!
      try { 
        engine0.setProperty((JexlContext) null, (Object) aSTFunctionNode0, "", (Object) "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      engine0.getProperty((JexlContext) objectContext0, (Object) engine0, "C0s}kXu[+.");
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      engine0.getProperty((JexlContext) objectContext0, (Object) engine0, "C0s}kXu[+.");
      ;
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-2782));
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) null, (Object) aSTJexlScript0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[0];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, "", stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[0];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, "", stringArray0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[0];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, "", stringArray0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      JexlBuilder jexlBuilder1 = jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      hashMap0.putIfAbsent(":G'bR", jexlFeatures0);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlFeatures jexlFeatures1 = engine0.expressionFeatures;
      jexlBuilder0.features(jexlFeatures1);
      Engine engine1 = new Engine(jexlBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      JexlBuilder jexlBuilder1 = jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      hashMap0.putIfAbsent(":G'bR", jexlFeatures0);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlFeatures jexlFeatures1 = engine0.expressionFeatures;
      jexlBuilder0.features(jexlFeatures1);
      Engine engine1 = new Engine(jexlBuilder0);
      assertFalse(engine1.isDebug());
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(0);
      boolean boolean0 = engine_VarCollector0.isCollecting();
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      engine_VarCollector0.collected();
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      engine_VarCollector0.collected();
      assertFalse(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine templateEngine1 = engine0.jxlt();
      ;
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine templateEngine1 = engine0.jxlt();
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine templateEngine1 = engine0.jxlt();
      ;
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine templateEngine1 = engine0.jxlt();
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Integer integer0 = new Integer((-2975));
      // Undeclared exception!
      try { 
        engine0.getProperty(engine0.EMPTY_CONTEXT, (Object) integer0, "at ");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, " ");
      ;
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, " ");
      assertNotNull(script0.getSourceText());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        engine0.getProperty((Object) "org.apache.commons.jexl3.internal.Engine", stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, (Boolean) null);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) objectContext0, (Object) engine0, "C0s}kXu[+.");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "");
      assertNotNull(script0.getSourceText());
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, "", scope1);
      ;
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, "", scope1);
      assertEquals(0, aSTJexlScript0.getSymbolCount());
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, "", scope1);
      assertTrue(aSTJexlScript0.isGlobalVar());
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo("#1", (-2022), (-2022));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      engine0.parse(jexlInfo0, (JexlFeatures) null, "antish", scope1);
      ;
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo("#1", (-2022), (-2022));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      engine0.parse(jexlInfo0, (JexlFeatures) null, "antish", scope1);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[6];
      JexlInfo jexlInfo0 = new JexlInfo(stringArray0[0], 91, 16);
      Script script0 = engine0.createExpression(jexlInfo0, "org.apache.commons.jexl3.internal.introspection.SandboxUberspect");
      assertNotNull(script0.getSourceText());
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[6];
      JexlInfo jexlInfo0 = new JexlInfo(stringArray0[0], 91, 16);
      Script script0 = engine0.createExpression(jexlInfo0, "org.apache.commons.jexl3.internal.introspection.SandboxUberspect");
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[6];
      JexlInfo jexlInfo0 = new JexlInfo(stringArray0[0], 91, 16);
      Script script0 = engine0.createExpression(jexlInfo0, "org.apache.commons.jexl3.internal.introspection.SandboxUberspect");
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, false, "", (Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      jexlOptions0.setAntish(false);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) null, "n", (Object) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      Object[] objectArray0 = new Object[0];
      engine0.newInstance("X*fF?$", objectArray0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      Object[] objectArray0 = new Object[0];
      engine0.newInstance("X*fF?$", objectArray0);
      assertTrue(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Engine engine0 = new Engine();
      Integer integer0 = new Integer(93);
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) integer0;
      // Undeclared exception!
      try { 
        engine0.doCreateInstance(integer0, objectArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        engine0.newInstance("A5Y/Z3", objectArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode((-1));
      Object[] objectArray0 = new Object[0];
      engine0.invokeMethod(aSTFunctionNode0, "X*fF?$", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode((-1));
      Object[] objectArray0 = new Object[0];
      engine0.invokeMethod(aSTFunctionNode0, "X*fF?$", objectArray0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Integer integer0 = new Integer(119);
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) integer0;
      // Undeclared exception!
      try { 
        engine0.invokeMethod(integer0, "X*fF?$", objectArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        engine0.invokeMethod((Object) null, "org.apache.commons.jexl3.internal.Engine$UberspectHolder", objectArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      engine0.setProperty(engine0.EMPTY_CONTEXT, (Object) null, "C0skXu[+.", (Object) byteArrayInputStream0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      engine0.setProperty(engine0.EMPTY_CONTEXT, (Object) null, "C0skXu[+.", (Object) byteArrayInputStream0);
      ;
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Engine engine0 = new Engine();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) mapContext0, (Object) "<v~5##w>>,(\"H44rRKE", "[dHUe .`/}");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // source is null
         //
         verifyException("org.apache.commons.jexl3.internal.Engine", e);
      }
  }
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.clearCache();
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.clearCache();
      assertTrue(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.clearCache();
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.clearCache();
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.optionsSet((JexlOptions) null);
      ;
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.optionsSet((JexlOptions) null);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.optionsSet((JexlOptions) null);
      ;
}
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = new JexlInfo("gy9*RJO", 4, 10);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, "gy9*RJO", scope1);
      Map<String, Object> map0 = aSTJexlScript0.getPragmas();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      assertTrue(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = new JexlInfo("gy9*RJO", 4, 10);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, "gy9*RJO", scope1);
      Map<String, Object> map0 = aSTJexlScript0.getPragmas();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.cache(91);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.setClassLoader(classLoader0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.cache(91);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.setClassLoader(classLoader0);
      ;
}
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      engine0.setClassLoader(classLoader0);
      ;
}
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      engine0.setClassLoader(classLoader0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      jexlBuilder0.logger((Log) noOpLog0);
      Engine engine0 = new Engine(jexlBuilder0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      jexlBuilder0.logger((Log) noOpLog0);
      Engine engine0 = new Engine(jexlBuilder0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.loader(classLoader0);
      Engine engine0 = new Engine(jexlBuilder0);
      assertFalse(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.loader(classLoader0);
      Engine engine0 = new Engine(jexlBuilder0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      Engine engine0 = new Engine(jexlBuilder0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      Engine engine0 = new Engine(jexlBuilder0);
      assertFalse(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isCancellable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isCancellable();
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      engine0.getProperty((Object) jexlBuilder0, "X*fF?$");
      ;
}
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      engine0.getProperty((Object) jexlBuilder0, "X*fF?$");
      ;
}
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getArithmetic();
      assertFalse(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getArithmetic();
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isDebug();
      assertFalse(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isDebug();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createJxltEngine(true, 2763, ')', '');
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createJxltEngine(true, 2763, ')', '');
      ;
}
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isSilent();
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isSilent();
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isSilent();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isStrict();
      assertFalse(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isStrict();
      ;
}
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isStrict();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, "org.apache.commons.jexl3.internal.Engine", stringArray0);
      String[] stringArray1 = engine0.getLocalVariables(script0);
      assertNotNull(script0.getSourceText());
}
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, "org.apache.commons.jexl3.internal.Engine", stringArray0);
      String[] stringArray1 = engine0.getLocalVariables(script0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, "org.apache.commons.jexl3.internal.Engine", stringArray0);
      String[] stringArray1 = engine0.getLocalVariables(script0);
      assertTrue(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, "org.apache.commons.jexl3.internal.Engine", stringArray0);
      String[] stringArray1 = engine0.getLocalVariables(script0);
      assertNotNull(stringArray1);
}
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      Engine engine0 = new Engine(jexlBuilder0);
      String[] stringArray0 = new String[2];
      Script script0 = engine0.createScript(jexlFeatures0, (JexlInfo) null, "", stringArray0);
      String[] stringArray1 = engine0.getParameters(script0);
      assertNotNull(script0.getSourceText());
}
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      Engine engine0 = new Engine(jexlBuilder0);
      String[] stringArray0 = new String[2];
      Script script0 = engine0.createScript(jexlFeatures0, (JexlInfo) null, "", stringArray0);
      String[] stringArray1 = engine0.getParameters(script0);
      assertNotNull(stringArray1);
}
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      Engine engine0 = new Engine(jexlBuilder0);
      String[] stringArray0 = new String[2];
      Script script0 = engine0.createScript(jexlFeatures0, (JexlInfo) null, "", stringArray0);
      String[] stringArray1 = engine0.getParameters(script0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Engine engine0 = new Engine();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[0];
      engine0.newInstance((Class<? extends String>) class0, objectArray0);
      assertFalse(engine0.isDebug());
}
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Engine engine0 = new Engine();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[0];
      engine0.newInstance((Class<? extends String>) class0, objectArray0);
      assertFalse(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Engine engine0 = new Engine();
      Script script0 = engine0.createExpression((JexlInfo) null, "org.apache.commons.jexl3.parser.Parser$LookaheadSuccess");
      Closure closure0 = new Closure(script0, (Object[]) null);
      ASTJexlScript aSTJexlScript0 = closure0.getScript();
      // Undeclared exception!
      try { 
        engine0.getProperty((Object) aSTJexlScript0, "org.apache.commons.jexl3.parser.Parser$LookaheadSuccess");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Engine engine0 = new Engine();
      Script script0 = engine0.createExpression((JexlInfo) null, "org.apache.commons.jexl3.parser.Parser$LookaheadSuccess");
      Closure closure0 = new Closure(script0, (Object[]) null);
      ASTJexlScript aSTJexlScript0 = closure0.getScript();
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector((-1565));
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
      assertNotNull(closure0.getSourceText());
}
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Engine engine0 = new Engine();
      Script script0 = engine0.createExpression((JexlInfo) null, "org.apache.commons.jexl3.parser.Parser$LookaheadSuccess");
      Closure closure0 = new Closure(script0, (Object[]) null);
      ASTJexlScript aSTJexlScript0 = closure0.getScript();
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector((-1565));
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
      assertTrue(engine0.isCancellable());
}
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Engine engine0 = new Engine();
      StringProvider stringProvider0 = new StringProvider("!E'!r/");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-627));
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
      ;
}
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Engine engine0 = new Engine();
      StringProvider stringProvider0 = new StringProvider("!E'!r/");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-627));
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
      ;
}
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Engine engine0 = new Engine();
      StringProvider stringProvider0 = new StringProvider("!E'!r/");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-627));
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
      assertFalse(engine0.isDebug());
}
