/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:33:53 GMT 2022
 */

package org.apache.commons.jexl3.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.lang.reflect.InvocationTargetException;
import java.nio.LongBuffer;
import java.util.BitSet;
import java.util.Map;
import org.apache.commons.jexl3.JexlArithmetic;
import org.apache.commons.jexl3.JexlBuilder;
import org.apache.commons.jexl3.JexlContext;
import org.apache.commons.jexl3.JexlEngine;
import org.apache.commons.jexl3.JexlException;
import org.apache.commons.jexl3.JexlInfo;
import org.apache.commons.jexl3.JexlOperator;
import org.apache.commons.jexl3.JexlOptions;
import org.apache.commons.jexl3.MapContext;
import org.apache.commons.jexl3.ObjectContext;
import org.apache.commons.jexl3.internal.Engine;
import org.apache.commons.jexl3.internal.Frame;
import org.apache.commons.jexl3.internal.Interpreter;
import org.apache.commons.jexl3.internal.InterpreterBase;
import org.apache.commons.jexl3.internal.LexicalFrame;
import org.apache.commons.jexl3.internal.LexicalScope;
import org.apache.commons.jexl3.internal.Scope;
import org.apache.commons.jexl3.internal.Script;
import org.apache.commons.jexl3.internal.TemplateEngine;
import org.apache.commons.jexl3.internal.TemplateInterpreter;
import org.apache.commons.jexl3.introspection.JexlMethod;
import org.apache.commons.jexl3.parser.ASTAnnotatedStatement;
import org.apache.commons.jexl3.parser.ASTArguments;
import org.apache.commons.jexl3.parser.ASTArrayAccess;
import org.apache.commons.jexl3.parser.ASTAssignment;
import org.apache.commons.jexl3.parser.ASTBitwiseAndNode;
import org.apache.commons.jexl3.parser.ASTBlock;
import org.apache.commons.jexl3.parser.ASTBreak;
import org.apache.commons.jexl3.parser.ASTConstructorNode;
import org.apache.commons.jexl3.parser.ASTFalseNode;
import org.apache.commons.jexl3.parser.ASTFunctionNode;
import org.apache.commons.jexl3.parser.ASTIdentifier;
import org.apache.commons.jexl3.parser.ASTIdentifierAccess;
import org.apache.commons.jexl3.parser.ASTIfStatement;
import org.apache.commons.jexl3.parser.ASTJexlScript;
import org.apache.commons.jexl3.parser.ASTMethodNode;
import org.apache.commons.jexl3.parser.ASTNRNode;
import org.apache.commons.jexl3.parser.ASTNamespaceIdentifier;
import org.apache.commons.jexl3.parser.ASTNotNode;
import org.apache.commons.jexl3.parser.ASTNullpNode;
import org.apache.commons.jexl3.parser.ASTOrNode;
import org.apache.commons.jexl3.parser.ASTReference;
import org.apache.commons.jexl3.parser.ASTSWNode;
import org.apache.commons.jexl3.parser.ASTSetOrNode;
import org.apache.commons.jexl3.parser.ASTSetSubNode;
import org.apache.commons.jexl3.parser.ASTSetXorNode;
import org.apache.commons.jexl3.parser.ASTUnaryMinusNode;
import org.apache.commons.jexl3.parser.ASTVar;
import org.apache.commons.jexl3.parser.JexlNode;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.ParserTokenManager;
import org.apache.commons.jexl3.parser.SimpleCharStream;
import org.apache.commons.jexl3.parser.StreamProvider;
import org.apache.commons.jexl3.parser.StringProvider;
import org.apache.commons.jexl3.parser.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InterpreterBase_ESTest extends InterpreterBase_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTVar aSTVar0 = new ASTVar(parser0, 2);
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = templateInterpreter0.new CallDispatcher(aSTVar0, true);
      Integer integer0 = new Integer(2);
      Object[] objectArray0 = new Object[7];
      aSTVar0.jjtSetValue(templateInterpreter_Arguments0);
      Object object0 = interpreterBase_CallDispatcher0.tryEval(integer0, "", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        engine0.setProperty((JexlContext) null, (Object) jexlBuilder0, "JxltLiteral", (Object) long0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[0];
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode((-1738));
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = interpreter0.new CallDispatcher(aSTFalseNode0, false);
      boolean boolean0 = interpreterBase_CallDispatcher0.isTargetMethod(aSTFalseNode0, "hAmeUza", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      Object[] objectArray0 = new Object[8];
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1165));
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = interpreter0.new CallDispatcher(aSTNotNode0, true);
      boolean boolean0 = interpreterBase_CallDispatcher0.isContextMethod("8%>RZEA@ j}3sgO[", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, (-257));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Parser parser0 = engine0.parser;
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, (-257));
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = interpreter0.new CallDispatcher(aSTArrayAccess0, false);
      boolean boolean0 = interpreterBase_CallDispatcher0.isArithmeticMethod("", stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[7];
      InterpreterBase.ArithmeticFuncall interpreterBase_ArithmeticFuncall0 = new InterpreterBase.ArithmeticFuncall((JexlMethod) null, true);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTAssignment aSTAssignment0 = new ASTAssignment((-1));
      // Undeclared exception!
      try { 
        interpreterBase_ArithmeticFuncall0.tryInvoke(templateInterpreter0, "org.apache.commons.jexl3.internal.InterpreterBase$ContextualCtor", aSTAssignment0, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase$ArithmeticFuncall", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[3];
      Frame frame0 = new Frame((Scope) null, objectArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTBlock aSTBlock0 = new ASTBlock(0);
      interpreter0.cancelCheck(aSTBlock0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Byte byte0 = new Byte((byte)39);
      // Undeclared exception!
      try { 
        templateInterpreter0.setAttribute(engine0, engine0, byte0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // unable to set object property, class: org.apache.commons.jexl3.internal.Engine, property: org.apache.commons.jexl3.internal.Engine@3, argument: Byte
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, (Frame) null, jexlOptions0);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(4);
      Object object0 = interpreter0.unsolvableVariable(aSTIfStatement0, "`y4<W", false);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, 9);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(85);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      Object object0 = interpreter0.unsolvableMethod(aSTJexlScript0, "Kgx{9IokaCu ");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, 9);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(85);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      Object object0 = interpreter0.undefinedVariable(aSTJexlScript0, "org.apache.commons.jexl3.internal.InterpreterBase$Funcall");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode((-1981));
      String string0 = InterpreterBase.stringifyPropertyValue(aSTSetSubNode0);
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      StringProvider stringProvider0 = new StringProvider("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTArguments aSTArguments0 = new ASTArguments(parser0, 849);
      String string0 = interpreter0.stringifyProperty(aSTArguments0);
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      boolean boolean0 = interpreter0.isStrictEngine();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSilent(true);
      templateInterpreter_Arguments0.options(jexlOptions0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      boolean boolean0 = templateInterpreter0.isSilent();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      boolean boolean0 = interpreter0.isSilent();
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1981));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      boolean boolean0 = interpreter0.isSafe();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      boolean boolean0 = templateInterpreter0.isCancelled();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      boolean boolean0 = interpreter0.isCancellable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Long long0 = new Long(0);
      Object object0 = templateInterpreter0.functionArgument(false, long0);
      assertEquals(1, object0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1073));
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(1);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      aSTNotNode0.jjtAddChild(aSTBitwiseAndNode0, 6);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      JexlNode jexlNode0 = interpreter0.findNullOperand(jexlArithmetic_NullOperand0, aSTNotNode0, engine0, jexlBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockRuntimeException0);
      JexlException jexlException0 = JexlException.tryFailed(invocationTargetException0);
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(15);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = engine0.createInfo((String) null, 15, 15);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "[DEBUG] ", (Scope) null);
      JexlNode jexlNode0 = templateInterpreter0.findNullOperand(jexlException0, aSTNamespaceIdentifier0, templateEngine_TemplateExpression0, mockRuntimeException0);
      assertEquals(1, jexlNode0.getId());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options;
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-789));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null, "org.apache.commons.jexl3.parser.ASTForeachStatement");
      JexlException jexlException0 = JexlException.tryFailed(invocationTargetException0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(0);
      Class<Short> class0 = Short.TYPE;
      JexlNode jexlNode0 = interpreter0.findNullOperand(jexlException0, aSTAnnotatedStatement0, class0, class0);
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1073));
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      Token token0 = new Token(14);
      aSTNotNode0.jjtSetFirstToken(token0);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      JexlNode jexlNode0 = interpreter0.findNullOperand(jexlArithmetic_NullOperand0, aSTNotNode0, engine0, jexlBuilder0);
      assertFalse(jexlNode0.isGlobalVar());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 2);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      boolean boolean0 = interpreter0.cancel();
      boolean boolean1 = interpreter0.cancel();
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 2);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      boolean boolean0 = interpreter0.cancel();
      boolean boolean1 = interpreter0.cancel();
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      ASTVar aSTVar0 = new ASTVar((-1));
      JexlException.VariableIssue jexlException_VariableIssue0 = JexlException.VariableIssue.UNDEFINED;
      // Undeclared exception!
      try { 
        interpreter0.variableError(aSTVar0, "hAmeUza", jexlException_VariableIssue0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: variable 'hAmeUza' is undefined
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlException.VariableIssue jexlException_VariableIssue0 = JexlException.VariableIssue.NULLVALUE;
      // Undeclared exception!
      try { 
        templateInterpreter0.variableError((JexlNode) null, "", jexlException_VariableIssue0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.unsolvableVariable((JexlNode) null, "j", true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      StringReader stringReader0 = new StringReader("<j;S:mN1SxL]@D3");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(parser0, 2147483645);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("");
      // Undeclared exception!
      try { 
        templateInterpreter0.unsolvableProperty(aSTUnaryMinusNode0, "hmu-wgt&j4WWZ!", false, mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: null value property 'hmu-wgt&j4WWZ!'
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      InterruptedException interruptedException0 = new InterruptedException();
      // Undeclared exception!
      try { 
        templateInterpreter0.unsolvableProperty((JexlNode) null, "unable to set object property, class: ", false, interruptedException0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(0);
      // Undeclared exception!
      try { 
        interpreter0.unsolvableMethod(aSTConstructorNode0, "?y", stringArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: unsolvable function/method '?y(Object)'
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[3];
      Frame frame0 = new Frame((Scope) null, objectArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTBlock aSTBlock0 = new ASTBlock(0);
      // Undeclared exception!
      try { 
        interpreter0.unsolvableMethod(aSTBlock0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.unsolvableMethod((JexlNode) null, ")[M4~'mr");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: unsolvable function/method ')[M4~'mr'
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1165));
      // Undeclared exception!
      try { 
        interpreter0.undefinedVariable(aSTNotNode0, "EN:K");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: variable 'EN:K' is undefined
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Frame frame0 = new Frame((Scope) null, objectArray0, 669);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.undefinedVariable((JexlNode) null, "qe^t)&");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode(0);
      // Undeclared exception!
      try { 
        InterpreterBase.stringifyPropertyValue(aSTNullpNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.redefinedVariable((JexlNode) null, "unable to set object property, class: ");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-260));
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      Parser parser0 = engine0.parser;
      ASTReference aSTReference0 = new ASTReference(parser0, 3734);
      // Undeclared exception!
      try { 
        interpreter0.isLocalVariable(aSTReference0, (-260));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.isFunctionCall((ASTReference) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode(4);
      // Undeclared exception!
      try { 
        interpreter0.invocationException(aSTSetOrNode0, "n[fyFwN& pOuk", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      long[] longArray0 = new long[1];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      LexicalScope lexicalScope0 = new LexicalScope(10, bitSet0);
      // Undeclared exception!
      try { 
        interpreter0.getVariable(frame0, lexicalScope0, (ASTIdentifier) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1));
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(0);
      // Undeclared exception!
      try { 
        templateInterpreter0.getAttribute((Object) null, aSTArrayAccess0, aSTJexlScript0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : object is null
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 2);
      // Undeclared exception!
      try { 
        templateInterpreter0.getAttribute(aSTArrayAccess0, jexlBuilder0, aSTArrayAccess0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: undefined property 'org.apache.commons.jexl3.JexlBuilder@0000000002'
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 2);
      // Undeclared exception!
      try { 
        templateInterpreter0.getAttribute(aSTArrayAccess0, jexlBuilder0, (JexlNode) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // unable to get object property, class: org.apache.commons.jexl3.parser.ASTArrayAccess, property: org.apache.commons.jexl3.JexlBuilder@2
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.defineVariable((ASTVar) null, (LexicalFrame) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.callArguments((Object) null, false, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      StringProvider stringProvider0 = new StringProvider("unable to set object property, class: ");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1024, 1024);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(parser0, 463);
      Short short0 = new Short((short)2);
      // Undeclared exception!
      try { 
        templateInterpreter0.setAttribute(stringProvider0, jexlOptions0, short0, aSTFunctionNode0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: undefined property 'org.apache.commons.jexl3.JexlOptions@0000000001'
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Engine engine0 = new Engine();
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-2126));
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, mapContext0);
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode((-289));
      Byte byte0 = new Byte((byte)53);
      // Undeclared exception!
      try { 
        interpreter0.setAttribute((Object) null, aSTMethodNode0, byte0, (JexlNode) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Parser parser0 = new Parser("org.apache.commons.jexl3.parser.ASTLENode");
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode(parser0, (-2147483647));
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn("p>fqDb7h").when(aSTIdentifierAccess0).getIdentifier();
      doReturn(true).when(aSTIdentifierAccess0).isSafe();
      doReturn(aSTMethodNode0).when(aSTIdentifierAccess0).jjtGetParent();
      Object object0 = interpreter0.visit(aSTIdentifierAccess0, "");
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-2002));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      Object object0 = interpreter0.getAttribute(map0, jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(1);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = interpreter0.new CallDispatcher(aSTBitwiseAndNode0, true);
      try { 
        interpreterBase_CallDispatcher0.eval((String) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: unsolvable function/method ''
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = interpreter0.new CallDispatcher((JexlNode) null, false);
      Object[] objectArray0 = new Object[5];
      Object object0 = interpreterBase_CallDispatcher0.tryEval(jexlBuilder0, "\"||\"", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTVar aSTVar0 = new ASTVar(parser0, 2);
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = templateInterpreter0.new CallDispatcher(aSTVar0, true);
      Object[] objectArray0 = new Object[7];
      Object object0 = interpreterBase_CallDispatcher0.tryEval((Object) null, "", objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 59);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      InterpreterBase.ContextFuncall interpreterBase_ContextFuncall0 = new InterpreterBase.ContextFuncall((JexlMethod) null, true);
      Short short0 = new Short((short)3);
      // Undeclared exception!
      try { 
        interpreterBase_ContextFuncall0.tryInvoke(interpreter0, "?", short0, stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase$ContextFuncall", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      Object object0 = interpreter0.functionArgument(false, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      Object[] objectArray0 = new Object[8];
      Object[] objectArray1 = interpreter0.callArguments((Object) null, false, objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = new JexlInfo("hAmeUza", (-1738), (-1));
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = interpreter0.functionArguments(jexlInfo0, true, objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(mapContext0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, (Frame) null);
      Object[] objectArray0 = interpreter0.functionArguments(mapContext0, false, (Object[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, (Frame) null, jexlOptions0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(346);
      InterruptedException interruptedException0 = new InterruptedException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.apache.commons.jexl3.parser.ASTSetXorNode", interruptedException0);
      JexlException jexlException0 = interpreter0.invocationException(aSTSWNode0, (String) null, mockRuntimeException0);
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1165));
      MockThrowable mockThrowable0 = new MockThrowable("", (Throwable) null);
      JexlException jexlException0 = interpreter0.invocationException(aSTNotNode0, "", mockThrowable0);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(5);
      InterruptedException interruptedException0 = new InterruptedException();
      // Undeclared exception!
      try { 
        templateInterpreter0.annotationError(aSTConstructorNode0, "-.\"5", interruptedException0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: error processing annotation '-.\"5'
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(3);
      JexlOperator jexlOperator0 = JexlOperator.PROPERTY_GET;
      InterruptedException interruptedException0 = new InterruptedException();
      // Undeclared exception!
      try { 
        templateInterpreter0.operatorError(aSTAnnotatedStatement0, jexlOperator0, interruptedException0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '.'
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = InterpreterBase.stringifyPropertyValue((JexlNode) null);
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTVar aSTVar0 = new ASTVar(parser0, 2);
      String string0 = templateInterpreter0.stringifyProperty(aSTVar0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      StringProvider stringProvider0 = new StringProvider("unable to set object property, class: ");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1024, 1024);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(parser0, 463);
      // Undeclared exception!
      try { 
        templateInterpreter0.stringifyProperty(aSTFunctionNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(3);
      String string0 = templateInterpreter0.stringifyProperty(aSTSetXorNode0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 2);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTReference aSTReference0 = new ASTReference(6);
      Parser parser0 = new Parser("?");
      ASTBlock aSTBlock0 = new ASTBlock(parser0, 783);
      aSTReference0.jjtAddChild(aSTBlock0, 783);
      boolean boolean0 = interpreter0.isFunctionCall(aSTReference0);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 2);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTReference aSTReference0 = new ASTReference(6);
      boolean boolean0 = interpreter0.isFunctionCall(aSTReference0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = new Parser("");
      ASTReference aSTReference0 = new ASTReference(parser0, 22);
      ASTBreak aSTBreak0 = new ASTBreak(parser0, (-833));
      aSTReference0.jjtAddChild(aSTBreak0, 22);
      boolean boolean0 = templateInterpreter0.isLocalVariable(aSTReference0, 22);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      Parser parser0 = new Parser("<JXLT_LITERAL>");
      ASTReference aSTReference0 = new ASTReference(parser0, (-1));
      boolean boolean0 = interpreter0.isLocalVariable(aSTReference0, 3);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-3247));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      Byte byte0 = new Byte((byte) (-33));
      // Undeclared exception!
      try { 
        interpreter0.setAttribute(byte0, (Object) null, (Object) null, aSTJexlScript0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: undefined property ''
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      ASTOrNode aSTOrNode0 = new ASTOrNode((-2205));
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn("pQfqK!7h").when(aSTIdentifierAccess0).getIdentifier();
      doReturn(false).when(aSTIdentifierAccess0).isSafe();
      doReturn(true).when(aSTIdentifierAccess0).isTernaryProtected();
      doReturn(aSTOrNode0).when(aSTIdentifierAccess0).jjtGetParent();
      Object object0 = interpreter0.visit(aSTIdentifierAccess0, "");
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlInfo jexlInfo0 = new JexlInfo("&ea-TCf_@", 1215, 8);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, "6|ff$zRZ", scope1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      MockThrowable mockThrowable0 = new MockThrowable();
      jexlOptions0.setStrict(false);
      JexlException jexlException0 = new JexlException(jexlInfo0, "YEWS9pEjie@+4RR/wl4", mockThrowable0);
      ASTArguments aSTArguments0 = new ASTArguments(8);
      Object object0 = interpreter0.call(aSTJexlScript0, jexlException0, aSTJexlScript0, aSTArguments0);
      ;
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[3];
      jexlOptions0.setStrict(false);
      Frame frame0 = new Frame((Scope) null, objectArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTVar aSTVar0 = new ASTVar(0);
      Object object0 = interpreter0.getVariable(frame0, (LexicalScope) null, aSTVar0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      ASTOrNode aSTOrNode0 = new ASTOrNode((-2205));
      // Undeclared exception!
      try { 
        interpreter0.unsolvableVariable(aSTOrNode0, "", true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: variable '' is undefined
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      Parser parser0 = new Parser("");
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(parser0, 0);
      // Undeclared exception!
      try { 
        templateInterpreter0.findNullOperand(jexlArithmetic_NullOperand0, aSTConstructorNode0, templateInterpreter_Arguments0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      ASTNRNode aSTNRNode0 = new ASTNRNode(2);
      Byte byte0 = new Byte((byte)3);
      // Undeclared exception!
      try { 
        templateInterpreter0.findNullOperand(jexlArithmetic_NullOperand0, aSTNRNode0, (Object) null, byte0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Double double0 = new Double((-828.6587024175));
      JexlNode jexlNode0 = templateInterpreter0.findNullOperand((RuntimeException) null, (JexlNode) null, (Object) null, double0);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(3);
      // Undeclared exception!
      try { 
        templateInterpreter0.setContextVariable(aSTSetXorNode0, "org.apache.commons.jexl3.internal.Interpreter$AnnotatedCall", "!t^#U7/0,_rm");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : context is readonly
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Script script0 = engine0.createExpression((JexlInfo) null, "org.apache.commons.jexl3.internal.InterpreterBase$ContextualCtor");
      Object[] objectArray0 = new Object[9];
      Script.Callable script_Callable0 = script0.new Callable(templateInterpreter0);
      Object object0 = templateInterpreter0.processAnnotation("org.apache.commons.jexl3.internal.InterpreterBase$ContextualCtor", objectArray0, script_Callable0);
      ;
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Object object0 = engine0.getProperty((JexlContext) jexlEngine_EmptyContext0, (Object) null, "Reference");
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Object object0 = engine0.getProperty((Object) jexlEngine_EmptyContext0, "Reference");
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[3];
      Frame frame0 = new Frame((Scope) null, objectArray0, 0);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      jexlOptions0.setLexicalShade(true);
      ASTVar aSTVar0 = new ASTVar((-25));
      // Undeclared exception!
      try { 
        interpreter0.getVariable(frame0, (LexicalScope) null, aSTVar0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: variable '' is undefined
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      stringArray0[1] = "&ea-TCf_@";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      LexicalScope lexicalScope0 = new LexicalScope();
      lexicalScope0.symbols = 2178L;
      boolean boolean0 = interpreter0.isVariableDefined(frame0, lexicalScope0, "&ea-TCf_@");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      stringArray0[1] = "&ea-TCf_@";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      LexicalScope lexicalScope0 = new LexicalScope();
      boolean boolean0 = interpreter0.isVariableDefined(frame0, lexicalScope0, "&ea-TCf_@");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      LexicalScope lexicalScope0 = new LexicalScope();
      boolean boolean0 = interpreter0.isVariableDefined(frame0, lexicalScope0, "&ea-TCf_@");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-260));
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      boolean boolean0 = interpreter0.isVariableDefined(frame0, (LexicalScope) null, "org.apache.commons.jexl3.internal.InterpreterBase$Funcall");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      boolean boolean0 = interpreter0.isVariableDefined((Frame) null, (LexicalScope) null, "");
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[3];
      Frame frame0 = new Frame((Scope) null, objectArray0, 0);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      ASTVar aSTVar0 = new ASTVar((-25));
      boolean boolean0 = interpreter0.defineVariable(aSTVar0, (LexicalFrame) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode(parser0, 4359);
      // Undeclared exception!
      try { 
        templateInterpreter0.resolveNamespace(",GJ+gv(;@DH", aSTFalseNode0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : no such function namespace ,GJ+gv(;@DH
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-260));
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(3734);
      Object object0 = interpreter0.resolveNamespace(stringArray0[2], aSTJexlScript0);
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1981));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      interpreter0.closeIfSupported(scope1);
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      interpreter0.closeIfSupported((Object) null);
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTReference aSTReference0 = new ASTReference((-203));
      ObjectContext<ASTReference> objectContext0 = new ObjectContext<ASTReference>(engine0, aSTReference0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-192));
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, frame0, jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrictArithmetic(false);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(1064);
      Engine engine0 = new Engine(jexlBuilder1);
      Object[] objectArray0 = new Object[1];
      Frame frame0 = new Frame((Scope) null, objectArray0, 1064);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, (Frame) null, jexlOptions0);
      Object[] objectArray0 = new Object[2];
      InterpreterBase.ArithmeticFuncall interpreterBase_ArithmeticFuncall0 = new InterpreterBase.ArithmeticFuncall((JexlMethod) null, true);
      // Undeclared exception!
      try { 
        interpreterBase_ArithmeticFuncall0.tryInvoke(interpreter0, "\")P^}jf", (Object) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase$ArithmeticFuncall", e);
      }
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlInfo jexlInfo0 = new JexlInfo("&ea-TCf_@", 8, 8);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, "6|ff$zRZ", scope1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.redefinedVariable(aSTJexlScript0, "YEWS9pEjie@+4RR/wl4");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // &ea-TCf_@@8:1 variable 'YEWS9pEjie@+4RR/wl4' is already defined
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = engine0.options;
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1981));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      Interpreter interpreter1 = new Interpreter(interpreter0, jexlArithmetic0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1165));
      interpreter0.cancel();
      // Undeclared exception!
      try { 
        interpreter0.interpret(aSTNotNode0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InterpreterBase.Funcall interpreterBase_Funcall0 = new InterpreterBase.Funcall((JexlMethod) null, false);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        interpreterBase_Funcall0.tryInvoke((InterpreterBase) null, "\"|\"", (Object) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase$Funcall", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object[] objectArray0 = new Object[22];
      InterpreterBase.ContextualCtor interpreterBase_ContextualCtor0 = new InterpreterBase.ContextualCtor((JexlMethod) null, true);
      MockThrowable mockThrowable0 = new MockThrowable();
      MockException mockException0 = new MockException("25(Z|?=sa{y[/f", mockThrowable0);
      JexlException jexlException0 = new JexlException((JexlNode) null, "", mockException0);
      // Undeclared exception!
      try { 
        interpreterBase_ContextualCtor0.tryInvoke(templateInterpreter0, "", jexlException0, objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase$ContextualCtor", e);
      }
  }
}
