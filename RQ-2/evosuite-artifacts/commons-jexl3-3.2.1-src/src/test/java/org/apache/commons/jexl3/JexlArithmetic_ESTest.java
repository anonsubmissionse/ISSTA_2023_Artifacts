/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:18:32 GMT 2022
 */

package org.apache.commons.jexl3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.regex.Pattern;
import org.apache.commons.jexl3.JexlArithmetic;
import org.apache.commons.jexl3.JexlContext;
import org.apache.commons.jexl3.JexlEngine;
import org.apache.commons.jexl3.JexlOptions;
import org.apache.commons.jexl3.MapContext;
import org.apache.commons.jexl3.ObjectContext;
import org.apache.commons.jexl3.internal.ArrayBuilder;
import org.apache.commons.jexl3.internal.MapBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JexlArithmetic_ESTest extends JexlArithmetic_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, Integer.MAX_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MAX_VALUE);
      Class<Integer> class0 = Integer.class;
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(16);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      Number number0 = jexlArithmetic0.narrowBigDecimal(object0, pattern0, bigDecimal0);
      jexlArithmetic1.endsWith(number0, class0);
      jexlArithmetic0.isEmpty(object0, (Boolean) null);
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":(");
      jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.toBigInteger(object0);
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.isNegateStable();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      jexlArithmetic0.startsWith(jexlArithmetic1, (Object) null);
      jexlArithmetic0.positivize((Object) null);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean(true);
      jexlArithmetic1.toInteger(atomicBoolean1);
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Float float0 = new Float((-2368.8948));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer1 = new Integer(0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jexlArithmetic0.narrowBigDecimal("positivize", integer1, bigDecimal0);
      jexlArithmetic0.add((Object) null, "positivize");
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(2147483637);
      jexlArithmetic_SetBuilder0.create();
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, Integer.MAX_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MAX_VALUE);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic1.narrowNumber(bigDecimal0, class0);
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = 3475;
      Random.setNextRandom(3475);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 3475);
      Integer integer0 = new Integer(3475);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal((-1L), mathContext0);
      Number number0 = jexlArithmetic0.narrowBigDecimal(integer0, integer0, bigDecimal0);
      jexlArithmetic0.empty(number0);
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      MathContext mathContext1 = new MathContext(3475, roundingMode0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(bigDecimal0, mathContext1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=3475 roundingMode=HALF_DOWN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = new MathContext(0);
      jexlOptions0.copy();
      MathContext mathContext1 = MathContext.DECIMAL128;
      mathContext1.getRoundingMode();
      Long long0 = new Long(314L);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext1, 0);
      Boolean boolean0 = Boolean.FALSE;
      MathContext mathContext2 = MathContext.DECIMAL32;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Float float0 = new Float((float) 0);
      Class<Float> class0 = Float.class;
      jexlArithmetic0.narrowNumber(float0, class0);
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 15);
      Integer integer0 = new Integer(15);
      Integer integer1 = Integer.getInteger("<=", integer0);
      Integer.compareUnsigned(42, 321);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer.toUnsignedString(15);
      mathContext0.getPrecision();
      Byte byte0 = new Byte((byte)53);
      Byte.toUnsignedLong((byte)0);
      jexlArithmetic1.subtract(integer1, byte0);
      jexlArithmetic1.arrayBuilder((byte)53);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic1.endsWith(atomicBoolean0, "15");
      Boolean.logicalXor(false, false);
      jexlArithmetic0.toBoolean((Object) null);
      // Undeclared exception!
      try { 
        jexlArithmetic1.arrayBuilder(Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ArrayBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-853L), 10L, 89L);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      Double double0 = new Double(10L);
      Boolean boolean0 = new Boolean("Object negate:(");
      Boolean boolean1 = jexlArithmetic1.isEmpty((Object) double0, boolean0);
      Object object0 = jexlArithmetic1.logicalNot(boolean1);
      jexlArithmetic0.toDouble(object0);
      Long long0 = new Long((-756L));
      Float float0 = new Float(45.0);
      Object object1 = jexlArithmetic0.divide(long0, float0);
      jexlArithmetic0.toBigInteger(object1);
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 31);
      JexlOptions jexlOptions0 = new JexlOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic0.contains((Object) null, (Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Long long0 = new Long(306783378L);
      jexlArithmetic1.logicalNot(long0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic1.mapBuilder(31);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      Long.getLong("GvxPy~q");
      jexlArithmetic1.empty(object0);
      String string0 = "DidAnJXpO{";
      jexlArithmetic0.matches("DidAnJXpO{", object0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.options(jexlOptions0);
      MapContext mapContext0 = new MapContext();
      jexlArithmetic2.options((JexlContext) mapContext0);
      jexlArithmetic0.isPositivizeStable();
      // Undeclared exception!
      try { 
        jexlArithmetic1.roundBigDecimal((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)61;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<Long> class0 = Long.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      Double double0 = new Double((-2037.0));
      jexlArithmetic0.toBoolean(double0);
      JexlArithmetic.isMultiplyExact(2114L, (byte)87, 37934401659L);
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Double double0 = new Double(2435.0);
      Boolean boolean0 = jexlArithmetic0.isEmpty((Object) double0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic0.and(boolean0, bigInteger0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|97Ftp1f-");
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      EvoSuiteFile evoSuiteFile1 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.add((Object) null, bigDecimal0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      jexlArithmetic0.positivize(number0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      Integer integer0 = new Integer((short)1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jexlArithmetic0.compare(number0, number0, (String) null);
      jexlArithmetic0.lessThan(atomicBoolean0, bigDecimal0);
      jexlArithmetic0.mod(short0, number0);
      Character character0 = Character.valueOf('B');
      jexlArithmetic0.positivize(character0);
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic0.toLong(atomicBoolean0);
      Byte byte0 = new Byte((byte)72);
      Double.isFinite((byte)72);
      Byte.toUnsignedInt((byte) (-89));
      Byte.compare((byte) (-83), (byte)72);
      Byte byte1 = new Byte((byte)72);
      jexlArithmetic0.or("", byte1);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Float.valueOf((float) (byte)72);
      jexlOptions0.setCancellable(true);
      Integer integer0 = new Integer(167);
      // Undeclared exception!
      try { 
        jexlArithmetic1.controlNullNullOperands();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = true;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      String string0 = "";
      jexlArithmetic0.toDouble("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Long.getLong("");
      jexlArithmetic0.toLong("");
      String string1 = "<=";
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare((Object) null, "", "<=");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(null <= )
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext((Map<String, Object>) null);
      mapContext0.set("~IAduhvoX", (Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      hashMap0.put("]n^GY_8'", jexlArithmetic0);
      mapContext0.set(")", ")");
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      jexlArithmetic1.contains(mapContext0, boolean0);
      Long long0 = new Long(324L);
      Long.min((-5172L), 324L);
      jexlArithmetic1.contains(hashMap0, "]n^GY_8'");
      Long.toUnsignedString(16380L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(long0, mapContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.MapContext:(org.apache.commons.jexl3.MapContext@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Float float0 = new Float((-2368.8948));
      Object object0 = null;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      String string0 = "positivize";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":(");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      int int0 = JexlArithmetic.BIGD_SCALE;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer1 = new Integer((-1));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal(127L);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(bigDecimal1, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.equals((Object) atomicBoolean0, (Object) atomicBoolean0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Double double0 = new Double(55.750192);
      jexlArithmetic0.toInteger(double0);
      jexlArithmetic0.arrayBuilder(55);
      jexlArithmetic0.mapBuilder(2435);
      Double double1 = new Double(55);
      jexlArithmetic0.contains(double1, fileSystemHandling0);
      Random.setNextRandom(10);
      jexlArithmetic0.toBigInteger(atomicBoolean0);
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = new Short((short) (-2589));
      Object object0 = jexlArithmetic0.bitwiseOr(short0, short0);
      Long long0 = new Long((short) (-2589));
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MAX_VALUE);
      jexlArithmetic0.narrowBigDecimal(long0, bigDecimal0, bigDecimal0);
      jexlArithmetic0.startsWith(mathContext0, object0);
      try { 
        Long.parseUnsignedLong("java.lang.String@0000000006", Integer.MAX_VALUE);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // radix 2147483647 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      jexlOptions0.setMathScale(720);
      int int0 = 968;
      jexlOptions0.setMathScale(1645);
      jexlOptions0.setLexicalShade(true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, 968);
      BigDecimal bigDecimal0 = new BigDecimal((long) 968);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-2);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.lessThanOrEqual(jexlOptions0, class0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(org.apache.commons.jexl3.JexlOptions@1 <= class java.util.concurrent.atomic.AtomicBoolean)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2859));
      Short short0 = new Short((short) (-2595));
      Object object0 = jexlArithmetic0.bitwiseOr(short0, short0);
      Byte byte0 = new Byte((byte)22);
      jexlArithmetic0.greaterThan(short0, byte0);
      jexlArithmetic0.startsWith(mathContext0, object0);
      jexlArithmetic0.startsWith((Object) null, (Object) null);
      Byte byte1 = new Byte((byte)22);
      jexlArithmetic0.negate(byte1);
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      String string0 = "";
      jexlArithmetic0.toDouble("");
      Long.getLong("");
      String string1 = "<=";
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare((Object) null, "", "<=");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(null <= )
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-9223372036854775808L), (-1L), (-9223372036854775808L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Short.toUnsignedInt((short)1298);
      Class<Long> class0 = Long.class;
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 2207);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      jexlOptions0.setSafe(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.positivize(jexlArithmetic0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object positivize:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getRoundingMode();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mathContext0.toString();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-1978));
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1978));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.TRUE;
      bigDecimal0.negate();
      jexlArithmetic0.mod(bigDecimal0, boolean0);
      MathContext mathContext1 = new MathContext("precision=7 roundingMode=HALF_EVEN");
      jexlArithmetic0.add("precision=7 roundingMode=HALF_EVEN", mathContext1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-1978));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1978
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 3417);
      jexlArithmetic0.toBigInteger("");
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = false;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Double double0 = new Double((-728.5553845640844));
      Double double1 = new Double(2435.0);
      Boolean boolean1 = jexlArithmetic0.isEmpty((Object) double1);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic0.and(boolean1, bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(double0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Byte byte0 = new Byte((byte) (-44));
      Object object0 = jexlArithmetic0.positivize(byte0);
      MapContext mapContext0 = new MapContext();
      int int0 = JexlArithmetic.BIGD_SCALE;
      Character character0 = new Character('5');
      // Undeclared exception!
      try { 
        jexlArithmetic0.narrowBigDecimal(character0, object0, (BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      Class<Byte> class0 = Byte.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-45));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)31);
      jexlArithmetic0.lessThan(atomicBoolean0, short0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.getMathContext();
      jexlArithmetic0.negate(object0);
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.negate(atomicBoolean0);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean(true);
      Object object1 = jexlArithmetic0.divide(atomicBoolean1, atomicBoolean1);
      jexlArithmetic0.negate(object0);
      jexlArithmetic0.bitwiseXor(atomicBoolean1, object1);
      MathContext mathContext0 = new MathContext(31);
      Short short0 = new Short((short)1602);
      mathContext0.equals(short0);
      jexlArithmetic0.toBoolean(mathContext0);
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-2147483648");
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(Double.NaN);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 15);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(15);
      BigDecimal bigDecimal0 = new BigDecimal(15);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      jexlArithmetic_MapBuilder0.create();
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      jexlArithmetic_NullOperand0.toString();
      CharBuffer.wrap((CharSequence) "org.evosuite.runtime.mock.java.lang.MockThrowable");
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = new Boolean("C");
      jexlArithmetic0.toInteger(boolean0);
      Character character0 = Character.valueOf('\u0083');
      jexlArithmetic0.add("C", character0);
      mathContext0.getRoundingMode();
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = jexlArithmetic0.size((Object) boolean0);
      jexlArithmetic0.lessThan(integer0, boolean0);
      MapContext mapContext0 = new MapContext();
      Double double0 = new Double((-882.15));
      Byte byte0 = new Byte((byte) (-41));
      Byte.toUnsignedLong((byte)59);
      jexlArithmetic0.divide(double0, byte0);
      Random.setNextRandom(415);
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling1;
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(42);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) jexlArithmetic0;
      objectArray0[4] = (Object) mathContext0;
      objectArray0[5] = (Object) "C";
      jexlArithmetic0.narrowArguments(objectArray0);
      Boolean boolean0 = new Boolean("C");
      Boolean boolean1 = new Boolean("C");
      jexlArithmetic0.toInteger(boolean0);
      Pattern pattern0 = Pattern.compile("W\"Pza");
      // Undeclared exception!
      try { 
        jexlArithmetic0.greaterThan(pattern0, boolean1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.util.regex.Pattern cannot be cast to java.lang.Boolean
         //
         verifyException("java.lang.Boolean", e);
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float.min(1.4114723F, 0.0F);
      jexlArithmetic0.toString((Object) jexlArithmetic0);
      Short short0 = new Short((short)874);
      Class<Byte> class0 = Byte.class;
      jexlArithmetic0.narrowNumber(short0, class0);
      jexlArithmetic0.mapBuilder(27);
      jexlArithmetic0.logicalNot((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "selfXor";
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, 1160);
      jexlArithmetic1.createWithOptions(false, (MathContext) null, 31);
      jexlArithmetic0.lessThanOrEqual((Object) null, jexlArithmetic1);
      Pattern.compile("org.apache.commons.jexl3.JexlArithmetic@0000000001", 27);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "selfXor");
      // Undeclared exception!
      try { 
        jexlArithmetic1.xor(jexlArithmetic0, charBuffer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      BigDecimal bigDecimal2 = jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      bigDecimal2.abs();
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean(true);
      jexlArithmetic0.toLong(atomicBoolean1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThan(bigDecimal2, "<=");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic1.options(jexlOptions0);
      Double double0 = new Double(1241.2459353893);
      Class<BigInteger> class0 = BigInteger.class;
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = '4';
      charArray0[2] = ']';
      charArray0[3] = '.';
      charArray0[4] = '$';
      charArray0[5] = 'h';
      charArray0[6] = 'Z';
      charArray0[7] = 't';
      charArray0[8] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.greaterThanOrEqual(charBuffer0, jexlArithmetic0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jexl3.JexlArithmetic cannot be cast to java.nio.CharBuffer
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = new Short((short)21848);
      Short.toUnsignedLong((short)21848);
      Double double0 = new Double(14.0);
      Double.sum((-735.6064024954151), 0.0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jexlArithmetic0.add(bigDecimal0, bigDecimal0);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      // Undeclared exception!
      try { 
        bigDecimal0.divide((BigDecimal) null, roundingMode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      MathContext mathContext0 = new MathContext(16, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 16);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      Float float0 = new Float(261.176798650701);
      Object object0 = jexlArithmetic0.not(float0);
      Short short0 = new Short((short) (-142));
      jexlArithmetic0.lessThanOrEqual(object0, short0);
      Double double0 = new Double((-336.9059450217716));
      // Undeclared exception!
      try { 
        jexlArithmetic1.mod(double0, jexlArithmetic0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Double coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.subtract((Object) null, (Object) null);
      jexlArithmetic0.contains((Object) null, (Object) null);
      Boolean.logicalAnd(false, false);
      int int0 = 46;
      Integer integer0 = new Integer(46);
      jexlArithmetic0.negate(integer0);
      char[] charArray0 = new char[3];
      jexlArithmetic0.add(")", (Object) null);
      charArray0[0] = '&';
      charArray0[1] = '0';
      Boolean boolean0 = new Boolean(")");
      jexlArithmetic0.complement(boolean0);
      charArray0[2] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(charBuffer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.nio.HeapCharBuffer:(&0,)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Object[] objectArray0 = new Object[1];
      Character character0 = Character.valueOf('7');
      MockRandom mockRandom0 = new MockRandom(1435);
      BigInteger bigInteger0 = new BigInteger(1435, (-274), mockRandom0);
      jexlArithmetic0.narrowBigInteger(character0, jexlArithmetic1, bigInteger0);
      objectArray0[0] = (Object) jexlOptions0;
      jexlArithmetic1.narrowArguments(objectArray0);
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mathContext0.toString();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-1978));
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1978));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.TRUE;
      bigDecimal0.negate();
      jexlArithmetic0.mod(bigDecimal0, boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-1978));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1978
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      int int0 = 2147421874;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 2147421874);
      mathContext0.getRoundingMode();
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      int int1 = 6;
      bigDecimal0.doubleValue();
      // Undeclared exception!
      try { 
        jexlArithmetic0.roundBigDecimal(bigDecimal0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal0.divide(bigDecimal1, mathContext0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 4);
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      Object object0 = jexlArithmetic0.subtract(bigDecimal2, bigDecimal0);
      jexlArithmetic0.narrowBigInteger(object0, (Object) null, bigInteger0);
      Pattern.compile("Integer coercion: ", (-2146577496));
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      jexlArithmetic1.equals((Object) mathContext0, (Object) jexlArithmetic0);
      Float float0 = new Float((double) Integer.MIN_VALUE);
      Byte byte0 = new Byte((byte)17);
      Float.max(Integer.MIN_VALUE, (-1.0F));
      Object object0 = jexlArithmetic0.bitwiseAnd(float0, byte0);
      Integer integer0 = new Integer((byte)17);
      Integer integer1 = Integer.getInteger((String) null, integer0);
      jexlArithmetic0.size((Object) mathContext0, integer0);
      jexlArithmetic1.mapBuilder((byte)17);
      Long long0 = new Long(1L);
      Byte byte1 = new Byte((byte) (-18));
      // Undeclared exception!
      try { 
        jexlArithmetic1.divide(integer1, object0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      BigDecimal bigDecimal2 = jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      jexlArithmetic0.lessThan(bigDecimal2, "");
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(37, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      mathContext0.toString();
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Short short0 = new Short((short)3177);
      jexlArithmetic0.toLong(short0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic0.toBigDecimal(bigDecimal0);
      Byte byte0 = new Byte((byte) (-109));
      jexlArithmetic0.controlNullNullOperands();
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.set("~IAduhvoX", (Object) null);
      hashMap0.put("~IAduhvoX", jexlArithmetic0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jexlArithmetic1.isPositivizeStable();
      hashMap0.put("]n^GY_8'", jexlArithmetic0);
      mapContext0.set(")", ")");
      jexlArithmetic0.endsWith("~IAduhvoX", mapContext0);
      jexlArithmetic0.startsWith(hashMap0, (Object) null);
      Long long0 = new Long(324L);
      Long.min((-5172L), 324L);
      Long.toUnsignedString(16380L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(long0, mapContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.MapContext:(org.apache.commons.jexl3.MapContext@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      jexlArithmetic0.positivize(number0);
      jexlArithmetic0.negate((Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      Integer integer0 = jexlArithmetic0.size((Object) atomicBoolean0);
      Integer integer1 = new Integer((short)1);
      Object object0 = jexlArithmetic0.multiply(integer0, integer1);
      Float float0 = new Float((-0.33264396F));
      jexlArithmetic0.xor(object0, (Object) null);
      jexlArithmetic0.compare(number0, number0, (String) null);
      jexlArithmetic0.toDouble(atomicBoolean0);
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)31);
      jexlArithmetic0.lessThan(atomicBoolean0, short0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
      jexlArithmetic0.getMathContext();
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(0);
      jexlArithmetic_ArrayBuilder0.create(true);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      jexlArithmetic0.positivize(atomicBoolean1);
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.set("~IAduhvoX", (Object) null);
      hashMap0.put("~IAduhvoX", jexlArithmetic0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jexlArithmetic1.isPositivizeStable();
      String string0 = "]n^GY_8'";
      hashMap0.put("]n^GY_8'", jexlArithmetic0);
      mapContext0.set(")", ")");
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic1.contains(mapContext0, boolean0);
      Long long0 = new Long(324L);
      Long.min(324L, 324L);
      Long.min((-5172L), 324L);
      Long.toUnsignedString(16380L);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(3475);
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      MathContext mathContext1 = MathContext.DECIMAL32;
      Number number0 = jexlArithmetic0.narrowLong(mathContext1, mathContext1, (-1L));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jexlArithmetic0.narrowBigDecimal(number0, number0, bigDecimal0);
      Character character0 = Character.valueOf('8');
      jexlArithmetic0.toLong(character0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.or(atomicBoolean0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jexlArithmetic1;
      jexlArithmetic0.narrowArguments(objectArray0);
      Boolean boolean0 = null;
      jexlArithmetic0.arrayBuilder(1);
      Integer integer0 = new Integer(34);
      Byte byte0 = new Byte((byte) (-61));
      jexlArithmetic1.contains(integer0, byte0);
      jexlArithmetic1.isEmpty((Object) jexlArithmetic0, (Boolean) null);
      EvoSuiteFile evoSuiteFile0 = null;
      String[] stringArray0 = new String[4];
      String string0 = "0^5@+f[";
      // Undeclared exception!
      try { 
        jexlArithmetic0.arrayBuilder((byte) (-61));
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ArrayBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Byte byte0 = new Byte((byte)31);
      Byte.toUnsignedLong((byte)31);
      objectArray0[5] = null;
      objectArray0[6] = null;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, (byte)31);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (byte)31);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options((JexlContext) jexlEngine_EmptyContext0);
      Object object0 = jexlArithmetic3.controlNullNullOperands();
      jexlArithmetic2.multiply((Object) null, object0);
      Double double0 = new Double(31L);
      jexlArithmetic3.toString((Object) double0);
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlEngine.getThreadContext();
      Integer integer0 = new Integer(7);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      Boolean boolean0 = jexlArithmetic0.empty(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal((-2786));
      Boolean boolean1 = jexlArithmetic0.isEmpty((Object) bigDecimal0, boolean0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) bigInteger0;
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Integer integer1 = new Integer(31);
      Object object0 = jexlArithmetic1.subtract(bigInteger0, integer1);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) boolean0;
      objectArray0[3] = (Object) bigDecimal0;
      objectArray0[4] = (Object) jexlArithmetic0;
      objectArray0[5] = (Object) bigInteger0;
      objectArray0[6] = (Object) boolean1;
      jexlArithmetic0.narrowArguments(objectArray0);
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.negate(atomicBoolean0);
      Boolean boolean0 = jexlArithmetic0.empty(atomicBoolean0);
      jexlArithmetic0.equals((Object) boolean0, (Object) atomicBoolean0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Random.setNextRandom((-2130706431));
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 1600);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic1.isNegateStable();
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic0.narrowBigInteger(jexlArithmetic1, (Object) null, bigInteger0);
      Boolean boolean0 = Boolean.TRUE;
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(7);
      Object object0 = jexlArithmetic_ArrayBuilder0.create(true);
      // Undeclared exception!
      try { 
        jexlArithmetic1.lessThan(boolean0, object0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to java.lang.Boolean
         //
         verifyException("java.lang.Boolean", e);
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte byte0 = (byte)72;
      Byte byte1 = new Byte((byte)72);
      Double double0 = new Double((byte)72);
      Double.isFinite((byte)72);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      Byte.toUnsignedInt((byte) (-89));
      Byte.compare((byte) (-83), (byte)72);
      jexlArithmetic0.equals((Object) byte1, (Object) double0);
      Object object0 = jexlArithmetic0.or(byte1, double0);
      Byte byte2 = new Byte((byte)72);
      jexlArithmetic0.or("", byte2);
      jexlArithmetic0.positivize(number0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(object0, jexlArithmetic1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@4)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(0);
      char[] charArray0 = new char[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@[:5*@N'");
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.toBoolean(atomicBoolean0);
      charArray0[0] = '=';
      charArray0[1] = '7';
      charArray0[2] = 'U';
      charArray0[3] = 'g';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      jexlArithmetic_MapBuilder0.put(charBuffer0, object0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toInteger(charBuffer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Integer coercion: java.nio.HeapCharBuffer:()
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      jexlArithmetic0.equals((Object) pattern0, object0);
      MathContext mathContext0 = new MathContext(13);
      jexlArithmetic0.add(object0, "?b7A");
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 13);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      String string0 = "_O6w2p";
      stringArray0[0] = "_O6w2p";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.TYPE;
      jexlArithmetic2.narrowAccept(class0, class0);
      MathContext mathContext1 = MathContext.DECIMAL64;
      // Undeclared exception!
      try { 
        jexlArithmetic2.positivize(mathContext1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object positivize:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Short short0 = new Short((short) (-122));
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(short0, class0);
      Short.toUnsignedInt((short) (-450));
      Short.toUnsignedInt((short) (-122));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Short.compare((short) (-1198), (short)3551);
      jexlArithmetic0.asLongNumber(short0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      Short short1 = new Short((short)15691);
      Short.compare((short) (-1198), (short)53);
      mathContext0.equals(short1);
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (short) (-122));
      Integer integer0 = new Integer(3113);
      Integer.getInteger("A");
      jexlArithmetic1.size((Object) jexlArithmetic0, integer0);
      jexlArithmetic1.isPositivizeStable();
      JexlArithmetic.isMultiplyExact(16380L, (short) (-122), (short) (-122));
      BigInteger bigInteger0 = BigInteger.ONE;
      Float float0 = new Float((double) 65086);
      jexlArithmetic1.bitwiseAnd(bigInteger0, float0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Boolean.logicalOr(true, false);
      mathContext0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Character character0 = new Character('Y');
      MapContext mapContext0 = new MapContext();
      jexlArithmetic0.options((JexlContext) mapContext0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Class<Short> class0 = Short.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      Short short0 = new Short((short)1);
      jexlArithmetic0.positivize(number0);
      jexlArithmetic0.negate((Object) null);
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      Byte byte0 = new Byte((byte)36);
      Byte.toUnsignedInt((byte)36);
      jexlArithmetic0.lessThan(byte0, byte0);
      BigDecimal bigDecimal0 = new BigDecimal((-3044L));
      BigDecimal bigDecimal1 = jexlArithmetic0.roundBigDecimal(bigDecimal0);
      jexlArithmetic0.startsWith(mathContext0, bigDecimal1);
      jexlArithmetic0.toBigDecimal(bigDecimal0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 2520);
      Float float0 = new Float(1651.1852F);
      Float.min(41.704F, 36);
      jexlArithmetic0.greaterThanOrEqual(byte0, float0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long((-2172L));
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(bigDecimal1, long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      BigDecimal bigDecimal2 = jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThan(bigDecimal2, "<=");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long.remainderUnsigned((-2172L), (-2172L));
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      String string0 = "selfXor";
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      jexlArithmetic0.greaterThanOrEqual("precision=7 roundingMode=HALF_EVEN", "selfXor");
      Class<Byte> class0 = Byte.class;
      jexlArithmetic1.narrowNumber(long0, class0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext1 = new MathContext(0);
      jexlOptions0.copy();
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(false, mathContext0, (-1943));
      MathContext mathContext2 = MathContext.DECIMAL128;
      Long long0 = new Long(314L);
      jexlArithmetic0.mod((Object) null, long0);
      JexlArithmetic jexlArithmetic3 = new JexlArithmetic(true, mathContext2, 0);
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic3.contains(boolean0, jexlArithmetic2);
      jexlOptions0.getMathContext();
      Object object0 = jexlArithmetic2.multiply((Object) null, (Object) null);
      jexlArithmetic1.toLong(object0);
      jexlArithmetic0.getMathContext();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic1.empty(bigInteger0);
      Boolean boolean1 = jexlArithmetic3.contains(jexlArithmetic2, (Object) null);
      jexlArithmetic1.positivize(boolean1);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic2.setBuilder(0);
      jexlArithmetic_SetBuilder0.create();
      Float float0 = new Float((float) 0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.mod(long0, float0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) mapContext0);
      mapContext0.clear();
      MathContext mathContext0 = new MathContext(4432);
      mathContext0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.createWithOptions(true, mathContext0, Integer.MIN_VALUE);
      mathContext0.toString();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "precision=4432 roundingMode=HALF_UP");
      jexlArithmetic3.toBigDecimal(atomicBoolean0);
      Double double0 = new Double(1898.7);
      Double.sum(1898.7, 4432);
      jexlArithmetic2.complement(double0);
      jexlArithmetic3.endsWith(jexlArithmetic2, double0);
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      jexlArithmetic0.negate(atomicBoolean1);
      Boolean boolean0 = jexlArithmetic0.empty(atomicBoolean0);
      jexlArithmetic0.equals((Object) boolean0, (Object) atomicBoolean0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
      Random.setNextRandom((-2130706431));
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.equals((Object) atomicBoolean0, (Object) atomicBoolean0);
      Integer integer0 = new Integer((-1567));
      Float float0 = new Float((-2300.21705042));
      Float.sum(767.8273F, 0.0F);
      Float.max(767.8273F, 767.8273F);
      Float.max((-1567), (-1567));
      jexlArithmetic0.greaterThanOrEqual(float0, atomicBoolean0);
      jexlArithmetic0.size((Object) atomicBoolean0, integer0);
      Double double0 = new Double(55.750192);
      jexlArithmetic0.toInteger(double0);
      jexlArithmetic0.arrayBuilder(55);
      jexlArithmetic0.mapBuilder(2435);
      jexlArithmetic0.toInteger(atomicBoolean0);
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)31);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.lessThan(atomicBoolean0, short0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
      Byte byte0 = new Byte((byte) (-109));
      jexlArithmetic0.divide(short0, byte0);
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      int int0 = 968;
      jexlOptions0.setLexicalShade(true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 968);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, 968);
      BigDecimal bigDecimal0 = new BigDecimal((long) 968);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Byte byte0 = new Byte((byte)45);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      jexlArithmetic2.negate(bigDecimal0);
      Byte.compare((byte) (-2), (byte) (-84));
      Integer integer0 = new Integer((byte) (-2));
      Integer integer1 = Integer.getInteger((String) null, integer0);
      Boolean boolean0 = jexlArithmetic1.isEmpty((Object) integer1);
      Integer integer2 = new Integer(1292);
      jexlArithmetic0.size((Object) boolean0, integer2);
      Class<MathContext> class1 = MathContext.class;
      jexlArithmetic1.narrowNumber(byte0, class1);
      Character character0 = Character.valueOf('{');
      // Undeclared exception!
      try { 
        jexlArithmetic1.or(class1, character0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.lang.Class:(class java.math.MathContext)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      jexlArithmetic0.equals((Object) pattern0, object0);
      MathContext mathContext0 = new MathContext(13);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 13);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      String string0 = "_Y62p";
      stringArray0[0] = "_Y62p";
      jexlOptions0.setLexicalShade(true);
      String string1 = "-Q<S(c0j.&U,m}A";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.TYPE;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toBigDecimal("]: '");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean1 = false;
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-1);
      jexlArithmetic0.createWithOptions(false, mathContext0, (-1));
      String string0 = "org.apache.commons.jexl3.internal.InterpreterBase";
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(bigDecimal0, "org.apache.commons.jexl3.internal.InterpreterBase");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.set("~IAduhvoX", (Object) null);
      hashMap0.put("~IAduhvoX", jexlArithmetic0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jexlArithmetic1.isPositivizeStable();
      hashMap0.put("]n^GY_8'", jexlArithmetic0);
      mapContext0.set(")", ")");
      mapContext0.set(")", jexlArithmetic0);
      Boolean boolean0 = Boolean.FALSE;
      Double double0 = new Double(324L);
      jexlArithmetic0.matches(jexlArithmetic1, double0);
      jexlArithmetic1.contains(mapContext0, boolean0);
      Long long0 = new Long(324L);
      Long.min((-5172L), 324L);
      Double double1 = new Double(3713.09033203125);
      jexlArithmetic0.toLong(double1);
      Long.toUnsignedString(16380L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(long0, mapContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.MapContext:(org.apache.commons.jexl3.MapContext@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getRoundingMode();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      MathContext mathContext1 = MathContext.DECIMAL32;
      Float float0 = new Float((double) 0);
      Double double0 = new Double(0);
      jexlArithmetic0.greaterThan(float0, double0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.or((Object) null, mathContext1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      mathContext0.equals(atomicBoolean0);
      int int0 = (-563);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-563));
      char[] charArray0 = new char[3];
      mathContext0.getPrecision();
      charArray0[0] = '7';
      charArray0[1] = '%';
      String string0 = "/";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/");
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      jexlArithmetic0.not(charBuffer0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      charBuffer0.clear();
      BigDecimal bigDecimal1 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      bigDecimal1.negate();
      bigDecimal0.remainder(bigDecimal1, mathContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(mathContext0, bigDecimal0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)31);
      jexlArithmetic0.lessThan(atomicBoolean0, short0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      bigInteger1.min(bigInteger0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "positivize");
      jexlArithmetic0.divide(object1, bigInteger1);
      jexlArithmetic0.lessThanOrEqual(object0, (Object) null);
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Byte byte0 = new Byte((byte)36);
      Byte.toUnsignedInt((byte)36);
      BigDecimal bigDecimal0 = new BigDecimal((-3044L));
      Float float0 = new Float((float) 2520);
      Float.min(41.704F, (byte)36);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long((-2172L));
      Float float1 = new Float(3.4028234663852886E38);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MapContext mapContext0 = new MapContext();
      mapContext0.clear();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) mapContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.toLong((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = new Boolean("C");
      jexlArithmetic0.isPositivizeStable();
      Object object0 = null;
      Character character0 = Character.valueOf('s');
      jexlArithmetic0.add((Object) null, character0);
      Integer.remainderUnsigned(42, 42);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      jexlArithmetic0.startsWith((Object) null, boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$TQE9Pl&D?");
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      boolean boolean0 = false;
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = (-2142558225);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-2142558225));
      Long long0 = new Long((-1883L));
      String string0 = "^[+-]?\\d*(\\.\\d*)?([eE][+-]?\\d+)?$";
      Byte byte0 = new Byte((byte)4);
      // Undeclared exception!
      try { 
        jexlArithmetic1.greaterThanOrEqual("^[+-]?d*(.d*)?([eE][+-]?d+)?$", byte0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"^[+-]?d*(.d*)?([eE][+-]?d+)?$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL64;
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      mathContext0.toString();
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.FALSE;
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.endsWith(boolean0, boolean0);
      Boolean boolean1 = jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer0 = new Integer((-1598));
      Object object0 = new Object();
      Long long0 = new Long((-59L));
      jexlArithmetic0.add(long0, integer0);
      Pattern.compile("false");
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(boolean1, integer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-2147483648");
      Short short0 = new Short((short)0);
      Object object0 = jexlArithmetic1.logicalNot(short0);
      BigDecimal bigDecimal1 = jexlArithmetic0.toBigDecimal(object0);
      bigDecimal0.subtract(bigDecimal1);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      Double double2 = new Double(1038.679142239);
      Object object1 = jexlArithmetic0.subtract((Object) null, double2);
      Object object2 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      jexlArithmetic0.empty(double3);
      jexlArithmetic0.subtract(object2, object1);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      jexlArithmetic0.narrowArguments((Object[]) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(true);
      jexlOptions0.setNamespaces((Map<String, Object>) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic1.lessThan((Object) null, jexlOptions0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.options(jexlOptions0);
      try { 
        jexlArithmetic2.createRange((Object) null, jexlOptions0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      mathContext0.equals(jexlArithmetic0);
      mathContext0.getPrecision();
      jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer0 = new Integer(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Double double0 = new Double((-240.3));
      jexlArithmetic0.multiply(bigInteger0, double0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(roundingMode0, integer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.RoundingMode:(HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.equals((Object) atomicBoolean0, (Object) atomicBoolean0);
      Double double0 = new Double(55.750192);
      jexlArithmetic0.toInteger(double0);
      jexlArithmetic0.mapBuilder(2435);
      jexlArithmetic0.toDouble(double0);
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      mathContext0.toString();
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.isPositivizeStable();
      Object object0 = jexlArithmetic1.matches("precision=7 roundingMode=HALF_EVEN", "precision=7 roundingMode=HALF_EVEN");
      jexlArithmetic1.narrowLong(object0, object0, 0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic1.matches(atomicBoolean0, mathContext0);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(0);
      jexlArithmetic_SetBuilder0.create();
      MathContext mathContext1 = new MathContext("precision=7 roundingMode=HALF_EVEN");
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.negate();
      jexlArithmetic1.narrowBigInteger(jexlArithmetic_SetBuilder0, bigDecimal0, bigInteger0);
      Object object1 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.greaterThan(mathContext0, "Iyyw!VUTf`4)!P6Ts<");
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.startsWith(boolean0, mathContext1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) null);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
      Object object0 = null;
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.divide(double0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      Boolean.compare(false, false);
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      jexlArithmetic0.startsWith(jexlArithmetic1, (Object) null);
  }
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toString((Object) null);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(27);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 27);
      jexlArithmetic0.size((Object) jexlArithmetic1);
      jexlArithmetic0.logicalNot((Object) null);
      Byte byte0 = new Byte((byte)19);
      jexlArithmetic0.multiply((Object) null, byte0);
      Pattern pattern0 = Pattern.compile("", 27);
      pattern0.asPredicate();
      jexlArithmetic0.empty(jexlArithmetic_MapBuilder0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:()
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      Character.isIdeographic((byte)2);
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jexlArithmetic0.roundBigDecimal((BigDecimal) null);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Character character0 = new Character('>');
      jexlArithmetic0.add(character0, integer0);
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      BigInteger bigInteger1 = BigInteger.TEN;
      Integer integer2 = new Integer((-2776));
      Integer integer3 = jexlArithmetic0.size((Object) short0, integer2);
      jexlArithmetic0.size((Object) bigInteger1, integer3);
      Byte byte0 = new Byte((byte) (-14));
      jexlArithmetic0.isFloatingPoint(byte0);
      Class<Boolean> class0 = Boolean.class;
      jexlArithmetic0.narrowAccept(class0, class0);
      jexlArithmetic0.endsWith((Object) null, (Object) null);
      Integer.remainderUnsigned((short)0, (-2776));
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.divide(jexlArithmetic0, float0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Double coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext(hashMap0);
      Object object0 = null;
      mapContext0.set("~IAduhvoX", (Object) null);
      hashMap0.put("~IAduhvoX", jexlArithmetic0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      jexlArithmetic1.isPositivizeStable();
      String string0 = "]n^GY_8'";
      // Undeclared exception!
      try { 
        jexlArithmetic1.or((Object) null, "~IAduhvoX");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-1952257859));
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, (-1952257859));
      Byte byte0 = new Byte((byte) (-39));
      Byte byte1 = new Byte((byte) (-39));
      jexlArithmetic2.subtract(byte0, byte1);
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-2147483648");
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.6791422);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      Object object3 = jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      Object object4 = jexlArithmetic1.logicalNot((Object) null);
      jexlArithmetic1.add(object4, object3);
      jexlArithmetic0.toString((Object) "java.util.regex.Pattern@0000000003");
      jexlArithmetic1.logicalNot(mathContext0);
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = new Short((short)21848);
      Short.toUnsignedLong((short)21848);
      Double double0 = new Double(14.0);
      jexlArithmetic0.add(short0, double0);
      Double.sum((-1157.599), 2762L);
      Double.sum((-735.6064024954151), 0.0);
      jexlArithmetic0.mod(double0, short0);
      Double.sum(79.99953982129976, 872.9105163064205);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(double0, bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">");
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jexlArithmetic1.roundBigDecimal(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(bigDecimal1, jexlArithmetic1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong(">=", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.toBigIntegerExact();
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      jexlArithmetic1.mapBuilder(4);
      jexlArithmetic1.narrowLong(">=", (Object) null, 9223372036854775807L);
      Double double0 = new Double((byte)41);
      jexlArithmetic1.bitwiseXor((Object) null, double0);
      Class<MathContext> class0 = MathContext.class;
      jexlArithmetic0.narrowNumber(double0, class0);
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 31);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Short short0 = new Short((short)2383);
      jexlArithmetic1.narrowLong(short0, (Object) null, 401016175515425035L);
      Float float0 = new Float((double) 401016175515425035L);
      jexlArithmetic0.not(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(mathContext0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Boolean boolean0 = (Boolean)jexlArithmetic0.not(mathContext0);
      Boolean.logicalOr(true, false);
      mathContext0.toString();
      jexlArithmetic0.greaterThan((Object) null, boolean0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Character character0 = new Character('Y');
      jexlArithmetic0.isEmpty((Object) "precision=7 roundingMode=HALF_EVEN", boolean0);
      MapContext mapContext0 = new MapContext();
      jexlArithmetic0.options((JexlContext) mapContext0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Long long1 = (Long)jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      Short short0 = new Short((short)1);
      jexlArithmetic0.positivize(long1);
      jexlArithmetic0.negate((Object) null);
      Integer integer0 = new Integer((short)1);
      jexlArithmetic0.add("precision=7 roundingMode=HALF_EVEN", integer0);
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Long long0 = Long.getLong(">=", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      Double double0 = new Double(0.0);
      Double.sum((-241.2196), (-1605.103056935));
      jexlArithmetic0.matches((Object) null, double0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte byte0 = (byte)41;
      BigInteger bigInteger1 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Iterable<?> iterable0 = jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.toBigIntegerExact();
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      jexlArithmetic1.size((Object) iterable0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Byte byte0 = new Byte((byte)12);
      Byte.toUnsignedInt((byte)97);
      jexlArithmetic0.asLongNumber(byte0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.controlNullNullOperands();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object negate:(");
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.not((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      Integer integer0 = new Integer((-2776));
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      jexlArithmetic1.narrowBigDecimal((Object) null, integer0, bigDecimal0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer1 = new Integer((-563));
      Integer integer2 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Character character0 = new Character('>');
      Object object0 = jexlArithmetic0.add(character0, integer1);
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      BigInteger bigInteger1 = BigInteger.TEN;
      Integer integer3 = new Integer((-2776));
      Integer integer4 = jexlArithmetic0.size((Object) short0, integer3);
      jexlArithmetic0.size((Object) bigInteger1, integer4);
      Byte byte0 = new Byte((byte) (-14));
      jexlArithmetic0.isFloatingPoint(byte0);
      Class<Boolean> class0 = Boolean.class;
      jexlArithmetic0.narrowAccept(class0, class0);
      jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(object0, long0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      int int0 = 1;
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBoolean((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JexlArithmetic.isMultiplyExact(0L, 9223372036854775807L, (-1L));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 557);
      int int0 = (-1);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, (-1));
      JexlOptions jexlOptions0 = new JexlOptions();
      long long0 = 9223372036854775790L;
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate(jexlArithmetic1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object negate:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
  }
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      Byte byte0 = new Byte((byte)36);
      Byte.toUnsignedInt((byte)36);
      jexlArithmetic0.lessThan(byte0, byte0);
      BigDecimal bigDecimal0 = new BigDecimal((-3044L));
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic0.toBigDecimal(bigDecimal0);
      Float float0 = new Float(1651.1852F);
      Float.min(41.704F, 2615.5386F);
      jexlArithmetic0.greaterThanOrEqual(byte0, float0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long((-2172L));
      jexlArithmetic0.toInteger(long0);
      Float float1 = new Float(3.4028234663852886E38);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(float1, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true, (MathContext) null, (-2786));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, (MathContext) null, (-2786));
      Integer integer0 = new Integer(7);
      Integer.toUnsignedString(7);
      Integer.toUnsignedLong((-2786));
      Float float0 = new Float((double) (-2786));
      jexlArithmetic1.toLong(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.divide((Object) null, integer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      Byte byte0 = new Byte((byte)36);
      Byte.toUnsignedInt((byte)36);
      jexlArithmetic0.lessThan(byte0, byte0);
      BigDecimal bigDecimal0 = new BigDecimal((-3044L));
      BigDecimal bigDecimal1 = jexlArithmetic0.roundBigDecimal(bigDecimal0);
      BigDecimal bigDecimal2 = jexlArithmetic0.roundBigDecimal(bigDecimal0);
      jexlArithmetic0.startsWith(mathContext0, bigDecimal2);
      jexlArithmetic0.toBigDecimal(bigDecimal0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 2520);
      Float float0 = new Float(1651.1852F);
      Float.min(41.704F, 2615.5386F);
      jexlArithmetic0.greaterThanOrEqual(byte0, float0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.equals((Object) atomicBoolean0, (Object) bigDecimal1);
      Float float1 = new Float(3.4028234663852886E38);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mod(float1, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = Integer.MIN_VALUE;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      jexlArithmetic1.equals((Object) mathContext0, (Object) jexlArithmetic0);
      Float float0 = new Float((double) Integer.MIN_VALUE);
      byte byte0 = (byte)17;
      Byte byte1 = new Byte((byte)17);
      Float.max(Integer.MIN_VALUE, Integer.MIN_VALUE);
      jexlArithmetic0.bitwiseAnd(float0, byte1);
      Integer integer0 = new Integer((byte)17);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      Integer.getInteger((String) null, integer0);
      Integer integer1 = jexlArithmetic0.size((Object) mathContext0, integer0);
      jexlArithmetic1.mapBuilder((byte)17);
      long long0 = 2L;
      Long long1 = new Long(2L);
      jexlArithmetic0.add(integer1, long1);
      Byte byte2 = new Byte((byte)19);
      Byte byte3 = new Byte((byte)19);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr(jexlArithmetic1, byte3);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic1.narrowBigInteger(mathContext0, (Object) null, bigInteger0);
      BigInteger bigInteger1 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Character character0 = new Character('>');
      jexlArithmetic0.add(character0, integer0);
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      BigInteger bigInteger2 = BigInteger.TEN;
      Integer integer2 = new Integer((-2776));
      Integer integer3 = jexlArithmetic0.size((Object) short0, integer2);
      jexlArithmetic0.size((Object) bigInteger2, integer3);
      Byte byte0 = new Byte((byte) (-14));
      jexlArithmetic0.isFloatingPoint(byte0);
      Class<Boolean> class0 = Boolean.class;
      jexlArithmetic0.narrowAccept(class0, class0);
      jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)0);
      jexlArithmetic_MapBuilder0.create();
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = Integer.MIN_VALUE;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      jexlArithmetic1.equals((Object) mathContext0, (Object) jexlArithmetic0);
      Float float0 = new Float((double) Integer.MIN_VALUE);
      byte byte0 = (byte)17;
      Byte byte1 = new Byte((byte)17);
      Float.max(Integer.MIN_VALUE, (-1.0F));
      Object object0 = jexlArithmetic0.bitwiseAnd(float0, byte1);
      Integer integer0 = new Integer((byte)17);
      Integer integer1 = jexlArithmetic0.size((Object) mathContext0, integer0);
      jexlArithmetic1.mapBuilder((byte)17);
      long long0 = 1L;
      jexlArithmetic0.add(integer1, object0);
      Byte byte2 = new Byte((byte)19);
      Byte byte3 = new Byte((byte) (-18));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr(jexlArithmetic1, byte3);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(1);
      jexlArithmetic0.isStrict();
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.toBoolean("");
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(1315);
      MathContext mathContext0 = MathContext.DECIMAL32;
      Long long0 = new Long(1);
      jexlArithmetic_ArrayBuilder0.create(false);
      MathContext mathContext1 = MathContext.DECIMAL64;
      jexlArithmetic_MapBuilder0.put(mathContext1, (Object) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Long long1 = new Long((-1488L));
      jexlArithmetic1.contains(jexlArithmetic_MapBuilder0, long1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add((Object) null, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(jexlArithmetic1.FLOAT_PATTERN, double0, 16380L);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      jexlArithmetic1.logicalNot(mathContext0);
      Long long1 = new Long((-2147483648L));
      Float float0 = new Float(0.0F);
      jexlArithmetic0.greaterThan(long1, float0);
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, "Iyyw!VUTf`4)!P6Ts<");
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      mathContext1.toString();
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[0] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.TRUE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.startsWith(boolean0, mathContext1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) boolean0);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong(">=", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toDouble((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, "Iyyw!VUTf`4)!P6Ts<");
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jexlArithmetic0.startsWith(boolean0, mathContext1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) null);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.roundBigDecimal((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MathContext mathContext0 = MathContext.DECIMAL128;
      Float float0 = new Float(0.0F);
      mathContext0.equals(float0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 20);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.math.MathContext@0000000002");
      MathContext mathContext1 = new MathContext(41);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      atomicBoolean0.set(false);
      Iterable<?> iterable0 = new LinkedList<BigDecimal>();
      Boolean boolean0 = Boolean.valueOf("v^{4zO");
      jexlArithmetic1.endsWith(jexlArithmetic2, boolean0);
      MathContext mathContext2 = MathContext.DECIMAL128;
      jexlArithmetic2.startsWith("java.math.MathContext@0000000002", mathContext2);
  }
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      Object object0 = null;
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, atomicBoolean0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JexlArithmetic.isMultiplyExact(9223372036854775803L, 127L, 9223372036854775803L);
      MathContext mathContext0 = new MathContext(155);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 155);
      jexlArithmetic0.toString((Object) mathContext0);
      try { 
        Short.valueOf("java\u0000nio\u0000StringCharBuffer@0000000004", 2207);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // radix 2207 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = Integer.MIN_VALUE;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      jexlArithmetic1.equals((Object) mathContext0, (Object) jexlArithmetic0);
      Float float0 = new Float((double) Integer.MIN_VALUE);
      byte byte0 = (byte)17;
      Byte byte1 = new Byte((byte)17);
      Float.max(Integer.MIN_VALUE, (-1.0F));
      jexlArithmetic0.bitwiseAnd(float0, byte1);
      Integer integer0 = new Integer((byte)17);
      Integer.getInteger((String) null, integer0);
      Integer integer1 = jexlArithmetic0.size((Object) mathContext0, integer0);
      jexlArithmetic1.mapBuilder((byte)17);
      long long0 = 1L;
      Long long1 = new Long(1L);
      jexlArithmetic0.add(integer1, long1);
      Byte byte2 = new Byte((byte)19);
      Byte byte3 = new Byte((byte) (-18));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr(jexlArithmetic1, byte3);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, "Iyyw!VUTf`4)!P6Ts<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      mathContext1.equals(objectArray0[3]);
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalAnd(false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jexlArithmetic1.equals((Object) pattern0, (Object) boolean0);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.lessThanOrEqual(objectArray0[1], boolean1);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.math.MathContext cannot be cast to java.lang.Boolean
         //
         verifyException("java.lang.Boolean", e);
      }
  }
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext1 = new MathContext(0);
      jexlOptions0.copy();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext1, (-1943));
      double double0 = new Integer(0);
      MathContext mathContext2 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic3 = new JexlArithmetic(true, mathContext2, 0);
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic3.contains(boolean0, jexlArithmetic2);
      jexlOptions0.getMathContext();
      // Undeclared exception!
      try { 
        jexlArithmetic2.multiply((Object) null, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Object object0 = null;
      int int0 = 27;
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod((Object) null, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      String string0 = ">=";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong(">=", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2319));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 4);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      short short0 = (short) (-1841);
      Short short1 = new Short((short) (-1841));
      jexlArithmetic2.equals((Object) null, (Object) short1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(155);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      // Undeclared exception!
      try { 
        jexlArithmetic0.toLong(object0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.HashMap:({})
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MathContext mathContext0 = MathContext.DECIMAL128;
      Float float0 = new Float(0.0F);
      mathContext0.equals(float0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 20);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      String string0 = "java.math.MathContext@0000000002";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.math.MathContext@0000000002");
      jexlArithmetic2.getMathContext();
      String string1 = "v^{4zO";
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      atomicBoolean0.set(false);
      // Undeclared exception!
      try { 
        jexlArithmetic2.createRange(atomicBoolean0, "v^{4zO");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"v^{4zO\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      Byte byte0 = new Byte((byte)36);
      Byte.toUnsignedInt((byte)36);
      jexlArithmetic0.lessThan(byte0, byte0);
      BigDecimal bigDecimal0 = new BigDecimal((-3044L));
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      BigDecimal bigDecimal1 = jexlArithmetic0.roundBigDecimal(bigDecimal0);
      jexlArithmetic0.startsWith(mathContext0, bigDecimal1);
      jexlArithmetic0.toBigDecimal(bigDecimal0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 2520);
      Float float0 = new Float(1651.1852F);
      Float.min(41.704F, 2615.5386F);
      jexlArithmetic0.greaterThanOrEqual(byte0, float0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long((-2172L));
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply((Object) null, long0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, "Iyyw!VUTf`4)!P6Ts<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) boolean0);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.xor((Object) null, (Object) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.options((JexlContext) mapContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.greaterThanOrEqual(jexlArithmetic2, mapContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(org.apache.commons.jexl3.JexlArithmetic@1 >= org.apache.commons.jexl3.MapContext@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) float0;
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) long0;
      objectArray0[3] = (Object) float0;
      objectArray0[4] = (Object) long0;
      objectArray0[5] = (Object) long0;
      objectArray0[6] = (Object) float0;
      objectArray0[7] = (Object) float0;
      jexlArithmetic0.narrowArguments(objectArray0);
      Long.compareUnsigned((-2172L), 0L);
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      BigInteger bigInteger0 = BigInteger.valueOf((-2172L));
      jexlArithmetic1.complement(bigInteger0);
      jexlArithmetic0.logicalNot((Object) null);
      String string0 = "selfXor";
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseOr(pattern0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      int int1 = (-1943);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)19;
      Pattern pattern0 = Pattern.compile("s@eyfXoQ");
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod((Object) null, pattern0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.util.regex.Pattern:(s@eyfXoQ)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(Integer.MIN_VALUE);
      Double double1 = new Double(Integer.MIN_VALUE);
      Short short0 = new Short((short)2);
      Double double2 = new Double(1038.679142239);
      Double double3 = new Double(0.0);
      Long long0 = new Long((-3087L));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(integer0, bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      JexlArithmetic.isMultiplyExact((short)1, 0L, 'Y');
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      jexlArithmetic0.positivize(number0);
      jexlArithmetic0.negate((Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.toBigDecimal(atomicBoolean0);
  }
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-9223372036854775808L), 127L, (-9223372036854775808L));
      MathContext mathContext0 = new MathContext(155);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 155);
      jexlArithmetic0.toString((Object) mathContext0);
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.compare("java.math.MathContext@0000000002", object0, "org.apache.commons.jexl3.JexlArithmetic");
      try { 
        Short.valueOf("java\u0000nio\u0000StringCharBuffer@0000000004", 2207);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // radix 2207 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      jexlArithmetic0.equals((Object) pattern0, object0);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(false, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic2.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y}Zz";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic3.narrowAccept(class0, class0);
      jexlArithmetic2.size((Object) class0);
      Boolean boolean0 = Boolean.valueOf("]: '");
      jexlArithmetic2.toDouble(boolean0);
      Pattern pattern1 = Pattern.compile("Rbaiy*I", (-22));
      // Undeclared exception!
      try { 
        jexlArithmetic3.compare(boolean0, pattern1, "BigDecimal coercion: ");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.util.regex.Pattern cannot be cast to java.lang.Boolean
         //
         verifyException("java.lang.Boolean", e);
      }
  }
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic0.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      jexlArithmetic0.FLOAT_PATTERN.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-2147483648");
      jexlArithmetic0.narrowLong(jexlArithmetic0.FLOAT_PATTERN, double0, Integer.MIN_VALUE);
      jexlArithmetic0.toString((Object) jexlArithmetic0.FLOAT_PATTERN);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic0.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic0.subtract(bigDecimal0, long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = false;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      jexlArithmetic0.toBoolean(hashMap0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) mapContext0);
      Short short0 = new Short((short)1263);
      Boolean boolean1 = Boolean.FALSE;
      jexlArithmetic2.toDouble(boolean1);
      Short.toUnsignedInt((short)1263);
      int int0 = (-370);
      Integer integer0 = new Integer((-370));
      jexlArithmetic2.bitwiseOr(short0, integer0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.complement((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      byte byte0 = (byte)33;
      Byte byte1 = new Byte((byte)33);
      jexlArithmetic0.toLong(byte1);
      Double double0 = new Double(2.0);
      jexlArithmetic0.mod(double0, double0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object positivize:(");
      double double1 = 2354.32457002;
      Byte byte2 = new Byte((byte) (-45));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.math.MathContext@0000000002");
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd("Object positivize:(", byte2);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"Object positivize:(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      double double1 = 0.0;
      Double double2 = new Double(1.0);
      Short short0 = new Short((short)2);
      Object object0 = jexlArithmetic1.logicalNot(short0);
      BigDecimal bigDecimal1 = jexlArithmetic0.toBigDecimal(object0);
      BigDecimal bigDecimal2 = bigDecimal0.subtract(bigDecimal1);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      Object object1 = null;
      Double double3 = new Double(1038.679142239);
      // Undeclared exception!
      try { 
        jexlArithmetic0.subtract(bigDecimal2, double3);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bigInteger0;
      jexlArithmetic0.narrowArguments(objectArray0);
      String string0 = null;
      Character character0 = new Character('>');
      jexlArithmetic0.add(character0, integer0);
      Float float0 = new Float((-1.0));
      Double double0 = new Double(0.0F);
      jexlArithmetic0.narrowBigInteger(bigInteger0, double0, bigInteger0);
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mapBuilder((-2776));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2776
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrow(bigInteger0);
      Float float0 = new Float((-2368.8948));
      Double double0 = new Double((-2368.8948));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
      Integer integer1 = Integer.getInteger("positivize", 953);
      Integer integer2 = new Integer(953);
      jexlArithmetic0.lessThanOrEqual(integer1, integer2);
  }
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrow(bigInteger0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      atomicBoolean0.set(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "positivize");
      jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.createWithOptions(false, (MathContext) null, 0);
      jexlArithmetic0.toDouble(atomicBoolean0);
  }
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.options((JexlContext) null);
      Double double0 = new Double((-3767.0593F));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic2.narrowBigInteger(double0, jexlArithmetic1, bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mod("precision=7 roundingMode=HALF_EVEN", jexlArithmetic2);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"precisi\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      jexlArithmetic0.equals((Object) pattern0, object0);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
  }
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, 53);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      jexlArithmetic2.narrow((Number) null);
      Integer integer0 = new Integer(7);
      Object object0 = jexlArithmetic2.divide((Object) null, integer0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlArithmetic1.asLongNumber(object0);
  }
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 42);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.isPositivizeStable();
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      Class<Long> class0 = Long.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      mathContext0.getRoundingMode();
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      Class<Double> class0 = Double.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic2.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class1 = Long.class;
      jexlArithmetic3.narrowAccept(class1, class1);
      jexlArithmetic2.size((Object) class1);
      JexlArithmetic jexlArithmetic4 = new JexlArithmetic(true, mathContext0, 0);
      jexlArithmetic0.size((Object) jexlArithmetic4);
      // Undeclared exception!
      try { 
        jexlArithmetic1.arrayBuilder((-1857));
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ArrayBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      Object object1 = jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object2 = jexlArithmetic0.controlNullNullOperands();
      Character.isIdeographic((byte)2);
      jexlArithmetic0.isEmpty(object2);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object2, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      BigInteger bigInteger0 = BigInteger.TEN;
      jexlArithmetic0.narrowBigInteger((Object) null, object1, bigInteger0);
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      MathContext mathContext0 = MathContext.DECIMAL128;
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      jexlOptions0.setStrict(true);
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      Boolean boolean0 = new Boolean("]: '");
      jexlArithmetic1.size((Object) class0);
      Integer integer0 = new Integer(1602);
      Integer.getInteger("=^oaF<uj", 2);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic1.startsWith(atomicBoolean0, "-Q<S(c0j.&U,m}A");
      // Undeclared exception!
      try { 
        jexlArithmetic1.and(integer0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 42);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.isPositivizeStable();
      mathContext0.getRoundingMode();
      Class<Object> class0 = Object.class;
      jexlArithmetic0.narrowNumber((Number) null, class0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      String string0 = "_Y6};D";
      // Undeclared exception!
      try { 
        jexlArithmetic1.toLong("_Y6};D");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"_Y6};D\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.xor((Object) null, class0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9kg/j%zXuBTZ!jD");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 1936);
      jexlArithmetic0.getMathScale();
  }
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrow(bigInteger0);
      Float float0 = new Float((-2368.8948));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-55));
      Integer.getInteger("positivize");
      atomicBoolean0.weakCompareAndSet(false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-55), (-55));
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(object0, bigInteger0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-9223372036854775808L), 127L, (-9223372036854775808L));
      MathContext mathContext0 = new MathContext(155);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 155);
      jexlArithmetic0.toString((Object) mathContext0);
      try { 
        Short.valueOf("java\u0000nio\u0000StringCharBuffer@0000000004", 2207);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // radix 2207 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      mathContext0.equals(jexlArithmetic0);
      Integer integer0 = jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.TRUE;
      Boolean.compare(true, true);
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer1 = new Integer((-1598));
      Character character0 = new Character('r');
      jexlArithmetic0.size((Object) character0, integer0);
      Integer.divideUnsigned(20, (-1598));
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(roundingMode0, integer1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.RoundingMode:(HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      BigDecimal bigDecimal1 = (BigDecimal)jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Integer integer0 = (Integer)jexlArithmetic0.controlNullNullOperands();
      Character.isIdeographic((byte)2);
      jexlArithmetic0.isEmpty((Object) integer0);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(integer0, atomicBoolean0);
      MapBuilder mapBuilder0 = (MapBuilder)jexlArithmetic0.mapBuilder((short)1972);
      mapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Long long0 = new Long(337L);
      jexlArithmetic2.negate(long0);
      Integer integer0 = new Integer(7);
      jexlArithmetic2.divide((Object) null, integer0);
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '&';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-398), 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      Boolean.logicalOr(true, false);
      String string0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic0.contains((Object) null, (Object) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Object object0 = jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      short short0 = (short)1;
      jexlArithmetic0.greaterThanOrEqual(object0, (Object) null);
      Short short1 = new Short((short)1);
      Character character0 = new Character('Y');
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(mathContext0, class0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(precision=7 roundingMode=HALF_EVEN <= class java.lang.String)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Character character0 = new Character('3');
      jexlArithmetic0.complement(character0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.andNot(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      Object object0 = jexlArithmetic0.logicalNot((Object) null);
      jexlArithmetic0.complement(object0);
  }
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic2.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic3.narrowAccept(class0, class0);
      jexlArithmetic2.size((Object) class0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toInteger("2ny");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"2ny\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, "Iyyw!VUTf`4)!P6Ts<");
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      Integer integer0 = jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.negate(integer0);
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.startsWith(boolean0, mathContext1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) null);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
  }
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 2147483629);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 2147483629);
      BigDecimal bigDecimal0 = new BigDecimal((long) 2147483629);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "2147483629");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2147483629");
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Integer integer0 = new Integer(7);
      Double double0 = new Double(0.0);
      jexlArithmetic2.lessThanOrEqual(double0, double0);
      jexlArithmetic1.divide((Object) null, (Object) null);
      jexlArithmetic2.getMathContext();
  }
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Float.min(1.0F, 1.0F);
      int int0 = 27;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      char[] charArray0 = new char[3];
      char char0 = 'y';
      Byte byte0 = new Byte((byte)19);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod("selfXor", byte0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"selfXor\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.remainderUnsigned((-2172L), (-2172L));
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      Float.min(1.0F, 1.0F);
      Pattern.compile("selfXor", (-1078));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.createWithOptions(false, mathContext0, 1829);
      Long long1 = new Long(16);
      Long.getLong("java\u0000lang\u0000String@0000000005", (long) 0);
      jexlArithmetic3.isNumberable(long1);
  }
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.equals((Object) null, (Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Character character0 = Character.valueOf('y');
      Integer integer0 = new Integer(31);
      jexlArithmetic2.mod(character0, integer0);
      Integer integer1 = new Integer(7);
      jexlArithmetic2.divide((Object) null, integer1);
  }
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic1.toInteger(object0);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      jexlArithmetic1.empty((Object) null);
      jexlArithmetic0.greaterThanOrEqual("precision=7 roundingMode=HALF_EVEN", "selfXor");
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-2147483648");
      Double double2 = new Double(1038.679142239);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Long long0 = new Long((-3087L));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.toInteger(double3);
      Short short0 = new Short((short)2);
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal1 = null;
      try {
        bigDecimal1 = new BigDecimal((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JexlEngine.getThreadContext();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">=");
      Long.getLong(">=", 2245L);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.doubleValue();
      Double double0 = new Double((byte) (-67));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Class<BigInteger> class0 = BigInteger.class;
      Number number0 = jexlArithmetic0.narrowNumber(double0, class0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">=");
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(number0, charBuffer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.nio.StringCharBuffer:(>=)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1029);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Byte byte0 = new Byte((byte)0);
      jexlArithmetic0.toLong(byte0);
      jexlArithmetic1.arrayBuilder(4377);
      jexlArithmetic1.matches(jexlArithmetic0, jexlArithmetic0);
      Float float0 = new Float((float) 4377);
      jexlArithmetic0.isFloatingPoint(float0);
      jexlArithmetic1.arrayBuilder(832);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.toPlainString();
      jexlArithmetic1.roundBigDecimal(bigDecimal0);
  }
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-2147483648");
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double((-50.66763654472134));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      Double double4 = new Double((-3870.0));
      Short short0 = new Short((short)2);
      jexlArithmetic1.multiply(double4, short0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Float float0 = new Float((double) 0);
      jexlArithmetic2.isFloatingPointNumber(float0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
      Byte byte0 = new Byte((byte) (-121));
      jexlArithmetic1.startsWith(byte0, "-Q<S(c0j.&U,m}A");
      Character character0 = new Character('?');
      jexlArithmetic2.contains(character0, (Object) null);
  }
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrow(bigInteger0);
      Float float0 = new Float((-2368.8948));
      Object object0 = jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object1 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      jexlArithmetic0.toInteger(integer0);
      Integer.getInteger("positivize");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      jexlArithmetic0.logicalNot(float0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.toBigInteger(object1);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.toBigInteger(object0);
  }
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer0 = new Integer(42);
      JexlEngine.getThreadEngine();
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, boolean0);
      jexlArithmetic0.options((JexlContext) objectContext0);
      Byte byte0 = new Byte((byte) (-60));
      Object object0 = jexlArithmetic0.multiply(integer0, byte0);
      jexlArithmetic0.bitwiseAnd(byte0, object0);
  }
 @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "-Q<S(c0j.&U,m}A";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      Double double0 = new Double((-3173.0));
      jexlArithmetic1.compare(integer0, double0, (String) null);
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
      MathContext mathContext1 = MathContext.DECIMAL64;
      jexlArithmetic2.matches("annotation", mathContext1);
      // Undeclared exception!
      try { 
        jexlArithmetic2.toBigInteger((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      Character.isIdeographic((byte)2);
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
  }
 @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSharedInstance(false);
      Character character0 = new Character('X');
      jexlArithmetic0.toDouble(character0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Character character1 = new Character('s');
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jexlArithmetic0.narrowBigDecimal(character1, jexlOptions0, bigDecimal0);
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(21, roundingMode0);
      JexlArithmetic jexlArithmetic3 = new JexlArithmetic(true, mathContext0, (byte)12);
      Byte byte0 = new Byte((byte) (-60));
      Boolean boolean0 = jexlArithmetic3.isEmpty((Object) byte0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.bitwiseAnd((Object) null, boolean0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-2147483648");
      Short short0 = new Short((short)2);
      Object object0 = jexlArithmetic1.logicalNot(short0);
      BigDecimal bigDecimal1 = jexlArithmetic0.toBigDecimal(object0);
      bigDecimal0.subtract(bigDecimal1);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      Double double2 = new Double(1038.679142239);
      Object object1 = jexlArithmetic0.subtract((Object) null, double2);
      Object object2 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      jexlArithmetic0.empty(double3);
      jexlArithmetic0.subtract(object2, object1);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.max((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getRoundingMode();
      mathContext0.toString();
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      Long long1 = new Long(118L);
      Integer integer0 = new Integer(1073741824);
      jexlArithmetic0.size((Object) long1, integer0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.logicalNot((Object) null);
      String string0 = "selfXor";
      int int0 = (-1078);
      // Undeclared exception!
      try { 
        jexlArithmetic0.complement("selfXor");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"selfXor\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, "Iyyw!VUTf`4)!P6Ts<");
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.startsWith(boolean0, mathContext1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) null);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
  }
 @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      JexlOptions.setDefaultFlags(stringArray0);
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toBigInteger("I 9HK+Yv*PK7(");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, 14);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)4;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Short short0 = new Short((short) (-11352));
      jexlArithmetic2.contains(bigInteger0, short0);
      Short short1 = new Short((short)4163);
      jexlArithmetic0.contains((Object) null, short1);
      Class<String> class0 = String.class;
      jexlArithmetic3.narrowNumber(bigDecimal0, class0);
      Character character0 = Character.valueOf('g');
      Long long0 = new Long((byte)3);
      jexlArithmetic0.and(character0, long0);
  }
 @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = null;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Integer integer0 = new Integer(7);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply((Object) null, jexlArithmetic2);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.or("I 9HK+Yv*PK7(", integer0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"I 9HK+Yv*PK7(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 0);
      MathContext mathContext1 = new MathContext(0);
      jexlOptions0.copy();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext1, (-1943));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jexlArithmetic2.toBigDecimal(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.toDouble(roundingMode0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.math.RoundingMode:(DOWN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic2.narrowBigInteger(bigInteger0, class0, (BigInteger) null);
      jexlArithmetic2.narrowAccept(class0, class0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.bitwiseXor("-Q<S(c0j.&U,m}A", ">");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Q<S(c0j.&U,m}A\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlContext jexlContext0 = null;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic1.lessThan("]: '", "]: '");
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic2.isFloatingPointNumber("_Y6};D");
      try { 
        Byte.decode("]: '");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"]: '\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.lazySet(true);
      Float float0 = new Float(955.4800367585);
      Float.min(0.0F, 0.0F);
      jexlArithmetic0.subtract(atomicBoolean0, float0);
      JexlOptions jexlOptions0 = new JexlOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_,Xuagc;mlakk,<");
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlOptions0.setMathContext(mathContext0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Byte byte0 = new Byte((byte) (-41));
      BigInteger bigInteger0 = jexlArithmetic1.toBigInteger(byte0);
      Byte.toUnsignedInt((byte)88);
      Integer integer0 = new Integer((byte) (-41));
      jexlArithmetic0.toInteger(integer0);
      jexlArithmetic1.toBigInteger(bigInteger0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-41);
      BigInteger bigInteger1 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual("precision=7 roundingMode=HALF_EVEN", bigInteger1);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"precisi\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = true;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlOptions0.setMathContext(mathContext0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlOptions jexlOptions1 = new JexlOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jexlArithmetic1.options(jexlOptions1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jexlArithmetic0.not(jexlOptions0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.or(jexlArithmetic0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      short short0 = (short)1972;
      Character.isIdeographic((byte)2);
      Short short1 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short1);
      jexlArithmetic0.positivize(short1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.controlNullNullOperands();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      jexlArithmetic0.toLong((Object) null);
      Integer integer0 = new Integer(7);
      Float float0 = new Float((double) 7);
      jexlArithmetic0.contains((Object) null, float0);
  }
 @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      Object object0 = jexlArithmetic0.bitwiseAnd((Object) null, (Object) null);
      jexlArithmetic0.logicalNot((Object) null);
      jexlArithmetic0.options((JexlOptions) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jexlArithmetic0.narrowBigDecimal((Object) null, object0, bigDecimal0);
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Integer integer0 = new Integer(7);
      jexlArithmetic2.divide((Object) null, integer0);
      Double double0 = new Double(2477.50551576017);
      // Undeclared exception!
      try { 
        jexlArithmetic2.mod(double0, jexlArithmetic0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Double coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      int int0 = (-1943);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      boolean boolean0 = true;
      MathContext mathContext1 = new MathContext(0);
      jexlOptions0.copy();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Class<Long> class0 = Long.class;
      jexlArithmetic1.narrowNumber(bigDecimal0, class0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext1, (-1943));
      // Undeclared exception!
      try { 
        jexlArithmetic2.toDouble(roundingMode0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.math.RoundingMode:(DOWN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JexlEngine.getThreadContext();
      Integer integer0 = new Integer(7);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, (-2776));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.greaterThanOrEqual((Object) null, atomicBoolean0);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      jexlArithmetic_SetBuilder0.create();
      Double double0 = new Double(46);
      jexlArithmetic0.isFloatingPointNumber(double0);
  }
 @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Integer integer0 = new Integer(7);
      jexlArithmetic2.divide((Object) null, integer0);
      Float float0 = new Float((double) 7);
      Boolean boolean0 = jexlArithmetic0.contains((Object) null, float0);
      jexlArithmetic2.isEmpty((Object) float0, boolean0);
      jexlArithmetic2.narrowArguments((Object[]) null);
  }
 @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL64;
      int int0 = (-1840700267);
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-1840700267));
      jexlArithmetic1.narrow((Number) null);
      int int1 = 8;
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(false, mathContext0, 8);
      Double double0 = new Double(8);
      jexlArithmetic0.toBoolean(double0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr(roundingMode0, jexlArithmetic2);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.RoundingMode:(HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-3173));
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, (-3173));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-3173));
      jexlArithmetic3.empty(bigDecimal0);
      Double double0 = new Double((-3173));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf('J');
      Character.isAlphabetic((-91));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic1.compare(double0, character0, "/");
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2147422184));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2147422184
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 2147483646;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 2147483646);
      Boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.size((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      jexlArithmetic0.greaterThanOrEqual("precision=7 roundingMode=HALF_EVEN", "selfXor");
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer0 = new Integer((-1598));
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(roundingMode0, integer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.RoundingMode:(HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
      long long0 = (-1160L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(40, mockRandom0);
      jexlArithmetic0.add(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.shortValueExact();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger out of short range
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.lazySet(false);
      Float float0 = new Float(955.4800367585);
      Float.min(0.0F, 0.0F);
      jexlArithmetic0.subtract(atomicBoolean0, float0);
      JexlOptions jexlOptions0 = new JexlOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_,Xuagc;mlakk,<");
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlOptions0.setMathContext(mathContext0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Byte byte0 = new Byte((byte) (-41));
      BigInteger bigInteger0 = jexlArithmetic1.toBigInteger(byte0);
      Byte.toUnsignedInt((byte)88);
      Integer integer0 = new Integer((byte) (-41));
      jexlArithmetic0.toInteger(integer0);
      jexlArithmetic1.toBigInteger(bigInteger0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-41);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual("precision=7 roundingMode=HALF_EVEN", bigInteger1);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"precisi\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.logicalNot((Object) null);
      String string0 = "selfXor";
      int int0 = (-1078);
      // Undeclared exception!
      try { 
        jexlArithmetic0.complement("selfXor");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"selfXor\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      Boolean.logicalOr(false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      MapContext mapContext0 = new MapContext();
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Short short1 = new Short((short)1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-3173));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.subtract(character0, atomicBoolean0);
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
  }
 @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      jexlOptions0.setMathContext(mathContext0);
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
  }
 @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL128;
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-829));
      Short short0 = new Short((short)25);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      jexlArithmetic1.narrowBigDecimal(roundingMode0, short0, bigDecimal0);
      jexlArithmetic1.logicalNot(jexlArithmetic0);
  }
 @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      Float float0 = new Float((-279.67F));
      // Undeclared exception!
      try { 
        jexlArithmetic1.xor("_Y6};D", float0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"_Y6};D\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrow(bigInteger0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), 31);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd("positivize", integer0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"positivize\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      Float float1 = new Float(0.0);
      Integer integer0 = new Integer(0);
      jexlArithmetic0.size((Object) float1, integer0);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = (-3173);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-3173));
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toInteger(mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Integer coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, (-208));
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<MathContext> class0 = MathContext.class;
      Class<BigInteger> class1 = BigInteger.class;
      jexlArithmetic2.narrowAccept(class0, class1);
      jexlArithmetic1.setBuilder(1512);
      Object object0 = jexlArithmetic0.not(jexlArithmetic1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = 't';
      charArray0[2] = 'k';
      charArray0[3] = 'E';
      charArray0[4] = '0';
      charArray0[5] = '/';
      charArray0[6] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.bitwiseAnd(object0, charBuffer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.nio.HeapCharBuffer:(StkE0/b)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JRc>j>$`P`K8roGIPY");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, (-1111));
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(26);
      jexlArithmetic_ArrayBuilder0.add((Object) null);
      jexlArithmetic0.lessThanOrEqual(jexlArithmetic_ArrayBuilder0, "JRc>j>$`P`K8roGIPY");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) jexlArithmetic_ArrayBuilder0;
      objectArray0[3] = (Object) jexlArithmetic_ArrayBuilder0;
      objectArray0[4] = (Object) "JRc>j>$`P`K8roGIPY";
      objectArray0[5] = (Object) jexlArithmetic0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      jexlArithmetic0.narrowArguments(objectArray0);
  }
 @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = (-1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, (-1));
      JexlEngine.getThreadContext();
      jexlArithmetic2.isFloatingPointNumber(jexlArithmetic0);
      jexlArithmetic2.options((JexlContext) null);
      jexlArithmetic0.narrowArguments((Object[]) null);
      MathContext mathContext1 = null;
      try {
        mathContext1 = new MathContext((-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException("java.math.MathContext", e);
      }
  }
 @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-1879048189);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1879048189));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 5);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic2.endsWith(mathContext0, jexlArithmetic0);
      String string0 = "=n.";
      Boolean boolean0 = Boolean.valueOf("=n.");
      jexlArithmetic1.toBoolean(boolean0);
      String string1 = "o`0(%,i+";
      Boolean.getBoolean("o`0(%,i+");
      Boolean.logicalAnd(false, false);
      jexlArithmetic1.not(mathContext0);
      mathContext0.getRoundingMode();
      jexlArithmetic2.toInteger((Object) null);
      mathContext0.getRoundingMode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X0IB&%ST5:M!Iy.");
      try { 
        Integer.valueOf("=n.");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"=n.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JexlArithmetic.isMultiplyExact(3L, 3L, 3L);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-3685));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)36;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jexlArithmetic0.greaterThanOrEqual(bigInteger0, bigInteger0);
  }
 @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = false;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)0);
      jexlArithmetic0.narrow(byte1);
      Byte.compare((byte)0, (byte)0);
      MapContext mapContext0 = new MapContext();
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder((byte)0);
      Object object0 = jexlArithmetic_ArrayBuilder0.create(true);
      // Undeclared exception!
      try { 
        jexlArithmetic0.subtract(object0, object0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.util.ArrayList:([])
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong(">=", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      BigInteger bigInteger0 = BigInteger.valueOf((-3576L));
      jexlArithmetic1.narrowBigInteger(long0, ">=", bigInteger0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger1, bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long(0L);
      jexlArithmetic0.bitwiseXor(long0, long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Short.compare((short)1, (short)1626);
      Short.compare((short)1, (short)2175);
      Character character0 = new Character('Y');
      Boolean boolean0 = new Boolean(true);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      bigDecimal0.toString();
      Long long1 = new Long(2170L);
      jexlArithmetic0.narrowLong(bigDecimal0, long1, (-2037));
      jexlArithmetic0.positivize(long0);
      String string0 = "'IDU";
      // Undeclared exception!
      try { 
        jexlArithmetic0.equals((Object) number0, (Object) "precision=7 roundingMode=HALF_EVEN");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"precisi\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      Boolean.logicalOr(true, false);
      String string0 = null;
      jexlArithmetic0.greaterThan((Object) null, object0);
      MathContext mathContext1 = MathContext.DECIMAL32;
      Integer integer0 = new Integer((-2037));
      jexlArithmetic0.size((Object) mathContext1, integer0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Character character0 = new Character('Y');
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(mathContext0, class0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(precision=7 roundingMode=HALF_EVEN <= class java.lang.String)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Float float0 = new Float((-1.0));
      Object object0 = jexlArithmetic0.bitwiseAnd(float0, float0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.set(true);
      atomicBoolean0.compareAndSet(true, true);
      Object object1 = jexlArithmetic0.xor(object0, atomicBoolean0);
      jexlArithmetic0.complement(object1);
      Float float1 = new Float(973.0F);
      jexlArithmetic0.toLong(float1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      int int0 = (-2145418122);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2145418122));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.positivize((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong(">=", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      Double double0 = new Double(2088.8967419716805);
      Object object0 = jexlArithmetic0.positivize(double0);
      jexlArithmetic1.or(object0, bigInteger1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "6'kC_qpWjmx05%B0)";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6'kC_qpWjmx05%B0)");
      JexlEngine.getThreadEngine();
      MapContext mapContext0 = new MapContext();
      boolean boolean0 = false;
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      mapContext0.clear();
      MathContext mathContext0 = new MathContext(256, roundingMode0);
      mathContext0.equals("");
      int int0 = 729;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 729);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.bitwiseXor("", (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      Pattern.compile("precision=7 roundingMode=HALF_EVEN");
      jexlArithmetic0.narrow(long0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.getLong("+[G");
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-2172L), (-3767));
      Class<CharBuffer> class0 = CharBuffer.class;
      jexlArithmetic1.narrowNumber(bigDecimal0, class0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic1.narrowNumber(bigDecimal0, class0);
      jexlArithmetic0.mapBuilder(0);
      Object object0 = jexlArithmetic0.logicalNot((Object) null);
      Pattern.compile("selfXor", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor(object0, "selfXor");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"selfXor\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      boolean boolean0 = new Boolean(false);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      jexlArithmetic1.and(long0, float0);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = 2171;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 2171);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "false");
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 2171);
      JexlEngine.getThreadContext();
      mathContext0.equals(jexlArithmetic0);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      Double double0 = new Double(2171);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(true, mathContext0, 2171);
      // Undeclared exception!
      try { 
        jexlArithmetic1.lessThan(bigDecimal0, jexlArithmetic2);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@3)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Float.max((-3767.0593F), (-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      jexlArithmetic0.toBigInteger(float0);
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext1 = new MathContext(0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext1, (-1943));
      Byte byte0 = new Byte((byte)69);
      jexlArithmetic1.toDouble(byte0);
      Long long0 = new Long(933L);
      Class<Pattern> class0 = Pattern.class;
      jexlArithmetic2.narrowNumber(long0, class0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.toDouble(roundingMode0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.math.RoundingMode:(CEILING)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      jexlOptions0.setLexicalShade(true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, 968);
      BigDecimal bigDecimal0 = new BigDecimal((long) 968);
      bigDecimal0.doubleValue();
      jexlOptions0.setMathScale(42);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic1.options(jexlOptions0);
      Byte.compare((byte) (-2), (byte) (-2));
      jexlArithmetic0.mapBuilder(968);
  }
 @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2180L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      Boolean boolean0 = jexlArithmetic0.isEmpty((Object) jexlArithmetic0);
      Pattern.compile("selfXor", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor(boolean0, "selfXor");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"selfXor\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.compare((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      Boolean boolean0 = (Boolean)jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, 3267);
      ArrayBuilder arrayBuilder0 = (ArrayBuilder)jexlArithmetic2.arrayBuilder(16);
      ArrayList arrayList0 = (ArrayList)arrayBuilder0.create(true);
      jexlArithmetic1.isEmpty((Object) arrayList0, boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-579.0871F));
      Float.min((-579.0871F), (-579.0871F));
      Class<BigDecimal> class0 = BigDecimal.class;
      jexlArithmetic0.narrowNumber(float0, class0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      jexlArithmetic0.options((JexlContext) mapContext0);
      Float.isFinite(0.0F);
      Float.min((-579.0871F), (-579.0871F));
      jexlArithmetic0.complement(float0);
      Object object0 = null;
      BigDecimal bigDecimal0 = jexlArithmetic0.toBigDecimal((Object) null);
      jexlArithmetic0.mapBuilder(2107);
      String string0 = ";2lb0>8:(W~=YW$";
      // Undeclared exception!
      try { 
        bigDecimal0.divideToIntegralValue((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong(">=", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "6'kC_qpWjmx05%B0)";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6'kC_qpWjmx05%B0)");
      JexlEngine.getThreadEngine();
      MapContext mapContext0 = new MapContext();
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      mapContext0.clear();
      MathContext mathContext0 = new MathContext(256, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 729);
      // Undeclared exception!
      try { 
        jexlArithmetic0.and("6'kC_qpWjmx05%B0)", roundingMode0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"6'kC_qpWjmx05%B0)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.modInverse(bigInteger1);
      Integer integer1 = jexlArithmetic0.size((Object) bigInteger0, integer0);
      mathContext0.equals(jexlArithmetic0);
      String string0 = null;
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      jexlArithmetic0.narrowBigDecimal(integer1, integer1, bigDecimal0);
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mapBuilder((-2776));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2776
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">=");
      Long long0 = Long.getLong(">=", 2245L);
      Long.max(2245L, 3339L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      jexlArithmetic1.greaterThanOrEqual(jexlArithmetic0, (Object) null);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Double double0 = new Double((byte)41);
      jexlArithmetic1.lessThan(atomicBoolean0, double0);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger1, bigInteger1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      Object object0 = jexlArithmetic0.logicalNot((Object) null);
      Pattern.compile("selfXor", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor(object0, "selfXor");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"selfXor\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      mathContext0.getRoundingMode();
      Long long0 = new Long((-3087L));
      Float float0 = new Float((double) (-3087L));
      Object object3 = jexlArithmetic0.subtract((Object) null, float0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jexlArithmetic0.divide(object3, bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      String string0 = null;
      jexlArithmetic0.greaterThan((Object) null, object0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Character character0 = new Character('Y');
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(mathContext0, class0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(precision=7 roundingMode=HALF_EVEN <= class java.lang.String)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer0 = new Integer(1502);
      jexlArithmetic0.divide(integer0, integer0);
      Byte byte0 = new Byte((byte) (-40));
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic0.isEmpty((Object) byte0, boolean0);
  }
 @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">=");
      Long long0 = Long.getLong(">=", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger1, bigInteger1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.getRoundingMode();
      jexlArithmetic0.toBoolean((Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 275);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      jexlArithmetic2.setBuilder(275);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Integer integer0 = new Integer(275);
      Integer integer1 = new Integer(275);
      try { 
        jexlArithmetic1.createRange(integer1, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadEngine();
      Boolean boolean0 = Boolean.valueOf("4/44&&{fx/(xxB");
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, boolean0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) objectContext0);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic1.setBuilder(3);
      jexlArithmetic_SetBuilder0.add("4/44&&{fx/(xxB");
  }
 @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Character character0 = Character.valueOf(')');
      jexlArithmetic1.toBigInteger(character0);
      int int0 = (-2038);
      // Undeclared exception!
      try { 
        jexlArithmetic1.arrayBuilder((-2038));
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ArrayBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(Integer.MIN_VALUE);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, (-639));
      // Undeclared exception!
      try { 
        jexlArithmetic0.add((Object) null, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      Long long0 = new Long(0L);
      jexlArithmetic0.bitwiseXor(long0, long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.andNot(bigInteger0);
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.bitwiseXor(bigInteger1, bigInteger0);
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      jexlArithmetic0.startsWith(short0, character0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long1 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long1, (-2037));
      jexlArithmetic0.positivize(number0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic0.not(atomicBoolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate("'IDU");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object negate:('IDU)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 2263);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      JexlArithmetic jexlArithmetic3 = new JexlArithmetic(true);
      Integer integer0 = jexlArithmetic3.size((Object) jexlArithmetic1);
      // Undeclared exception!
      try { 
        jexlArithmetic2.subtract(integer0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int int0 = 0;
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      int int1 = (-1943);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      Character character0 = Character.valueOf('*');
      // Undeclared exception!
      try { 
        jexlArithmetic0.greaterThan(character0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=0 roundingMode=CEILING)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      long long0 = 0L;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(atomicBoolean0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      Long long0 = new Long(0L);
      jexlArithmetic0.bitwiseXor(long0, long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      jexlArithmetic0.startsWith(short0, character0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.greaterThanOrEqual(bigInteger0, atomicBoolean0);
      bigDecimal0.toString();
      Long long1 = new Long(2170L);
      Number number1 = jexlArithmetic0.narrowLong(bigDecimal0, long1, (-2037));
      jexlArithmetic0.positivize(number1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate("'IDU");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object negate:('IDU)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jexlArithmetic1.narrowBigDecimal("Long coercion: ", long0, bigDecimal0);
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.controlNullNullOperands();
      int int0 = (-228);
      BigDecimal bigDecimal0 = new BigDecimal((-228));
      bigDecimal0.longValueExact();
      jexlArithmetic0.narrowBigDecimal((Object) null, (Object) null, bigDecimal0);
      BigDecimal bigDecimal1 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      bigDecimal0.remainder(bigDecimal1);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      Number number0 = jexlArithmetic0.narrowBigDecimal(bigInteger0, bigDecimal2, bigDecimal2);
      BigInteger bigInteger1 = BigInteger.valueOf((-228L));
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      int int1 = 35;
      bigInteger2.shiftLeft(35);
      jexlArithmetic0.toBigInteger(bigDecimal0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(34);
      Character character0 = new Character('=');
      bigInteger0.testBit(34);
      jexlArithmetic_MapBuilder0.put(number0, character0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.add(bigInteger2, jexlArithmetic_MapBuilder0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.internal.MapBuilder:(org.apache.commons.jexl3.internal.MapBuilder@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Number number0 = jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      BigDecimal bigDecimal1 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      mathContext0.equals(bigDecimal1);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      jexlArithmetic0.toDouble(number0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = 5358;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 5358);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Double double0 = new Double(720.3789305155);
      // Undeclared exception!
      try { 
        jexlArithmetic1.equals((Object) double0, (Object) mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      jexlArithmetic0.size((Object) bigInteger0, integer0);
      mathContext0.equals(jexlArithmetic0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide((Object) null, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      Boolean.compare(false, true);
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic1.narrowBigInteger((Object) null, jexlArithmetic0, bigInteger0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      // Undeclared exception!
      try { 
        jexlArithmetic1.arrayBuilder(Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ArrayBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(false, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class0 = Long.TYPE;
      jexlArithmetic3.narrowAccept(class0, class0);
      Integer integer0 = new Integer(1602);
      jexlArithmetic1.toInteger(integer0);
  }
 @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic3.narrowAccept(class0, class0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JexlArithmetic jexlArithmetic4 = new JexlArithmetic(false);
      Boolean boolean0 = new Boolean("I 9HK+Yv*PK7(");
      Boolean boolean1 = jexlArithmetic4.isEmpty((Object) "I 9HK+Yv*PK7(", boolean0);
      Object object0 = jexlArithmetic3.logicalNot(boolean1);
      jexlArithmetic1.greaterThanOrEqual(bigInteger0, object0);
  }
 @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      pattern0.asPredicate();
      Double double0 = new Double(1.0);
      Double.min(1.0, 0.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double1 = new Double(1038.679142239);
      jexlArithmetic0.subtract((Object) null, double1);
      jexlArithmetic0.logicalNot((Object) null);
      JexlArithmetic.isMultiplyExact((-1L), (-1L), 0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      jexlArithmetic1.toBigInteger(bigDecimal1);
  }
 @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(15);
      jexlArithmetic_SetBuilder0.create();
      Float float0 = new Float((-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.mapBuilder(0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.logicalNot((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, Integer.MIN_VALUE);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, Integer.MIN_VALUE);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic2.complement(atomicBoolean0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic2.narrowBigInteger(object0, jexlArithmetic0, bigInteger0);
  }
 @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 3941);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 3941);
      MathContext mathContext1 = MathContext.DECIMAL128;
      jexlArithmetic1.size((Object) mathContext1, (Integer) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'g';
      charArray0[2] = 'C';
      charArray0[3] = 'w';
      charArray0[4] = '+';
      charArray0[5] = '$';
      charArray0[6] = '*';
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.compareTo(bigInteger1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.compare(bigInteger0, (Object) null, "COMPLEMENT");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(10 COMPLEMENT null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      Class<MathContext> class0 = MathContext.class;
      jexlArithmetic0.narrowNumber(float0, class0);
      jexlArithmetic0.setBuilder(16);
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Class<Object> class0 = Object.class;
      jexlArithmetic2.narrowNumber(bigInteger0, class0);
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class1 = Long.class;
      jexlArithmetic3.narrowAccept(class1, class1);
  }
 @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL64;
      mathContext0.getRoundingMode();
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare(object0, (Object) null, "ADD");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(java.lang.Object@60858ecc ADD null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Float float0 = new Float((-14.77775561582136));
      Float.max(0.0F, 0.0F);
      Short short0 = new Short((short)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Integer integer0 = new Integer((-2776));
      Byte byte0 = new Byte((byte) (-14));
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 14);
      BigDecimal bigDecimal0 = new BigDecimal((-14.77775561582136));
      // Undeclared exception!
      try { 
        jexlArithmetic0.greaterThan(bigInteger0, bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      pattern0.asPredicate();
      Double double0 = new Double(36.33054145288271);
      double double1 = new Float(0.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      jexlArithmetic0.subtract((Object) null, double2);
      jexlArithmetic0.logicalNot((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      jexlArithmetic0.not(bigInteger0);
  }
 @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r0\"\"");
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.getMathScale();
  }
 @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double.min(1.0, 0.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double1 = new Double(1038.679142239);
      jexlArithmetic0.subtract((Object) null, double1);
      jexlArithmetic0.logicalNot((Object) null);
      Character character0 = Character.valueOf('Z');
      jexlArithmetic1.isFloatingPoint(character0);
      jexlArithmetic1.narrow(double1);
  }
 @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      String string0 = null;
      jexlArithmetic0.greaterThan((Object) null, object0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(mathContext0, class0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(precision=7 roundingMode=HALF_EVEN <= class java.lang.String)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Double double0 = new Double((-1237.0));
      jexlArithmetic1.negate(double0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigInteger bigInteger0 = BigInteger.ONE;
      MathContext mathContext1 = MathContext.DECIMAL32;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-1.0));
      Long long0 = new Long((-2776));
      jexlArithmetic0.toBoolean(long0);
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mapBuilder((-2776));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2776
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mapBuilder((-2776));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2776
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(15);
      jexlArithmetic_SetBuilder0.create();
      Float float0 = new Float((-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.toString((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      Object object0 = jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)113);
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      Float.max(0.0F, 0.0F);
      Boolean boolean0 = new Boolean("rhH@/");
      Boolean boolean1 = jexlArithmetic0.isEmpty(object0, boolean0);
      Boolean.compare(false, false);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, false);
      Object object1 = jexlArithmetic0.logicalNot(boolean1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2067);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object1);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Long long0 = new Long(1818L);
      jexlArithmetic1.contains(mathContext0, long0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      MathContext mathContext1 = MathContext.DECIMAL32;
      Boolean boolean2 = new Boolean("rhH@/");
      jexlArithmetic3.isEmpty((Object) mathContext1, boolean2);
  }
 @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      mathContext0.getPrecision();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      double double0 = 1.0;
      Double double1 = new Double(1.0);
      Long long0 = new Long(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(long0, bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 4211;
      MathContext mathContext0 = new MathContext(4211);
      int int1 = 41;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean1 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      char char0 = '2';
      // Undeclared exception!
      try { 
        jexlArithmetic1.toDouble("]n^GY_8'");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
      }
  }
 @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      jexlArithmetic1.roundBigDecimal(bigDecimal0);
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '.';
      charArray0[2] = '%';
      charArray0[3] = '>';
      charArray0[4] = 'h';
      charArray0[6] = '\\';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      try { 
        jexlArithmetic0.createRange(charBuffer0, bigDecimal0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.nio.HeapCharBuffer:(}.%>h\u0000\\)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
      Integer integer0 = new Integer((-68));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic0.lessThan(integer0, atomicBoolean0);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double.min(1.0, 0.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double1 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double1);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double2 = new Double(0.0);
      jexlArithmetic0.empty(double2);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
  }
 @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1602);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1602);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Integer integer0 = new Integer(1884);
      // Undeclared exception!
      try { 
        jexlArithmetic1.multiply(integer0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=1602 roundingMode=HALF_UP)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jexlArithmetic0.asLongNumber("9p$,9CwL");
      jexlArithmetic0.toBoolean(fileSystemHandling0);
      Object object0 = jexlArithmetic0.matches("9p$,9CwL", (Object) null);
      jexlArithmetic0.negate(object0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.controlNullNullOperands();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Character character0 = Character.valueOf('?');
      int int0 = (-211);
      Character.highSurrogate((-211));
      jexlArithmetic0.toBigDecimal(character0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-211));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -211
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      Short short0 = new Short((short)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Integer integer0 = new Integer((-2776));
      Byte byte0 = new Byte((byte) (-14));
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
  }
 @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)113);
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      Float.max(0.0F, 0.0F);
      Boolean boolean0 = new Boolean("rhH@/");
      Boolean boolean1 = Boolean.valueOf(false);
      Boolean.compare(false, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, false);
      Object object0 = jexlArithmetic0.logicalNot(boolean1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2067);
      jexlArithmetic_MapBuilder0.create();
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object0);
      jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      jexlArithmetic_ArrayBuilder0.create(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(false, mathContext0, (-1));
      MathContext mathContext1 = MathContext.DECIMAL32;
      Boolean boolean2 = new Boolean("rhH@/");
      jexlArithmetic2.isEmpty((Object) mathContext1, boolean2);
  }
 @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      Long long0 = new Long(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      jexlArithmetic0.startsWith(short0, character0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long1 = new Long(2170L);
      Number number1 = jexlArithmetic0.narrowLong(bigDecimal0, long1, (-2037));
      jexlArithmetic0.positivize(number1);
      jexlArithmetic0.negate((Object) null);
  }
 @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Pattern pattern0 = Pattern.compile("");
      pattern0.matcher("");
      mathContext0.equals(pattern0);
      Character character0 = Character.valueOf('|');
      Character.isSurrogate('|');
      mathContext0.equals(character0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      jexlArithmetic0.getMathScale();
      jexlArithmetic0.getMathContext();
  }
 @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic3.narrowAccept(class0, class0);
      Float float0 = new Float(3614.04814629);
      Class<BigDecimal> class1 = BigDecimal.class;
      jexlArithmetic0.narrowNumber(float0, class1);
  }
 @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      mathContext0.equals(jexlArithmetic0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide((Object) null, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">");
      int int0 = 35;
      MathContext mathContext0 = new MathContext(35);
      mathContext0.toString();
      mathContext0.toString();
      int int1 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      Boolean boolean0 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(boolean0, "precision=35 roundingMode=HALF_UP");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"precis\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = null;
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr((Object) null, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Long long0 = new Long((-3338L));
      Byte byte0 = new Byte((byte) (-21));
      Object object0 = jexlArithmetic0.bitwiseOr(long0, byte0);
      Long long1 = new Long((-1515L));
      Long.min((-3338L), (-3338L));
      jexlArithmetic0.endsWith(object0, long1);
  }
 @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "ODs4B/0'";
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1295));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic0.narrow(bigInteger0);
      int int0 = (-1015);
      mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true, mathContext0, (-1015));
      mathContext0.getPrecision();
      // Undeclared exception!
      try { 
        jexlArithmetic1.divide("ODs4B/0'", mathContext0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"ODs4B/0'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      Character character0 = Character.valueOf('o');
      Character.isAlphabetic(Integer.MIN_VALUE);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character.isIdeographic(Integer.MIN_VALUE);
      mathContext0.equals(character0);
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 694);
      mathContext0.getPrecision();
      jexlArithmetic0.setBuilder(694);
      RoundingMode.valueOf(0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic0.isFloatingPoint(bigInteger0);
      JexlArithmetic.isMultiplyExact(Integer.MIN_VALUE, (-128L), (-128L));
      MathContext mathContext1 = jexlArithmetic0.getMathContext();
      mathContext1.getRoundingMode();
      // Undeclared exception!
      try { 
        jexlArithmetic0.subtract(mathContext1, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      int int0 = (-32);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-32));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.negate(atomicBoolean0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      atomicBoolean0.getAndSet(false);
      atomicBoolean0.weakCompareAndSet(false, false);
      jexlArithmetic2.endsWith((Object) null, "wQBSh1:AiYj.e+D<=");
      try { 
        jexlArithmetic0.createRange(jexlEngine_EmptyContext0, object0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlEngine$EmptyContext:(org.apache.commons.jexl3.JexlEngine$EmptyContext@3)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 29);
      jexlArithmetic0.isNegateStable();
  }
 @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1185));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic0.isPositivizeStable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "COMPLEMENT");
      Float float0 = new Float((double) (-1185));
      Float float1 = new Float(875.7613302);
      jexlArithmetic0.isNumberable(jexlArithmetic1);
      Byte byte0 = new Byte((byte) (-40));
      jexlArithmetic0.lessThan(float1, byte0);
      Float.sum((-1185), (-1185));
      // Undeclared exception!
      try { 
        jexlArithmetic1.and(float0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      Object object0 = jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)113);
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      Float.max(0.0F, 0.0F);
      Boolean boolean0 = new Boolean("rhH@/");
      Boolean boolean1 = jexlArithmetic0.isEmpty(object0, boolean0);
      Boolean.compare(false, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, false);
      Object object1 = jexlArithmetic0.logicalNot(boolean1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2067);
      jexlArithmetic_MapBuilder0.create();
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object1);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      jexlArithmetic_ArrayBuilder0.create(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options((JexlOptions) null);
      MathContext mathContext1 = MathContext.DECIMAL32;
      Boolean boolean2 = new Boolean("rhH@/");
      jexlArithmetic3.isEmpty((Object) mathContext1, boolean2);
  }
 @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      Object object0 = jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)99);
      Byte.toUnsignedInt((byte) (-77));
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      String string0 = "rhH@/";
      Boolean boolean0 = new Boolean("rhH@/");
      Boolean boolean1 = jexlArithmetic0.isEmpty(object0, boolean0);
      Boolean.compare(false, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, true);
      Object object1 = jexlArithmetic0.logicalNot(boolean1);
      jexlArithmetic0.mapBuilder(2067);
      HashMap hashMap0 = new HashMap<BigInteger, BigInteger>();
      jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object1);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.add((Object) null, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.getPrecision();
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      jexlArithmetic0.isFloatingPointNumber(mathContext0);
      char char0 = '_';
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr(mathContext0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      Object object0 = jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)99);
      Byte.toUnsignedInt((byte) (-77));
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      Float.max(0.0F, 0.0F);
      Boolean boolean0 = new Boolean("rhH@/");
      Boolean boolean1 = jexlArithmetic0.isEmpty(object0, boolean0);
      boolean boolean2 = false;
      Boolean.compare(false, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, true);
      Object object1 = jexlArithmetic0.logicalNot(boolean1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2067);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object1);
      jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      Long long0 = new Long(9223372036854775807L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.multiply("rhH@/", long0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"rhH@/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.getRoundingMode();
      jexlArithmetic0.toBoolean((Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 275);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      jexlArithmetic2.setBuilder(275);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Integer integer0 = new Integer(275);
      Integer integer1 = new Integer(275);
      jexlArithmetic1.createRange(integer1, (Object) null);
      // Undeclared exception!
      try { 
        jexlArithmetic0.and(jexlArithmetic1, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      Long long0 = new Long(0L);
      jexlArithmetic0.bitwiseXor(long0, long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      jexlArithmetic0.startsWith(short0, character0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long1 = new Long(2170L);
      Number number1 = jexlArithmetic0.narrowLong(bigDecimal0, long1, (-2037));
      jexlArithmetic0.positivize(number1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate("'IDU");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object negate:('IDU)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      MathContext mathContext0 = new MathContext(4211);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Character character0 = new Character('2');
      jexlArithmetic0.lessThan(character0, (Object) null);
      CharBuffer.allocate(4211);
      jexlArithmetic1.positivize((Object) null);
      // Undeclared exception!
      try { 
        jexlArithmetic1.multiply(jexlArithmetic0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalXor(false, true);
      jexlArithmetic0.narrowBigDecimal((Object) null, boolean0, (BigDecimal) null);
      MathContext mathContext0 = new MathContext(1146);
      mathContext0.equals(jexlArithmetic1);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 1146);
      // Undeclared exception!
      try { 
        jexlArithmetic2.positivize(jexlArithmetic0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object positivize:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.getRoundingMode();
      jexlArithmetic0.toBoolean((Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 275);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      jexlArithmetic2.setBuilder(275);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Integer integer0 = new Integer(275);
      // Undeclared exception!
      try { 
        jexlArithmetic0.and(jexlArithmetic1, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer0 = new Integer(1946);
      int int0 = 0;
      Integer.toUnsignedString(0);
      JexlOptions jexlOptions0 = new JexlOptions();
      // Undeclared exception!
      try { 
        jexlArithmetic0.or(jexlOptions0, "0");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlOptions:(org.apache.commons.jexl3.JexlOptions@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 599);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      jexlArithmetic0.lessThan(mathContext0, (Object) null);
  }
 @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-548));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, (-479));
      jexlArithmetic2.not(jexlArithmetic1);
      jexlArithmetic2.isNegateStable();
      Long long0 = Long.valueOf((long) (-548));
      Long.sum(0L, 0L);
      Class<String> class0 = String.class;
      jexlArithmetic2.narrowNumber(long0, class0);
      int int0 = 28;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(28);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      // Undeclared exception!
      try { 
        jexlArithmetic2.complement(object0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.HashSet:([])
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      RoundingMode roundingMode0 = RoundingMode.UP;
      MathContext mathContext0 = new MathContext(15, roundingMode0);
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 15);
      Double double0 = new Double((-654.885257051062));
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(double0, charBuffer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.nio.HeapCharBuffer:()
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.getPrecision();
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-1));
      Short short0 = new Short((short)666);
      Short.toUnsignedLong((short)666);
      jexlArithmetic0.negate(short0);
      mathContext0.getRoundingMode();
      JexlArithmetic.isMultiplyExact(34, 0L, 0L);
      jexlArithmetic0.contains(mathContext0, mathContext0);
      jexlArithmetic0.matches(mathContext0, (Object) null);
  }
 @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.matches((Object) null, (Object) null);
      jexlArithmetic0.mapBuilder(0);
  }
 @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = (-2542);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-2542));
      mathContext0.toString();
      Long long0 = new Long((-2542));
      Long.divideUnsigned((-2542), (-2542));
      // Undeclared exception!
      try { 
        jexlArithmetic1.narrowBigInteger(jexlArithmetic0, long0, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      jexlOptions0.setNamespaces(map0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      Boolean boolean0 = jexlArithmetic1.isEmpty((Object) map0);
      jexlArithmetic1.toBigInteger(boolean0);
      jexlOptions0.getMathContext();
      int int0 = 0;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, (MathContext) null, 0);
      jexlArithmetic1.mapBuilder(0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.add(jexlOptions0, jexlArithmetic1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlOptions:(org.apache.commons.jexl3.JexlOptions@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Short short0 = new Short((short)0);
      short short1 = (short)0;
      Short.compare((short)3, (short)0);
      short short2 = (short)3;
      Short.toUnsignedInt((short)3);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal1.signum();
      bigDecimal1.divide(bigDecimal0, 0, (int) (short)0);
      bigDecimal1.stripTrailingZeros();
      bigDecimal0.divideToIntegralValue(bigDecimal1);
      Short.compare((short) (-1), (short) (-1));
      // Undeclared exception!
      try { 
        jexlArithmetic0.subtract(short0, bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      boolean boolean0 = false;
      jexlArithmetic0.createWithOptions(false, mathContext0, 0);
      JexlEngine.getThreadEngine();
      Boolean boolean1 = null;
      mathContext0.getPrecision();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, (Boolean) null);
      mathContext0.toString();
      Integer integer0 = new Integer(1688);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
 @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MapContext mapContext0 = new MapContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      JexlEngine.getThreadEngine();
      jexlOptions0.set((JexlEngine) null);
      jexlArithmetic2.contains(jexlOptions0, jexlArithmetic0);
      Character character0 = new Character('n');
      Character.isIdeographic((byte)13);
      mapContext0.set("+xbWMHiP:j", character0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.toEngineeringString();
      jexlArithmetic2.roundBigDecimal(bigDecimal0);
      Byte byte0 = new Byte((byte)13);
      Object object0 = jexlArithmetic1.positivize(byte0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic1.options((JexlContext) mapContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.and(object0, jexlArithmetic3);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      double double0 = 507.2534;
      Double double1 = new Double(507.2534);
      Boolean boolean0 = jexlArithmetic0.isEmpty((Object) double1);
      jexlArithmetic0.toBigInteger(boolean0);
      Boolean.logicalXor(true, true);
      jexlArithmetic0.lessThanOrEqual((Object) null, boolean0);
      Boolean.logicalOr(false, false);
      Boolean.logicalXor(false, false);
      int int0 = (-44);
      // Undeclared exception!
      try { 
        jexlArithmetic0.arrayBuilder((-44));
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ArrayBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = 3308;
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 3308);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1066);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 894);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "Object comparison:(";
      Double double0 = new Double(894);
      hashMap0.put("Object comparison:(", double0);
      MapContext mapContext0 = new MapContext(hashMap0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) mapContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.copy();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic1.options(jexlOptions0);
      jexlArithmetic3.isPositivizeStable();
      // Undeclared exception!
      try { 
        jexlArithmetic0.xor(jexlArithmetic2, jexlArithmetic1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = (-849);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-849));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-849));
      Byte byte0 = new Byte((byte) (-3));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jexlArithmetic0.narrowBigDecimal(byte0, (Object) null, bigDecimal0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      jexlArithmetic2.add(number0, "?t96iyUa`0W]t%");
      jexlArithmetic2.logicalNot(mathContext0);
      jexlArithmetic0.size((Object) jexlEngine_EmptyContext0);
      boolean boolean0 = false;
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'w';
      charArray0[2] = ',';
      charArray0[3] = '#';
      charArray0[4] = 'S';
      charArray0[5] = 's';
      charArray0[6] = 'i';
      charArray0[7] = '!';
      BigDecimal bigDecimal1 = null;
      try {
        bigDecimal1 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      mathContext0.getPrecision();
      jexlArithmetic2.greaterThan(jexlEngine_EmptyContext0, jexlEngine_EmptyContext0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 'v';
      charArray0[2] = 'C';
      charArray0[3] = 'Z';
      charArray0[4] = '';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      pattern0.split((CharSequence) charBuffer0);
      bigInteger0.equals(pattern0);
      Number number0 = jexlArithmetic2.narrow(bigInteger0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jexlArithmetic2.isNumberable(bigDecimal0);
      jexlArithmetic0.narrow(number0);
      jexlArithmetic0.isNegateStable();
      jexlArithmetic1.narrowBigDecimal((Object) null, number0, bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(bigDecimal0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL64;
      mathContext0.toString();
      int int0 = 835;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 835);
      jexlArithmetic0.size((Object) jexlArithmetic1);
      Long long0 = new Long(626L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.lessThan(jexlArithmetic0, long0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      mathContext0.equals(jexlArithmetic1);
      mathContext0.toString();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic2.size((Object) "SELF_OR");
      Integer integer0 = new Integer(0);
      Integer.max(0, 0);
      jexlArithmetic0.isNumberable(integer0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThan(jexlArithmetic2, integer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@3)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      int int0 = 0;
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.createWithOptions(false, mathContext0, 0);
      Short short0 = new Short((short)0);
      Byte byte0 = Byte.valueOf((byte)3);
      jexlArithmetic3.bitwiseOr(short0, byte0);
      try { 
        jexlArithmetic3.createRange(jexlOptions0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlOptions:(org.apache.commons.jexl3.JexlOptions@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = 0;
      Pattern pattern0 = Pattern.compile(", got ", 0);
      mathContext0.equals(pattern0);
      int int1 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      String string0 = null;
      Character character0 = new Character('(');
      Character.isSurrogate('(');
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd((Object) null, character0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = null;
      Boolean boolean0 = jexlArithmetic0.endsWith((Object) null, bigInteger0);
      Boolean.logicalAnd(true, true);
      jexlArithmetic0.isEmpty((Object) bigInteger0, boolean0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlArithmetic0.matches(bigInteger0, bigInteger0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 679);
      int int0 = 2305;
      String string0 = "Trw\"Vos#+w6,X";
      BigInteger bigInteger1 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      bigInteger1.setBit(131);
      jexlArithmetic1.compare(bigInteger1, bigInteger1, "^[+-]?d*(.d*)?([eE][+-]?d+)?$");
      Boolean.logicalXor(true, true);
      Pattern pattern0 = Pattern.compile("Trw\"Vos#+w6,X", 2305);
      Object object1 = jexlArithmetic0.logicalNot("Trw\"Vos#+w6,X");
      // Undeclared exception!
      try { 
        jexlArithmetic1.and(pattern0, object1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(Trw\"Vos#+w6,X)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = false;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      int int0 = (-1907);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-1907));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1907
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      int int0 = 1;
      jexlArithmetic0.mapBuilder(1);
      jexlArithmetic0.isStrict();
      String string0 = "`dU+8(!<CS";
      Object object0 = jexlArithmetic0.logicalNot("`dU+8(!<CS");
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply("`dU+8(!<CS", object0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      Boolean boolean0 = jexlArithmetic1.endsWith((Object) null, mathContext0);
      Boolean.compare(true, true);
      MathContext mathContext1 = MathContext.DECIMAL32;
      mathContext1.toString();
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor(boolean0, mathContext1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      short short0 = (short)0;
      // Undeclared exception!
      try { 
        jexlArithmetic0.complement(mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      // Undeclared exception!
      try { 
        jexlArithmetic0.controlNullNullOperands();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf("lCrsiu");
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(boolean1, "lCrsiu");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"lCrsiu\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      mathContext0.getRoundingMode();
      mathContext0.equals(jexlArithmetic0);
      JexlContext jexlContext0 = null;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract((Object) null, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)25;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare(jexlArithmetic1, bigInteger0, "i?n*2g(@X~t6 kYq8");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 2);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toInteger((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      mathContext0.equals(bigInteger0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-637));
      // Undeclared exception!
      try { 
        jexlArithmetic0.toLong(mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = 13;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 13);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jexlArithmetic0;
      objectArray0[1] = (Object) jexlOptions0;
      objectArray0[2] = (Object) jexlArithmetic0;
      objectArray0[3] = (Object) jexlArithmetic1;
      objectArray0[4] = (Object) mathContext0;
      objectArray0[5] = (Object) mathContext0;
      JexlOptions jexlOptions1 = new JexlOptions();
      jexlOptions1.setLexical(false);
      jexlOptions0.set(jexlOptions1);
      jexlArithmetic1.narrowArguments(objectArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.controlNullOperand();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Long long0 = Long.getLong(">=", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger1, bigInteger1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      String string0 = "Vup";
      Integer integer0 = Integer.getInteger("Vup", 5402);
      Integer.getInteger("Vup", integer0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.size((Object) null, integer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic0.toDouble(bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(mathContext0, bigInteger0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadEngine();
      Boolean boolean0 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, boolean0);
      jexlArithmetic0.options((JexlContext) objectContext0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.roundBigDecimal(bigDecimal0);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic1.narrowAccept(class0, class0);
      jexlArithmetic1.getMathScale();
      jexlArithmetic1.isNegateStable();
  }
 @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext1 = new MathContext(0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext1, (-1943));
      // Undeclared exception!
      try { 
        jexlArithmetic2.toDouble(roundingMode0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.math.RoundingMode:(CEILING)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = false;
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = 6364;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 6364);
      Double double0 = new Double(1910.36428);
      Long long0 = new Long(3333L);
      jexlArithmetic0.size((Object) long0);
      Double.min(0.0, 878.7872731);
      jexlArithmetic0.endsWith(mathContext0, double0);
      jexlArithmetic0.positivize((Object) null);
      jexlArithmetic0.createWithOptions(true, mathContext0, (-2781));
      // Undeclared exception!
      try { 
        jexlArithmetic0.arrayBuilder((-2781));
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ArrayBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      jexlArithmetic1.isStrict();
  }
 @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, 0);
      Double double0 = new Double(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jexlArithmetic0.equals((Object) double0, (Object) bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.divide("COMPLEMENT", mathContext0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"C\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      MathContext mathContext0 = new MathContext(1914, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1914);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)60;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Integer integer0 = new Integer(150);
      jexlArithmetic0.greaterThan(bigInteger0, integer0);
      jexlArithmetic0.mapBuilder(0);
  }
 @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 300);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Float float0 = new Float((double) 300);
      Float.isFinite(300);
      // Undeclared exception!
      try { 
        jexlArithmetic2.compare(float0, "=n.", "=n.");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
      }
  }
 @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      MathContext mathContext0 = new MathContext(4211);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      CharBuffer.allocate(4211);
      jexlArithmetic1.positivize((Object) null);
      // Undeclared exception!
      try { 
        jexlArithmetic1.multiply(jexlArithmetic0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Integer integer0 = new Integer(0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic0.narrowBigInteger("Object positivize:(", integer0, bigInteger0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(0);
      Character character0 = new Character('=');
      Double double0 = new Double(0);
      jexlArithmetic_MapBuilder0.put(character0, double0);
  }
 @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(4087);
      jexlArithmetic_SetBuilder0.create();
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean((String) null);
      Boolean boolean2 = jexlArithmetic0.isEmpty((Object) boolean0, boolean1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare((Object) null, boolean2, (String) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(null null false)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic1.bitwiseXor(bigInteger0, atomicBoolean0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 'o';
      charArray0[2] = 'm';
      charArray0[3] = '5';
      charArray0[4] = '>';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 1492, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
 @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      Object object0 = jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)99);
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      Float.max(0.0F, 0.0F);
      Boolean boolean0 = new Boolean("rhH@/");
      Boolean boolean1 = jexlArithmetic0.isEmpty(object0, boolean0);
      Boolean.compare(false, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, false);
      Object object1 = jexlArithmetic0.logicalNot(boolean1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2067);
      jexlArithmetic_MapBuilder0.create();
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object1);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      jexlArithmetic_ArrayBuilder0.create(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic2.options(jexlOptions0);
  }
 @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      MathContext mathContext0 = null;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 0);
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0);
      jexlArithmetic0.contains(integer0, double0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseXor(integer0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      MathContext mathContext0 = null;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 2648);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.isEmpty((Object) null, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      jexlArithmetic1.toString((Object) pattern0);
      Double double1 = new Double(1038.679142239);
      Double double2 = new Double(0.0);
      jexlArithmetic0.logicalNot((Object) null);
  }
 @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic1.isNumberable(jexlArithmetic0);
  }
 @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-2149));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2149
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlEngine.getThreadEngine();
      // Undeclared exception!
      try { 
        jexlArithmetic0.isEmpty((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      Boolean boolean0 = jexlArithmetic0.empty(bigDecimal0);
      Double double0 = new Double(1.0);
      Object object0 = jexlArithmetic0.subtract(boolean0, double0);
      jexlArithmetic0.and(bigDecimal0, object0);
  }
 @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      mathContext0.equals(jexlArithmetic0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide((Object) null, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      Byte byte0 = new Byte((byte) (-1));
      Object object0 = jexlArithmetic0.add(byte0, (Object) null);
      mathContext0.equals(object0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Class<Pattern> class0 = Pattern.class;
      Class<BigInteger> class1 = BigInteger.class;
      jexlArithmetic1.narrowAccept(class0, class1);
  }
 @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      int int1 = 1620;
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(false, mathContext0, 1620);
      char[] charArray0 = new char[1];
      jexlArithmetic1.size((Object) mathContext0);
      char char0 = 'H';
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = new Integer(17);
      Float float0 = new Float((-2104.0));
      jexlArithmetic0.not(float0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)0);
      jexlArithmetic0.narrow(byte1);
      MapContext mapContext0 = new MapContext();
      int int0 = (-611);
      // Undeclared exception!
      try { 
        jexlArithmetic0.arrayBuilder((-611));
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ArrayBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic0.negate(bigInteger0);
      jexlArithmetic0.narrow(bigInteger0);
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 9, 9);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);
      Integer integer0 = jexlArithmetic0.size((Object) charBuffer2, (Integer) null);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(integer0, charBuffer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.nio.HeapCharBuffer:(\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 2093);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2093);
      jexlArithmetic_MapBuilder0.create();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic0.isFloatingPointNumber(pattern0);
      BigDecimal bigDecimal0 = new BigDecimal(933L);
      jexlArithmetic0.narrow(bigDecimal0);
  }
 @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      JexlArithmetic.isMultiplyExact(1L, 0L, 32767L);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlOptions0.setMathScale(281);
      jexlArithmetic1.arrayBuilder(0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      Double double0 = new Double((-2819.6932419616));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, double0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(^[+-]?\\d*(\\.\\d*)?([eE][+-]?\\d+)?$)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      long long0 = 0L;
      Long long1 = new Long(0L);
      jexlArithmetic0.toBoolean(long1);
      jexlArithmetic0.toInteger(long1);
      JexlOptions jexlOptions0 = null;
      jexlArithmetic0.greaterThan(long1, (Object) null);
      jexlArithmetic0.matches(long1, long1);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      Object object0 = jexlArithmetic0.logicalNot(long1);
      try { 
        jexlArithmetic1.createRange(object0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      boolean boolean0 = false;
      RoundingMode roundingMode0 = RoundingMode.UP;
      MathContext mathContext0 = new MathContext(7, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 7);
      MathContext mathContext1 = MathContext.UNLIMITED;
      jexlArithmetic0.not(mathContext1);
      Character character0 = new Character('z');
      Character.highSurrogate(7);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide("3ek. 2*T{ &", character0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"3e\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      Boolean boolean0 = Boolean.TRUE;
      jexlArithmetic0.size((Object) boolean0);
      MapContext mapContext0 = new MapContext();
      Double double0 = new Double((-882.15));
      Byte byte0 = new Byte((byte) (-41));
      jexlArithmetic0.divide(double0, byte0);
      Random.setNextRandom(415);
  }
 @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      JexlArithmetic.isMultiplyExact(0L, 0L, (-2893L));
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = 5184;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 5184);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 5184);
      Byte byte0 = new Byte((byte)22);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toBigDecimal(byte0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      byte byte0 = (byte) (-2);
      Byte byte1 = new Byte((byte) (-2));
      Byte.toUnsignedLong((byte) (-2));
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(byte1);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-1L), 2355L, 1659L);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.complement((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, (MathContext) null, 0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.bitwiseOr("-y>qQ", jexlArithmetic1);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"-y>qQ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic1.isStrict();
      // Undeclared exception!
      try { 
        jexlArithmetic1.toBigInteger(jexlOptions0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlOptions:(org.apache.commons.jexl3.JexlOptions@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MapContext mapContext0 = new MapContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      jexlArithmetic1.greaterThan(mapContext0, mapContext0);
  }
 @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = Boolean.TRUE;
      jexlArithmetic0.positivize(boolean0);
  }
 @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.positivize(atomicBoolean0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.isNumberable(jexlArithmetic0);
  }
 @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Boolean boolean0 = jexlArithmetic0.empty("<");
      // Undeclared exception!
      try { 
        jexlArithmetic0.or("<", boolean0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, Integer.MAX_VALUE);
      JexlOptions jexlOptions0 = null;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MAX_VALUE);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic1.narrowNumber(bigDecimal0, class0);
      String string0 = null;
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = ')';
      charArray0[2] = '9';
      charArray0[3] = '^';
      charArray0[4] = 'v';
      charArray0[5] = ';';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Boolean boolean0 = jexlArithmetic0.isEmpty((Object) charBuffer0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.isEmpty((Object) null, boolean0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Long long0 = new Long((-2172L));
      Long.compare((-2172L), (-2172L));
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 0);
      jexlArithmetic0.toString((Object) jexlArithmetic0);
      jexlArithmetic0.mapBuilder(0);
      Boolean boolean0 = (Boolean)jexlArithmetic0.logicalNot(jexlArithmetic1);
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, 3267);
      ArrayBuilder arrayBuilder0 = (ArrayBuilder)jexlArithmetic2.arrayBuilder(0);
      ArrayList arrayList0 = (ArrayList)arrayBuilder0.create(true);
      jexlArithmetic1.isEmpty((Object) arrayList0, boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      // Undeclared exception!
      try { 
        jexlArithmetic0.complement((Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, 968);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      jexlArithmetic1.greaterThan(jexlArithmetic0, (Object) null);
      jexlArithmetic1.toBigDecimal((Object) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(968);
      jexlArithmetic0.narrowLong((Object) null, bigDecimal0, 1188L);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.isFloatingPointNumber(atomicBoolean0);
      Float float0 = new Float((-2673.1737870313013));
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      jexlArithmetic0.createRange(float0, atomicBoolean1);
  }
 @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mathContext0.toString();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-1978));
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1978));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.TRUE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aOK'dH17Oa{");
      bigDecimal0.negate();
      jexlArithmetic0.mod(bigDecimal0, boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-1978));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1978
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      MathContext mathContext0 = null;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, Integer.MIN_VALUE);
      byte byte0 = (byte) (-100);
      Byte byte1 = new Byte((byte) (-100));
      String string0 = "selfXor";
      jexlArithmetic0.compare(byte1, byte1, "selfXor");
      // Undeclared exception!
      try { 
        jexlArithmetic0.add((Object) null, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MathContext mathContext0 = MathContext.DECIMAL64;
      Float float0 = new Float(0.0F);
      mathContext0.equals(float0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 20);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.math.MathContext@0000000002");
      MathContext mathContext1 = new MathContext(41);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      mathContext0.equals(fileSystemHandling1);
      atomicBoolean0.set(false);
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      MathContext mathContext2 = MathContext.DECIMAL128;
      jexlArithmetic2.startsWith("java.math.MathContext@0000000002", mathContext2);
  }
 @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".. error");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.clear();
      hashMap0.put(".. error", ".. error");
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      Object object0 = jexlArithmetic1.not("W\"Pza");
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlEngine.getThreadEngine();
      jexlOptions0.set((JexlEngine) null);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ".. error");
      Boolean boolean0 = jexlArithmetic1.contains(pattern0, charBuffer0);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, boolean0);
      jexlArithmetic2.options((JexlContext) objectContext0);
      jexlArithmetic2.getMathScale();
      Random.setNextRandom((-1928));
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object1 = jexlArithmetic0.divide(object0, bigInteger0);
      Boolean boolean1 = new Boolean(".. error");
      jexlArithmetic0.isEmpty(object1, boolean1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor("W\"Pza", (Object) null);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"W\"Pza\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic1.mapBuilder(16);
      jexlArithmetic_MapBuilder0.create();
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 31);
      JexlOptions jexlOptions0 = new JexlOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic0.contains((Object) null, (Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Long long0 = new Long(306783378L);
      jexlArithmetic1.logicalNot(long0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic1.mapBuilder(31);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      Long.getLong("GvxPy~q");
      jexlArithmetic1.empty(object0);
      String string0 = "DidAnJXpO{";
      jexlArithmetic0.matches("DidAnJXpO{", object0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.options(jexlOptions0);
      MapContext mapContext0 = new MapContext();
      jexlArithmetic2.options((JexlContext) mapContext0);
      jexlArithmetic0.isPositivizeStable();
      Short short0 = new Short((short) (-156));
      // Undeclared exception!
      try { 
        jexlArithmetic1.controlNullNullOperands();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      JexlArithmetic.isMultiplyExact(0L, 9223372036854775807L, (-1L));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 557);
      int int0 = (-1);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, (-1));
      JexlOptions jexlOptions0 = new JexlOptions();
      long long0 = 9223372036854775772L;
      // Undeclared exception!
      try { 
        jexlArithmetic1.controlNullNullOperands();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadEngine();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, (Boolean) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) objectContext0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, 6);
      Double double0 = new Double(3387.297231268);
      Boolean boolean0 = jexlArithmetic2.endsWith("\n", double0);
      jexlArithmetic0.and(boolean0, double0);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic2.isEmpty((Object) jexlArithmetic1, boolean1);
  }
 @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      Double double0 = new Double(0);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      Character character0 = Character.valueOf('a');
      jexlArithmetic0.toBigDecimal(character0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jexlArithmetic0.equals((Object) double0, (Object) bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.or(mathContext0, bigInteger0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      jexlArithmetic0.lessThanOrEqual((Object) null, (Object) null);
      Double double0 = new Double(81.0);
      Double.isFinite(81.0);
      jexlArithmetic0.compare(double0, double0, "`dUQ8(!<XS");
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mod((Object) null, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexical(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "selfDivide");
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Boolean boolean0 = jexlArithmetic0.empty(jexlArithmetic1);
      Byte byte0 = new Byte((byte)5);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      jexlOptions0.copy();
      byteArray0[3] = (byte)5;
      Byte.toUnsignedInt((byte)5);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = (BigInteger)jexlArithmetic2.narrowBigInteger(byte0, jexlArithmetic0, bigInteger0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      Integer integer0 = new Integer((byte)5);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      jexlArithmetic2.multiply(bigDecimal0, boolean0);
  }
 @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Character character0 = new Character(';');
      Object object0 = jexlArithmetic0.complement(character0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.andNot(bigInteger1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      jexlArithmetic0.complement(object1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(object0, bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte byte0 = (byte) (-20);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(atomicBoolean0, float0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      boolean boolean0 = true;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      int int0 = (-5312);
      Double double0 = new Double((-5312));
      Double double1 = new Double((-5312));
      jexlArithmetic0.matches(double0, double1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply((Object) null, double0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      jexlArithmetic0.lessThan((Object) null, mathContext0);
      jexlOptions0.getMathContext();
      jexlArithmetic0.lessThan(mathContext0, (Object) null);
  }
 @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic2.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y6};D";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      BigDecimal bigDecimal0 = new BigDecimal((-1958));
      jexlArithmetic0.toBigInteger(bigDecimal0);
      stringArray0[2] = "I 9HK+Yv*PK7(";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      jexlArithmetic3.createWithOptions(true, mathContext0, 700);
      Class<Long> class0 = Long.class;
      jexlArithmetic3.narrowAccept(class0, class0);
      jexlArithmetic2.size((Object) class0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toInteger("2ny");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"2ny\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Short short0 = new Short((short)29);
      Byte byte0 = new Byte((byte)2);
      jexlArithmetic0.greaterThan(short0, byte0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      atomicBoolean1.compareAndSet(false, false);
      jexlArithmetic0.negate(atomicBoolean1);
      Boolean boolean0 = new Boolean(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Random.setNextRandom((byte)2);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      // Undeclared exception!
      try { 
        jexlArithmetic1.toBigDecimal(pattern0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.util.regex.Pattern:(^[+-]?\\d*(\\.\\d*)?([eE][+-]?\\d+)?$)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2859));
      Short short0 = new Short((short) (-2595));
      Object object0 = jexlArithmetic0.bitwiseOr(short0, short0);
      jexlArithmetic0.startsWith(mathContext0, object0);
      jexlArithmetic0.startsWith((Object) null, (Object) null);
  }
 @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = new Short((short) (-2589));
      Object object0 = jexlArithmetic0.bitwiseOr(short0, short0);
      Long long0 = new Long((short) (-2589));
      Boolean boolean1 = new Boolean(false);
      jexlArithmetic0.negate(boolean1);
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MAX_VALUE);
      jexlArithmetic0.narrowBigDecimal(long0, bigDecimal0, bigDecimal0);
      jexlArithmetic0.startsWith(mathContext0, object0);
      try { 
        Long.parseUnsignedLong("java.lang.String@0000000006", Integer.MAX_VALUE);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // radix 2147483647 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }
 @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = Short.valueOf((short)24);
      jexlArithmetic0.logicalNot(short0);
      jexlArithmetic0.divide((Object) null, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, atomicBoolean0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Short short0 = new Short((short) (-3));
      Byte byte0 = new Byte((byte)2);
      jexlArithmetic0.greaterThan(short0, byte0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.negate(atomicBoolean1);
      jexlArithmetic0.equals(object0, (Object) atomicBoolean0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Random.setNextRandom((-2130706433));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic0.createRange(bigInteger0, short0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add((Object) null, "");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 15);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(15);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      bigDecimal0.doubleValue();
      Class<Integer> class0 = Integer.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      jexlArithmetic_MapBuilder0.create();
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      jexlArithmetic_NullOperand0.toString();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.evosuite.runtime.mock.java.lang.MockThrowable");
      jexlArithmetic_MapBuilder0.put(roundingMode0, charBuffer0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      Float float0 = new Float((double) 15);
      jexlArithmetic0.createRange(bigInteger0, float0);
  }
 @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)72);
      Double double0 = new Double((byte)72);
      Double.isFinite((byte)72);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      Byte.toUnsignedInt((byte) (-89));
      Byte.compare((byte) (-83), (byte)72);
      jexlArithmetic0.equals((Object) byte0, (Object) double0);
      Object object0 = jexlArithmetic0.or(byte0, double0);
      Byte byte1 = new Byte((byte)72);
      jexlArithmetic0.or("", byte1);
      jexlArithmetic0.positivize(number0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(false);
      Object object1 = new Object();
      jexlArithmetic1.negate(object0);
      Float.valueOf((float) (byte)72);
      jexlOptions0.setCancellable(true);
      // Undeclared exception!
      try { 
        jexlArithmetic1.controlNullNullOperands();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mathContext0.toString();
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1978));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.TRUE;
      bigDecimal0.negate();
      Character character0 = new Character('N');
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      Boolean.logicalAnd(false, true);
      Short short0 = new Short((short) (-113));
      mathContext0.getRoundingMode();
      Short.compare((short)1492, (short)1492);
      Random.setNextRandom((-377));
  }
 @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.greaterThanOrEqual(atomicBoolean0, (Object) null);
      jexlArithmetic0.greaterThan(mathContext0, "Iyyw!VUTf`4)!P6Ts<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      mathContext1.equals(objectArray0[3]);
      jexlArithmetic1.narrowArguments(objectArray0);
      jexlArithmetic1.contains(objectArray0[2], objectArray0[1]);
      Boolean.logicalXor(false, false);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jexlArithmetic1.equals((Object) pattern0, (Object) null);
      Boolean boolean0 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.lessThanOrEqual(objectArray0[1], boolean0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.math.MathContext cannot be cast to java.lang.Boolean
         //
         verifyException("java.lang.Boolean", e);
      }
  }
 @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = new Short((short)21848);
      Short.toUnsignedLong((short)21848);
      Double double0 = new Double(14.0);
      Double.sum((-1157.599), 2762L);
      Double.sum((-735.6064024954151), 0.0);
      jexlArithmetic0.mod(double0, short0);
      Double.sum(79.99953982129976, 872.9105163064205);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(double0, bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Double double0 = new Double(14.0);
      Double.sum((-735.6064024954151), 0.0);
      Double.sum(79.99953982129976, 872.9105163064205);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(double0, bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = jexlArithmetic0.size((Object) boolean0);
      MapContext mapContext0 = new MapContext();
      Double double0 = new Double((-882.15));
      jexlArithmetic0.toInteger(boolean0);
      Byte byte0 = new Byte((byte) (-41));
      Byte.toUnsignedLong((byte)4);
      jexlArithmetic0.divide(double0, byte0);
      Random.setNextRandom(415);
      Character character0 = Character.valueOf('R');
      Object object0 = jexlArithmetic0.positivize(character0);
      jexlArithmetic0.xor(integer0, object0);
  }
 @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = (-1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, (-1));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options((JexlContext) null);
      Boolean boolean0 = jexlArithmetic2.startsWith((Object) null, jexlArithmetic3);
      jexlArithmetic0.positivize(boolean0);
      jexlArithmetic0.narrowArguments((Object[]) null);
      MathContext mathContext1 = null;
      try {
        mathContext1 = new MathContext((-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException("java.math.MathContext", e);
      }
  }
 @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Double double0 = new Double(81.0);
      Double double1 = new Double((-1.0));
      Double.min(81.0, (-1.0));
      jexlArithmetic0.greaterThanOrEqual(double0, double0);
      int int0 = JexlArithmetic.BIGD_SCALE;
      JexlArithmetic.isMultiplyExact((-1), (-2147483648L), (-2569L));
      jexlArithmetic0.add("`dUQ8(!<XS", "`dUQ8(!<XS");
      BigDecimal bigDecimal0 = new BigDecimal(1100.541);
      jexlArithmetic0.empty(bigDecimal0);
  }
 @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)12;
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte)12;
      byteArray1[8] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide((Object) null, atomicBoolean0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.toDouble("");
      String string0 = "<=";
      int int0 = (-1872);
      long long0 = (-154L);
      try { 
        Long.parseUnsignedLong("[.i$JY1#\u0003U");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"[.i$JY1#\u0003U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      String string0 = "";
      jexlArithmetic0.toDouble("");
      Long.getLong("");
      String string1 = "<=";
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare((Object) null, "", "<=");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(null <= )
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.toDouble("");
      String string0 = "<=";
      int int0 = (-1872);
      long long0 = (-154L);
      try { 
        Long.parseUnsignedLong("[.i$JY1#\u0003U");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"[.i$JY1#\u0003U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      String string0 = "???";
      // Undeclared exception!
      try { 
        jexlArithmetic0.toDouble("???");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
      }
  }
 @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      int int0 = 3475;
      Random.setNextRandom(3475);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 3475);
      Number number0 = jexlArithmetic0.narrowLong(mathContext0, mathContext0, (-1L));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jexlArithmetic0.narrowBigDecimal(number0, number0, bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.controlNullNullOperands();
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 13);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jexlArithmetic1.narrow(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.xor(mathContext0, jexlArithmetic1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JexlArithmetic.isMultiplyExact(32767L, 32767L, 32767L);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      jexlArithmetic0.matches(jexlArithmetic1, (Object) null);
      Short short0 = new Short((short)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Short.toUnsignedLong((short)0);
      Short.compare((short) (-1901), (short) (-1901));
      jexlArithmetic1.toBoolean(short0);
      Integer integer0 = new Integer((short)0);
      Integer.compare(1, Integer.MIN_VALUE);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|>Vw@?2y3KJZH/P>I");
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor(integer0, "]: '");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"]: '\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      atomicBoolean1.compareAndSet(false, true);
      jexlArithmetic0.negate(atomicBoolean1);
      atomicBoolean0.lazySet(false);
      Boolean boolean0 = jexlArithmetic0.empty(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.equals((Object) boolean0, (Object) atomicBoolean0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Integer integer0 = new Integer(12);
      jexlArithmetic1.greaterThanOrEqual((Object) null, integer0);
      Random.setNextRandom((-2130706431));
      Long long0 = new Long((-2130706431));
      Boolean boolean1 = Boolean.valueOf("org.apche.commons.jexl9.JexlOptions");
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(long0, boolean1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      int int0 = 968;
      jexlOptions0.setLexicalShade(true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 968);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, 968);
      BigDecimal bigDecimal0 = new BigDecimal((long) 968);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Byte byte0 = new Byte((byte)45);
      jexlArithmetic1.options(jexlOptions0);
      Byte.compare((byte) (-2), (byte) (-84));
      Class<MathContext> class1 = MathContext.class;
      jexlArithmetic1.narrowNumber(byte0, class1);
      Character character0 = Character.valueOf('{');
      // Undeclared exception!
      try { 
        jexlArithmetic1.or(class1, character0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.lang.Class:(class java.math.MathContext)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      jexlOptions0.setLexicalShade(true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, 968);
      BigDecimal bigDecimal0 = new BigDecimal((long) 968);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic1.options(jexlOptions0);
      Byte.compare((byte) (-2), (byte) (-2));
      jexlArithmetic0.mapBuilder(968);
  }
 @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":(");
      jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.toBigInteger(object0);
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.isNegateStable();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      jexlArithmetic0.startsWith(jexlArithmetic1, (Object) null);
      jexlArithmetic0.positivize((Object) null);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      jexlArithmetic1.toInteger(atomicBoolean1);
  }
 @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger("positivize");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":(");
      jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.toBigInteger(object0);
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.isNegateStable();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      jexlArithmetic0.startsWith(jexlArithmetic1, (Object) null);
      jexlArithmetic0.positivize((Object) null);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      jexlArithmetic1.toInteger(atomicBoolean1);
  }
 @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.equals((Object) atomicBoolean0, (Object) atomicBoolean0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-1567));
      Float float0 = new Float((-2300.21705042));
      jexlArithmetic0.greaterThanOrEqual(float0, atomicBoolean0);
      jexlArithmetic0.size((Object) atomicBoolean0, integer0);
      Double double0 = new Double(55.750192);
      jexlArithmetic0.toInteger(double0);
      jexlArithmetic0.arrayBuilder(55);
      jexlArithmetic0.mapBuilder(2435);
  }
 @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.subtract((Object) null, (Object) null);
      jexlArithmetic0.contains((Object) null, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer(46);
      Boolean.compare(true, false);
      jexlArithmetic0.negate(integer0);
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '0';
      Boolean boolean0 = new Boolean(")");
      jexlArithmetic0.complement(boolean0);
      CharBuffer charBuffer0 = CharBuffer.allocate(549);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)123;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jexlArithmetic0.narrowBigInteger((Object) null, charBuffer0, bigInteger0);
      charArray0[2] = ',';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(charBuffer1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.nio.HeapCharBuffer:(&0,)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      MathContext mathContext0 = new MathContext(16, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 16);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      Double double0 = new Double((-336.9059450217716));
      // Undeclared exception!
      try { 
        jexlArithmetic1.mod(double0, jexlArithmetic0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Double coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "==";
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      byte byte0 = (byte) (-44);
      Byte byte1 = new Byte((byte) (-44));
      jexlArithmetic0.positivize(byte1);
      MapContext mapContext0 = new MapContext();
      jexlArithmetic0.greaterThan(mapContext0, mapContext0);
      Double double0 = new Double(1623.5211525459);
      Short short0 = new Short((short)978);
      CharBuffer charBuffer0 = CharBuffer.allocate((short)978);
      // Undeclared exception!
      try { 
        jexlArithmetic0.or(short0, charBuffer0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.nio.HeapCharBuffer:(\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      MathContext mathContext0 = new MathContext(36);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 31);
      jexlArithmetic0.lessThan(mathContext0, mathContext0);
      Short short0 = new Short((short)0);
      Long long0 = new Long(36);
      mathContext0.getPrecision();
      Double double0 = new Double(36);
      mathContext0.getRoundingMode();
      jexlArithmetic0.toBigInteger(double0);
      jexlArithmetic0.and(long0, double0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Byte byte0 = Byte.valueOf((byte)13);
      jexlArithmetic0.toDouble(byte0);
      jexlArithmetic0.mapBuilder(36);
      BigInteger bigInteger1 = BigInteger.TEN;
      jexlArithmetic0.isFloatingPointNumber(bigInteger1);
      Long long1 = new Long(36);
      Float float0 = new Float(0.0F);
      Float.min(1535.85F, 31);
      jexlArithmetic0.bitwiseAnd(long1, float0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 36);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic1.options(jexlOptions0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(bigDecimal0, jexlArithmetic2);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@6)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jexlArithmetic0;
      objectArray0[1] = (Object) jexlArithmetic0;
      Object object0 = null;
      Boolean boolean0 = jexlArithmetic0.empty((Object) null);
      Byte byte0 = new Byte((byte)31);
      Object object1 = jexlArithmetic0.or(boolean0, byte0);
      objectArray0[2] = object1;
      Number number0 = jexlArithmetic0.narrow(byte0);
      objectArray0[4] = (Object) jexlArithmetic0;
      objectArray0[5] = (Object) jexlArithmetic0;
      jexlArithmetic0.setBuilder((byte)31);
      Object object2 = jexlArithmetic0.divide(number0, number0);
      jexlArithmetic0.logicalNot(objectArray0[2]);
      Boolean.logicalXor(true, true);
      Byte.toUnsignedLong((byte)8);
      objectArray0[6] = (Object) jexlArithmetic0;
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      jexlArithmetic0.matches(bigDecimal0, objectArray0[2]);
      Boolean.compare(true, false);
      objectArray0[7] = (Object) jexlArithmetic0;
      jexlArithmetic0.toBoolean(object2);
      jexlArithmetic0.contains(object2, objectArray0[5]);
      jexlArithmetic0.narrowArguments(objectArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigInteger(jexlArithmetic0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean boolean0 = true;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Object object0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) jexlArithmetic0;
      // Undeclared exception!
      try { 
        jexlArithmetic0.toInteger(objectArray0[1]);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Integer coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      jexlArithmetic1.equals((Object) mathContext0, (Object) jexlArithmetic0);
      Float float0 = new Float((double) Integer.MIN_VALUE);
      jexlArithmetic1.getMathContext();
      Byte byte0 = new Byte((byte)17);
      Float.max(Integer.MIN_VALUE, (-1.0F));
      Long long0 = (Long)jexlArithmetic0.bitwiseAnd(float0, byte0);
      Long.getLong("@oPkuY>9l", long0);
      Integer integer0 = new Integer((byte)17);
      Integer integer1 = new Integer((byte)17);
      Integer integer2 = new Integer(Integer.MIN_VALUE);
      jexlArithmetic1.mapBuilder((byte)17);
      Long long1 = new Long(1L);
      Byte byte1 = new Byte((byte) (-18));
      // Undeclared exception!
      try { 
        jexlArithmetic1.divide(integer1, long0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext((Map<String, Object>) null);
      mapContext0.set("~IAduhvoX", (Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      hashMap0.put("]n^GY_8'", jexlArithmetic0);
      mapContext0.set(")", ")");
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      jexlArithmetic0.contains(mapContext0, boolean0);
      Long long0 = new Long(324L);
      Long.min((-5172L), 324L);
      Long long1 = new Long((-3061L));
      Long.getLong("DidAnJXpO{", long1);
      jexlArithmetic1.add("~IAduhvoX", mapContext0);
      jexlArithmetic1.contains(hashMap0, "]n^GY_8'");
      Long.toUnsignedString(16380L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(long0, mapContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.MapContext:(org.apache.commons.jexl3.MapContext@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      String string0 = "`dU+8(!<CS";
      Object object0 = jexlArithmetic0.logicalNot("`dU+8(!<CS");
      jexlArithmetic0.logicalNot("`dU+8(!<CS");
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic0.narrowBigInteger("`dU+8(!<CS", bigDecimal0, bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply("`dU+8(!<CS", object0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }
 @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      jexlArithmetic0.positivize(number0);
      jexlArithmetic0.negate((Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      Integer integer0 = jexlArithmetic0.size((Object) atomicBoolean0);
      Integer integer1 = new Integer((short)1);
      jexlArithmetic0.multiply(integer0, integer1);
      Float float0 = new Float((-0.33264396F));
      jexlArithmetic0.compare(number0, number0, (String) null);
      jexlArithmetic0.toDouble(atomicBoolean0);
      JexlArithmetic.isMultiplyExact((-128L), (short)1, 0L);
  }
 @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long((-2037));
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      jexlArithmetic0.positivize(number0);
      jexlArithmetic0.negate((Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      Integer integer0 = jexlArithmetic0.size((Object) atomicBoolean0);
      Integer integer1 = new Integer((short)1);
      jexlArithmetic0.multiply(integer0, integer1);
      Float float0 = new Float((-0.33264396F));
      Short short1 = new Short((short)1);
      jexlArithmetic0.toDouble(atomicBoolean0);
      JexlArithmetic.isMultiplyExact((-128L), (short)1, 0L);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 1011);
      MathContext mathContext1 = MathContext.DECIMAL128;
      // Undeclared exception!
      try { 
        jexlArithmetic1.compare(object0, mathContext1, (String) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // java.math.MathContext cannot be cast to java.lang.Boolean
         //
         verifyException("java.lang.Boolean", e);
      }
  }
 @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2058));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      Boolean boolean0 = new Boolean(true);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Long long1 = new Long(0L);
      jexlArithmetic0.positivize(long1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Integer integer0 = new Integer((short)1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, (boolean) boolean0, false);
      atomicBoolean0.lazySet(false);
      jexlArithmetic0.compare(long1, long1, (String) null);
      jexlArithmetic0.lessThan(atomicBoolean0, bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(short0, long1);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      Long.compareUnsigned((-2037), 0L);
      jexlArithmetic0.positivize(number0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      Integer integer0 = new Integer((short)1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jexlArithmetic0.compare(number0, number0, (String) null);
      jexlArithmetic0.lessThan(atomicBoolean0, bigDecimal0);
      jexlArithmetic0.mod(short0, number0);
  }
 @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-9223372036854775808L), (-1L), (-9223372036854775808L));
      Class<Long> class0 = Long.TYPE;
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.positivize(jexlArithmetic0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object positivize:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-9223372036854775808L), (-1L), (-9223372036854775808L));
      Class<Long> class0 = Long.class;
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 2207);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.positivize(jexlArithmetic0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object positivize:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Class<Short> class0 = Short.class;
      jexlArithmetic0.narrowNumber(byte0, class0);
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((byte)2);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigDecimal bigDecimal2 = jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThan(bigDecimal2, "<=");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      jexlArithmetic0.narrow((Number) null);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      Integer integer0 = new Integer((byte)2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic0.lessThanOrEqual(bigInteger0, (Object) null);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float((float) (short)1972);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      Float float1 = new Float((double) (short)1972);
      Float float2 = new Float((float) (-4440));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.empty(byte0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      MathContext mathContext0 = new MathContext(23);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 23);
      jexlArithmetic0.greaterThan(mathContext0, "Iyyw!VUTf`4)!P6Ts<");
      MathContext mathContext1 = MathContext.DECIMAL64;
      jexlArithmetic0.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic0;
      objectArray0[3] = (Object) mathContext0;
      Boolean.valueOf(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean boolean0 = jexlArithmetic0.endsWith(objectArray0[2], (Object) null);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic0.equals((Object) pattern0, (Object) boolean0);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic0.asLongNumber(boolean1);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      // Undeclared exception!
      try { 
        jexlArithmetic0.or("<=", bigDecimal0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"<=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, number0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      Integer integer0 = new Integer((-45));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)31);
      jexlArithmetic0.lessThan(atomicBoolean0, short0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
      jexlArithmetic0.getMathContext();
  }
 @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL64;
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      mathContext0.toString();
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.size((Object) mathContext0);
      mathContext0.getPrecision();
      Boolean boolean0 = Boolean.FALSE;
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer0 = Integer.getInteger("precision=16 roundingMode=HALF_EVEN", 16);
      Object object0 = new Object();
      Long long0 = new Long((-59L));
      jexlArithmetic0.add(long0, integer0);
      Pattern pattern0 = Pattern.compile("false");
      // Undeclared exception!
      try { 
        jexlArithmetic0.and("false", pattern0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"false\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      Boolean boolean0 = Boolean.FALSE;
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.endsWith(boolean0, boolean0);
      Integer integer0 = Integer.valueOf((-1578));
      Object object0 = new Object();
      Long long0 = new Long((-1578));
      jexlArithmetic0.add(long0, integer0);
      Pattern pattern0 = Pattern.compile("false");
      // Undeclared exception!
      try { 
        jexlArithmetic0.and("false", pattern0);
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"false\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = new Boolean("C");
      Boolean boolean1 = new Boolean("C");
      jexlArithmetic0.toInteger(boolean0);
      Character character0 = new Character('s');
      jexlArithmetic0.add("C", character0);
      mathContext0.getRoundingMode();
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = new Boolean("C");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Boolean boolean1 = new Boolean("C");
      jexlArithmetic0.toInteger((Object) null);
      Character character0 = Character.valueOf('s');
      jexlArithmetic0.add("C", character0);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(42);
      jexlArithmetic_SetBuilder0.add(fileSystemHandling0);
      Boolean.getBoolean("ing@0000000003");
      mathContext0.getRoundingMode();
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Integer integer0 = new Integer(2098);
      Character character0 = Character.valueOf('g');
      jexlArithmetic0.subtract(integer0, character0);
      jexlArithmetic0.logicalNot(character0);
      Integer integer1 = new Integer('g');
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true, (MathContext) null, (-2786));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, (MathContext) null, (-2786));
      Integer integer2 = new Integer(7);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) null, (Object) pattern0);
      Integer integer3 = new Integer(7);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic1.compare(atomicBoolean0, "//_'0u#~", "java\u0000lang\u0000String@0000000007");
      jexlArithmetic2.getMathContext();
      jexlArithmetic0.size((Object) "java\u0000lang\u0000String@0000000007");
  }
 @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      Integer integer0 = new Integer(7);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      Boolean boolean0 = jexlArithmetic0.empty(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal((-2786));
      jexlArithmetic0.isEmpty((Object) bigDecimal0, boolean0);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) bigInteger0;
      JexlOptions jexlOptions0 = new JexlOptions();
      int int0 = 31;
      Boolean.logicalXor(false, false);
      Integer integer1 = new Integer(31);
      Object object0 = jexlArithmetic0.subtract(bigInteger0, integer1);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) boolean0;
      objectArray0[3] = (Object) bigDecimal0;
      objectArray0[5] = (Object) bigInteger0;
      jexlArithmetic0.narrowArguments(objectArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.isEmpty((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong(">=", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigInteger0.intValue();
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      jexlArithmetic1.mapBuilder((byte)106);
      Double double0 = new Double((byte)41);
      jexlArithmetic1.bitwiseXor((Object) null, double0);
      Class<MathContext> class0 = MathContext.class;
      jexlArithmetic0.narrowNumber(double0, class0);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic1.setBuilder(182);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jexlArithmetic_SetBuilder0.add(bigDecimal1);
      jexlArithmetic0.narrowNumber(bigInteger1, class0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Float float0 = new Float((double) (byte)13);
      Boolean boolean0 = jexlArithmetic2.endsWith((Object) null, float0);
      jexlArithmetic0.isEmpty((Object) jexlArithmetic2, boolean0);
  }
 @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Number number0 = jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) "-2147483648");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-2147483648");
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      jexlArithmetic1.contains(object1, double0);
      jexlArithmetic0.isEmpty((Object) pattern0, (Boolean) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrowBigInteger((Object) null, (Object) null, bigInteger0);
      jexlArithmetic1.subtract(number0, (Object) null);
  }
 @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      Short short0 = new Short((short)2);
      jexlArithmetic0.toBigDecimal(boolean0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      Boolean boolean1 = jexlArithmetic0.empty(double3);
      jexlArithmetic0.subtract(object1, object0);
      Long long0 = new Long((-3087L));
      jexlArithmetic1.logicalNot(mathContext0);
      jexlArithmetic0.toDouble((Object) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) double1;
      Object object2 = jexlArithmetic0.not(objectArray0[0]);
      jexlArithmetic1.matches(boolean1, object2);
      objectArray0[1] = null;
      objectArray0[2] = (Object) jexlArithmetic0;
      objectArray0[3] = (Object) pattern0;
      objectArray0[4] = (Object) double3;
      jexlArithmetic0.narrowArguments(objectArray0);
  }
 @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      String string0 = "selfXor";
      mathContext0.toString();
      Pattern pattern0 = Pattern.compile("selfXor", (-1078));
      jexlArithmetic0.greaterThanOrEqual("precision=7 roundingMode=HALF_EVEN", "selfXor");
      Integer integer0 = Integer.getInteger("precision=7 roundingMode=HALF_EVEN", 16);
      jexlArithmetic1.size((Object) jexlArithmetic_MapBuilder0, integer0);
      jexlArithmetic0.toBoolean("precision=7 roundingMode=HALF_EVEN");
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, "selfXor");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.compareUnsigned((-2172L), 0L);
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      MapContext mapContext0 = new MapContext();
      jexlArithmetic0.options((JexlContext) mapContext0);
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      BigInteger bigInteger0 = BigInteger.valueOf((-2172L));
      jexlArithmetic1.complement(bigInteger0);
      Object object0 = jexlArithmetic0.logicalNot((Object) null);
      jexlArithmetic0.matches(bigInteger0, "precision=7 roundingMode=HALF_EVEN");
      Float float1 = new Float((double) (-1078));
      Character character0 = Character.valueOf('6');
      jexlArithmetic0.multiply(float1, character0);
      jexlArithmetic0.complement(object0);
      Pattern pattern0 = Pattern.compile("selfXodr", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseOr(pattern0, (Object) null);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXodr)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float.min(1.4114723F, 0.0F);
      jexlArithmetic0.toString((Object) jexlArithmetic0);
      jexlArithmetic0.mapBuilder(27);
      jexlArithmetic0.logicalNot((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "selfXor";
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-1078));
      jexlArithmetic0.lessThanOrEqual((Object) null, jexlArithmetic1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Pattern.compile("org.apache.commons.jexl3.JexlArithmetic@0000000001", 27);
      // Undeclared exception!
      try { 
        jexlArithmetic0.size((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      Long long0 = new Long(0L);
      jexlArithmetic0.bitwiseXor(long0, long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      Long long1 = (Long)jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Short.compare((short)1, (short)1630);
      Short.compare((short)1, (short)2175);
      Character character0 = new Character('Y');
      Boolean boolean0 = new Boolean(false);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      bigDecimal0.toString();
      Long long2 = new Long(2170L);
      Long.getLong((String) null, long1);
      Long long3 = (Long)jexlArithmetic0.narrowLong(bigDecimal0, long2, (-2037));
      jexlArithmetic0.greaterThan(character0, long2);
      jexlArithmetic0.positivize(long3);
      Byte byte0 = new Byte((byte)30);
      Boolean boolean1 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate("'IDU");
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object negate:('IDU)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Boolean boolean0 = (Boolean)jexlArithmetic0.not(mathContext0);
      mathContext0.toString();
      Class<String> class0 = String.class;
      short short0 = (short)1;
      Character character0 = new Character('Y');
      jexlArithmetic0.isEmpty((Object) "precision=7 roundingMode=HALF_EVEN", boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(mathContext0, class0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(precision=7 roundingMode=HALF_EVEN <= class java.lang.String)
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      jexlArithmetic0.equals((Object) pattern0, object0);
      MathContext mathContext0 = new MathContext(13);
      jexlArithmetic0.add(object0, "?b7A");
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 13);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      String string0 = "_O6w2p";
      stringArray0[1] = "-Q<S(c0j.&U,m}A";
      stringArray0[2] = "-Q<S(c0j.&U,m}A";
      stringArray0[3] = "]: '";
      stringArray0[4] = "annotation";
      // Undeclared exception!
      try { 
        jexlOptions0.setFlags(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlOptions", e);
      }
  }
 @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext1 = new MathContext(0);
      jexlOptions0.copy();
      MathContext mathContext2 = MathContext.DECIMAL128;
      Long long0 = new Long(314L);
      jexlArithmetic0.mod((Object) null, long0);
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(true, mathContext2, 0);
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic2.contains(boolean0, jexlArithmetic1);
      jexlOptions0.getMathContext();
      Object object0 = jexlArithmetic0.multiply((Object) null, (Object) null);
      jexlArithmetic1.toLong(object0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic1.empty(bigInteger0);
      Boolean boolean1 = jexlArithmetic2.contains(jexlArithmetic1, (Object) null);
      jexlArithmetic1.positivize(boolean1);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(0);
      jexlArithmetic_SetBuilder0.create();
      Float float0 = new Float((float) 0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(long0, float0);
        fail("Expecting exception: ArithmeticException");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException("org.apache.commons.jexl3.JexlArithmetic", e);
      }
  }
 @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
      assertNotNull(number0);
}
 @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      Integer integer2 = new Integer((-2776));
      jexlArithmetic0.size((Object) bigInteger0, integer2);
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = jexlArithmetic0.narrowAccept(class0, class0);
      Boolean boolean1 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      Integer integer2 = new Integer((-2776));
      jexlArithmetic0.size((Object) bigInteger0, integer2);
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = jexlArithmetic0.narrowAccept(class0, class0);
      Boolean boolean1 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) bigInteger0;
      objectArray0[3] = (Object) float0;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) number0;
      objectArray0[0] = (Object) mathContext0;
      boolean boolean2 = jexlArithmetic1.narrowArguments(objectArray0);
      assertEquals(0, jexlArithmetic1.getMathScale());
}
 @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      Integer integer2 = new Integer((-2776));
      jexlArithmetic0.size((Object) bigInteger0, integer2);
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = jexlArithmetic0.narrowAccept(class0, class0);
      Boolean boolean1 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) bigInteger0;
      objectArray0[3] = (Object) float0;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) number0;
      objectArray0[0] = (Object) mathContext0;
      boolean boolean2 = jexlArithmetic1.narrowArguments(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      Integer integer2 = new Integer((-2776));
      jexlArithmetic0.size((Object) bigInteger0, integer2);
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = jexlArithmetic0.narrowAccept(class0, class0);
      Boolean boolean1 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) bigInteger0;
      objectArray0[3] = (Object) float0;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) number0;
      objectArray0[0] = (Object) mathContext0;
      boolean boolean2 = jexlArithmetic1.narrowArguments(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      Integer integer2 = new Integer((-2776));
      jexlArithmetic0.size((Object) bigInteger0, integer2);
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = jexlArithmetic0.narrowAccept(class0, class0);
      Boolean boolean1 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) bigInteger0;
      objectArray0[3] = (Object) float0;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) number0;
      objectArray0[0] = (Object) mathContext0;
      boolean boolean2 = jexlArithmetic1.narrowArguments(objectArray0);
      assertTrue(boolean2);
}
}
