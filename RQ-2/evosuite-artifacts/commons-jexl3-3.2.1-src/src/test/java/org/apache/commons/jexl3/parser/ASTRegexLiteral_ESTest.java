/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:18:55 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.parser.ASTRegexLiteral;
import org.apache.commons.jexl3.parser.FeatureController;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.ParserVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ASTRegexLiteral_ESTest extends ASTRegexLiteral_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral((-3016));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTRegexLiteral0.jjtAccept(featureController0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral((-3016));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      JexlFeatures jexlFeatures1 = (JexlFeatures)aSTRegexLiteral0.jjtAccept(featureController0, jexlFeatures0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral((-1835));
      // Undeclared exception!
      try { 
        aSTRegexLiteral0.setLiteral("RP)\"h|;h3O=i|fj");
        fail("Expecting exception: PatternSyntaxException");
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // RP)\"h|;h3O=i|fj
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral((-204));
      // Undeclared exception!
      try { 
        aSTRegexLiteral0.setLiteral((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(0);
      Pattern pattern0 = aSTRegexLiteral0.getLiteral();
      // Undeclared exception!
      try { 
        aSTRegexLiteral0.jjtAccept((ParserVisitor) null, pattern0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.ASTRegexLiteral", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral((-204));
      aSTRegexLiteral0.setLiteral("Integer coercion: ");
      String string0 = aSTRegexLiteral0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(0);
      String string0 = aSTRegexLiteral0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(0);
      aSTRegexLiteral0.setLiteral("");
      Pattern pattern0 = aSTRegexLiteral0.getLiteral();
      assertNotNull(pattern0.toString());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(0);
      boolean boolean0 = aSTRegexLiteral0.isConstant(false);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Parser parser0 = new Parser("KFIT:Im*V|ho");
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(parser0, 3);
      Pattern pattern0 = aSTRegexLiteral0.getLiteral();
      assertNotNull(pattern0);
}
}
