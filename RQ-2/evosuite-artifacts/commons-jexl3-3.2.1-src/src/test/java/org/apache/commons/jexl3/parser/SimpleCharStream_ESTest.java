/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:20:10 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import org.apache.commons.jexl3.parser.AbstractCharStream;
import org.apache.commons.jexl3.parser.Provider;
import org.apache.commons.jexl3.parser.SimpleCharStream;
import org.apache.commons.jexl3.parser.StreamProvider;
import org.apache.commons.jexl3.parser.StringProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCharStream_ESTest extends SimpleCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1849, 1849, 1849);
      simpleCharStream0.streamClose();
      assertEquals(4096, AbstractCharStream.DEFAULT_BUF_SIZE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_U(T9p9iDn-Rg[");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      char[] charArray0 = new char[4];
      int int0 = simpleCharStream0.streamRead(charArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("Cj$/,Inv%0Cx?(_\"Ck");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 9, 0);
      char[] charArray0 = new char[9];
      int int0 = simpleCharStream0.streamRead(charArray0, 0, 4081);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("8+PTg");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 1104);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead(charArray0, 1104, 1104);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("'u`uMFNe2dt5k");
      stringProvider0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1067, 1067);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead(charArray0, (-270), 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.StringProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":?gZ@zCZ");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 6, (-3363));
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        simpleCharStream0.streamRead(charArray0, (-3363), (-3363));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q#f`");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0, 7992, 7992);
      // Undeclared exception!
      try { 
        simpleCharStream0.reInit((Provider) streamProvider0, (-1), 15, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("l$<l\"aIq`");
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(stringProvider0, (-3368), 5, (-3368));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.AbstractCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1849, 1849, 1849);
      simpleCharStream0.reInit((Provider) stringProvider0);
      assertTrue(simpleCharStream0.isTrackLineColumn());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1849, 1849, 1849);
      simpleCharStream0.reInit((Provider) stringProvider0, 1244, (-2202));
      assertEquals(0, simpleCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w}?");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      streamProvider0.close();
      char[] charArray0 = new char[5];
      try { 
        simpleCharStream0.streamRead(charArray0, 0, 1882);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("");
      char[] charArray0 = new char[3];
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1849, 1849, 1849);
      int int0 = simpleCharStream0.streamRead(charArray0, 1849, 648);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-2565), (-2565));
      // Undeclared exception!
      try { 
        simpleCharStream0.streamClose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Provider) null, (-2565), (-2565));
      simpleCharStream0.reInit((Provider) null, (-2565), (-419), 8);
      assertEquals(0, simpleCharStream0.getBeginLine());
  }
}
