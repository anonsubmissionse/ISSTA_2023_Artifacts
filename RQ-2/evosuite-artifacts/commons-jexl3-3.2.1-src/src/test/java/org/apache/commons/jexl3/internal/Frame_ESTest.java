/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:11:43 GMT 2022
 */

package org.apache.commons.jexl3.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jexl3.internal.Frame;
import org.apache.commons.jexl3.internal.Scope;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Frame_ESTest extends Frame_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      boolean boolean0 = frame0.has(1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "][$O";
      stringArray0[1] = "=u.";
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame((Scope) null, stringArray0, 1);
      Frame frame1 = scope0.createFrame(frame0, stringArray0);
      boolean boolean0 = frame1.equals(frame0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      frame0.set(0, (Object) null);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(scope0).getParameters(anyInt());
      String[] stringArray0 = new String[3];
      Frame frame0 = new Frame(scope0, stringArray0, (-1326));
      String[] stringArray1 = frame0.getUnboundParameters();
      assertNotNull(stringArray1);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      String[] stringArray1 = frame0.getUnboundParameters();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Frame frame0 = new Frame((Scope) null, objectArray0, 137);
      Scope scope0 = frame0.getScope();
      assertNotNull(scope0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      Frame frame0 = new Frame(scope0, (Object[]) null, 1);
      Scope scope1 = frame0.getScope();
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Object object0 = frame0.get(0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]w~&]a10m{@2oKL";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Object object0 = frame0.get(0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      Integer integer0 = new Integer((-874));
      // Undeclared exception!
      try { 
        frame0.set(0, integer0);
        fail("Expecting exception: ArrayStoreException");
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, (-2389));
      // Undeclared exception!
      try { 
        frame0.set((-2389), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2389
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      Frame frame0 = new Frame(scope0, (Object[]) null, 1);
      // Undeclared exception!
      try { 
        frame0.has(1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Frame frame0 = new Frame((Scope) null, stringArray0, 1);
      // Undeclared exception!
      try { 
        frame0.getUnboundParameters();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      stringArray0[1] = "W\"U(h]XxV";
      stringArray0[2] = ">4('s, b.o3u*";
      stringArray0[3] = "";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      scope1.declareVariable("?");
      // Undeclared exception!
      try { 
        frame0.getUnboundParameters();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.jexl3.internal.Scope", e);
      }
  }
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = scope1.createFrame((Frame) null, stringArray0);
      // Undeclared exception!
      try { 
        frame0.get(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Frame frame0 = new Frame((Scope) null, objectArray0, 3819);
      // Undeclared exception!
      try { 
        frame0.assign(objectArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Object[] objectArray0 = new Object[9];
      String[] stringArray1 = scope1.getLocalVariables();
      Frame frame0 = new Frame(scope1, objectArray0, 1);
      // Undeclared exception!
      try { 
        frame0.assign(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(0)
         //
         verifyException("java.util.Arrays", e);
      }
  }
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) frame0;
      // Undeclared exception!
      try { 
        frame0.assign(objectArray0);
        fail("Expecting exception: ArrayStoreException");
      } catch(ArrayStoreException e) {
      }
  }
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-560));
      // Undeclared exception!
      try { 
        frame0.assign(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[16];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 3);
      Frame frame1 = frame0.assign(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Frame frame1 = scope1.createFrame(frame0, (Object[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      Frame frame0 = new Frame(scope0, (Object[]) null, 1);
      Frame frame1 = frame0.assign((Object[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      scope1.declareVariable("");
      Frame frame0 = scope1.createFrame((Frame) null, stringArray0);
      boolean boolean0 = frame0.has(0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[16];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 3);
      boolean boolean0 = frame0.has(3);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      boolean boolean0 = frame0.has(2737);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, (-2389));
      boolean boolean0 = frame0.has((-2389));
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, (-1));
      boolean boolean0 = frame0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      Integer integer0 = new Integer((-874));
      boolean boolean0 = frame0.equals(integer0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, 0);
      // Undeclared exception!
      try { 
        frame0.set(0, scope1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      frame0.hashCode();
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Scope scope2 = frame0.getScope();
      ;
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, (-1));
      // Undeclared exception!
      try { 
        frame0.get((-1));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, (-1));
      String[] stringArray0 = frame0.getUnboundParameters();
      ;
}
}
