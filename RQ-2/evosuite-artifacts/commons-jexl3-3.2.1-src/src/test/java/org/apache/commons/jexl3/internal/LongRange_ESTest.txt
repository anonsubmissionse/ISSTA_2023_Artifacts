 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-2168L), (-2168L));
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = longRange0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-2168L), (-2168L));
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = longRange0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-5148L), (-119L));
      Object[] objectArray0 = longRange0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-5148L), (-119L));
      Object[] objectArray0 = longRange0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(13L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(13L, 13L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(13L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(13L, 13L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(13L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(13L, 13L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange longRange0 = LongRange.create(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange0);
      assertEquals(0, longRange0.size());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange longRange0 = LongRange.create(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange longRange0 = LongRange.create(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-1531L), (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-1531L), (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-1009L), (-1009L));
      longRange0.hashCode();
      assertEquals(0, longRange0.size());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(66L, (-2873L));
      longRange_Ascending0.hashCode();
      assertEquals(0, longRange_Ascending0.size());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-2779L), (-2779L));
      longRange_Descending0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-5148L), (-119L));
      longRange0.iterator();
      assertEquals(1, longRange0.size());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1L, 0L);
      Object[] objectArray0 = longRange_Descending0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1L, 0L);
      Object[] objectArray0 = longRange_Descending0.toArray();
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      int int0 = longRange0.size();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(2865L, 732L);
      int int0 = longRange_Ascending0.size();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 1L);
      long long0 = longRange_Descending0.getMin();
      assertEquals(1, long0);
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 1L);
      long long0 = longRange_Descending0.getMin();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1120L, 1120L);
      long long0 = longRange_Descending0.getMin();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1120L, 1120L);
      long long0 = longRange_Descending0.getMin();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(0L, 0L);
      long long0 = longRange_Ascending0.getMax();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      long long0 = longRange0.getMax();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      long long0 = longRange0.getMax();
      assertEquals(1, longRange0.size());
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LongRange longRange0 = LongRange.create(0L, 0L);
      assertTrue(longRange0.isEmpty());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-1563L), 0L);
      // Undeclared exception!
      try { 
        longRange_Ascending0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1615L, 0L);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        longRange_Descending0.toArray(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1614
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(2913L, 1L);
      // Undeclared exception!
      try { 
        longRange_Ascending0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-189L), 0L);
      // Undeclared exception!
      try { 
        longRange0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      Byte byte0 = new Byte((byte) (-13));
      boolean boolean0 = longRange_Descending0.contains(byte0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      Float float0 = new Float((float) 3009);
      boolean boolean0 = longRange0.contains(float0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      Float float0 = new Float((float) 3009);
      boolean boolean0 = longRange0.contains(float0);
      assertEquals(0, longRange0.getMin());
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, 3810L);
      Object object0 = new Object();
      boolean boolean0 = longRange0.contains(object0);
      assertEquals(0, longRange0.size());
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, 3810L);
      Object object0 = new Object();
      boolean boolean0 = longRange0.contains(object0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1L, 0L);
      int int0 = longRange_Descending0.size();
      ;
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(0L, 597L);
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(0L, 597L);
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
      ;
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-2627L));
      LongRange.Ascending[] longRange_AscendingArray0 = new LongRange.Ascending[9];
      // Undeclared exception!
      try { 
        longRange0.toArray(longRange_AscendingArray0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-442L), (-442L));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((double) (-442L));
      linkedList0.addFirst(float0);
      boolean boolean0 = longRange0.containsAll(linkedList0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-442L), (-442L));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((double) (-442L));
      linkedList0.addFirst(float0);
      boolean boolean0 = longRange0.containsAll(linkedList0);
      assertEquals(0, longRange0.getMax());
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-33L), (-33L));
      Byte byte0 = new Byte((byte)8);
      boolean boolean0 = longRange_Descending0.contains(byte0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-33L), (-33L));
      Byte byte0 = new Byte((byte)8);
      boolean boolean0 = longRange_Descending0.contains(byte0);
      ;
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-12L), (-5554L));
      LinkedList<LongRange.Ascending> linkedList0 = new LinkedList<LongRange.Ascending>();
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-5554L), (-5554L));
      linkedList0.add(longRange_Ascending0);
      boolean boolean0 = longRange_Descending0.containsAll(linkedList0);
      assertEquals(0, longRange_Descending0.size());
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-12L), (-5554L));
      LinkedList<LongRange.Ascending> linkedList0 = new LinkedList<LongRange.Ascending>();
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-5554L), (-5554L));
      linkedList0.add(longRange_Ascending0);
      boolean boolean0 = longRange_Descending0.containsAll(linkedList0);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      assertEquals(0, longRange_Descending1.size());
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      ;
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(29L, 264L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(264L, 264L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(29L, 264L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(264L, 264L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(29L, 264L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(264L, 264L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
      assertEquals(1, longRange_Descending0.getMax());
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(4L, 4L);
      boolean boolean0 = longRange_Descending0.equals((Object) null);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(4L, 4L);
      boolean boolean0 = longRange_Descending0.equals((Object) null);
      assertEquals(0, longRange_Descending0.getMax());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-584L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        longRange0.addAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-33L), (-33L));
      boolean boolean0 = longRange_Descending0.isEmpty();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-33L), (-33L));
      boolean boolean0 = longRange_Descending0.isEmpty();
      assertEquals(0, longRange_Descending0.getMax());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-584L));
      long long0 = longRange0.getMin();
      assertEquals(0, longRange0.size());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-584L));
      long long0 = longRange0.getMin();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
      boolean boolean0 = longRange_Ascending0.equals(objectArray0[0]);
      ;
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
      boolean boolean0 = longRange_Ascending0.equals(objectArray0[0]);
      assertEquals(0, longRange_Ascending0.size());
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
      boolean boolean0 = longRange_Ascending0.equals(objectArray0[0]);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      long long0 = longRange_Ascending0.getMax();
      ;
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      long long0 = longRange_Ascending0.getMax();
      assertEquals(0, long0);
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-2979L), (-442L));
      Short short0 = new Short((short)1289);
      // Undeclared exception!
      try { 
        longRange0.remove(short0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-12L), (-5554L));
      // Undeclared exception!
      try { 
        longRange_Descending0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(1119L, 0L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        longRange_Ascending0.removeAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        longRange_Descending0.add(long0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-584L));
      longRange0.iterator();
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-1209L), 2632L);
      LinkedList<LongRange.Ascending> linkedList0 = new LinkedList<LongRange.Ascending>();
      // Undeclared exception!
      try { 
        longRange0.retainAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LongRange", e);
      }
  }
