 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"null\"";
      stringArray0[1] = "%EihMN,O:$";
      stringArray0[2] = " : not supported yet.";
      stringArray0[3] = "!= error";
      stringArray0[4] = "(%kW7";
      stringArray0[5] = "O%IVdu/\"ke";
      stringArray0[6] = "Wt._Gb`D0KAnKe1";
      JexlOptions.setDefaultFlags(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrictArithmetic(false);
      jexlOptions0.set(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertFalse(jexlOptions1.isSilent());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertFalse(jexlOptions0.isStrict());
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSilent(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertTrue(jexlOptions0.isSilent());
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSilent(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setCancellable(false);
      jexlOptions0.set(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertFalse(jexlOptions1.isSafe());
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(0);
      jexlOptions0.set(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(130);
      jexlOptions0.set(jexlOptions0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      jexlOptions0.set((JexlEngine) engine0);
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      jexlOptions0.set((JexlEngine) engine0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
      assertFalse(jexlOptions1.isSilent());
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
      assertTrue(jexlOptions0.isSafe());
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
      assertFalse(jexlOptions1.isSharedInstance());
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
      assertFalse(jexlOptions1.isSharedInstance());
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      jexlOptions0.set((JexlEngine) engine0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      jexlOptions0.set((JexlEngine) engine0);
      assertEquals(1, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setMathScale(0);
      jexlOptions0.set((JexlEngine) null);
      assertEquals(1, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(2320);
      jexlOptions0.set((JexlEngine) null);
      assertEquals(1, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = JexlOptions.parseFlags(0, stringArray0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = JexlOptions.parseFlags((-1227), stringArray0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrictArithmetic(false);
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      ;
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      boolean boolean0 = jexlOptions0.isStrict();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isSilent());
}
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSilent(true);
      boolean boolean0 = jexlOptions0.isSilent();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      assertFalse(jexlOptions0.isSharedInstance());
}
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      boolean boolean0 = jexlOptions0.isSharedInstance();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      ;
}
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      boolean boolean0 = jexlOptions0.isSafe();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlBuilder0.lexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexicalShade();
      assertTrue(jexlOptions0.isLexical());
}
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlBuilder0.lexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexicalShade();
      assertFalse(jexlOptions0.isSharedInstance());
}
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlBuilder0.lexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexicalShade();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexical();
      ;
}
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexical();
      ;
}
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexical();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setCancellable(false);
      boolean boolean0 = jexlOptions0.isCancellable();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      JexlEngine jexlEngine0 = jexlBuilder1.create();
      jexlOptions0.set(jexlEngine0);
      boolean boolean0 = jexlOptions0.isAntish();
      assertEquals(1, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      JexlEngine jexlEngine0 = jexlBuilder1.create();
      jexlOptions0.set(jexlEngine0);
      boolean boolean0 = jexlOptions0.isAntish();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.getNamespaces();
      assertTrue(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.getNamespaces();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.getNamespaces();
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.getNamespaces();
      assertTrue(jexlOptions0.isSilent());
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("r 5ui8", object0);
      JexlBuilder jexlBuilder1 = jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("r 5ui8", object0);
      JexlBuilder jexlBuilder1 = jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
      jexlOptions0.getNamespaces();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(0);
      int int0 = jexlOptions0.getMathScale();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(1327);
      int int0 = jexlOptions0.getMathScale();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertFalse(jexlOptions1.isSilent());
}
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertTrue(jexlOptions0.isStrict());
}
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertTrue(jexlOptions1.isStrict());
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertFalse(jexlOptions0.isSharedInstance());
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertTrue(jexlOptions1.isSafe());
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      jexlOptions0.copy();
      assertFalse(jexlOptions0.isSafe());
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      jexlOptions0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertTrue(jexlOptions1.isSafe());
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertTrue(jexlOptions0.isLexicalShade());
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setCancellable(false);
      jexlOptions0.copy();
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(false);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertTrue(jexlOptions0.isAntish());
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(false);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
      assertFalse(jexlOptions1.isSharedInstance());
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setMathScale(0);
      jexlOptions0.copy();
      assertEquals(1, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(2320);
      jexlOptions0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        jexlOptions0.setFlags(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        jexlOptions0.setFlags(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlOptions", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        JexlOptions.setDefaultFlags(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      // Undeclared exception!
      try { 
        jexlOptions0.set((JexlOptions) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlOptions", e);
      }
  }
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "( $<'&f'|4*ccc";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        JexlOptions.parseFlags(1544, stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2miTzz/v";
      stringArray0[1] = "2miTzz/v";
      stringArray0[2] = "IWNs4 vGC3qomMuwZd";
      stringArray0[3] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";
      stringArray0[4] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";
      stringArray0[5] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";
      stringArray0[6] = "2miTzz/v";
      stringArray0[7] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";
      stringArray0[8] = "-@;uh6PgYvyb-";
      int int0 = JexlOptions.parseFlags(107, stringArray0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "strict";
      stringArray0[1] = "RB|jI!";
      stringArray0[2] = "\"=$\"";
      stringArray0[3] = "safe";
      stringArray0[4] = "+]6=F azNwAnRqIi";
      stringArray0[5] = "DFnt'7^|eCd;";
      stringArray0[6] = "rG$>WBY)rM#ITy>T-ot";
      stringArray0[7] = "=DK}Lu";
      stringArray0[8] = "org.apache.commons.jexl3.parser.ASTNumberLiteral";
      int int0 = JexlOptions.parseFlags(74, stringArray0);
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isSilent();
      ;
}
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isSilent();
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isSilent();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isSilent();
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isSilent();
      assertTrue(jexlOptions0.isSafe());
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrict();
      assertFalse(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrict();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrict();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrict();
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrict();
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = MathContext.DECIMAL128;
      jexlOptions0.setMathContext(mathContext0);
      assertTrue(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = MathContext.DECIMAL128;
      jexlOptions0.setMathContext(mathContext0);
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = MathContext.DECIMAL128;
      jexlOptions0.setMathContext(mathContext0);
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = MathContext.DECIMAL128;
      jexlOptions0.setMathContext(mathContext0);
      assertTrue(jexlOptions0.isSafe());
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSafe();
      assertTrue(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSafe();
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSafe();
      ;
}
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSafe();
      ;
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSafe();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      assertTrue(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrictArithmetic(false);
      jexlOptions0.copy();
      ;
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setNamespaces((Map<String, Object>) null);
      assertTrue(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setNamespaces((Map<String, Object>) null);
      assertTrue(jexlOptions0.isAntish());
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setNamespaces((Map<String, Object>) null);
      assertEquals(1, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setNamespaces((Map<String, Object>) null);
      ;
}
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlOptions0.setNamespaces(map0);
      assertTrue(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlOptions0.setNamespaces(map0);
      assertEquals(1, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlOptions0.setNamespaces(map0);
      assertTrue(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlOptions0.setNamespaces(map0);
      assertTrue(jexlOptions0.isLexical());
}
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertFalse(jexlOptions1.isSharedInstance());
}
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
      assertTrue(jexlOptions0.isLexical());
}
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
      assertFalse(jexlOptions0.isLexicalShade());
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
      ;
}
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
      ;
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
      assertTrue(jexlOptions0.isLexical());
}
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-@;uh6egYvyb-";
      // Undeclared exception!
      try { 
        JexlOptions.setDefaultFlags(stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlOptions", e);
      }
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "strict";
      stringArray0[1] = "+]6=F azNwAnRqIi";
      // Undeclared exception!
      try { 
        JexlOptions.parseFlags(74, stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.JexlOptions", e);
      }
  }
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isLexical();
      ;
}
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isLexical();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isLexical();
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isLexical();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isLexical();
      assertTrue(jexlOptions0.isStrict());
}
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isAntish();
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isAntish();
      ;
}
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isAntish();
      ;
}
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isAntish();
      ;
}
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isAntish();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      ;
}
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      ;
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      ;
}
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      assertFalse(jexlOptions0.isAntish());
}
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[0];
      jexlOptions0.setFlags(stringArray0);
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[0];
      jexlOptions0.setFlags(stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[0];
      jexlOptions0.setFlags(stringArray0);
      assertTrue(jexlOptions0.isSilent());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[0];
      jexlOptions0.setFlags(stringArray0);
      assertTrue(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSharedInstance();
      ;
}
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSharedInstance();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSharedInstance();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSharedInstance();
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSharedInstance();
      ;
}
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isCancellable();
      assertFalse(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isCancellable();
      assertFalse(jexlOptions0.isStrict());
}
 @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isCancellable();
      ;
}
 @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isCancellable();
      assertFalse(jexlOptions0.isSharedInstance());
}
 @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isCancellable();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
      ;
}
 @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
      assertTrue(jexlOptions0.isAntish());
}
 @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
      assertTrue(jexlOptions0.isLexical());
}
 @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
      assertTrue(jexlOptions0.isSafe());
}
 @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
      ;
}
 @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
      assertFalse(jexlOptions0.isSharedInstance());
}
 @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
      ;
}
 @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
      ;
}
 @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
      assertFalse(jexlOptions0.isSilent());
}
 @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isLexicalShade();
      assertTrue(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isLexicalShade();
      assertEquals(0, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isLexicalShade();
      assertFalse(jexlOptions0.isCancellable());
}
 @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isLexicalShade();
      assertTrue(jexlOptions0.isStrict());
}
 @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isLexicalShade();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      assertEquals(1, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      engine0.optionsSet(jexlOptions0);
      jexlOptions0.getMathContext();
      assertEquals(1, jexlOptions0.getMathScale());
}
 @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      int int0 = jexlOptions0.getMathScale();
      ;
}
 @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      int int0 = jexlOptions0.getMathScale();
      assertEquals(1, int0);
}
 @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      int int0 = jexlOptions0.getMathScale();
      assertTrue(jexlOptions0.isStrictArithmetic());
}
 @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      int int0 = jexlOptions0.getMathScale();
      assertFalse(jexlOptions0.isSafe());
}
