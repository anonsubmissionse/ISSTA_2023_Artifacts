 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Parser parser0 = new Parser("");
      ASTReferenceExpression aSTReferenceExpression0 = new ASTReferenceExpression(parser0, 47);
      FeatureController featureController0 = parser0.featureController;
      Object object0 = aSTReferenceExpression0.jjtAccept(featureController0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Parser parser0 = new Parser("W");
      ASTReferenceExpression aSTReferenceExpression0 = new ASTReferenceExpression(parser0, 76);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        aSTReferenceExpression0.jjtAccept((ParserVisitor) null, sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.ASTReferenceExpression", e);
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Parser parser0 = new Parser("");
      ASTReferenceExpression aSTReferenceExpression0 = new ASTReferenceExpression(parser0, 47);
      FeatureController featureController0 = parser0.featureController;
      Object object0 = aSTReferenceExpression0.jjtAccept(featureController0, "");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTReferenceExpression aSTReferenceExpression0 = new ASTReferenceExpression((-1));
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Boolean boolean0 = new Boolean("\"^\"");
      boolean boolean1 = operatorController0.control(aSTReferenceExpression0, boolean0);
      assertTrue(boolean1);
}
