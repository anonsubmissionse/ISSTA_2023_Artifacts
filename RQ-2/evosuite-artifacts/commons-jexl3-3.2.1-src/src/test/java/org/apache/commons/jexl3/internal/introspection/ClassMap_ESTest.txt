 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Permissions permissions0 = new Permissions();
      SimpleLog simpleLog0 = new SimpleLog("org.apache.commons.logging.impl.SimpleLog");
      ClassMap classMap0 = new ClassMap(class0, permissions0, simpleLog0);
      String[] stringArray0 = classMap0.getFieldNames();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      Permissions permissions0 = new Permissions();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      // Undeclared exception!
      try { 
        classMap0.getMethod((MethodKey) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Permissions permissions0 = new Permissions();
      SimpleLog simpleLog0 = new SimpleLog("notify");
      simpleLog0.setLevel(2);
      ClassMap classMap0 = new ClassMap(class0, permissions0, simpleLog0);
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("");
      ClassMap classMap0 = null;
      try {
        classMap0 = new ClassMap((Class<?>) null, (Permissions) null, jdk14Logger0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Permissions permissions0 = new Permissions();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("hashCode");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      Method method0 = ClassMap.cacheMiss();
      MethodKey methodKey0 = new MethodKey(method0);
      try { 
        classMap0.getMethod(methodKey0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.introspection.MethodKey$Parameters", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Permissions permissions0 = Permissions.DEFAULT;
      NoOpLog noOpLog0 = new NoOpLog("Unexpected InvocationTargetException");
      ClassMap classMap0 = new ClassMap(class0, permissions0, noOpLog0);
      MethodKey methodKey0 = new MethodKey("Unexpected InvocationTargetException", (Object[]) null);
      classMap0.getMethod(methodKey0);
      Method method0 = classMap0.getMethod(methodKey0);
      ;
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      Class<ClassMap> class0 = ClassMap.class;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("notify");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      Method[] methodArray0 = classMap0.getMethods("notify");
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<ClassMap> class0 = ClassMap.class;
      Permissions permissions0 = Permissions.DEFAULT;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("hszR|T?/Mn");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      Method[] methodArray0 = classMap0.getMethods("hszR|T?/Mn");
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      Class<ClassMap> class0 = ClassMap.class;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("notify");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      Field field0 = classMap0.getField("notify");
      assertNotNull(field0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Permissions permissions0 = Permissions.DEFAULT;
      NoOpLog noOpLog0 = new NoOpLog();
      ClassMap classMap0 = new ClassMap(class0, permissions0, noOpLog0);
      String[] stringArray0 = classMap0.getMethodNames();
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      Class<ClassMap> class0 = ClassMap.class;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("notify");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      String[] stringArray0 = classMap0.getFieldNames();
      MethodKey methodKey0 = new MethodKey("notify", stringArray0);
      Method method0 = classMap0.getMethod(methodKey0);
      ;
}
