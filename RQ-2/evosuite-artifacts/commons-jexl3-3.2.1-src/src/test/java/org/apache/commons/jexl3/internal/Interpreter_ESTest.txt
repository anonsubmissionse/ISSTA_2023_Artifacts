 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = Double.valueOf(0.0);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(60);
      Interpreter.AnnotatedCall interpreter_AnnotatedCall0 = interpreter0.new AnnotatedCall(aSTAnnotatedStatement0, (-852), templateInterpreter_Arguments0);
      try { 
        interpreter_AnnotatedCall0.call();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(601);
      Interpreter.AnnotatedCall interpreter_AnnotatedCall0 = templateInterpreter0.new AnnotatedCall(aSTAnnotatedStatement0, 601, templateInterpreter0);
      try { 
        interpreter_AnnotatedCall0.call();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[0];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-3215));
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript((Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(parser0, 3);
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(parser0, (-3215));
      aSTUnaryMinusNode0.jjtAddChild(aSTIfStatement0, 3);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTUnaryMinusNode0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(129);
      Script script0 = new Script(engine0, "5;OhwE$#", aSTJexlScript0);
      Object[] objectArray0 = new Object[7];
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Closure closure0 = new Closure(script0, objectArray0);
      Object object0 = templateInterpreter0.visitLexicalNode(aSTJexlScript0, closure0);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(1642);
      Object object0 = templateInterpreter0.visitLexicalNode(aSTExtendedLiteral0, (Object) null);
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      String[] stringArray0 = new String[4];
      ASTStringLiteral aSTStringLiteral0 = mock(ASTStringLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0]).when(aSTStringLiteral0).getLiteral();
      Object object0 = templateInterpreter0.visit(aSTStringLiteral0, stringArray0[0]);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTRegexLiteral aSTRegexLiteral0 = mock(ASTRegexLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Pattern) null).when(aSTRegexLiteral0).getLiteral();
      Object object0 = templateInterpreter0.visit(aSTRegexLiteral0, aSTRegexLiteral0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral((-929));
      ASTReferenceExpression aSTReferenceExpression0 = mock(ASTReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn(aSTExtendedLiteral0).when(aSTReferenceExpression0).jjtGetChild(anyInt());
      ASTExtendedLiteral aSTExtendedLiteral1 = (ASTExtendedLiteral)templateInterpreter0.visit(aSTReferenceExpression0, (Object) null);
      assertTrue(aSTExtendedLiteral1.isTernaryProtected());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(aSTNumberLiteral0).getLiteral();
      doReturn(false).when(aSTNumberLiteral0).isInteger();
      Byte byte0 = new Byte((byte)113);
      Object object0 = templateInterpreter0.visit(aSTNumberLiteral0, byte0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo((String) null, 3552, 1162);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, false, "org.apache.commons.jexl3.parser.ASTIdentifier", scope1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Object object0 = interpreter0.visit(aSTJexlScript0, fileSystemHandling0);
      ;
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Parser parser0 = new Parser("");
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(parser0, (-1));
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTIdentifierAccess0).getIdentifier();
      doReturn(false).when(aSTIdentifierAccess0).isSafe();
      doReturn(false).when(aSTIdentifierAccess0).isTernaryProtected();
      doReturn((JexlInfo) null).when(aSTIdentifierAccess0).jexlInfo();
      doReturn((JexlNode) null).when(aSTIdentifierAccess0).jjtGetParent();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTIdentifierAccess0, aSTIdentifierAccess0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: undefined property ''
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      MockThrowable mockThrowable0 = new MockThrowable();
      JexlException jexlException0 = new JexlException((JexlNode) null, "", mockThrowable0);
      Object object0 = templateInterpreter0.visit((ASTExtendedLiteral) null, jexlException0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral((-518));
      ASTExtendedLiteral aSTExtendedLiteral1 = (ASTExtendedLiteral)interpreter0.visit(aSTExtendedLiteral0, (Object) null);
      assertTrue(aSTExtendedLiteral1.isLocalVar());
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess((Parser) null, (-132));
      Object object0 = interpreter0.visit(aSTArrayAccess0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, (JexlOptions) null);
      ASTArguments aSTArguments0 = new ASTArguments(44);
      Object[] objectArray0 = interpreter0.visit(aSTArguments0, engine0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = Double.valueOf(0.0);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Object) null).when(aSTJexlLambda0).jjtAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      ASTJexlScript aSTJexlScript0 = closure0.getScript();
      ASTJexlLambda aSTJexlLambda1 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda1).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(aSTJexlScript0).when(aSTJexlLambda1).jjtGetChild(anyInt());
      doReturn(60).when(aSTJexlLambda1).jjtGetNumChildren();
      Closure closure1 = new Closure(interpreter0, aSTJexlLambda1);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object object0 = interpreter0.runClosure(closure1, templateInterpreter0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = Double.valueOf(0.0);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      ASTArguments aSTArguments0 = new ASTArguments(60);
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(aSTArguments0).when(aSTJexlLambda0).jjtGetChild(anyInt());
      doReturn(60).when(aSTJexlLambda0).jjtGetNumChildren();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object object0 = interpreter0.runClosure(closure0, templateInterpreter0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      Object[] objectArray0 = new Object[5];
      JexlInfo jexlInfo0 = new JexlInfo("", 8, 14);
      String[] stringArray0 = new String[6];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, "", stringArray0);
      Script.Callable script_Callable0 = script0.new Callable(interpreter0);
      Object object0 = interpreter0.processAnnotation("", objectArray0, script_Callable0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object object0 = templateInterpreter0.getAttribute(mapContext0, "l6HSa&VSd{CaDfuZ;");
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Double double0 = Double.valueOf(0.0);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      ASTNENode aSTNENode0 = new ASTNENode(60);
      Byte byte0 = new Byte((byte)56);
      ASTArguments aSTArguments0 = new ASTArguments(60);
      Object object0 = interpreter0.call(aSTNENode0, byte0, aSTNENode0, aSTArguments0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTGTNode aSTGTNode0 = new ASTGTNode(1528);
      Short short0 = new Short((short) (-2108));
      // Undeclared exception!
      try { 
        templateInterpreter0.visitLexicalNode(aSTGTNode0, short0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo((String) null, 3552, 1162);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, false, "org.apache.commons.jexl3.parser.ASTIdentifier", scope1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 1162);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, (JexlContext) null, frame0);
      ASTArguments aSTArguments0 = new ASTArguments(1162);
      // Undeclared exception!
      try { 
        interpreter0.visitLexicalNode(aSTJexlScript0, aSTArguments0);
        fail("Expecting exception: ArrayStoreException");
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.jexl3.internal.Scope$2
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, (Frame) null);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(0);
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement(0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTWhileStatement0, aSTIfStatement0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = new Double(60);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, objectContext0, (Frame) null);
      Parser parser0 = engine0.parser;
      ASTVar aSTVar0 = new ASTVar(parser0, (-495));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTVar0, engine0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1));
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, (JexlOptions) null);
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode(0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTTernaryNode0, engine0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlArithmetic jexlArithmetic0 = engine0.getArithmetic();
      ASTSubNode aSTSubNode0 = new ASTSubNode((-2147483647));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTSubNode0, jexlArithmetic0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTStringLiteral aSTStringLiteral0 = mock(ASTStringLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(aSTStringLiteral0).getLiteral();
      doReturn(false).when(aSTStringLiteral0).isTernaryProtected();
      doReturn((JexlInfo) null).when(aSTStringLiteral0).jexlInfo();
      doReturn((JexlNode) null).when(aSTStringLiteral0).jjtGetParent();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 0, 'H', 'H');
      StringBuffer stringBuffer0 = new StringBuffer(0);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(stringBuffer0, aSTStringLiteral0, (TemplateEngine.TemplateExpression) null);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTStringLiteral0, templateEngine_NestedExpression0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: undefined property ''
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[6];
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, objectArray0, (-1900));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      Parser parser0 = engine0.parser;
      ASTArguments aSTArguments0 = new ASTArguments(parser0, 2408);
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTSetSubNode) null, aSTArguments0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Parser parser0 = new Parser("");
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((JexlNode) null).when(aSTSetLiteral0).jjtGetChild(anyInt());
      doReturn(256).when(aSTSetLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetLiteral0, parser0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = Double.valueOf(0.0);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      ASTNENode aSTNENode0 = new ASTNENode(60);
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((-1134)).when(aSTSetLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetLiteral0, aSTNENode0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1134
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = new Parser("org.apache.commons.jexl3.parser.ASTSetSubNode");
      ASTReference aSTReference0 = new ASTReference(parser0, (-444));
      Short short0 = new Short((short)2274);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTReference0, short0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, 92);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      ASTOrNode aSTOrNode0 = new ASTOrNode(546);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTOrNode0, frame0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit((ASTNumberLiteral) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode(parser0, 0);
      Long long0 = new Long((-1197L));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTNullpNode0, long0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, jexlEngine_EmptyContext0, (Frame) null);
      ASTNotNode aSTNotNode0 = new ASTNotNode(2086);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNotNode0, aSTNotNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      StringWriter stringWriter0 = new StringWriter();
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode((-2646));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTNSWNode0, stringWriter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      ASTNRNode aSTNRNode0 = new ASTNRNode((-1284));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNRNode0, jexlOptions0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = new Double(1);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options(objectContext0);
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      ASTNEWNode aSTNEWNode0 = new ASTNEWNode(1);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNEWNode0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 14);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      ASTNENode aSTNENode0 = new ASTNENode(0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, (-1265), '5', 'v');
      JexlInfo jexlInfo0 = new JexlInfo("?", 14, 13);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "?", scope1);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression("?", aSTNENode0, templateEngine_TemplateExpression0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNENode0, templateEngine_DeferredExpression0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      ASTArguments aSTArguments0 = new ASTArguments(60);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTMulNode aSTMulNode0 = new ASTMulNode(60);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTMulNode0, aSTArguments0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTModNode aSTModNode0 = new ASTModNode(41);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTModNode0, "+ er%or");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      ASTMapLiteral aSTMapLiteral0 = mock(ASTMapLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((-1699)).when(aSTMapLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTMapLiteral0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1699
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = new Parser("org.apache.commons.jexl3.parser.ASTDivNode");
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, 0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTLTNode0, integer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 4768);
      Script script0 = new Script(engine0, "Vwicl$AA&3d", aSTJexlScript0);
      Object[] objectArray0 = new Object[3];
      Closure closure0 = new Closure(script0, objectArray0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTLENode aSTLENode0 = new ASTLENode(1);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTLENode0, closure0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MapContext mapContext0 = new MapContext();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(mockFileInputStream0).when(aSTJxltLiteral0).jjtGetValue();
      Long long0 = new Long(7);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTJxltLiteral0, long0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.io.MockFileInputStream cannot be cast to org.apache.commons.jexl3.internal.TemplateEngine$TemplateExpression
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[0];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-3215));
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript((Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(parser0, (-3215));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTJexlScript0, aSTUnaryMinusNode0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LexicalFrame", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      Closure closure0 = new Closure(templateInterpreter0, aSTJexlLambda0);
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, (Frame) null);
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTJexlScript) null, closure0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      Script script0 = new Script(engine0, "", aSTJexlScript0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTIfStatement) null, script0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTIdentifierAccess0).getIdentifier();
      doReturn(false).when(aSTIdentifierAccess0).isSafe();
      doReturn(false).when(aSTIdentifierAccess0).isTernaryProtected();
      doReturn((JexlInfo) null).when(aSTIdentifierAccess0).jexlInfo();
      doReturn((JexlNode) null).when(aSTIdentifierAccess0).jjtGetParent();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTIdentifierAccess0, aSTIdentifierAccess0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: undefined property ''
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit((ASTIdentifierAccess) null, mathContext0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-518));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNamespaceIdentifier0, "jvm");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: undefined property ''
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit((ASTIdentifier) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateInterpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 97);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      ASTGTNode aSTGTNode0 = new ASTGTNode(46);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTGTNode0, jexlArithmetic_NullOperand0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTGENode aSTGENode0 = new ASTGENode((-2231));
      Parser parser0 = engine0.parser;
      ASTVar aSTVar0 = new ASTVar(parser0, (-2231));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTGENode0, aSTVar0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, (Frame) null);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTFunctionNode) null, jexlArithmetic_NullOperand0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Engine engine0 = new Engine();
      Double double0 = new Double(2065.8033010257);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, frame0, (JexlOptions) null);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(0);
      InterpreterBase.ContextualCtor interpreterBase_ContextualCtor0 = new InterpreterBase.ContextualCtor((JexlMethod) null, false);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTForeachStatement0, interpreterBase_ContextualCtor0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTEQNode aSTEQNode0 = new ASTEQNode(0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTEQNode0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(3);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTDoWhileStatement0, jexlArithmetic_NullOperand0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, (-60));
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTDivNode aSTDivNode0 = new ASTDivNode((-60));
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTDivNode0, jexlArithmetic_NullOperand0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBreak aSTBreak0 = new ASTBreak(81);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      Closure closure0 = new Closure(templateInterpreter0, aSTJexlLambda0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTBreak0, closure0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 97);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTBlock) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(37);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTBitwiseXorNode0, templateInterpreter_Arguments0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTBitwiseOrNode aSTBitwiseOrNode0 = new ASTBitwiseOrNode(parser0, (-4374));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTBitwiseOrNode0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[3];
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode((-2213));
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-2213));
      Script script0 = new Script(engine0, "org.apache.commons.jexl3.internal.introspection.AbstractExecutor$Get", aSTJexlScript0);
      Closure closure0 = new Closure(script0, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTBitwiseComplNode0, closure0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      Parser parser0 = engine0.parser;
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(parser0, 4096);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTBitwiseAndNode0, parser0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Object[] objectArray0 = new Object[4];
      Frame frame0 = new Frame((Scope) null, objectArray0, 56);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Parser parser0 = new Parser("8");
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(parser0, (-3107));
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTAssignment) null, aSTExtendedLiteral0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNotNode aSTNotNode0 = new ASTNotNode(36);
      ASTArrayLiteral aSTArrayLiteral0 = mock(ASTArrayLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(aSTNotNode0, aSTNotNode0).when(aSTArrayLiteral0).jjtGetChild(anyInt());
      doReturn(2).when(aSTArrayLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTArrayLiteral0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTArrayLiteral aSTArrayLiteral0 = mock(ASTArrayLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((-1326)).when(aSTArrayLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTArrayLiteral0, (Object) null);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.ArrayBuilder", e);
      }
  }
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, (JexlOptions) null);
      ASTArguments aSTArguments0 = new ASTArguments(44);
      Parser parser0 = new Parser("");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      aSTArguments0.jjtAddChild(aSTJexlScript0, 44);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTArguments0, engine0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(1642);
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 1162);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, (JexlContext) null, frame0);
      ASTAndNode aSTAndNode0 = new ASTAndNode(4779);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTAndNode0, aSTExtendedLiteral0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[4];
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, objectArray0, (-1039));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTAddNode aSTAddNode0 = new ASTAddNode((-1039));
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral((-1039));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTAddNode0, aSTExtendedLiteral0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, (JexlOptions) null);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        interpreter0.setAttribute(jexlArithmetic_NullOperand0, (Object) null, "");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // unable to set object property, class: org.apache.commons.jexl3.JexlArithmetic$NullOperand, property: null, argument: String
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[4];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-1));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      // Undeclared exception!
      try { 
        interpreter0.setAttribute(objectArray0[0], (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.runClosure((Closure) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      // Undeclared exception!
      try { 
        interpreter0.getAttribute("", jexlUberspect_ResolverStrategy0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // unable to get object property, class: java.lang.String, property: org.apache.commons.jexl3.introspection.JexlUberspect$$Lambda$61/1012325979@4910b55f
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(46);
      Script script0 = new Script(engine0, "of!0D$V&m3iGZ?-sh", aSTJexlScript0);
      Closure closure0 = new Closure(script0, (Object[]) null);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      Parser parser0 = new Parser("");
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(parser0, (-1));
      // Undeclared exception!
      try { 
        interpreter0.getAttribute(closure0, aSTAnnotatedStatement0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-2));
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlOperator jexlOperator0 = JexlOperator.COMPLEMENT;
      // Undeclared exception!
      try { 
        templateInterpreter0.executeAssign(aSTJexlScript0, jexlOperator0, jexlOperator0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlInfo jexlInfo0 = engine0.createInfo((String) null, 3552, 1162);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, false, "org.apache.commons.jexl3.parser.ASTIdentifier", scope1);
      JexlOperator jexlOperator0 = JexlOperator.PROPERTY_GET;
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(1642);
      // Undeclared exception!
      try { 
        templateInterpreter0.executeAssign(aSTJexlScript0, jexlOperator0, aSTExtendedLiteral0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, 108);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, (JexlOptions) null);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(2022);
      // Undeclared exception!
      try { 
        interpreter0.call((JexlNode) null, aSTArrayAccess0, (Object) null, (ASTArguments) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Interpreter interpreter0 = null;
      try {
        interpreter0 = new Interpreter((Interpreter) null, (JexlArithmetic) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(1810);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>((JexlEngine) null, (Double) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, objectContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1810);
      Interpreter interpreter0 = null;
      try {
        interpreter0 = new Interpreter((Engine) null, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ASTArguments aSTArguments0 = new ASTArguments(60);
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object object0 = templateInterpreter0.interpret(aSTArguments0);
      ;
}
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(46);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Object object0 = interpreter0.interpret(aSTJexlScript0);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBreak aSTBreak0 = new ASTBreak((-1041));
      // Undeclared exception!
      try { 
        templateInterpreter0.interpret(aSTBreak0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(59);
      Map<String, Object> map0 = engine0.functions;
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Object[] objectArray0 = new Object[1];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-1265));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      // Undeclared exception!
      try { 
        interpreter0.interpret(aSTJexlScript0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.LexicalFrame", e);
      }
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-4234));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement((-1));
      // Undeclared exception!
      try { 
        interpreter0.processAnnotation(aSTAnnotatedStatement0, (-1), "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(aSTJxltLiteral0).getLiteral();
      doReturn((JexlInfo) null).when(aSTJxltLiteral0).jexlInfo();
      doReturn((Object) null).when(aSTJxltLiteral0).jjtGetValue();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTJxltLiteral0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((JexlInfo) null).when(aSTJxltLiteral0).jexlInfo();
      doReturn((Object) null).when(aSTJxltLiteral0).jjtGetValue();
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTJxltLiteral0, aSTJxltLiteral0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.JexlNode$Info", e);
      }
  }
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Engine engine0 = new Engine();
      Permissions permissions0 = Permissions.DEFAULT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn("").when(aSTJxltLiteral0).getLiteral();
      doReturn(jexlInfo0).when(aSTJxltLiteral0).jexlInfo();
      doReturn((JexlMethod) null).when(aSTJxltLiteral0).jjtGetValue();
      Object object0 = interpreter0.visit(aSTJxltLiteral0, permissions0);
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(2538);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTConstructorNode0, templateInterpreter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Engine engine0 = new Engine();
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-3783));
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement((-3783));
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess((-3783));
      ASTArguments aSTArguments0 = new ASTArguments((Parser) null, 0);
      // Undeclared exception!
      try { 
        interpreter0.call(aSTAnnotatedStatement0, aSTArrayAccess0, aSTAnnotatedStatement0, aSTArguments0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: unsolvable function/method ''
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Object[] objectArray0 = new Object[8];
      Frame frame0 = new Frame(scope1, objectArray0, 107);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTVar aSTVar0 = new ASTVar(107);
      ASTArguments aSTArguments0 = new ASTArguments(46);
      // Undeclared exception!
      try { 
        interpreter0.call((JexlNode) null, jexlOptions0, aSTVar0, aSTArguments0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : 
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBlock aSTBlock0 = new ASTBlock(2);
      ASTArguments aSTArguments0 = new ASTArguments(2);
      // Undeclared exception!
      try { 
        templateInterpreter0.call(aSTBlock0, "/ error", (Object) null, aSTArguments0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: unsolvable function/method '?(...)'
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) null, "GENode", (Object) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Byte byte0 = new Byte((byte)23);
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) byte0, "GENode", (Object) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      ASTReference aSTReference0 = new ASTReference(0);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) jexlEngine_EmptyContext0, (Object) aSTReference0, "org.apache.commons.jexl3.parser.ASTExtendedLiteral");
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      Object[] objectArray0 = new Object[5];
      ASTVar aSTVar0 = new ASTVar(113);
      Parser parser0 = new Parser("");
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 113);
      aSTArrayAccess0.jjtAddChild(aSTVar0, 46);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTArrayAccess0, objectArray0[4]);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      ASTVar aSTVar0 = new ASTVar(116);
      Parser parser0 = new Parser("");
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 116);
      aSTArrayAccess0.jjtAddChild(aSTVar0, 46);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTArrayAccess0, jexlBuilder0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[4];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-1));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Parser parser0 = engine0.parser;
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, (-1));
      Object object0 = interpreter0.visit(aSTArrayAccess0, interpreter0);
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, "MethodNode", scope1);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTJexlScript0, templateInterpreter_Arguments0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // <evosuite>.<evosuite>:-1 undefined property 'java.lang.String@0000000032'
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo((String) null, 3552, 1162);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, false, "org.apache.commons.jexl3.parser.ASTIdentifier", scope1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 1162);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, (JexlContext) null, frame0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTJexlScript0, fileSystemHandling0);
        fail("Expecting exception: ArrayStoreException");
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.jexl3.internal.Scope$2
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, (Frame) null);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(aSTJexlLambda0).isTopLevel();
      doReturn((Frame) null, (Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Object) null).when(aSTJexlLambda0).jjtAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      ASTArguments aSTArguments0 = new ASTArguments((-2445));
      Object object0 = interpreter0.visit(aSTJexlScript0, aSTArguments0);
      ;
}
 @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(77);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      ASTMapLiteral aSTMapLiteral0 = mock(ASTMapLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(aSTJexlScript0).when(aSTMapLiteral0).jjtGetChild(anyInt());
      doReturn(4776).when(aSTMapLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTMapLiteral0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      ASTMapLiteral aSTMapLiteral0 = mock(ASTMapLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(aSTMapLiteral0).jjtGetNumChildren();
      HashMap hashMap0 = (HashMap)interpreter0.visit(aSTMapLiteral0, "N[sdSr`-3=");
      assertEquals(1, hashMap0.size());
}
 @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(aSTSetLiteral0).jjtGetNumChildren();
      Double double0 = new Double(1189.3259257);
      HashSet hashSet0 = (HashSet)templateInterpreter0.visit(aSTSetLiteral0, double0);
      assertTrue(hashSet0.isEmpty());
}
 @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit((ASTStringLiteral) null, "org.apache.commons.jexl3.parser.ASTIdentifier");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      String[] stringArray0 = new String[4];
      ASTStringLiteral aSTStringLiteral0 = mock(ASTStringLiteral.class, new ViolatedAssumptionAnswer());
      doReturn("<?>.<null>(...)").when(aSTStringLiteral0).getLiteral();
      Object object0 = templateInterpreter0.visit(aSTStringLiteral0, stringArray0[0]);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(aSTNumberLiteral0).getLiteral();
      doReturn(true).when(aSTNumberLiteral0).isInteger();
      doReturn(false).when(aSTNumberLiteral0).isTernaryProtected();
      doReturn((JexlInfo) null).when(aSTNumberLiteral0).jexlInfo();
      doReturn((JexlNode) null).when(aSTNumberLiteral0).jjtGetParent();
      ASTReference aSTReference0 = new ASTReference(7);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNumberLiteral0, aSTReference0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: undefined property 'java.lang.Integer@0000000023'
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(aSTNumberLiteral0).getLiteral();
      doReturn(false).when(aSTNumberLiteral0).isInteger();
      ASTReference aSTReference0 = new ASTReference(7);
      Object object0 = interpreter0.visit(aSTNumberLiteral0, aSTReference0);
      ;
}
 @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBlock aSTBlock0 = new ASTBlock(2);
      Object object0 = templateInterpreter0.visit(aSTBlock0, engine0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-191));
      Parser parser0 = engine0.parser;
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTVar aSTVar0 = new ASTVar(0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTVar0, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-191));
      Parser parser0 = engine0.parser;
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      jexlOptions0.setLexical(true);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTVar aSTVar0 = new ASTVar(0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTVar0, (Object) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: variable '' is already defined
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 4768);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(4768);
      Object object0 = interpreter0.visit(aSTIfStatement0, aSTJexlScript0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, (Frame) null);
      Parser parser0 = new Parser("V5BDJ:,wi%T445(");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-2408));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTUnaryPlusNode0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNENode aSTNENode0 = new ASTNENode(60);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(aSTNENode0).when(aSTJexlLambda0).jjtGetChild(anyInt());
      doReturn(1938).when(aSTJexlLambda0).jjtGetNumChildren();
      Closure closure0 = new Closure(templateInterpreter0, aSTJexlLambda0);
      // Undeclared exception!
      try { 
        templateInterpreter0.runClosure(closure0, templateInterpreter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object[] objectArray0 = new Object[6];
      JexlInfo jexlInfo0 = new JexlInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "p");
      Closure closure0 = new Closure(script0, objectArray0);
      Script.Callable script_Callable0 = closure0.callable(engine0.EMPTY_CONTEXT, objectArray0);
      try { 
        templateInterpreter0.processAnnotation("GENode", objectArray0, script_Callable0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlArithmetic jexlArithmetic0 = engine0.arithmetic;
      Interpreter interpreter0 = new Interpreter(templateInterpreter0, jexlArithmetic0);
  }
 @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-3033));
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Interpreter interpreter1 = new Interpreter(interpreter0, jexlArithmetic0);
      ;
}
 @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      String[] stringArray0 = new String[6];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, (-185));
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(0);
      Interpreter.AnnotatedCall interpreter_AnnotatedCall0 = interpreter0.new AnnotatedCall(aSTAnnotatedStatement0, (-669), "org.apache.commons.logging.simplelog.showShortLogname");
      interpreter_AnnotatedCall0.getStatement();
      ;
}
 @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(parser0, 2);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(2);
      Interpreter.AnnotatedCall interpreter_AnnotatedCall0 = templateInterpreter0.new AnnotatedCall(aSTAnnotatedStatement0, 2, aSTArrayAccess0);
      boolean boolean0 = interpreter_AnnotatedCall0.isProcessed();
      ;
}
 @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Parser parser0 = new Parser("");
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(parser0, 46);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 46);
      Interpreter.AnnotatedCall interpreter_AnnotatedCall0 = interpreter0.new AnnotatedCall(aSTAnnotatedStatement0, 46, aSTArrayAccess0);
      try { 
        interpreter0.processAnnotation("4V^`@lD", (Object[]) null, interpreter_AnnotatedCall0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-3033));
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      ASTERNode aSTERNode0 = new ASTERNode((-3033));
      InterpreterBase.ArithmeticFuncall interpreterBase_ArithmeticFuncall0 = new InterpreterBase.ArithmeticFuncall((JexlMethod) null, true);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTERNode0, interpreterBase_ArithmeticFuncall0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      ASTRegexLiteral aSTRegexLiteral0 = mock(ASTRegexLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(pattern0).when(aSTRegexLiteral0).getLiteral();
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      Pattern pattern1 = (Pattern)templateInterpreter0.visit(aSTRegexLiteral0, jexlArithmetic_NullOperand0);
      assertNotNull(pattern1.pattern());
}
 @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      Parser parser0 = engine0.parser;
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(38);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetModNode0, stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(46);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Parser parser0 = new Parser("");
      ASTBreak aSTBreak0 = new ASTBreak(parser0, 2);
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(aSTJexlScript0, aSTJexlScript0, aSTBreak0).when(aSTSetLiteral0).jjtGetChild(anyInt());
      doReturn(46).when(aSTSetLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetLiteral0, parser0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-243));
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Parser parser0 = new Parser("");
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(parser0, 16);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTMapEntry0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = new Parser("eo?");
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, (-2));
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(parser0, 1773);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTSetMultNode0, aSTExtendedLiteral0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((byte)56);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode((byte)56);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetOrNode0, aSTJexlScript0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode(0);
      Object object0 = templateInterpreter0.visit(aSTTrueNode0, engine0);
      assertTrue(object0);
}
 @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTContinue aSTContinue0 = new ASTContinue(661);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTContinue0, templateInterpreter0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Engine engine0 = new Engine();
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, mapContext0);
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(70);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTAnnotatedStatement0, jexlOptions0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1));
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      Parser parser0 = new Parser("^>2o;H)w");
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(parser0, (-465));
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetDivNode0, jexlArithmetic_NullOperand0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode(parser0, (-1));
      Long long0 = Long.valueOf((long) (-1));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTMethodNode0, long0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode((-505));
      ASTReferenceExpression aSTReferenceExpression0 = mock(ASTReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn(aSTNSWNode0).when(aSTReferenceExpression0).jjtGetChild(anyInt());
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTReferenceExpression0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      Parser parser0 = engine0.parser;
      ASTReturnStatement aSTReturnStatement0 = new ASTReturnStatement(parser0, 1964);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(1964);
      Script script0 = new Script(engine0, "{ny`,q", aSTJexlScript0);
      Closure closure0 = new Closure(script0, stringArray0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTReturnStatement0, closure0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1052);
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTSizeFunction aSTSizeFunction0 = new ASTSizeFunction(1052);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSizeFunction0, jexlBuilder0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 97);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.getAttribute((Object) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : object is null
         //
         verifyException("org.apache.commons.jexl3.internal.InterpreterBase", e);
      }
  }
 @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNullLiteral aSTNullLiteral0 = new ASTNullLiteral(22);
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(2538);
      Object object0 = templateInterpreter0.visit(aSTNullLiteral0, aSTNamespaceIdentifier0);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Parser parser0 = engine0.parser;
      ASTReference aSTReference0 = new ASTReference(parser0, 1799);
      // Undeclared exception!
      try { 
        interpreter0.setAttribute(jexlSandbox0, aSTReference0, jexlBuilder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1799
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 100);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      Parser parser0 = engine0.parser;
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(parser0, 100);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetXorNode0, "");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTRangeNode aSTRangeNode0 = new ASTRangeNode(4768);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTRangeNode0, jexlBuilder0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(10);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTSWNode0, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(234);
      ASTArrayLiteral aSTArrayLiteral0 = mock(ASTArrayLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(aSTExtendedLiteral0, aSTExtendedLiteral0, aSTExtendedLiteral0, (JexlNode) null, aSTExtendedLiteral0).when(aSTArrayLiteral0).jjtGetChild(anyInt());
      doReturn(22).when(aSTArrayLiteral0).jjtGetNumChildren();
      ArrayList arrayList0 = (ArrayList)templateInterpreter0.visit(aSTArrayLiteral0, (Object) null);
      assertEquals(1, arrayList0.size());
}
 @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTEWNode aSTEWNode0 = new ASTEWNode((-2));
      ASTVar aSTVar0 = new ASTVar(84);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTEWNode0, aSTVar0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, (JexlContext) null, frame0);
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTAnnotation) null, "/O(]]MH7.j");
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
         //
         // org.apache.commons.jexl3.parser.ASTAnnotation: Not supported.
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 97);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode(46);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetAddNode0, "!*s0[`RZg,#&<,;");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      InterpreterBase.ArithmeticFuncall interpreterBase_ArithmeticFuncall0 = new InterpreterBase.ArithmeticFuncall((JexlMethod) null, false);
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(73);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, objectArray0, 73);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction(1340);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTEmptyFunction0, interpreterBase_ArithmeticFuncall0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
 @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      StringProvider stringProvider0 = new StringProvider("|SzXdsh9?p+.W<");
      Parser parser0 = new Parser(stringProvider0);
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode(parser0, (-3249));
      ASTReference aSTReference0 = new ASTReference(parser0, (byte)3);
      Object object0 = templateInterpreter0.visit(aSTFalseNode0, aSTReference0);
      ;
}
 @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 1162);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, (JexlContext) null, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn(frame0).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((JexlNode) null).when(aSTJexlLambda0).jjtGetChild(anyInt());
      doReturn(0).when(aSTJexlLambda0).jjtGetNumChildren();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      // Undeclared exception!
      try { 
        interpreter0.runClosure(closure0, frame0);
        fail("Expecting exception: ArrayStoreException");
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.jexl3.internal.Scope$2
         //
         verifyException("org.apache.commons.jexl3.internal.Frame", e);
      }
  }
 @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Integer integer0 = new Integer((-8426));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit((ASTSetAndNode) null, integer0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
