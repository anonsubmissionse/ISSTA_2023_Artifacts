/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 18:21:17 GMT 2022
 */

package org.apache.commons.jexl3.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jexl3.JexlEngine;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.parser.ASTNumberLiteral;
import org.apache.commons.jexl3.parser.FeatureController;
import org.apache.commons.jexl3.parser.OperatorController;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.ParserVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ASTNumberLiteral_ESTest extends ASTNumberLiteral_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(59);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTNumberLiteral0.jjtAccept(featureController0, (Object) null);
      assertNotNull(object0);
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(18);
      aSTNumberLiteral0.setNatural("8");
      boolean boolean0 = aSTNumberLiteral0.isInteger();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral((-2147483647));
      aSTNumberLiteral0.setReal("NaN");
      Class<? extends Number> class0 = aSTNumberLiteral0.getLiteralClass();
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral((-2147483647));
      aSTNumberLiteral0.setReal("NaN");
      Number number0 = aSTNumberLiteral0.getLiteral();
      assertNotNull(number0);
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(18);
      aSTNumberLiteral0.setReal("8");
      Number number0 = aSTNumberLiteral0.getLiteral();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(2392);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setReal("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral((-798));
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setReal((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.NumberParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(717);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setNatural("MuL'D8}Z}_%t*");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // For input string: \"MuL'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(6664);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setNatural((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.NumberParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(0);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.jjtAccept((ParserVisitor) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.ASTNumberLiteral", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(717);
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Object object0 = aSTNumberLiteral0.jjtAccept(operatorController0, operatorController0);
//TOGA incorrect assertion       assertTrue(object0);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(1964);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setReal("c04i:");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(107);
      String string0 = aSTNumberLiteral0.toString();
      assertNotNull(string0);
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(717);
      Class<? extends Number> class0 = aSTNumberLiteral0.getLiteralClass();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(107);
      boolean boolean0 = aSTNumberLiteral0.isConstant(false);
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Parser parser0 = new Parser("");
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(parser0, 0);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setNatural("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(107);
      boolean boolean0 = aSTNumberLiteral0.isInteger();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(107);
      Number number0 = aSTNumberLiteral0.getLiteral();
      assertNotNull(number0);
}
}
