/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 11 17:39:50 GMT 2022
 */

package org.apache.commons.jexl3.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.apache.commons.jexl3.JexlBuilder;
import org.apache.commons.jexl3.JexlContext;
import org.apache.commons.jexl3.JexlInfo;
import org.apache.commons.jexl3.JexlOptions;
import org.apache.commons.jexl3.JxltEngine;
import org.apache.commons.jexl3.MapContext;
import org.apache.commons.jexl3.ObjectContext;
import org.apache.commons.jexl3.internal.Closure;
import org.apache.commons.jexl3.internal.Engine;
import org.apache.commons.jexl3.internal.Frame;
import org.apache.commons.jexl3.internal.Interpreter;
import org.apache.commons.jexl3.internal.Scope;
import org.apache.commons.jexl3.internal.Script;
import org.apache.commons.jexl3.internal.TemplateEngine;
import org.apache.commons.jexl3.internal.TemplateScript;
import org.apache.commons.jexl3.introspection.JexlSandbox;
import org.apache.commons.jexl3.parser.ASTAddNode;
import org.apache.commons.jexl3.parser.ASTAndNode;
import org.apache.commons.jexl3.parser.ASTDoWhileStatement;
import org.apache.commons.jexl3.parser.ASTEQNode;
import org.apache.commons.jexl3.parser.ASTFalseNode;
import org.apache.commons.jexl3.parser.ASTIdentifierAccess;
import org.apache.commons.jexl3.parser.ASTJexlScript;
import org.apache.commons.jexl3.parser.ASTMapEntry;
import org.apache.commons.jexl3.parser.ASTSetModNode;
import org.apache.commons.jexl3.parser.ASTSetOrNode;
import org.apache.commons.jexl3.parser.ASTTernaryNode;
import org.apache.commons.jexl3.parser.JexlNode;
import org.apache.commons.jexl3.parser.Parser;
import org.apache.commons.jexl3.parser.ParserTokenManager;
import org.apache.commons.jexl3.parser.SimpleCharStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TemplateEngine_ESTest extends TemplateEngine_ESTest_scaffolding {

 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode((-993));
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "?");
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(jexlSandbox0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(charBuffer0, aSTSetOrNode0, templateEngine_ConstantExpression0);
      StringBuilder stringBuilder0 = new StringBuilder("?");
      templateEngine_DeferredExpression0.asString(stringBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode((-993));
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "?");
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(jexlSandbox0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(charBuffer0, aSTSetOrNode0, templateEngine_ConstantExpression0);
      StringBuilder stringBuilder0 = new StringBuilder("?");
      templateEngine_DeferredExpression0.asString(stringBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("$,ALwi*W*y><o*]:", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = (TemplateEngine.ConstantExpression)templateEngine0.parseExpression(jexlInfo0, "$,ALwi*W*y><o*]:", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression1 = (TemplateEngine.ConstantExpression)templateEngine_ConstantExpression0.prepare(interpreter0);
      ;
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 144, 'e', 'e');
      JexlInfo jexlInfo0 = new JexlInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, "", scope1);
      templateEngine_CompositeExpression0.options(engine0.EMPTY_CONTEXT);
      ;
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringBuffer stringBuffer0 = new StringBuffer(6);
      Parser parser0 = new Parser("");
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode(parser0, 6);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(stringBuffer0, aSTFalseNode0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(stringBuffer0, (JexlNode) null, templateEngine_NestedExpression0);
      boolean boolean0 = templateEngine_DeferredExpression0.isImmediate();
      ;
}
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 0, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression((CharSequence) null, (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      // Undeclared exception!
      try { 
        templateEngine_NestedExpression0.prepare((Interpreter) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine$NestedExpression", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 0, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression((CharSequence) null, (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = templateEngine_NestedExpression0.asString(stringBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 1635, '4', 'R');
      CharBuffer charBuffer0 = CharBuffer.allocate('4');
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode((-864));
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(charBuffer0, aSTTernaryNode0, (TemplateEngine.TemplateExpression) null);
      JexlOptions jexlOptions0 = templateEngine_ImmediateExpression0.options(engine0.EMPTY_CONTEXT);
      ;
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 39, 'o', 'o');
      JexlInfo jexlInfo0 = engine0.createInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      ASTEQNode aSTEQNode0 = new ASTEQNode(39);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression("", aSTEQNode0, templateEngine_TemplateExpression0);
      Parser parser0 = new Parser("");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 39);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      Script script0 = new Script(engine0, "", aSTJexlScript0);
      Closure closure0 = new Closure(script0, stringArray0);
      Frame frame0 = closure0.frame;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      // Undeclared exception!
      try { 
        templateEngine_DeferredExpression0.evaluate(interpreter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.parser.SimpleNode", e);
      }
  }
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, (-1796), 'o', '0');
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("", (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      // Undeclared exception!
      try { 
        templateEngine_ImmediateExpression0.asString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine$JexlBasedExpression", e);
      }
  }
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 35, '6', '6');
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(charBuffer0, (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(charBuffer0, (JexlNode) null, templateEngine_NestedExpression0);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(charBuffer0, (JexlNode) null, templateEngine_ImmediateExpression0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 5);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine_DeferredExpression0.prepare(interpreter0);
      ;
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, Integer.MAX_VALUE, '-', '&');
      ASTEQNode aSTEQNode0 = new ASTEQNode(0);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("<MH#dONXa,^4t4", aSTEQNode0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("<MH#dONXa,^4t4", aSTEQNode0, templateEngine_NestedExpression0);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression("<MH#dONXa,^4t4", aSTEQNode0, templateEngine_ImmediateExpression0);
      boolean boolean0 = templateEngine_DeferredExpression0.isImmediate();
      ;
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 144, 'e', 'e');
      Integer integer0 = ASTIdentifierAccess.parseIdentifier("");
      JexlInfo jexlInfo0 = new JexlInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(integer0, templateEngine_TemplateExpression0);
      templateEngine_ConstantExpression0.getType();
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 144, 'e', 'e');
      Integer integer0 = ASTIdentifierAccess.parseIdentifier("");
      JexlInfo jexlInfo0 = new JexlInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(integer0, templateEngine_TemplateExpression0);
      templateEngine_ConstantExpression0.getType();
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(templateEngine0, (TemplateEngine.TemplateExpression) null);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Object object0 = templateEngine_ConstantExpression0.evaluate(interpreter0);
      ;
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 1677, '4', ']');
      JxltEngine.Expression jxltEngine_Expression0 = templateEngine0.createExpression("Y_GQG{:=4Rz*T");
      StringBuilder stringBuilder0 = new StringBuilder("Y_GQG{:=4Rz*T");
      StringBuilder stringBuilder1 = jxltEngine_Expression0.asString(stringBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, "", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression1 = (TemplateEngine.CompositeExpression)templateEngine_CompositeExpression0.prepare(interpreter0);
      ;
}
 @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, "", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression1 = (TemplateEngine.CompositeExpression)templateEngine_CompositeExpression0.prepare(interpreter0);
      ;
}
 @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, "", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      MapContext mapContext0 = new MapContext();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, (JexlOptions) null);
      templateEngine_CompositeExpression0.evaluate(interpreter0);
      ;
}
 @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      StringBuilder stringBuilder0 = new StringBuilder("#pragma");
      ((TemplateEngine.CompositeExpression) templateEngine_TemplateExpression0).asString(stringBuilder0);
      ;
}
 @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 95, "org.apache.commons.jexl3.internal.TemplateEngine$Block");
      TemplateEngine.BlockType templateEngine_BlockType1 = templateEngine_Block0.getType();
      ;
}
 @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 34, "~WAq^-");
      int int0 = templateEngine_Block0.getLine();
      ;
}
 @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, (-991), "BigDecimal coercion: ");
      String string0 = templateEngine_Block0.getBody();
      ;
}
 @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 66, 'J', '.');
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(66);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("XGyyq4x;RAgeM", aSTMapEntry0, (TemplateEngine.TemplateExpression) null);
      Set<List<String>> set0 = templateEngine_NestedExpression0.getVariables();
      ;
}
 @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      Iterator<CharSequence> iterator0 = TemplateEngine.readLines(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo("\")\"", 0, (-1337));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "kvH5sb-$", scope1);
      ;
}
 @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, (-61), 'k', '}');
      JexlInfo jexlInfo0 = new JexlInfo();
      String[] stringArray0 = new String[9];
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(jexlInfo0, "cFKY&c`x>W}", stringArray0);
      ;
}
 @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'i', 'h');
      int int0 = templateEngine0.startsWith("org.apache.commons.jexl3.internal.TemplateEngine$Block", "");
      ;
}
 @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 35, '6', '6');
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = templateEngine0.startsWith(charBuffer0, charBuffer0);
      ;
}
 @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 1677, '4', ']');
      char char0 = templateEngine0.getImmediateChar();
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, (-1337), 'l', ']');
      char char0 = templateEngine0.getImmediateChar();
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, 117, 'S', '_');
      Engine engine0 = templateEngine0.getEngine();
      ;
}
 @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      TemplateEngine templateEngine0 = engine0.jxlt();
      Engine engine1 = templateEngine0.getEngine();
      ;
}
 @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      TemplateEngine templateEngine0 = engine0.jxlt();
      Engine engine1 = templateEngine0.getEngine();
      ;
}
 @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, (-1337), 'l', ']');
      char char0 = templateEngine0.getDeferredChar();
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 645, '7', '7');
      char char0 = templateEngine0.getDeferredChar();
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 0, 'Z', 'u');
      char char0 = templateEngine0.getDeferredChar();
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 121, 'X', 'v');
      // Undeclared exception!
      try { 
        templateEngine0.startsWith((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 0, '', '^');
      // Undeclared exception!
      try { 
        templateEngine0.readTemplate("FW)`ux%S**3K@2 V}7|", (Reader) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
 @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemplateEngine.readLines((Reader) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 118, '=', '[');
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        templateEngine0.parseExpression((JexlInfo) null, "malformed expression: ", scope1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XGyyq4x;RAgeM");
      char[] charArray0 = new char[5];
      stringReader0.read(charArray0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 66, 'A', '.');
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate((JexlInfo) null, "", (Reader) stringReader0, (String[]) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // @1:2 ambiguous statement error in '4x;RAgeM'
         //
         verifyException("org.apache.commons.jexl3.parser.JexlParser", e);
      }
  }
 @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      String[] stringArray0 = new String[3];
      StringReader stringReader0 = new StringReader("?ly\"k");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate(jexlInfo0, "", (Reader) bufferedReader0, stringArray0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
      }
  }
 @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, (-1663), '>', 'z');
      StringReader stringReader0 = new StringReader("UnaryPlusNode");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager((SimpleCharStream) null);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo("F9=-y", (-3346), (-2640));
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate(jexlInfo0, "F9=-y", (Reader) bufferedReader0, parserTokenManager0.jjstrLiteralImages);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }
 @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 0, '_', '_');
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate((JexlInfo) null, "", (Reader) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // null input
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateScript", e);
      }
  }
 @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      String[] stringArray0 = new String[3];
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = engine0.createInfo("", 1015, 1015);
      // Undeclared exception!
      try { 
        templateEngine0.createExpression(jexlInfo0, stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-61), 'k', '}');
      JexlInfo jexlInfo0 = new JexlInfo();
      // Undeclared exception!
      try { 
        templateEngine0.createExpression(jexlInfo0, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -61
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 0, "");
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(templateEngine_Block0, templateEngine_TemplateExpression0);
      // Undeclared exception!
      try { 
        TemplateEngine.createException(jexlInfo0, "", templateEngine_ConstantExpression0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 4, 'r', 'r');
      JexlInfo jexlInfo0 = engine0.createInfo("", 4, 0);
      templateEngine0.createExpression("");
      JxltEngine.Expression jxltEngine_Expression0 = templateEngine0.createExpression(jexlInfo0, "");
      assertTrue(jxltEngine_Expression0.isImmediate());
}
 @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 36, 'p', 'p');
      JxltEngine.Expression jxltEngine_Expression0 = templateEngine0.createExpression((JexlInfo) null, "");
      assertFalse(jxltEngine_Expression0.isDeferred());
}
 @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 27, 'H', 'n');
      StringBuilder stringBuilder0 = new StringBuilder("");
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(stringBuilder0, (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      String string0 = templateEngine_ImmediateExpression0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-3554));
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'e', 'h');
      JexlInfo jexlInfo0 = engine0.createInfo("780x,=n>:~IB$}", 2246, 2246);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "org.apache.commons.jexl3.internal.TemplateEngine$Block", scope1);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("780x,=n>:~IB$}", aSTJexlScript0, templateEngine_TemplateExpression0);
      templateEngine_ImmediateExpression0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      Engine engine1 = templateEngine0.getEngine();
      ;
}
 @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, (-1663), '>', 'z');
      StringReader stringReader0 = new StringReader("UnaryPlusNode");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      List<TemplateEngine.Block> list0 = templateEngine0.readTemplate("UnaryPlusNode", bufferedReader0);
      ;
}
 @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("//\n");
      Iterator<CharSequence> iterator0 = TemplateEngine.readLines(stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader("}c^y5 jF^XjZi-s");
      List<TemplateEngine.Block> list0 = templateEngine0.readTemplate("", stringReader0);
      ;
}
 @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader("wY=XqIr");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      List<TemplateEngine.Block> list0 = templateEngine0.readTemplate("SDSd nZD&:(0RR*", bufferedReader0);
      ;
}
 @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = engine0.createInfo(" /*= ", 108, 0);
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(jexlInfo0, " */", (String[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      int int0 = templateEngine0.startsWith("", "");
      ;
}
 @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 0, "$,ALwi*W*y><o*]:");
      StringBuilder stringBuilder0 = new StringBuilder("$,ALwi*W*y><o*]:");
      templateEngine_Block0.toString(stringBuilder0, "");
      ;
}
 @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.VERBATIM;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 0, "");
      StringBuilder stringBuilder0 = new StringBuilder("#pragma");
      templateEngine_Block0.toString(stringBuilder0, "");
      assertNotNull(stringBuilder0.toString());
}
 @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.VERBATIM;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 0, "");
      String string0 = templateEngine_Block0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("org.apache.commons.jexl3.JexlException$Feature", (-277), (-277));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[11];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        templateEngine0.parseExpression(jexlInfo0, "#{#WXcJ`", scope1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // org.apache.commons.jexl3.JexlException$Feature exception error : malformed expression: #{#WXcJ`
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("org.apache.commons.jexl3.JexlException$Feature", (-277), (-277));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        templateEngine0.parseExpression(jexlInfo0, "Q#{#WXcJ`", scope1);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
         //
         // org.apache.commons.jexl3.JexlException$Feature exception error : malformed expression: Q#{#WXcJ`
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine", e);
      }
  }
 @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression", scope1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockException mockException0 = new MockException("=KB`'V7oHRa", mockRuntimeException0);
      JxltEngine.Exception jxltEngine_Exception0 = TemplateEngine.createException(jexlInfo0, "org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression", templateEngine_TemplateExpression0, mockException0);
      ;
}
 @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("]s.kDj&g$ekh");
      MockException mockException0 = new MockException("=KB`'V7oHRa", mockRuntimeException0);
      JxltEngine.Exception jxltEngine_Exception0 = TemplateEngine.createException(jexlInfo0, "", templateEngine_TemplateExpression0, mockException0);
      ;
}
 @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("");
      JxltEngine.Exception jxltEngine_Exception0 = TemplateEngine.createException((JexlInfo) null, "", (TemplateEngine.TemplateExpression) null, mockRuntimeException0);
      ;
}
 @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      templateEngine_TemplateExpression0.evaluate(engine0.EMPTY_CONTEXT);
      ;
}
 @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, "", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression1 = (TemplateEngine.CompositeExpression)templateEngine_CompositeExpression0.prepare(frame0, engine0.EMPTY_CONTEXT);
      ;
}
 @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, "", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression1 = (TemplateEngine.CompositeExpression)templateEngine_CompositeExpression0.prepare(frame0, engine0.EMPTY_CONTEXT);
      ;
}
 @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, "", scope1);
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      templateEngine_CompositeExpression0.getVariables(engine_VarCollector0);
      ;
}
 @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      templateEngine_TemplateExpression0.getVariables();
      ;
}
 @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      boolean boolean0 = templateEngine_TemplateExpression0.isImmediate();
      ;
}
 @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ASTAddNode aSTAddNode0 = new ASTAddNode(461);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", (-241), 2642);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = null;
      try {
        templateEngine_NestedExpression0 = templateEngine0.new NestedExpression((CharSequence) null, aSTAddNode0, templateEngine_TemplateExpression0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Nested TemplateExpression can not have a source
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine$NestedExpression", e);
      }
  }
 @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 36, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("", (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-4571));
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("", aSTJexlScript0, templateEngine_NestedExpression0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine_ImmediateExpression0.prepare(interpreter0);
      ;
}
 @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-3554));
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'i', 'h');
      JexlInfo jexlInfo0 = engine0.createInfo("780x,=n>:~IB$}", 2246, 2246);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "org.apache.commons.jexl3.internal.TemplateEngine$Block", scope1);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("780x,=n>:~IB$}", aSTJexlScript0, templateEngine_TemplateExpression0);
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      templateEngine_ImmediateExpression0.getVariables(engine_VarCollector0);
      ;
}
 @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 34, ' ', ' ');
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = null;
      try {
        templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression((Object) null, (TemplateEngine.TemplateExpression) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // constant can not be null
         //
         verifyException("org.apache.commons.jexl3.internal.TemplateEngine$ConstantExpression", e);
      }
  }
 @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, (-1663), '>', 'z');
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(54);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression("UnaryPlusNode", aSTSetModNode0, (TemplateEngine.TemplateExpression) null);
      boolean boolean0 = templateEngine_DeferredExpression0.isDeferred();
      assertTrue(boolean0);
}
 @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'i', 'h');
      JexlInfo jexlInfo0 = engine0.createInfo("780x,=n>:~IB$}", 2246, 2246);
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      TemplateScript templateScript0 = templateEngine0.createTemplate(jexlInfo0, "]+N,:XLmJX5kb", (Reader) bufferedReader0, (String[]) null);
      ;
}
 @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'i', 'h');
      templateEngine0.clearCache();
  }
 @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      char char0 = templateEngine0.getImmediateChar();
      assertNotNull(char0);
}
 @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 3, '$', '.');
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(3);
      JexlInfo jexlInfo0 = new JexlInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "$$t", scope1);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression("$$t", aSTDoWhileStatement0, templateEngine_TemplateExpression0);
      templateEngine_DeferredExpression0.getType();
  }
 @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, (-1663), '>', 'z');
      ParserTokenManager parserTokenManager0 = new ParserTokenManager((SimpleCharStream) null);
      Parser parser0 = new Parser("UnaryPlusNode");
      ASTAndNode aSTAndNode0 = new ASTAndNode(parser0, (-3346));
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo("F9=-y", (-3346), (-2640));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, parserTokenManager0.jjstrLiteralImages);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "{c> ZC,+.9f(\"", scope1);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression("UnaryPlusNode", aSTAndNode0, templateEngine_TemplateExpression0);
      templateEngine_DeferredExpression0.getVariables((Engine.VarCollector) null);
      ;
}
 @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 0, "org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression");
      String string0 = templateEngine_Block0.toString();
      ;
}
 @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 48, 'F', 'F');
      ASTAddNode aSTAddNode0 = new ASTAddNode(95);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("org.apache.commons.jexl3.internal.TemplateEngine$Block", aSTAddNode0, (TemplateEngine.TemplateExpression) null);
      templateEngine_NestedExpression0.getType();
  }
 @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 36, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("", (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      boolean boolean0 = templateEngine_NestedExpression0.isImmediate();
      ;
}
 @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 0, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression((CharSequence) null, (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1623);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      // Undeclared exception!
      try { 
        templateEngine_NestedExpression0.evaluate(interpreter0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jexl3.internal.Interpreter", e);
      }
  }
 @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 66, 'A', '.');
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(66);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("XGyyq4x;RAgeM", aSTMapEntry0, (TemplateEngine.TemplateExpression) null);
      JexlInfo jexlInfo0 = templateEngine_NestedExpression0.getInfo();
      ;
}
 @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, "", scope1);
      templateEngine_CompositeExpression0.getType();
      ;
}
 @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 48, 'F', 'F');
      ASTAddNode aSTAddNode0 = new ASTAddNode(95);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("org.apache.commons.jexl3.internal.TemplateEngine$Block", aSTAddNode0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("$$org.apache.commons.jexl3.internal.TemplateEngine$Block", aSTAddNode0, templateEngine_NestedExpression0);
      templateEngine_ImmediateExpression0.getType();
  }
 @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression("", templateEngine_TemplateExpression0);
      templateEngine_ConstantExpression0.getVariables();
      ;
}
 @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "", scope1);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression("", templateEngine_TemplateExpression0);
      templateEngine_ConstantExpression0.getVariables();
      ;
}
 @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 36, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("", (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      String string0 = templateEngine_NestedExpression0.asString();
      ;
}
 @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 4, 'r', 'r');
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.createExpression("");
      ;
}
 @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 4, 'r', 'r');
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.createExpression("");
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression1 = (TemplateEngine.CompositeExpression)templateEngine_CompositeExpression0.getSource();
      ;
}
 @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-3554));
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'i', 'h');
      JexlInfo jexlInfo0 = engine0.createInfo("780x,=n>:~IB$}", 2246, 2246);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "org.apache.commons.jexl3.internal.TemplateEngine$Block", scope1);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("780x,=n>:~IB$}", aSTJexlScript0, templateEngine_TemplateExpression0);
      Object object0 = templateEngine_ImmediateExpression0.evaluate(engine0.EMPTY_CONTEXT);
      ;
}
 @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 48, 'F', 'F');
      ASTAddNode aSTAddNode0 = new ASTAddNode(95);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("org.apache.commons.jexl3.internal.TemplateEngine$Block", aSTAddNode0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("$$org.apache.commons.jexl3.internal.TemplateEngine$Block", aSTAddNode0, templateEngine_NestedExpression0);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression("?", aSTAddNode0, templateEngine_ImmediateExpression0);
      StringReader stringReader0 = new StringReader("org.apache.commons.jexl3.internal.TemplateEngine$Block");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 269);
      ObjectContext<BufferedReader> objectContext0 = new ObjectContext<BufferedReader>(engine0, bufferedReader0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine_DeferredExpression0.prepare(objectContext0);
      ;
}
 @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, (-1337), 'l', ']');
      JexlInfo jexlInfo0 = engine0.createInfo("\")\"", (int) ']', (-1337));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, "\")\"", scope1);
      boolean boolean0 = templateEngine_TemplateExpression0.isDeferred();
      ;
}
 @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = (TemplateEngine.ConstantExpression)templateEngine0.parseExpression(jexlInfo0, "org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      String string0 = (String)templateEngine_ConstantExpression0.evaluate(frame0, engine0.EMPTY_CONTEXT);
      ;
}
 @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = (TemplateEngine.ConstantExpression)templateEngine0.parseExpression(jexlInfo0, "org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression", scope1);
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      templateEngine_ConstantExpression0.getVariables(engine_VarCollector0);
      ;
}
 @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = (TemplateEngine.ConstantExpression)templateEngine0.parseExpression(jexlInfo0, "org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression", scope1);
      JexlInfo jexlInfo1 = templateEngine_ConstantExpression0.getInfo();
      ;
}
}
