 @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SoftCache<Object, HashMap<Object, Object>> softCache0 = new SoftCache<Object, HashMap<Object, Object>>(0);
      int int0 = softCache0.size();
      ;
}
 @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SoftCache<Object, Integer> softCache0 = new SoftCache<Object, Integer>((-1));
      int int0 = softCache0.size();
      ;
}
 @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SoftCache<Integer, String> softCache0 = new SoftCache<Integer, String>(0);
      Integer integer0 = new Integer(1049);
      softCache0.put(integer0, "6J9c)Q");
      List<Map.Entry<Integer, String>> list0 = (List<Map.Entry<Integer, String>>)softCache0.entries();
      assertEquals(0, softCache0.size());
}
 @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SoftCache<Integer, String> softCache0 = new SoftCache<Integer, String>(0);
      Integer integer0 = new Integer(1049);
      softCache0.put(integer0, "6J9c)Q");
      List<Map.Entry<Integer, String>> list0 = (List<Map.Entry<Integer, String>>)softCache0.entries();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SoftCache<String, Integer> softCache0 = new SoftCache<String, Integer>((-1682));
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        softCache0.put("", integer0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1682
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SoftCache<AbstractMap.SimpleEntry<Object, String>, Integer> softCache0 = new SoftCache<AbstractMap.SimpleEntry<Object, String>, Integer>((-1));
      // Undeclared exception!
      try { 
        softCache0.createCache((-1));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }
 @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SoftCache<Object, String> softCache0 = new SoftCache<Object, String>(2169);
      Object object0 = new Object();
      softCache0.put(object0, ">");
      List<Map.Entry<Object, String>> list0 = (List<Map.Entry<Object, String>>)softCache0.entries();
      assertEquals(0, softCache0.size());
}
 @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SoftCache<Object, String> softCache0 = new SoftCache<Object, String>(2169);
      Object object0 = new Object();
      softCache0.put(object0, ">");
      List<Map.Entry<Object, String>> list0 = (List<Map.Entry<Object, String>>)softCache0.entries();
      assertEquals(1, list0.size());
}
 @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SoftCache<Object, Integer> softCache0 = new SoftCache<Object, Integer>(896);
      softCache0.entries();
      assertEquals(0, softCache0.size());
}
 @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SoftCache<String, Object> softCache0 = new SoftCache<String, Object>(1);
      softCache0.put((String) null, (Object) null);
      softCache0.put("", "");
      assertEquals(1, softCache0.size());
}
 @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SoftCache<Object, HashMap<String, String>> softCache0 = new SoftCache<Object, HashMap<String, String>>(896);
      Object object0 = new Object();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      softCache0.put(object0, hashMap0);
      HashMap<String, String> hashMap1 = softCache0.get(object0);
      assertNotNull(hashMap1);
}
 @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SoftCache<Object, HashMap<String, String>> softCache0 = new SoftCache<Object, HashMap<String, String>>(896);
      Object object0 = new Object();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      softCache0.put(object0, hashMap0);
      HashMap<String, String> hashMap1 = softCache0.get(object0);
      assertEquals(0, softCache0.size());
}
 @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SoftCache<Object, Integer> softCache0 = new SoftCache<Object, Integer>(896);
      softCache0.get(hashMap0);
      ;
}
 @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SoftCache<Integer, AbstractMap.SimpleEntry<Object, Object>> softCache0 = new SoftCache<Integer, AbstractMap.SimpleEntry<Object, Object>>(0);
      softCache0.createCache(0);
      ;
}
 @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SoftCache<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> softCache0 = new SoftCache<String, AbstractMap.SimpleImmutableEntry<Integer, Object>>(837);
      int int0 = softCache0.size();
      assertEquals(0, int0);
}
 @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SoftCache<String, Object> softCache0 = new SoftCache<String, Object>(0);
      softCache0.clear();
      assertEquals(0, softCache0.size());
}
